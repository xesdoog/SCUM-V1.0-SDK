#ifndef UE4SS_SDK_ConZ_HPP
#define UE4SS_SDK_ConZ_HPP

#include "ConZ_enums.hpp"

struct FAITeamAttitude
{
    TEnumAsByte<ETeamAttitude::Type> ObserverTeamResponseToOtherSubteam;              // 0x0000 (size: 0x1)
    TEnumAsByte<ETeamAttitude::Type> ObserverTeamResponseToSameSubteam;               // 0x0001 (size: 0x1)
    TEnumAsByte<ETeamAttitude::Type> ObserverTeamResponseToNullSubteam;               // 0x0002 (size: 0x1)

}; // Size: 0x3

struct FAITeamAttitudeData
{
    FAITeamAttitude AttitudePerTeam;                                                  // 0x0000 (size: 0x21)

}; // Size: 0x21

struct FAbandonedBunkerAnnouncementSoundAndTime
{
    class UAkAudioEvent* Sound;                                                       // 0x0000 (size: 0x8)
    int32 SecondsBeforeClosing;                                                       // 0x0008 (size: 0x4)

}; // Size: 0x10

struct FAbandonedBunkerConnectionBinding
{
    FGameplayTag ActivationTag;                                                       // 0x0000 (size: 0x8)
    float Load;                                                                       // 0x0008 (size: 0x4)

}; // Size: 0xC

struct FAbandonedBunkerFloorSetup
{
    TSubclassOf<class UDoorUnlockData> DoorUnlockData;                                // 0x0000 (size: 0x8)
    TSubclassOf<class AItem> KeyCardItem;                                             // 0x0008 (size: 0x8)
    FItemSpawnerPresetWithOverrides ZombieKeycardSpawnerPreset;                       // 0x0010 (size: 0xB8)
    FGameplayTag FloorId;                                                             // 0x00C8 (size: 0x8)
    class UStaticMesh* SchematicMesh;                                                 // 0x00D0 (size: 0x8)
    TArray<class AAbandonedBunkerSwitchboard*> SlaveSwitchboards;                     // 0x00D8 (size: 0x10)
    class AAbandonedBunkerSwitchboard* MasterSwitchboard;                             // 0x00E8 (size: 0x8)

}; // Size: 0xF0

struct FAchievementStats
{
}; // Size: 0x1

struct FAchievements
{
}; // Size: 0x1

struct FActivationReservation
{
    double PreviousActivationEnd;                                                     // 0x0000 (size: 0x8)
    double ActivationStart;                                                           // 0x0008 (size: 0x8)
    double ActivationEnd;                                                             // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FActiveHit
{
}; // Size: 0xC

struct FActiveMovingThroughFoliageSounds
{
    class UAkAudioEvent* StartAudioEvent;                                             // 0x0008 (size: 0x8)
    class UAkAudioEvent* StopAudioEvent;                                              // 0x0010 (size: 0x8)

}; // Size: 0x20

struct FActiveQuest
{
}; // Size: 0x70

struct FActiveTask
{
}; // Size: 0x58

struct FActorPaintParams
{
    TArray<FName> _partPaintNames;                                                    // 0x0000 (size: 0x10)
    TArray<class UMaterialInterface*> _cachedOriginalMaterials;                       // 0x0028 (size: 0x10)

}; // Size: 0x38

struct FActorResourceLockNetwork
{
    FResourceNetworkGUID LockOwnerGUID;                                               // 0x0000 (size: 0x4)
    FResourceNetworkGUID ResourceGUID;                                                // 0x0004 (size: 0x4)
    int32 ResourceId;                                                                 // 0x0008 (size: 0x4)

}; // Size: 0xC

struct FAdminCommandArgumentDescription
{
    FText Name;                                                                       // 0x0000 (size: 0x18)
    FText Description;                                                                // 0x0018 (size: 0x18)
    bool ShowCompletionValuesInHelpText;                                              // 0x0030 (size: 0x1)
    class UAdminCommandArgumentDataTypeBase* Data;                                    // 0x0038 (size: 0x8)

}; // Size: 0x40

struct FAerodynamicSurface
{
    FName Name;                                                                       // 0x0000 (size: 0x8)
    FGameplayTag Tag;                                                                 // 0x0008 (size: 0x8)
    FTransform Transform;                                                             // 0x0010 (size: 0x30)
    float LiftSlope;                                                                  // 0x0040 (size: 0x4)
    float SkinFriction;                                                               // 0x0044 (size: 0x4)
    float ZeroLiftAoA;                                                                // 0x0048 (size: 0x4)
    float StallAngleHigh;                                                             // 0x004C (size: 0x4)
    float StallAngleLow;                                                              // 0x0050 (size: 0x4)
    float Chord;                                                                      // 0x0054 (size: 0x4)
    float Span;                                                                       // 0x0058 (size: 0x4)
    float AspectRatio;                                                                // 0x005C (size: 0x4)
    float FlapFraction;                                                               // 0x0060 (size: 0x4)
    bool IsControlable;                                                               // 0x0064 (size: 0x1)
    float FlapAngle;                                                                  // 0x0068 (size: 0x4)
    float FlapAngleSensitivity;                                                       // 0x006C (size: 0x4)
    float MaxFlapAngle;                                                               // 0x0070 (size: 0x4)
    float AreaMultiplier;                                                             // 0x0074 (size: 0x4)

}; // Size: 0x80

struct FAerodynamicSurfaceControlData
{
    TArray<FGameplayTag> Tags;                                                        // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FAmbientOcclusionPostProcessSettings
{
    uint8 bOverride_AmbientOcclusionIntensity;                                        // 0x0000 (size: 0x1)
    uint8 bOverride_AmbientOcclusionStaticFraction;                                   // 0x0000 (size: 0x1)
    uint8 bOverride_AmbientOcclusionRadius;                                           // 0x0000 (size: 0x1)
    uint8 bOverride_AmbientOcclusionFadeDistance;                                     // 0x0000 (size: 0x1)
    uint8 bOverride_AmbientOcclusionFadeRadius;                                       // 0x0000 (size: 0x1)
    uint8 bOverride_AmbientOcclusionRadiusInWS;                                       // 0x0000 (size: 0x1)
    uint8 bOverride_AmbientOcclusionPower;                                            // 0x0000 (size: 0x1)
    uint8 bOverride_AmbientOcclusionBias;                                             // 0x0000 (size: 0x1)
    uint8 bOverride_AmbientOcclusionQuality;                                          // 0x0001 (size: 0x1)
    uint8 bOverride_AmbientOcclusionMipBlend;                                         // 0x0001 (size: 0x1)
    uint8 bOverride_AmbientOcclusionMipScale;                                         // 0x0001 (size: 0x1)
    uint8 bOverride_AmbientOcclusionMipThreshold;                                     // 0x0001 (size: 0x1)
    uint8 bOverride_AmbientOcclusionTemporalBlendWeight;                              // 0x0001 (size: 0x1)
    float AmbientOcclusionIntensity;                                                  // 0x0004 (size: 0x4)
    float AmbientOcclusionRadius;                                                     // 0x0008 (size: 0x4)
    float AmbientOcclusionStaticFraction;                                             // 0x000C (size: 0x4)
    uint8 AmbientOcclusionRadiusInWS;                                                 // 0x0010 (size: 0x1)
    float AmbientOcclusionFadeDistance;                                               // 0x0014 (size: 0x4)
    float AmbientOcclusionFadeRadius;                                                 // 0x0018 (size: 0x4)
    float AmbientOcclusionPower;                                                      // 0x001C (size: 0x4)
    float AmbientOcclusionBias;                                                       // 0x0020 (size: 0x4)
    float AmbientOcclusionQuality;                                                    // 0x0024 (size: 0x4)
    float AmbientOcclusionMipBlend;                                                   // 0x0028 (size: 0x4)
    float AmbientOcclusionMipScale;                                                   // 0x002C (size: 0x4)
    float AmbientOcclusionMipThreshold;                                               // 0x0030 (size: 0x4)
    float AmbientOcclusionTemporalBlendWeight;                                        // 0x0034 (size: 0x4)

}; // Size: 0x38

struct FAmmunitionArrowSpawningParamsHelper
{
}; // Size: 0x18

struct FAmmunitionData
{
    TSubclassOf<class AAmmunitionItem> AmmunitionItemClass;                           // 0x0000 (size: 0x8)
    float health;                                                                     // 0x0008 (size: 0x4)
    float MaxHealth;                                                                  // 0x000C (size: 0x4)
    float DefaultMaxHealth;                                                           // 0x0010 (size: 0x4)
    EAmmunitionCartridgeState State;                                                  // 0x0014 (size: 0x1)

}; // Size: 0x18

struct FAnimalActionMontageData
{
    class UAnimMontage* SleepMontage;                                                 // 0x0000 (size: 0x8)
    class UAnimMontage* EatMontage;                                                   // 0x0008 (size: 0x8)
    class UAnimMontage* IntimidateMontage;                                            // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FAnimalPaceSettings
{
    float RunSpeed;                                                                   // 0x0000 (size: 0x4)
    float TrotSpeed;                                                                  // 0x0004 (size: 0x4)
    float WalkSpeed;                                                                  // 0x0008 (size: 0x4)
    float SneakSpeed;                                                                 // 0x000C (size: 0x4)

}; // Size: 0x10

struct FAnimalSpawnData
{
    float NextClueDistanceMin;                                                        // 0x0000 (size: 0x4)
    float NextClueDistanceMax;                                                        // 0x0004 (size: 0x4)
    int32 NumCluesMin;                                                                // 0x0008 (size: 0x4)
    int32 NumCluesMax;                                                                // 0x000C (size: 0x4)
    int32 PackSizeMin;                                                                // 0x0010 (size: 0x4)
    int32 PackSizeMax;                                                                // 0x0014 (size: 0x4)
    float NextClueMaxHalfAngleDeg;                                                    // 0x0018 (size: 0x4)
    FAnimalSpawnWeigthsPerDayPeriod SpawnWeights;                                     // 0x001C (size: 0x10)

}; // Size: 0x2C

struct FAnimalSpawnWeigthsPerDayPeriod
{
    float SpawnWeight;                                                                // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FAnimalStationaryRotationRateSettings
{
    FRotator RunRotationRate;                                                         // 0x0000 (size: 0xC)
    FRotator TrotRotationRate;                                                        // 0x000C (size: 0xC)
    FRotator WalkRotationRate;                                                        // 0x0018 (size: 0xC)
    FRotator SneakRotationRate;                                                       // 0x0024 (size: 0xC)
    FRotator StandRotationRate;                                                       // 0x0030 (size: 0xC)

}; // Size: 0x3C

struct FAquaticLifeSpawningVolumeDescription
{
    class UFishSpeciesPreset* FishSpeciesPreset;                                      // 0x0020 (size: 0x8)
    class UFishSpawningPreset* FishSpawningPreset;                                    // 0x0028 (size: 0x8)

}; // Size: 0x68

struct FAreaResourceLockNetwork
{
    FResourceNetworkGUID LockOwnerGUID;                                               // 0x0000 (size: 0x4)
    FBox Area;                                                                        // 0x0004 (size: 0x1C)

}; // Size: 0x20

struct FArmedNPCAimCorrection
{
    FRotator LeftHandRotator;                                                         // 0x0000 (size: 0xC)
    bool UseAimOffsetPitchCurve;                                                      // 0x000C (size: 0x1)
    bool UseAimOffsetYawCurve;                                                        // 0x000D (size: 0x1)
    FRuntimeFloatCurve AimOffsetPitch;                                                // 0x0010 (size: 0x88)
    FRuntimeFloatCurve AimOffsetYaw;                                                  // 0x0098 (size: 0x88)

}; // Size: 0x120

struct FArmedNPCDifficultyLevelSettingProperties
{
    FFloatInterval MeleeCooldownDuration;                                             // 0x0000 (size: 0x8)
    FWeaponManualSettingsHandgun HandgunSettings;                                     // 0x0008 (size: 0x2C)
    FWeaponManualSettingsRifleAutomatic RifleAutomaticSettings;                       // 0x0034 (size: 0x24)
    FWeaponManualSettingsRifleManual RifleManualSettings;                             // 0x0058 (size: 0x28)
    FWeaponManualSettingsBow BowSettings;                                             // 0x0080 (size: 0x2C)
    FWeaponManualSettingsCrossBow CrossBowSettings;                                   // 0x00AC (size: 0x20)

}; // Size: 0xCC

struct FArmedNPCMeleeAttackTypes
{
    FGameplayTag PrimaryMeleeAttackTypeWhenNotMoving;                                 // 0x0000 (size: 0x8)
    FGameplayTag PrimaryMeleeAttackTypeWhenWalking;                                   // 0x0008 (size: 0x8)
    FGameplayTag PrimaryMeleeAttackTypeWhenJogging;                                   // 0x0010 (size: 0x8)
    FGameplayTag PrimaryMeleeAttackTypeWhenRunning;                                   // 0x0018 (size: 0x8)
    FGameplayTag PrimaryMeleeAttackTypeWhenFalling;                                   // 0x0020 (size: 0x8)
    FGameplayTag SecondaryMeleeAttackTypeWhenNotMoving;                               // 0x0028 (size: 0x8)
    FGameplayTag SecondaryMeleeAttackTypeWhenWalking;                                 // 0x0030 (size: 0x8)
    FGameplayTag SecondaryMeleeAttackTypeWhenJogging;                                 // 0x0038 (size: 0x8)
    FGameplayTag SecondaryMeleeAttackTypeWhenRunning;                                 // 0x0040 (size: 0x8)
    FGameplayTag SecondaryMeleeAttackTypeWhenFalling;                                 // 0x0048 (size: 0x8)
    FGameplayTag ComboMeleeAttackTypeWhenNotMoving;                                   // 0x0050 (size: 0x8)
    FGameplayTag ComboMeleeAttackTypeWhenWalking;                                     // 0x0058 (size: 0x8)
    FGameplayTag ComboMeleeAttackTypeWhenJogging;                                     // 0x0060 (size: 0x8)
    FGameplayTag ComboMeleeAttackTypeWhenRunning;                                     // 0x0068 (size: 0x8)
    FGameplayTag ComboMeleeAttackTypeWhenFalling;                                     // 0x0070 (size: 0x8)
    FGameplayTag BashMeleeAttackType;                                                 // 0x0078 (size: 0x8)
    FGameplayTag WeaponBayonetMeleeAttackType;                                        // 0x0080 (size: 0x8)

}; // Size: 0x88

struct FArmedNPCRecentProjectileDamage
{
}; // Size: 0x1C

struct FArmedNPCVariation
{
    TSoftObjectPtr<USkeletalMesh> BodyMesh;                                           // 0x0000 (size: 0x28)
    TSoftObjectPtr<USkeletalMesh> BodyMeshWhenSearched;                               // 0x0028 (size: 0x28)
    TArray<TSoftObjectPtr<AItem>> ItemsOnSearch;                                      // 0x0050 (size: 0x10)
    TArray<TSoftObjectPtr<AItem>> PossibleItemsOnSearch;                              // 0x0060 (size: 0x10)
    EConZGender Gender;                                                               // 0x0070 (size: 0x1)
    float BodyWight;                                                                  // 0x0074 (size: 0x4)
    class UChoppingRecipeDataAsset* CorpseChoppingRecipeDataAsset;                    // 0x0078 (size: 0x8)
    class UArmedNPCDamageCustomizationData* DamageCustomizationData;                  // 0x0080 (size: 0x8)

}; // Size: 0x88

struct FAttachComponentData
{
    class UMeshComponent* MeshComponent;                                              // 0x0000 (size: 0x8)
    int32 ParticleIndex;                                                              // 0x0008 (size: 0x4)
    bool SimulateTension;                                                             // 0x000C (size: 0x1)
    FName SocketName;                                                                 // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FAttachmentSocket
{
    TArray<FAttachmentSocketDataItem> Items;                                          // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FAttachmentSocketDataItem
{
    FName BoneName;                                                                   // 0x0000 (size: 0x8)
    TSubclassOf<class UAttachmentSocketMountType> MountType;                          // 0x0008 (size: 0x8)
    class AActor* MountedItem;                                                        // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FAttachmentSocketOffset
{
    FName BoneName;                                                                   // 0x0000 (size: 0x8)
    FVector Location;                                                                 // 0x0008 (size: 0xC)
    FRotator Rotation;                                                                // 0x0014 (size: 0xC)

}; // Size: 0x20

struct FAttackedByMeleeData
{
    TWeakObjectPtr<class AActor> attacker;                                            // 0x0000 (size: 0x8)
    TWeakObjectPtr<class UAnimMontage> Montage;                                       // 0x0008 (size: 0x8)
    float PlayRate;                                                                   // 0x0010 (size: 0x4)
    float Duration;                                                                   // 0x0014 (size: 0x4)

}; // Size: 0x18

struct FAviationSkillParametersPerSkillLevel
{
    bool ShouldHaveMouseInput;                                                        // 0x0000 (size: 0x1)
    float EngineReadyDelay;                                                           // 0x0004 (size: 0x4)
    float EngineFailedToStartDelay;                                                   // 0x0008 (size: 0x4)
    float EngineFailedToStartNoFuelDelay;                                             // 0x000C (size: 0x4)
    float EngineFailedToStartNoBatteryDelay;                                          // 0x0010 (size: 0x4)
    float EngineStalledDelay;                                                         // 0x0014 (size: 0x4)
    float ThrottleLerpMultiplier;                                                     // 0x0018 (size: 0x4)
    float BrakeLerpMultiplier;                                                        // 0x001C (size: 0x4)
    float RollLerpMultiplier;                                                         // 0x0020 (size: 0x4)
    float YawLerpMultiplier;                                                          // 0x0024 (size: 0x4)
    float PitchLerpMultiplier;                                                        // 0x0028 (size: 0x4)
    float ControlResetLerpMultiplier;                                                 // 0x002C (size: 0x4)
    float WindInfluenceMultiplier;                                                    // 0x0030 (size: 0x4)
    FEngineHandlingParameters EngineHandlingParameters;                               // 0x0034 (size: 0x8)
    FDrivingSkillEngineStallingParameters EngineStallingByAccelerationParameters;     // 0x0040 (size: 0x40)
    FDrivingSkillEngineStallingParameters EngineStallingByUpShiftParameters;          // 0x0080 (size: 0x40)
    FDrivingSkillEngineStallingParameters EngineStallingWhenStartingViaMotion;        // 0x00C0 (size: 0x40)

}; // Size: 0x100

struct FAwarenessSkillExperienceAwards
{
    float PointsForDetectedItem;                                                      // 0x0000 (size: 0x4)
    float PointsForDetectedWatchingPrisoner;                                          // 0x0004 (size: 0x4)
    float PointsForDetectedCamouflagedPrisoner;                                       // 0x0008 (size: 0x4)

}; // Size: 0xC

struct FAwarenessSkillParametersPerSkillLevel
{
    float ItemDetectionTime;                                                          // 0x0000 (size: 0x4)
    float ItemDetectionRadius;                                                        // 0x0004 (size: 0x4)
    float ItemDetectionHighlightByDayRadius;                                          // 0x0008 (size: 0x4)
    float ItemDetectionHighlightByNightRadius;                                        // 0x000C (size: 0x4)
    float WatchingDetectionTime;                                                      // 0x0010 (size: 0x4)
    float WatchingDetectionRadius;                                                    // 0x0014 (size: 0x4)
    float WatchingDetectionChance;                                                    // 0x0018 (size: 0x4)
    float CharacterDetectionAngle;                                                    // 0x001C (size: 0x4)
    float CharacterDetectionTime;                                                     // 0x0020 (size: 0x4)
    float CharacterDetectionPeriodicRangeIncrement;                                   // 0x0024 (size: 0x4)
    float HiddenCharacterDetectionRange;                                              // 0x0028 (size: 0x4)
    float HiddenCharacterHotSpotDetectionRange;                                       // 0x002C (size: 0x4)
    float HiddenCharacterSoundDetectionRange;                                         // 0x0030 (size: 0x4)
    float TrackDetectionRange;                                                        // 0x0034 (size: 0x4)
    float TrapDetectionRange;                                                         // 0x0038 (size: 0x4)
    float FocusModeNotMovingFocusRangeMultiplier;                                     // 0x003C (size: 0x4)
    float FocusModeSlowMovingFocusRangeMultiplier;                                    // 0x0040 (size: 0x4)
    float FocusModeMediumMovingFocusRangeMultiplier;                                  // 0x0044 (size: 0x4)
    float FocusModeFastMovingFocusRangeMultiplier;                                    // 0x0048 (size: 0x4)
    float FlashbangFlashFadeOutDurationMultiplier;                                    // 0x004C (size: 0x4)
    float ContainerItemSpawnProbabilityModifier;                                      // 0x0050 (size: 0x4)

}; // Size: 0x54

struct FBandage
{
    float _ratio;                                                                     // 0x0000 (size: 0x4)
    float _asepsis;                                                                   // 0x0004 (size: 0x4)
    float _stabilizationDurationReduction;                                            // 0x0008 (size: 0x4)
    float _recoveryDurationReduction;                                                 // 0x000C (size: 0x4)

}; // Size: 0x10

struct FBandages
{
    float _amount;                                                                    // 0x0000 (size: 0x4)
    TArray<FBandage> _bandages;                                                       // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FBankATMBoughtCardStateVisual
{
    FSlateColor FontColor;                                                            // 0x0000 (size: 0x28)
    FLinearColor BrushColor;                                                          // 0x0028 (size: 0x10)
    float OnHoveredUpwardsOffset;                                                     // 0x0038 (size: 0x4)
    bool OptionsCircleSelectedState;                                                  // 0x003C (size: 0x1)

}; // Size: 0x40

struct FBankATMBuyableCardStateVisual
{
    bool TransparentBackground;                                                       // 0x0000 (size: 0x1)
    float RenderOpacity;                                                              // 0x0004 (size: 0x4)
    bool PlusCircleVisible;                                                           // 0x0008 (size: 0x1)

}; // Size: 0xC

struct FBankATMCarouselCardStateVisual
{
    FMargin Padding;                                                                  // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FBankATMMyCardsButtonStateVisual
{
    FLinearColor FontColor;                                                           // 0x0000 (size: 0x10)
    FSlateBrush BackgroundBrush;                                                      // 0x0010 (size: 0x88)
    FSlateBrush CardIconBrush;                                                        // 0x0098 (size: 0x88)

}; // Size: 0x120

struct FBankATMPointingButtonStateVisual
{
    FLinearColor FontColor;                                                           // 0x0000 (size: 0x10)
    FSlateBrush BackgroundBrush;                                                      // 0x0010 (size: 0x88)

}; // Size: 0x98

struct FBankATMUISounds
{
    class UAkAudioEvent* ButtonClick;                                                 // 0x0000 (size: 0x8)
    class UAkAudioEvent* ButtonHover;                                                 // 0x0008 (size: 0x8)
    class UAkAudioEvent* TransactionFailed;                                           // 0x0010 (size: 0x8)
    class UAkAudioEvent* TransactionSuccessful;                                       // 0x0018 (size: 0x8)

}; // Size: 0x20

struct FBankATMVirtualEditboxStateVisual
{
    FLinearColor OutlineColor;                                                        // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FBankAccountRegistryRequestData
{
}; // Size: 0x1C

struct FBankCardOperationRequestData
{
}; // Size: 0x10

struct FBankCardOwnershipPayloadData
{
}; // Size: 0x3

struct FBankCardTypeData
{
    TSoftClassPtr<AItem> ItemClass;                                                   // 0x0000 (size: 0x28)
    int32 PurchasePrice;                                                              // 0x0028 (size: 0x4)
    ECurrencyType PurchasePriceCurrency;                                              // 0x002C (size: 0x1)
    int32 MaxWrongPinAttempts;                                                        // 0x0030 (size: 0x4)
    int32 FreeRenewalNum;                                                             // 0x0034 (size: 0x4)
    int32 DailyWithdrawLimit;                                                         // 0x0038 (size: 0x4)
    int32 DailyDepositLimit;                                                          // 0x003C (size: 0x4)
    int32 PinComplexity;                                                              // 0x0040 (size: 0x4)

}; // Size: 0x48

struct FBankTransactionRequestData
{
}; // Size: 0x38

struct FBaseBuildingSizeVariation
{
    TSubclassOf<class UBaseBuildingComponent> Component;                              // 0x0000 (size: 0x8)

}; // Size: 0x18

struct FBaseBuildingUISounds
{
    class UAkAudioEvent* PlaceButtonClick;                                            // 0x0000 (size: 0x8)
    class UAkAudioEvent* DetailsButtonClick;                                          // 0x0008 (size: 0x8)
    class UAkAudioEvent* BackButtonClick;                                             // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FBaseDamageInteractionEvent : public FBaseInteractionEvent
{
}; // Size: 0xA8

struct FBaseElementDamageZone
{
    FVector BoundsMin;                                                                // 0x0000 (size: 0xC)
    FVector BoundsMax;                                                                // 0x000C (size: 0xC)
    float MinDamagePerSecond;                                                         // 0x0018 (size: 0x4)
    float MaxDamagePerSecond;                                                         // 0x001C (size: 0x4)
    float MinSpeedForDamage;                                                          // 0x0020 (size: 0x4)
    float MaxSpeedForDamage;                                                          // 0x0024 (size: 0x4)

}; // Size: 0x28

struct FBaseElementDestructionZone
{
    FBox Bounds;                                                                      // 0x0000 (size: 0x1C)
    bool IsCompositeZone;                                                             // 0x001C (size: 0x1)
    TArray<FRotatedZone> CompositeZoneComponents;                                     // 0x0020 (size: 0x10)
    float DamageToItems;                                                              // 0x0030 (size: 0x4)
    float FallDamagePerMeter;                                                         // 0x0034 (size: 0x4)
    float MaxFallDamage;                                                              // 0x0038 (size: 0x4)
    bool MustElementBeAboveZone;                                                      // 0x003C (size: 0x1)
    bool IgnoreElementsThatCantBePlacedOnOtherElements;                               // 0x003D (size: 0x1)

}; // Size: 0x40

struct FBaseElementSpawnParams
{
    float Quality;                                                                    // 0x0000 (size: 0x4)
    uint8 OverrideColor0;                                                             // 0x0004 (size: 0x1)
    uint8 OverrideColor1;                                                             // 0x0005 (size: 0x1)
    FDbIntegerId ShelterId;                                                           // 0x0008 (size: 0x8)
    FEntityId EntityId;                                                               // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FBaseInteractionEvent
{
}; // Size: 0x8

struct FBaseInteractionParams
{
    FDbIntegerId ElementID;                                                           // 0x0000 (size: 0x8)

}; // Size: 0x8

struct FBaseInteractionVisitor
{
}; // Size: 0x20

struct FBasePoseAimOffsetPair
{
    class UAnimSequenceBase* UpperBodyPose;                                           // 0x0000 (size: 0x8)
    class UAnimSequenceBase* LowerBodyPose;                                           // 0x0008 (size: 0x8)
    class UBlendSpace* AimOffset;                                                     // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FBasicNotificationDescriptionData
{
    FText Message;                                                                    // 0x0000 (size: 0x18)
    int32 FontSize;                                                                   // 0x0018 (size: 0x4)
    class UTexture2D* Icon;                                                           // 0x0020 (size: 0x8)
    int32 IconSize;                                                                   // 0x0028 (size: 0x4)
    float Duration;                                                                   // 0x002C (size: 0x4)
    bool Ping;                                                                        // 0x0030 (size: 0x1)
    float Delay;                                                                      // 0x0034 (size: 0x4)

}; // Size: 0x38

struct FBasicPrisonerBodySymptomNotificationParameters
{
    FFloatRange SeverityRange;                                                        // 0x0000 (size: 0x10)
    TSubclassOf<class UNotificationDescription> Notification;                         // 0x0010 (size: 0x8)
    int32 MaxNumTriggers;                                                             // 0x0018 (size: 0x4)
    FFloatInterval TriggerInterval;                                                   // 0x001C (size: 0x8)

}; // Size: 0x28

struct FBoatParametersPerMovementPace
{
    bool IsValid;                                                                     // 0x0000 (size: 0x1)
    float BaseMaxForwardSpeed;                                                        // 0x0004 (size: 0x4)
    bool CanReverse;                                                                  // 0x0008 (size: 0x1)
    float BaseMaxReverseSpeed;                                                        // 0x000C (size: 0x4)
    float MinPrisonerStrength;                                                        // 0x0010 (size: 0x4)
    float ThrottleMultiplier;                                                         // 0x0014 (size: 0x4)

}; // Size: 0x18

struct FBoatParametersPerMovementPace_Deprecated
{
    bool IsValid;                                                                     // 0x0000 (size: 0x1)
    float BaseMaxForwardSpeed;                                                        // 0x0004 (size: 0x4)
    bool CanReverse;                                                                  // 0x0008 (size: 0x1)
    float BaseMaxReverseSpeed;                                                        // 0x000C (size: 0x4)
    float MinPrisonerStrength;                                                        // 0x0010 (size: 0x4)
    float ThrottleMultiplier;                                                         // 0x0014 (size: 0x4)

}; // Size: 0x18

struct FBodyConditionSpriteData
{
}; // Size: 0x160

struct FBodyWeaponAnimation
{
    class UAnimMontage* Body;                                                         // 0x0000 (size: 0x8)
    class UAnimMontage* Weapon;                                                       // 0x0008 (size: 0x8)

}; // Size: 0x10

struct FBrennerAttackDescription
{
    EBrennerAttackType Type;                                                          // 0x0000 (size: 0x1)
    class UAnimMontage* Montage;                                                      // 0x0008 (size: 0x8)
    float cooldown;                                                                   // 0x0010 (size: 0x4)

}; // Size: 0x18

struct FBrennerCommonData_BleedingParticles
{
    TSoftObjectPtr<UParticleSystem> Particles;                                        // 0x0000 (size: 0x28)
    FName AttachSocketName;                                                           // 0x0028 (size: 0x8)

}; // Size: 0x30

struct FBrennerUpperBodyPitchRangeData
{
    FFloatRange ActualPitchRange;                                                     // 0x0000 (size: 0x10)
    float AppliedPitch;                                                               // 0x0010 (size: 0x4)

}; // Size: 0x14

struct FBruisePatch
{
    EBruiseLayer Layer;                                                               // 0x0000 (size: 0x1)
    TArray<EBruiseZone> AllowedZones;                                                 // 0x0008 (size: 0x10)
    int32 Order;                                                                      // 0x0018 (size: 0x4)
    class UTexture2D* Texture;                                                        // 0x0020 (size: 0x8)
    FVector2D Offset;                                                                 // 0x0028 (size: 0x8)
    bool Mute;                                                                        // 0x0030 (size: 0x1)

}; // Size: 0x38

struct FBuildingData
{
    FBuildingEntityData EntityData;                                                   // 0x0008 (size: 0x1)

}; // Size: 0x10

struct FBuildingEntityData
{
    bool IsCleared;                                                                   // 0x0000 (size: 0x1)

}; // Size: 0x1

struct FBuildingNavLinkData
{
    FVector LeftNodeRelativePosition;                                                 // 0x0000 (size: 0xC)
    FVector RightNodeRelativePosition;                                                // 0x000C (size: 0xC)
    TEnumAsByte<ENavLinkDirection::Type> Direction;                                   // 0x0018 (size: 0x1)
    FNavAgentSelector SupportedAgents;                                                // 0x001C (size: 0x4)

}; // Size: 0x20

struct FBuildingsArray
{
    TArray<class ABuilding*> _buildings;                                              // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FBuildingsReplicationHelper
{
    TMap<class FString, class FBuildingData> BuildingsData;                           // 0x0000 (size: 0x50)

}; // Size: 0x70

struct FBuoyancy
{
    TArray<FBuoyancyConstraint> _testPoints;                                          // 0x0000 (size: 0x10)
    FVector _velocityDamper;                                                          // 0x0010 (size: 0xC)
    bool _dampingDependsOnMass;                                                       // 0x001C (size: 0x1)
    float _fluidLinearDamping;                                                        // 0x0020 (size: 0x4)
    float _fluidAngularDamping;                                                       // 0x0024 (size: 0x4)
    bool _clampMaxVelocity;                                                           // 0x0028 (size: 0x1)
    float _maxUnderwaterVelocity;                                                     // 0x002C (size: 0x4)
    bool _shouldApplyWaterVelocity;                                                   // 0x0030 (size: 0x1)
    float _waterVelocityMultiplier;                                                   // 0x0034 (size: 0x4)
    bool _shouldApplyWaterSurfaceForces;                                              // 0x0038 (size: 0x1)
    float _verticalWaterDrag;                                                         // 0x003C (size: 0x4)
    float _surfaceTensionMultiplier;                                                  // 0x0040 (size: 0x4)

}; // Size: 0x70

struct FBuoyancyConstraint
{
    FVector Location;                                                                 // 0x0000 (size: 0xC)
    FName Bone;                                                                       // 0x000C (size: 0x8)
    float Radius;                                                                     // 0x0014 (size: 0x4)
    float Density;                                                                    // 0x0018 (size: 0x4)

}; // Size: 0x1C

struct FBurialInformation
{
    FDbIntegerId BurierUserId;                                                        // 0x0000 (size: 0x8)
    bool ShouldBury;                                                                  // 0x0008 (size: 0x1)
    FVector BurialLocation;                                                           // 0x000C (size: 0xC)

}; // Size: 0x18

struct FBurnPointDamageEvent : public FScumPointDamageEvent
{
}; // Size: 0xD0

struct FBuryMaterialData
{
    class UMaterialInterface* Material;                                               // 0x0000 (size: 0x8)
    class UParticleSystem* BreachActionParticles;                                     // 0x0008 (size: 0x8)
    class UAkAudioEvent* BreachActionSound;                                           // 0x0010 (size: 0x8)
    class UParticleSystem* DumpActionParticles;                                       // 0x0018 (size: 0x8)
    class UAkAudioEvent* DumpActionSound;                                             // 0x0020 (size: 0x8)

}; // Size: 0x28

struct FButtonIcons
{
    FSlateBrush EnabledIcon;                                                          // 0x0000 (size: 0x88)
    FSlateBrush DisabledIcon;                                                         // 0x0088 (size: 0x88)

}; // Size: 0x110

struct FCCNonImplementedSkill
{
    ESkillAttribute Attribute;                                                        // 0x0000 (size: 0x1)
    FText Caption;                                                                    // 0x0008 (size: 0x18)

}; // Size: 0x20

struct FCTFParameters
{
    float FlagResetDuration;                                                          // 0x0000 (size: 0x4)
    bool AllowReturns;                                                                // 0x0004 (size: 0x1)
    int32 CaptureLimit;                                                               // 0x0008 (size: 0x4)
    FGameEventRewardPoints PointsPerPickup;                                           // 0x000C (size: 0xC)
    FGameEventRewardPoints PointsPerCapture;                                          // 0x0018 (size: 0xC)
    FGameEventRewardPoints PointsPerReturn;                                           // 0x0024 (size: 0xC)

}; // Size: 0x30

struct FCamouflageSkillExperienceAwards
{
    float BonusExperience;                                                            // 0x0000 (size: 0x4)

}; // Size: 0x4

struct FCamouflageSkillParametersPerSkillLevel
{
    float Modifier;                                                                   // 0x0000 (size: 0x4)
    float Bonus;                                                                      // 0x0004 (size: 0x4)
    float FoliageAIPerceptionOuterRadius;                                             // 0x0008 (size: 0x4)
    float FoliageAIPerceptionInnerRadius;                                             // 0x000C (size: 0x4)
    FFloatInterval VisibilityFadeByDistanceWhileStandingInMeters;                     // 0x0010 (size: 0x8)
    FFloatInterval VisibilityFadeByDistanceWhileCrouchingInMeters;                    // 0x0018 (size: 0x8)
    FFloatInterval VisibilityFadeByDistanceWhileInProneInMeters;                      // 0x0020 (size: 0x8)
    FFloatInterval PhysicalSurfaceVisibilityInfluenceDistanceInMeters;                // 0x0028 (size: 0x8)

}; // Size: 0x30

struct FCargoDropEncounterData
{
    float Weight;                                                                     // 0x0000 (size: 0x4)
    bool HasSpawnDelay;                                                               // 0x0004 (size: 0x1)

}; // Size: 0x8

struct FCargoDropSpawnerPreset
{
    TSubclassOf<class UItemSpawnerPreset> Preset;                                     // 0x0000 (size: 0x8)
    TSubclassOf<class UItemSpawnerPreset2> SpawnerPreset;                             // 0x0008 (size: 0x8)
    float ChanceMultiplier;                                                           // 0x0010 (size: 0x4)

}; // Size: 0x18

struct FCarouselStyle
{
    FButtonStyle LeftArrowIcon;                                                       // 0x0000 (size: 0x278)
    FButtonStyle RightArrowIcon;                                                      // 0x0278 (size: 0x278)
    FCarouselTextStyle ValueText;                                                     // 0x04F0 (size: 0x80)

}; // Size: 0x570

struct FCarouselTextStyle
{
    FMargin Padding;                                                                  // 0x0000 (size: 0x10)
    TEnumAsByte<EHorizontalAlignment> HorizontalAlignment;                            // 0x0010 (size: 0x1)
    TEnumAsByte<EVerticalAlignment> VerticalAlignment;                                // 0x0011 (size: 0x1)
    FSlateFontInfo Font;                                                              // 0x0018 (size: 0x58)
    FLinearColor ColorAndOpacity;                                                     // 0x0070 (size: 0x10)

}; // Size: 0x80

struct FCarouselWithLabelStyle
{
    FSlateBrush FocusBackgroundImage;                                                 // 0x0000 (size: 0x88)
    FCarouselTextStyle LabelText;                                                     // 0x0088 (size: 0x80)

}; // Size: 0x108

struct FCaughtFishData
{
    EFishSpecies fishSpecies;                                                         // 0x0000 (size: 0x1)
    int32 Amount;                                                                     // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FCharacterActionAck
{
    int32 ActionId;                                                                   // 0x0000 (size: 0x4)
    int32 SubActionIndex;                                                             // 0x0004 (size: 0x4)
    int32 ActionGenerationIndex;                                                      // 0x0008 (size: 0x4)
    ECharacterActionAckType Type;                                                     // 0x000C (size: 0x1)
    ECharacterActionEndState EndState;                                                // 0x000D (size: 0x1)

}; // Size: 0x10

struct FCharacterActionAnimationDescription
{
}; // Size: 0x20

struct FCharacterActionReplicationHelper
{
}; // Size: 0x18

struct FCharacterAndItemAnimation
{
    class UAnimMontage* CharacterMontage;                                             // 0x0000 (size: 0x8)
    class UAnimMontage* ItemMontage;                                                  // 0x0008 (size: 0x8)

}; // Size: 0x10

struct FCharacterArmsImpactSoundData
{
    TArray<ECharacterImpactSourceSoundCategory> ImpactSourceCategories;               // 0x0000 (size: 0x10)
    TArray<ECharacterArmsImpactSoundCategory> ImpactTargetCategories;                 // 0x0010 (size: 0x10)
    FCharacterImpactSounds Sounds;                                                    // 0x0020 (size: 0x8)

}; // Size: 0x28

struct FCharacterArmsImpactSoundsData
{
    TArray<FCharacterArmsImpactSoundData> SoundsData;                                 // 0x0000 (size: 0x10)
    FCharacterImpactSounds FallbackSounds;                                            // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FCharacterCreationMenuContext
{
    bool IsPreferringMultiplayer;                                                     // 0x0000 (size: 0x1)
    FString ServerIp;                                                                 // 0x0008 (size: 0x10)
    int32 ServerResponsePort;                                                         // 0x0018 (size: 0x4)
    int32 ServerGameplayPort;                                                         // 0x001C (size: 0x4)
    FString ServerAuthToken;                                                          // 0x0020 (size: 0x10)

}; // Size: 0x30

struct FCharacterHeadImpactSoundData
{
    TArray<ECharacterImpactSourceSoundCategory> ImpactSourceCategories;               // 0x0000 (size: 0x10)
    TArray<ECharacterHeadImpactSoundCategory> ImpactTargetCategories;                 // 0x0010 (size: 0x10)
    FCharacterImpactSounds Sounds;                                                    // 0x0020 (size: 0x8)

}; // Size: 0x28

struct FCharacterHeadImpactSoundsData
{
    TArray<FCharacterHeadImpactSoundData> SoundsData;                                 // 0x0000 (size: 0x10)
    FCharacterImpactSounds FallbackSounds;                                            // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FCharacterImpactSounds
{
    class UAkAudioEvent* AudioEvent;                                                  // 0x0000 (size: 0x8)

}; // Size: 0x8

struct FCharacterLegsImpactSoundData
{
    TArray<ECharacterImpactSourceSoundCategory> ImpactSourceCategories;               // 0x0000 (size: 0x10)
    TArray<ECharacterLegsImpactSoundCategory> ImpactTargetCategories;                 // 0x0010 (size: 0x10)
    FCharacterImpactSounds Sounds;                                                    // 0x0020 (size: 0x8)

}; // Size: 0x28

struct FCharacterLegsImpactSoundsData
{
    TArray<FCharacterLegsImpactSoundData> SoundsData;                                 // 0x0000 (size: 0x10)
    FCharacterImpactSounds FallbackSounds;                                            // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FCharacterMeshClassArray
{
    TArray<class TSubclassOf<UCharacterMesh>> Classes;                                // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FCharacterMeshClassSet
{
    TSet<TSubclassOf<UCharacterMesh>> Classes;                                        // 0x0000 (size: 0x50)

}; // Size: 0x50

struct FCharacterMeshManagerPerSlotData
{
    TArray<class TSubclassOf<UCharacterMesh>> CharacterMeshLayers;                    // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FCharacterMeshMaterialOverride
{
    FGameplayTagQuery Condition;                                                      // 0x0000 (size: 0x48)
    FName MaterialSlot;                                                               // 0x0048 (size: 0x8)
    TSoftObjectPtr<UMaterialInstance> OverrideMaterial;                               // 0x0050 (size: 0x28)

}; // Size: 0x78

struct FCharacterMeshMorphTarget
{
    FGameplayTagQuery Condition;                                                      // 0x0000 (size: 0x48)
    float Value;                                                                      // 0x0048 (size: 0x4)

}; // Size: 0x50

struct FCharacterMeshMorphTargetArray
{
    TArray<FCharacterMeshMorphTarget> MorphTargetArray;                               // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FCharacterMeshSlice
{
    FGameplayTagQuery Condition;                                                      // 0x0000 (size: 0x48)
    FGameplayTagContainer Slots;                                                      // 0x0048 (size: 0x20)
    TSoftObjectPtr<USkeletalMesh> SkeletalMesh;                                       // 0x0068 (size: 0x28)
    FGameplayTag SkeletalMeshSocket;                                                  // 0x0090 (size: 0x8)
    TArray<FCharacterMeshSocketOverride> SkeletalMeshSocketOverrides;                 // 0x0098 (size: 0x10)
    TMap<class FName, class FCharacterMeshMorphTargetArray> SkeletalMeshMorphTargets; // 0x00A8 (size: 0x50)
    TSoftObjectPtr<UStaticMesh> StaticMesh;                                           // 0x00F8 (size: 0x28)
    FGameplayTag StaticMeshSocket;                                                    // 0x0120 (size: 0x8)
    TArray<FCharacterMeshSocketOverride> StaticMeshSocketOverrides;                   // 0x0128 (size: 0x10)
    TArray<FCharacterMeshMaterialOverride> OverrideMaterials;                         // 0x0138 (size: 0x10)
    TSoftClassPtr<UAnimInstance> SpecificAnimationBlueprintClass;                     // 0x0148 (size: 0x28)
    FTransform SpecificTransform;                                                     // 0x0170 (size: 0x30)
    bool HidesUnderlyingLayer;                                                        // 0x01A0 (size: 0x1)

}; // Size: 0x1B0

struct FCharacterMeshSocketOverride
{
    FGameplayTagQuery Condition;                                                      // 0x0000 (size: 0x48)
    FGameplayTag MeshSocket;                                                          // 0x0048 (size: 0x8)

}; // Size: 0x50

struct FCharacterSpawnerMarker
{
    FTransform Transform;                                                             // 0x0000 (size: 0x30)

}; // Size: 0x30

struct FCharacterStats
{
    float FamePoints;                                                                 // 0x0008 (size: 0x4)
    int32 FameLevel;                                                                  // 0x000C (size: 0x4)
    float EventScore;                                                                 // 0x0010 (size: 0x4)
    int32 EventKills;                                                                 // 0x0014 (size: 0x4)
    int32 EventTeamKills;                                                             // 0x0018 (size: 0x4)
    int32 EventDeaths;                                                                // 0x001C (size: 0x4)
    int32 EventSuicides;                                                              // 0x0020 (size: 0x4)
    int32 EventAssists;                                                               // 0x0024 (size: 0x4)
    int32 EventHeadshots;                                                             // 0x0028 (size: 0x4)
    bool IsBanned;                                                                    // 0x002C (size: 0x1)

}; // Size: 0x30

struct FCharacterStatsItem
{
    int32 Rank;                                                                       // 0x0000 (size: 0x4)
    FString PlayerName;                                                               // 0x0008 (size: 0x10)
    FCharacterStats CharacterStats;                                                   // 0x0018 (size: 0x30)

}; // Size: 0x48

struct FCharacterTemplate
{
    float Strength;                                                                   // 0x0000 (size: 0x4)
    float Constitution;                                                               // 0x0004 (size: 0x4)
    float Dexterity;                                                                  // 0x0008 (size: 0x4)
    float Intelligence;                                                               // 0x000C (size: 0x4)
    int32 Age;                                                                        // 0x0010 (size: 0x4)
    EConZGender Gender;                                                               // 0x0014 (size: 0x1)
    FString Name;                                                                     // 0x0018 (size: 0x10)
    int32 AppearanceIndex;                                                            // 0x0028 (size: 0x4)
    int32 TattooIndex;                                                                // 0x002C (size: 0x4)
    int32 BodyHairIndex;                                                              // 0x0030 (size: 0x4)
    int32 HairStyleIndex;                                                             // 0x0034 (size: 0x4)
    int32 MoustacheStyleIndex;                                                        // 0x0038 (size: 0x4)
    int32 BeardStyleIndex;                                                            // 0x003C (size: 0x4)
    float BreastSize;                                                                 // 0x0040 (size: 0x4)
    float PenisSize;                                                                  // 0x0044 (size: 0x4)
    bool GrowOverTime;                                                                // 0x0048 (size: 0x1)
    int32 TeamIndex;                                                                  // 0x004C (size: 0x4)
    FString BirthDate;                                                                // 0x0050 (size: 0x10)
    FString ArrestDate;                                                               // 0x0060 (size: 0x10)
    TArray<FSkillTemplate> Skills;                                                    // 0x0070 (size: 0x10)
    TSubclassOf<class AItem> Item0;                                                   // 0x0080 (size: 0x8)
    TSubclassOf<class AItem> Item1;                                                   // 0x0088 (size: 0x8)
    TSubclassOf<class AItem> Item2;                                                   // 0x0090 (size: 0x8)
    int32 FaceTypeIndex;                                                              // 0x0098 (size: 0x4)
    int32 SkinToneIndex;                                                              // 0x009C (size: 0x4)
    int32 HairColorId;                                                                // 0x00A0 (size: 0x4)
    int32 FacialHairColorId;                                                          // 0x00A4 (size: 0x4)
    int32 EyeColorIndex;                                                              // 0x00A8 (size: 0x4)
    int32 IrisTypeIndex;                                                              // 0x00AC (size: 0x4)
    FLinearColor EyeshadowColor;                                                      // 0x00B0 (size: 0x10)
    FLinearColor EyelinerColor;                                                       // 0x00C0 (size: 0x10)
    FLinearColor LipstickColor;                                                       // 0x00D0 (size: 0x10)
    uint8 EyeMakeupMetalness;                                                         // 0x00E0 (size: 0x1)
    uint8 EyeMakeupIntensity;                                                         // 0x00E1 (size: 0x1)
    uint8 LipstickRoughness;                                                          // 0x00E2 (size: 0x1)
    uint8 LipstickIntensity;                                                          // 0x00E3 (size: 0x1)

}; // Size: 0xE8

struct FCharacterTorsoImpactSoundData
{
    TArray<ECharacterImpactSourceSoundCategory> ImpactSourceCategories;               // 0x0000 (size: 0x10)
    TArray<ECharacterTorsoImpactSoundCategory> ImpactTargetCategories;                // 0x0010 (size: 0x10)
    FCharacterImpactSounds Sounds;                                                    // 0x0020 (size: 0x8)

}; // Size: 0x28

struct FCharacterTorsoImpactSoundsData
{
    TArray<FCharacterTorsoImpactSoundData> SoundsData;                                // 0x0000 (size: 0x10)
    FCharacterImpactSounds FallbackSounds;                                            // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FChargeAttackData
{
    class UAnimMontage* Montage;                                                      // 0x0000 (size: 0x8)
    float RegainControlDurationModifier;                                              // 0x0008 (size: 0x4)
    float Range;                                                                      // 0x000C (size: 0x4)
    float Speed;                                                                      // 0x0010 (size: 0x4)
    float Height;                                                                     // 0x0014 (size: 0x4)
    float lengthOverride;                                                             // 0x0018 (size: 0x4)

}; // Size: 0x20

struct FCheckMeleeAttackCapsuleCollisionData
{
}; // Size: 0xD0

struct FChoppingIngredient
{
    TSoftClassPtr<AItem> Item;                                                        // 0x0000 (size: 0x28)
    int32 MinQuantity;                                                                // 0x0028 (size: 0x4)
    int32 MaxQuantity;                                                                // 0x002C (size: 0x4)
    bool IsQuantityAffectedByTool;                                                    // 0x0030 (size: 0x1)
    float InitialDamage;                                                              // 0x0034 (size: 0x4)
    float RandomizeDamage;                                                            // 0x0038 (size: 0x4)
    bool OverrideAutoDestructTime;                                                    // 0x003C (size: 0x1)
    float AutoDestructTime;                                                           // 0x0040 (size: 0x4)
    bool IsHealthAffectedByChoppedItem;                                               // 0x0044 (size: 0x1)

}; // Size: 0x50

struct FChoppingParametersPerSkillLevel
{
    FExperienceDependentFloat ChoppingTime;                                           // 0x0000 (size: 0x8)
    int32 IngredientsQuantityBonus;                                                   // 0x0008 (size: 0x4)

}; // Size: 0xC

struct FChoppingRecipe
{
    FText InteractionCaption;                                                         // 0x0000 (size: 0x18)
    class UAkAudioEvent* ChopAudioEvent;                                              // 0x0018 (size: 0x8)
    ENoiseLevel noiseLevel;                                                           // 0x0020 (size: 0x1)
    EPrisonerMontage ChoppingMontage;                                                 // 0x0021 (size: 0x1)
    EPrisonerMontage ChoppingMontageEnd;                                              // 0x0022 (size: 0x1)
    bool EnforceDroppingItemOnGround;                                                 // 0x0023 (size: 0x1)
    bool ShouldResultUsesDependOnSourceHP;                                            // 0x0024 (size: 0x1)
    TArray<FChoppingIngredient> Ingredients;                                          // 0x0028 (size: 0x10)
    FPossibleChoppingTools ToolRequiredToBeInRightHand;                               // 0x0038 (size: 0x10)
    TArray<FPossibleChoppingTools> AdditionalToolsRequired;                           // 0x0048 (size: 0x10)
    TSubclassOf<class USkill> Skill;                                                  // 0x0058 (size: 0x8)
    float ExperiencePointsAwarded;                                                    // 0x0060 (size: 0x4)
    FChoppingParametersPerSkillLevel NoSkillLevelData;                                // 0x0064 (size: 0xC)
    FChoppingParametersPerSkillLevel BasicLevelData;                                  // 0x0070 (size: 0xC)
    FChoppingParametersPerSkillLevel MediumLevelData;                                 // 0x007C (size: 0xC)
    FChoppingParametersPerSkillLevel AdvancedLevelData;                               // 0x0088 (size: 0xC)

}; // Size: 0x98

struct FChoppingTool2
{
    TArray<class UBaseItemTag*> ItemTags;                                             // 0x0000 (size: 0x10)
    TSubclassOf<class UBaseItemTag> ItemTagClass;                                     // 0x0010 (size: 0x8)
    TSoftClassPtr<AItem> ItemClass;                                                   // 0x0018 (size: 0x28)
    bool OverrideChoppingTime;                                                        // 0x0040 (size: 0x1)
    float ChoppingTimeMultiplier;                                                     // 0x0044 (size: 0x4)
    bool OverrideIngredientsQuantity;                                                 // 0x0048 (size: 0x1)
    int32 IngredientsQuantityBonus;                                                   // 0x004C (size: 0x4)

}; // Size: 0x50

struct FCircularArea
{
    FVector Location;                                                                 // 0x0000 (size: 0xC)
    float Radius;                                                                     // 0x000C (size: 0x4)

}; // Size: 0x10

struct FCircularAreaGroup
{
    TArray<FCircularArea> CircularAreaArray;                                          // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FCircularLayerData
{
    float CenterCutoffPercentage;                                                     // 0x0000 (size: 0x4)
    float Size;                                                                       // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FCircularSegmentContainer
{
    TArray<class UCircularMenuSegmentWidget*> SegmentWidgets;                         // 0x0000 (size: 0x10)
    int32 SegmentCountOverride;                                                       // 0x0010 (size: 0x4)
    float Offset;                                                                     // 0x0014 (size: 0x4)

}; // Size: 0x18

struct FClassesArray
{
    TArray<class UClass*> Classes;                                                    // 0x0000 (size: 0x10)
    TArray<class UClass*> ProhibitedClasses;                                          // 0x0010 (size: 0x10)

}; // Size: 0x20

struct FClearMalfunctionData
{
    bool ShouldClearMalfunction;                                                      // 0x0000 (size: 0x1)
    FBodyWeaponAnimation Animations;                                                  // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FClientEffectData
{
}; // Size: 0xB4

struct FClimbableObstacleInfo
{
    FVector CapsuleLocationAtAnchorZero;                                              // 0x0000 (size: 0xC)
    FRotator CapsuleRotationAtAnchor;                                                 // 0x000C (size: 0xC)
    TWeakObjectPtr<class UPrimitiveComponent> BaseComponent;                          // 0x0018 (size: 0x8)
    FPrisonerClimbAnimationInfo AnimationInfo;                                        // 0x0020 (size: 0x40)

}; // Size: 0x60

struct FCloseRangeAttackData
{
    class UAnimMontage* Montage;                                                      // 0x0000 (size: 0x8)
    float RegainControlDurationModifier;                                              // 0x0008 (size: 0x4)
    float Range;                                                                      // 0x000C (size: 0x4)
    float angle;                                                                      // 0x0010 (size: 0x4)
    float HorizontalHalfAngleRange;                                                   // 0x0014 (size: 0x4)

}; // Size: 0x18

struct FClothesPartSet
{
    TSet<EClothesPart> ClothesParts;                                                  // 0x0000 (size: 0x50)

}; // Size: 0x50

struct FCollisionPointDamageEvent : public FScumPointDamageEvent
{
}; // Size: 0x170

struct FCombinationLockGetCombinationRequestData
{
}; // Size: 0x14

struct FCombinationLockUnlockAttemptRequestData
{
}; // Size: 0x1C

struct FCombustibleItemParams
{
    float DefaultTemp;                                                                // 0x0000 (size: 0x4)
    float BurningRate;                                                                // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FCommonMaps
{
    TSoftObjectPtr<UWorld> MainMenu;                                                  // 0x0000 (size: 0x28)
    TSoftObjectPtr<UWorld> CharacterCreationMenu;                                     // 0x0028 (size: 0x28)
    TSoftObjectPtr<UWorld> Singleplayer;                                              // 0x0050 (size: 0x28)

}; // Size: 0x78

struct FCompassSkillParametersPerSkillLevel
{
    uint8 CompassSkillLevel;                                                          // 0x0000 (size: 0x1)

}; // Size: 0x1

struct FComponentReferenceCollection
{
    TArray<FComponentSoftPtrWithZeroTransform> ComponentRefs;                         // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FComponentSoftPtrWithZeroTransform
{
    FTransform ZeroTransform;                                                         // 0x0000 (size: 0x30)
    FString ComponentPath;                                                            // 0x0030 (size: 0x10)

}; // Size: 0x40

struct FConZBaseData
{
    int64 BaseId;                                                                     // 0x0000 (size: 0x8)
    FString BaseName;                                                                 // 0x0008 (size: 0x10)
    FVector2D BaseSize;                                                               // 0x0018 (size: 0x8)
    FVector BaseLocation;                                                             // 0x0020 (size: 0xC)
    int64 BaseOwnerPlayerId;                                                          // 0x0030 (size: 0x8)
    bool IsOwnedByPlayer;                                                             // 0x0038 (size: 0x1)
    FVector2D BaseBoundsMin;                                                          // 0x003C (size: 0x8)
    FVector2D BaseBoundsMax;                                                          // 0x0044 (size: 0x8)

}; // Size: 0x190

struct FConZBaseElementData
{
    int64 ElementID;                                                                  // 0x0000 (size: 0x8)
    int64 OwnerPlayerId;                                                              // 0x0008 (size: 0x8)
    int64 CreatorPrisonerId;                                                          // 0x0010 (size: 0x8)
    FString OwnerName;                                                                // 0x0018 (size: 0x10)
    FTransform Transform;                                                             // 0x0030 (size: 0x30)
    UClass* ElementClass;                                                             // 0x0060 (size: 0x8)
    float HealthPoints;                                                               // 0x0068 (size: 0x4)
    float Quality;                                                                    // 0x006C (size: 0x4)

}; // Size: 0x70

struct FConZBaseElementIdentifier
{
    int64 BaseId;                                                                     // 0x0000 (size: 0x8)
    int64 ElementID;                                                                  // 0x0008 (size: 0x8)
    FVector Location;                                                                 // 0x0010 (size: 0xC)

}; // Size: 0x20

struct FConZBaseElementInteractionData
{
    int64 BaseElementId;                                                              // 0x0000 (size: 0x8)
    uint16 GardenId;                                                                  // 0x0008 (size: 0x2)
    FVector BaseElementLocation;                                                      // 0x000C (size: 0xC)
    float RepairValue;                                                                // 0x0018 (size: 0x4)
    int64 InteractionTimestamp;                                                       // 0x0020 (size: 0x8)
    int64 IntegerData;                                                                // 0x0028 (size: 0x8)
    class UObject* PointerData;                                                       // 0x0030 (size: 0x8)

}; // Size: 0x38

struct FConZBaseElementTransformData
{
    int64 ElementID;                                                                  // 0x0000 (size: 0x8)
    FVector Location;                                                                 // 0x0008 (size: 0xC)
    FQuat Rotation;                                                                   // 0x0020 (size: 0x10)

}; // Size: 0x30

struct FConZBaseInteractionData
{
    int64 BaseId;                                                                     // 0x0000 (size: 0x8)
    FVector BaseLocation;                                                             // 0x0008 (size: 0xC)

}; // Size: 0x18

struct FConZBaseRepairAreaDuration
{
    int32 NumberOfBaseElementsTreshold;                                               // 0x0000 (size: 0x4)
    float RepairDuration;                                                             // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FConZCharacterTagSoundArray
{
    TArray<class UAkAudioEvent*> AudioEvents;                                         // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FConZColorRow : public FTableRowBase
{
    FLinearColor Color;                                                               // 0x0008 (size: 0x10)
    FString Description;                                                              // 0x0018 (size: 0x10)

}; // Size: 0x28

struct FConZConsoleVariableRow : public FTableRowBase
{
    FString ConsoleVariable;                                                          // 0x0008 (size: 0x10)
    FString Description;                                                              // 0x0018 (size: 0x10)

}; // Size: 0x28

struct FConZDeveloperId
{
    TArray<uint8> IdArray;                                                            // 0x0000 (size: 0x10)
    EConZDeveloperIdFlag Flags;                                                       // 0x0010 (size: 0x1)

}; // Size: 0x18

struct FConZDimensionRow : public FTableRowBase
{
    float Value;                                                                      // 0x0008 (size: 0x4)
    FString Description;                                                              // 0x0010 (size: 0x10)

}; // Size: 0x20

struct FConZElementColoringData
{
}; // Size: 0x2

struct FConZFlagElementData
{
    int64 OvertakeEndTime;                                                            // 0x0000 (size: 0x8)
    FDbIntegerId OvertakerId;                                                         // 0x0008 (size: 0x8)
    int32 NumberOfExpandedElements;                                                   // 0x0010 (size: 0x4)

}; // Size: 0x18

struct FConZFontRow : public FTableRowBase
{
    FSlateFontInfo Font;                                                              // 0x0008 (size: 0x58)
    FString Description;                                                              // 0x0060 (size: 0x10)

}; // Size: 0x70

struct FConZGerstnerWavesParameters
{
    float angle;                                                                      // 0x0000 (size: 0x4)
    float Height;                                                                     // 0x0004 (size: 0x4)
    float Length;                                                                     // 0x0008 (size: 0x4)
    float Steepness;                                                                  // 0x000C (size: 0x4)

}; // Size: 0x10

struct FConZItemElementData
{
}; // Size: 0x8

struct FConZMapLocationProperties
{
}; // Size: 0x3

struct FConZOceanLocationProperties
{
}; // Size: 0x24

struct FConZOnDemandElementData
{
    FConZBaseElementIdentifier ElementIdentifier;                                     // 0x0000 (size: 0x20)
    FString OwnerName;                                                                // 0x0020 (size: 0x10)

}; // Size: 0x30

struct FConZPlacementQueryParams
{
    class APrisoner* User;                                                            // 0x0000 (size: 0x8)
    UClass* ClassToSpawn;                                                             // 0x0008 (size: 0x8)
    int32 MaxInstancesPerFlagArea;                                                    // 0x0010 (size: 0x4)
    bool IsSnapping;                                                                  // 0x0014 (size: 0x1)
    bool MustBePlacedOnFoundations;                                                   // 0x0015 (size: 0x1)
    bool CanEverBePlacedOnFoundations;                                                // 0x0016 (size: 0x1)
    bool CanBePlacedOnOtherBaseElements;                                              // 0x0017 (size: 0x1)
    bool CanBePlacedWithoutFlag;                                                      // 0x0018 (size: 0x1)
    bool CanBePlacedInBuilding;                                                       // 0x0019 (size: 0x1)
    bool CanBePlacedInRestrictedArea;                                                 // 0x001A (size: 0x1)
    bool CanBePlacedInAbandonedBunker;                                                // 0x001B (size: 0x1)
    bool IgnoreDisabledBaseBuildingFlag;                                              // 0x001C (size: 0x1)
    bool ShouldUseParentClassForMaxInstances;                                         // 0x001D (size: 0x1)
    bool ShouldUseMilitaryPOIsMask;                                                   // 0x001E (size: 0x1)

}; // Size: 0x20

struct FConZSliderStyle
{
    FProgressBarStyle Slider;                                                         // 0x0000 (size: 0x1A0)
    FSlateBrush Thumb;                                                                // 0x01A0 (size: 0x88)

}; // Size: 0x228

struct FConZSquadEmblem
{
    FConZSquadEmblemElement Background;                                               // 0x0000 (size: 0x4)
    FConZSquadEmblemElement Symbol;                                                   // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FConZSquadEmblemElement
{
    uint8 ShapeIndex;                                                                 // 0x0000 (size: 0x1)
    uint8 PrimaryColorIndex;                                                          // 0x0001 (size: 0x1)
    uint8 SecondaryColorIndex;                                                        // 0x0002 (size: 0x1)
    uint8 TertiaryColorIndex;                                                         // 0x0003 (size: 0x1)

}; // Size: 0x4

struct FConZSquadMember
{
    FDbIntegerId UserProfileId;                                                       // 0x0010 (size: 0x8)
    EConZSquadMemberRank Rank;                                                        // 0x0018 (size: 0x1)
    bool Online;                                                                      // 0x0019 (size: 0x1)
    bool InDanger;                                                                    // 0x001A (size: 0x1)
    bool IsAlive;                                                                     // 0x001B (size: 0x1)

}; // Size: 0x20

struct FConZSquadPendingMember
{
    FDbIntegerId UserProfileId;                                                       // 0x0000 (size: 0x8)

}; // Size: 0x10

struct FConZTradeableDescRow : public FTableRowBase
{
    TSoftClassPtr<UObject> TradeableClass;                                            // 0x0008 (size: 0x28)
    bool CanBePurchasedByPlayer;                                                      // 0x0030 (size: 0x1)
    bool CanBeSoldByPlayer;                                                           // 0x0031 (size: 0x1)
    ETradeCategory TradeCategory;                                                     // 0x0032 (size: 0x1)
    TSet<ETraderType> TraderTypes;                                                    // 0x0038 (size: 0x50)
    float BasePurchasePriceModifier;                                                  // 0x0088 (size: 0x4)
    float BaseSalePriceReductionModifier;                                             // 0x008C (size: 0x4)
    ECurrencyType PurchaseCurrencyType;                                               // 0x0090 (size: 0x1)
    int32 AlternateCurrencyPurchasePrice;                                             // 0x0094 (size: 0x4)
    ETradeableSpawnType SpawnType;                                                    // 0x0098 (size: 0x1)
    FText TradingEntryCaption;                                                        // 0x00A0 (size: 0x18)
    TSoftObjectPtr<UTexture2D> TradingEntryIconTexture;                               // 0x00B8 (size: 0x28)
    int32 MaxAmountPurchasedAtOnce;                                                   // 0x00E0 (size: 0x4)
    bool IsStockAmountUnlimited;                                                      // 0x00E4 (size: 0x1)
    FGameplayTag TradeableFamePointPenaltyGroup;                                      // 0x00E8 (size: 0x8)
    int32 RequiredFamePoints;                                                         // 0x00F0 (size: 0x4)
    FGameplayTag TradeableRotationRarity;                                             // 0x00F4 (size: 0x8)
    bool OnlyAvailableAfterPlayerSale;                                                // 0x00FC (size: 0x1)
    int32 CustomStockAmountMin;                                                       // 0x0100 (size: 0x4)
    int32 CustomStockAmountMax;                                                       // 0x0104 (size: 0x4)
    TSubclassOf<class UTradeableDiscountCondition> TradeableDiscountCondition;        // 0x0108 (size: 0x8)
    FGameplayTagContainer TraderSearchTypes;                                          // 0x0110 (size: 0x20)
    FGameplayTagContainer TraderSearchRelated;                                        // 0x0130 (size: 0x20)
    bool IsImmuneToUserOverrides;                                                     // 0x0150 (size: 0x1)
    EDeluxeVersion RequiredDLC;                                                       // 0x0151 (size: 0x1)

}; // Size: 0x158

struct FConZWaterSplineControlPoint : public FSplinePoint
{
    bool selected;                                                                    // 0x0044 (size: 0x1)
    float Width;                                                                      // 0x0048 (size: 0x4)
    float MaxDepth;                                                                   // 0x004C (size: 0x4)
    float Speed;                                                                      // 0x0050 (size: 0x4)
    float Opacity;                                                                    // 0x0054 (size: 0x4)

}; // Size: 0x58

struct FConZWeaponDescRow : public FTableRowBase
{
    float Damage;                                                                     // 0x0008 (size: 0x4)
    float DamageInGameEvent;                                                          // 0x000C (size: 0x4)
    FTargetTypeDamageMultiplier TargetTypeMultiplier;                                 // 0x0010 (size: 0x10)
    float Energy;                                                                     // 0x0020 (size: 0x4)
    float SharpnessSlash;                                                             // 0x0024 (size: 0x4)
    float SharpnessPierce;                                                            // 0x0028 (size: 0x4)
    ECharacterImpactSourceSoundCategory ImpactSoundCategory;                          // 0x002C (size: 0x1)
    class UProjectileImpactEffects* ImpactEffects;                                    // 0x0030 (size: 0x8)

}; // Size: 0x38

struct FConditionalPrisonerMovementParams
{
    FGameplayTagQuery Condition;                                                      // 0x0000 (size: 0x48)
    FPrisonerMovementParams Value;                                                    // 0x0048 (size: 0x10)

}; // Size: 0x58

struct FConnectionSaveData
{
    FEntityComponentId ID;                                                            // 0x0000 (size: 0x10)
    float Amount;                                                                     // 0x0010 (size: 0x4)

}; // Size: 0x18

struct FConsumableDigestionHandlerSave
{
    TArray<uint8> Data;                                                               // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FConsumableSave
{
    FString Name;                                                                     // 0x0000 (size: 0x10)
    FString MergeGroup;                                                               // 0x0010 (size: 0x10)
    float MassToConsume;                                                              // 0x0020 (size: 0x4)
    float ConsumptionDuration;                                                        // 0x0024 (size: 0x4)
    float Density;                                                                    // 0x0028 (size: 0x4)
    bool IsLiquid;                                                                    // 0x002C (size: 0x1)
    FSubstancesData Substances;                                                       // 0x0030 (size: 0xD0)
    TArray<FString> ForeignSubstanceClasses;                                          // 0x0100 (size: 0x10)
    TArray<uint8> UserData;                                                           // 0x0110 (size: 0x10)

}; // Size: 0x120

struct FContainerItemDescriptorData
{
    class UTexture2D* Icon;                                                           // 0x0038 (size: 0x8)

}; // Size: 0x60

struct FControlMappingStyle
{
    FSlateBrush FocusBackgroundImage;                                                 // 0x0000 (size: 0x88)
    FControlMappingTextStyle LabelText;                                               // 0x0088 (size: 0x68)
    FControlMappingTextStyle MappingText;                                             // 0x00F0 (size: 0x68)

}; // Size: 0x158

struct FControlMappingTextStyle
{
    FSlateFontInfo Font;                                                              // 0x0000 (size: 0x58)
    FLinearColor ColorAndOpacity;                                                     // 0x0058 (size: 0x10)

}; // Size: 0x68

struct FControllerDigestionItem
{
}; // Size: 0x28

struct FCookedFoodIngredientNetData
{
    FPrimaryAssetId Resource;                                                         // 0x0000 (size: 0x10)
    float Mass;                                                                       // 0x0010 (size: 0x4)

}; // Size: 0x14

struct FCookingCategoryDropdownEntryData
{
    FGameplayTag CookingCategoryTag;                                                  // 0x0000 (size: 0x8)
    FGameplayTag NavigationTag;                                                       // 0x0008 (size: 0x8)
    TArray<FGameplayTag> NavigationHistory;                                           // 0x0010 (size: 0x10)
    FText DisplayName;                                                                // 0x0020 (size: 0x18)
    int32 IndentationLevel;                                                           // 0x0038 (size: 0x4)

}; // Size: 0x40

struct FCookingFoodProxyMesh
{
    class UStaticMesh* Mesh;                                                          // 0x0000 (size: 0x8)
    class UStaticMeshComponent* _meshComponent;                                       // 0x0090 (size: 0x8)
    class UAkComponent* _thermalSoundEffectComponent;                                 // 0x0098 (size: 0x8)
    class UAkAudioEvent* _startCookingEvent;                                          // 0x00A0 (size: 0x8)
    class UAkAudioEvent* _stopCookingEvent;                                           // 0x00A8 (size: 0x8)

}; // Size: 0xB0

struct FCookingRecipeRegistryEntry
{
    bool Enabled;                                                                     // 0x0000 (size: 0x1)
    FPrimaryAssetId AssetId;                                                          // 0x0004 (size: 0x10)

}; // Size: 0x14

struct FCookingResult
{
    TSoftClassPtr<AFoodItem> Item;                                                    // 0x0000 (size: 0x28)

}; // Size: 0x28

struct FCookingSortingDropdownEntryData
{
    FText DisplayName;                                                                // 0x0000 (size: 0x18)
    ECookingRecipesSort RecipesSort;                                                  // 0x0018 (size: 0x1)
    FSlateBrush Icon;                                                                 // 0x0020 (size: 0x88)

}; // Size: 0xA8

struct FCookingUISounds
{
    class UAkAudioEvent* AddRecipeClick;                                              // 0x0000 (size: 0x8)
    class UAkAudioEvent* DetailsButtonClick;                                          // 0x0008 (size: 0x8)
    class UAkAudioEvent* BackButtonClick;                                             // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FCookingUtilityFilterDropdownEntryData
{
    FGameplayTag CookingUtilityTag;                                                   // 0x0000 (size: 0x8)
    FText DisplayName;                                                                // 0x0008 (size: 0x18)

}; // Size: 0x20

struct FCookingUtilityMainSnapPoint
{
    FGameplayTag UtilitySlotType;                                                     // 0x0000 (size: 0x8)
    FVector LocationOffset;                                                           // 0x0008 (size: 0xC)
    float SnapRadius;                                                                 // 0x0014 (size: 0x4)
    bool CanAllUtilityTypesBePlacedOn;                                                // 0x0018 (size: 0x1)
    FGameplayTagContainer UtilityTypesThatCanBePlaced;                                // 0x0020 (size: 0x20)
    int32 RepresentativeSlotId;                                                       // 0x0040 (size: 0x4)

}; // Size: 0x48

struct FCookingUtilitySlot
{
    FGameplayTag UtilitySlotType;                                                     // 0x0000 (size: 0x8)
    FVector LocationOffset;                                                           // 0x0008 (size: 0xC)
    TArray<FVector> MovementEndpoints;                                                // 0x0018 (size: 0x10)
    float CircularShapeRadius;                                                        // 0x0028 (size: 0x4)
    float ThermalConduction;                                                          // 0x002C (size: 0x4)
    bool CanAllUtilityTypesBePlacedOn;                                                // 0x0030 (size: 0x1)
    FGameplayTagContainer UtilityTypesThatCanBePlaced;                                // 0x0038 (size: 0x20)
    FVector CookMeshVisualOffset;                                                     // 0x0058 (size: 0xC)
    class UCookingUtilityUIDataAsset* CookingUtilityUIDataAsset;                      // 0x0068 (size: 0x8)
    bool HighlightSlot;                                                               // 0x0070 (size: 0x1)

}; // Size: 0x88

struct FCookingUtilitySlotArray : public FFastArraySerializer
{
    TArray<FCookingUtilitySlotInstance> _slots;                                       // 0x0108 (size: 0x10)

}; // Size: 0x1D0

struct FCookingUtilitySlotInstance : public FFastArraySerializerItem
{
    FDbIntegerId _uniqueId;                                                           // 0x0020 (size: 0x8)
    FGameplayTag _utilityType;                                                        // 0x0028 (size: 0x8)
    uint8 _usage;                                                                     // 0x0030 (size: 0x1)
    FEntityId _boundCookingUtility;                                                   // 0x0038 (size: 0x8)
    class UCookingRecipe* _boundRecipe;                                               // 0x0048 (size: 0x8)
    class UCookingRecipe* _clientReservedRecipe;                                      // 0x0050 (size: 0x8)
    uint16 _repTemperature;                                                           // 0x005A (size: 0x2)
    uint16 _repCookTime;                                                              // 0x0064 (size: 0x2)
    uint8 _cookQualityPacked;                                                         // 0x0070 (size: 0x1)
    FEntityId _ownerCookingUtility;                                                   // 0x0078 (size: 0x8)
    int8 _slotItemTagArrayIndex;                                                      // 0x0094 (size: 0x1)
    float _targetCookTime;                                                            // 0x00F4 (size: 0x4)
    bool _cookingFinished;                                                            // 0x00FC (size: 0x1)
    bool _cookingStartFailed;                                                         // 0x00FD (size: 0x1)
    bool _cookingAborted;                                                             // 0x00FF (size: 0x1)
    FDbIntegerId _parentInstance;                                                     // 0x0108 (size: 0x8)

}; // Size: 0x180

struct FCookingUtilitySlotInstance_UserSetData
{
    int32 SlotId;                                                                     // 0x0000 (size: 0x4)
    TArray<uint8> InternalCoordinates;                                                // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FCookingUtilityUITableRow : public FTableRowBase
{
    FGameplayTag UtilitySlotType;                                                     // 0x0008 (size: 0x8)
    class UCookingUtilityUIDataAsset* CookingUtilityUIDataAsset;                      // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FCorpsePoseData
{
    FVector_NetQuantize Location;                                                     // 0x0000 (size: 0xC)
    FQuat Rotation;                                                                   // 0x0010 (size: 0x10)
    FVector_NetQuantize LinearVelocity;                                               // 0x0020 (size: 0xC)
    FVector_NetQuantize AngularVelocity;                                              // 0x002C (size: 0xC)

}; // Size: 0x40

struct FCorpseSkeletalMeshRepData
{
    FName DisplayName;                                                                // 0x0000 (size: 0x8)
    class USkeletalMesh* Mesh;                                                        // 0x0008 (size: 0x8)
    TArray<class UMaterialInterface*> Materials;                                      // 0x0010 (size: 0x10)
    bool Visibility;                                                                  // 0x0020 (size: 0x1)
    FTransform Transform;                                                             // 0x0030 (size: 0x30)
    FName AttachSocket;                                                               // 0x0060 (size: 0x8)

}; // Size: 0x70

struct FCorpseStaticMeshRepData
{
    FName DisplayName;                                                                // 0x0000 (size: 0x8)
    class UStaticMesh* Mesh;                                                          // 0x0008 (size: 0x8)
    TArray<class UMaterialInterface*> Materials;                                      // 0x0010 (size: 0x10)
    bool Visibility;                                                                  // 0x0020 (size: 0x1)
    FTransform Transform;                                                             // 0x0030 (size: 0x30)
    FName AttachSocket;                                                               // 0x0060 (size: 0x8)

}; // Size: 0x70

struct FCountedAmmunitionData
{
    TSoftClassPtr<AAmmunitionItem> AmmunitionItemClass;                               // 0x0000 (size: 0x28)
    float health;                                                                     // 0x0028 (size: 0x4)
    float MaxHealth;                                                                  // 0x002C (size: 0x4)
    EAmmunitionCartridgeState State;                                                  // 0x0030 (size: 0x1)
    int32 Count;                                                                      // 0x0034 (size: 0x4)

}; // Size: 0x38

struct FCraftingCategoryData
{
    FGameplayTag Tag;                                                                 // 0x0000 (size: 0x8)
    TArray<class UCraftingRecipe*> Recipes;                                           // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FCraftingCategoryTabButtonSharedStyle
{
    FLinearColor BackgroundColor;                                                     // 0x0000 (size: 0x10)
    FLinearColor IconColor;                                                           // 0x0010 (size: 0x10)
    float Scale;                                                                      // 0x0020 (size: 0x4)

}; // Size: 0x24

struct FCraftingIngredientConsumptionData
{
    class AItem* Ingredient;                                                          // 0x0000 (size: 0x8)
    class UCraftingIngredientTag* Type;                                               // 0x0008 (size: 0x8)
    int32 Amount;                                                                     // 0x0010 (size: 0x4)
    float Multiplier;                                                                 // 0x0014 (size: 0x4)
    int32 SlotIndex;                                                                  // 0x0018 (size: 0x4)

}; // Size: 0x20

struct FCraftingIngredientInstance
{
    class UCraftingIngredientTag* Type;                                               // 0x0000 (size: 0x8)
    float Amount;                                                                     // 0x0008 (size: 0x4)

}; // Size: 0x10

struct FCraftingIngredientSlot
{
    TArray<class UCraftingIngredientTag*> AllowedTypes;                               // 0x0000 (size: 0x10)
    FPerSkillLevelIntegerData Amount;                                                 // 0x0010 (size: 0x14)
    FPerSkillLevelIntegerData AdditionalAmount;                                       // 0x0024 (size: 0x14)
    float ProductQualityInfluence;                                                    // 0x0038 (size: 0x4)
    ECraftingIngredientPurpose Purpose;                                               // 0x003C (size: 0x1)
    ECraftingIngredientMixingType MixingType;                                         // 0x003D (size: 0x1)
    bool ReturnOnUncraft;                                                             // 0x003E (size: 0x1)
    FPerSkillLevelIntegerData DamagePercentageOnUncraft;                              // 0x0040 (size: 0x14)
    bool OverrideClassRepresentativeCaption;                                          // 0x0054 (size: 0x1)
    FText ClassRepresentativeCaption;                                                 // 0x0058 (size: 0x18)

}; // Size: 0x70

struct FCraftingPanelCategoryButtonUIData
{
    FGameplayTag CategoryTag;                                                         // 0x0000 (size: 0x8)
    FGameplayTag HighlightTag;                                                        // 0x0008 (size: 0x8)
    FSlateBrush Icon;                                                                 // 0x0010 (size: 0x88)
    FText Name;                                                                       // 0x0098 (size: 0x18)
    FText Shortcut;                                                                   // 0x00B0 (size: 0x18)

}; // Size: 0xC8

struct FCraftingPart
{
    UClass* ItemClass;                                                                // 0x0000 (size: 0x8)

}; // Size: 0x20

struct FCraftingProcess
{
    class UCraftingRecipe* _recipe;                                                   // 0x0000 (size: 0x8)
    TArray<FCraftingProcessPerIngredientSlotData> _perIngredientSlotData;             // 0x0008 (size: 0x10)

}; // Size: 0x20

struct FCraftingProcessPerIngredientSlotData
{
    int32 _requiredAmount;                                                            // 0x0000 (size: 0x4)
    int32 _providedAmount;                                                            // 0x0004 (size: 0x4)
    float _accumulatedQuality;                                                        // 0x0008 (size: 0x4)
    FSoftObjectPath _limiter;                                                         // 0x0010 (size: 0x18)

}; // Size: 0x28

struct FCraftingRecipeAndIngredientButtonVisualData
{
    uint8 CraftingButtonsPerRowInCategory;                                            // 0x0000 (size: 0x1)
    float CraftingButtonsContainerRowWidth;                                           // 0x0004 (size: 0x4)
    float CraftingButtonsContainerButtonSpacing;                                      // 0x0008 (size: 0x4)
    FLinearColor SelectedBorderColor;                                                 // 0x000C (size: 0x10)
    FLinearColor DefaultBorderColor;                                                  // 0x001C (size: 0x10)
    FSlateBrush EmptyWidgetImage;                                                     // 0x0030 (size: 0x88)
    FSlateBrush CanCraftLinesImage;                                                   // 0x00B8 (size: 0x88)
    FSlateBrush MissingSomeIngredientsLinesImage;                                     // 0x0140 (size: 0x88)
    FSlateBrush MissingAllIngredientsLinesImage;                                      // 0x01C8 (size: 0x88)
    TSoftObjectPtr<UTexture2D> TransparentPixel;                                      // 0x0250 (size: 0x28)

}; // Size: 0x278

struct FCriminalRecordUIData
{
}; // Size: 0x238

struct FCurrencyConversionRequestData
{
}; // Size: 0x24

struct FCurrencyDescription
{
    FString CurrencySymbol;                                                           // 0x0000 (size: 0x10)
    FText CurrencyName;                                                               // 0x0010 (size: 0x18)
    FString ConfigFileSymbol;                                                         // 0x0028 (size: 0x10)
    FSlateColor UITextColor;                                                          // 0x0038 (size: 0x28)
    EBankCardType RequiredBankCardTypeToPerformTransactions;                          // 0x0060 (size: 0x1)
    bool MustBeOwnerOfBankCard;                                                       // 0x0061 (size: 0x1)

}; // Size: 0x68

struct FCustomZoneConfiguration
{
    FString Name;                                                                     // 0x0000 (size: 0x10)
    ECustomZoneEventHandlingMethod EventHandlingMethod;                               // 0x0010 (size: 0x1A)
    FLinearColor Color;                                                               // 0x002C (size: 0x10)
    FName UniqueDefaultZoneName;                                                      // 0x003C (size: 0x8)
    EDefaultCustomZoneState DefaultZoneState;                                         // 0x0044 (size: 0x1)

}; // Size: 0x48

struct FCustomZoneDisplayData
{
    FString Value;                                                                    // 0x0000 (size: 0x10)
    FText Name;                                                                       // 0x0010 (size: 0x18)
    FText Description;                                                                // 0x0028 (size: 0x18)

}; // Size: 0x40

struct FCustomZoneRegion
{
    FString Name;                                                                     // 0x0000 (size: 0x10)
    FVector2D Location;                                                               // 0x0010 (size: 0x8)
    FVector2D Size;                                                                   // 0x0018 (size: 0x8)
    ECustomZoneShape Shape;                                                           // 0x0020 (size: 0x1)
    int32 ConfigurationIndex;                                                         // 0x0024 (size: 0x4)
    FName UniqueDefaultZoneName;                                                      // 0x0028 (size: 0x8)
    EDefaultCustomZoneState DefaultZoneState;                                         // 0x0030 (size: 0x1)

}; // Size: 0x38

struct FCutsceneSubtitlesTableRow : public FTableRowBase
{
    FText _subtitleText;                                                              // 0x0008 (size: 0x18)
    FTimespan _startTime;                                                             // 0x0020 (size: 0x8)
    FTimespan _endTime;                                                               // 0x0028 (size: 0x8)

}; // Size: 0x30

struct FDamageAdjacentAttachment
{
    float DamagePropagationMultiplier;                                                // 0x0000 (size: 0x4)

}; // Size: 0x4

struct FDamageMultiplier
{
    float Multiplier;                                                                 // 0x0000 (size: 0x4)

}; // Size: 0x4

struct FDamageMultiplierTracker
{
    float _baseDamage;                                                                // 0x0000 (size: 0x4)
    float _finalDamage;                                                               // 0x0004 (size: 0x4)
    TArray<FString> _appliedMultiplierNames;                                          // 0x0008 (size: 0x10)
    TArray<float> _appliedMultiplierValues;                                           // 0x0018 (size: 0x10)

}; // Size: 0x28

struct FDamageMultipliers
{
    TSubclassOf<class AActor> DamageCauserClass;                                      // 0x0000 (size: 0x8)
    TArray<FMultiplierByClass> DamageMultipliers;                                     // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FDamageTargetTypeMapping
{
    EDamageTargetType Type;                                                           // 0x0000 (size: 0x1)
    TArray<class UClass*> Classes;                                                    // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FDashboardMaterialParameter
{
    FName MaterialSlotName;                                                           // 0x0000 (size: 0x8)
    FName MaterialParameterName;                                                      // 0x0008 (size: 0x8)
    class UMaterialInstanceDynamic* DynamicMaterial;                                  // 0x0018 (size: 0x8)

}; // Size: 0x20

struct FDashboardMaterialParameterCache
{
    FDashboardMaterialParameter _speedParam;                                          // 0x0008 (size: 0x20)
    FDashboardMaterialParameter _rpmParam;                                            // 0x0028 (size: 0x20)
    FDashboardMaterialParameter _fuelRatioParam;                                      // 0x0048 (size: 0x20)
    FDashboardMaterialParameter _batteryRatioParam;                                   // 0x0068 (size: 0x20)
    FDashboardMaterialParameter _handbrakeParam;                                      // 0x0088 (size: 0x20)
    FDashboardMaterialParameter _lightsParam;                                         // 0x00A8 (size: 0x20)
    FDashboardMaterialParameter _engineParam;                                         // 0x00C8 (size: 0x20)
    FDashboardMaterialParameter _gearParam;                                           // 0x00E8 (size: 0x20)

}; // Size: 0x110

struct FDbIntegerId
{
    int64 Value;                                                                      // 0x0000 (size: 0x8)

}; // Size: 0x8

struct FDcxVehicleTireParticleData
{
    float MinLateralSlip;                                                             // 0x0000 (size: 0x4)
    float MaxLateralSlip;                                                             // 0x0004 (size: 0x4)
    float MinLongitudinalSlip;                                                        // 0x0008 (size: 0x4)
    float MaxLongitudinalSlip;                                                        // 0x000C (size: 0x4)
    float ParticleScaleModifier;                                                      // 0x0010 (size: 0x4)

}; // Size: 0x14

struct FDcxWheeledVehicleFlatTireWheelConfiguration
{
    FDcxVehicleWheelData FlatTireWheelData;                                           // 0x0000 (size: 0x20)
    class UDcxVehicleTire* FlatTire;                                                  // 0x0040 (size: 0x8)
    class UDcxVehicleTire* OriginalTire;                                              // 0x0048 (size: 0x8)

}; // Size: 0x50

struct FDcxWheeledVehicleTireEffectProperties
{
    FVector TireLocalOffset;                                                          // 0x0000 (size: 0xC)

}; // Size: 0x14

struct FDeathmatchParameters
{
    int32 RoundScoreLimit;                                                            // 0x0000 (size: 0x4)
    float AreaRestrictionInterval;                                                    // 0x0004 (size: 0x4)
    float AreaRestrictionDuration;                                                    // 0x0008 (size: 0x4)
    float AreaRestrictionStep;                                                        // 0x000C (size: 0x4)
    float BarrierHeatUpDuration;                                                      // 0x0010 (size: 0x4)

}; // Size: 0x14

struct FDeluxeVersion
{
}; // Size: 0xC

struct FDemolitionSkillExperienceAwards
{
    float PointsForArmedTrap;                                                         // 0x0000 (size: 0x4)
    float PointsForDisarmedOwnedTrap;                                                 // 0x0004 (size: 0x4)
    float PointsForDisarmedEnemyTrap;                                                 // 0x0008 (size: 0x4)
    float PointsForDisarmedPracticeTrap;                                              // 0x000C (size: 0x4)
    float PointsDecreasePerPracticeTrapTimerSecondsIncrease;                          // 0x0010 (size: 0x4)
    float PointsIncreasePerPracticeTrapTimerSecondsDecrease;                          // 0x0014 (size: 0x4)
    float PointsForAddedTrigger;                                                      // 0x0018 (size: 0x4)
    float PointsForCraftedTrap;                                                       // 0x001C (size: 0x4)

}; // Size: 0x20

struct FDemolitionSkillParametersPerSkillLevel
{
    float TrapQuality;                                                                // 0x0000 (size: 0x4)
    int32 NumberOfWires;                                                              // 0x0004 (size: 0x4)
    int32 GreenWiresNumber;                                                           // 0x0008 (size: 0x4)
    int32 RedWiresNumber;                                                             // 0x000C (size: 0x4)
    int32 NumberOfDefuseAttempts;                                                     // 0x0010 (size: 0x4)
    TMap<class ETrapType, class FDemolitionSkillParametersPerTrapType> ParametersPerTrapType; // 0x0018 (size: 0x50)

}; // Size: 0x68

struct FDemolitionSkillParametersPerTrapType
{
    float DefuseTime;                                                                 // 0x0000 (size: 0x4)

}; // Size: 0x4

struct FDerivedPrisonerSkillComponentUIData
{
}; // Size: 0x38

struct FDetectionDelayTimerData
{
    float MinDetectionDelayBasedOnDistance;                                           // 0x0000 (size: 0x4)
    float MaxDetectionDelayBasedOnDistance;                                           // 0x0004 (size: 0x4)
    float MinDetectionDelayBasedOnVisibility;                                         // 0x0008 (size: 0x4)
    float MaxDetectionDelayBasedOnVisibility;                                         // 0x000C (size: 0x4)

}; // Size: 0x10

struct FDialogueInfo
{
    EDialogueType DialogueType;                                                       // 0x0000 (size: 0x1)
    class UAkAudioEvent* VoiceOver;                                                   // 0x0008 (size: 0x8)
    FText Text;                                                                       // 0x0010 (size: 0x18)
    TArray<FDialogueSurvivalTipData> SurvivalTips;                                    // 0x0028 (size: 0x10)
    float Duration;                                                                   // 0x0038 (size: 0x4)

}; // Size: 0x40

struct FDialogueInfoContainer
{
    TArray<FDialogueInfo> DialogueInfos;                                              // 0x0000 (size: 0x10)
    FName NextDialogueName;                                                           // 0x0010 (size: 0x8)
    float NextDialogueDelay;                                                          // 0x0018 (size: 0x4)
    int32 PriorityLevel;                                                              // 0x001C (size: 0x4)

}; // Size: 0x20

struct FDialogueSurvivalTipData
{
    FName SurvivalTipName;                                                            // 0x0000 (size: 0x8)
    float SurvivalTipDelay;                                                           // 0x0008 (size: 0x4)

}; // Size: 0xC

struct FDigestionItemSave
{
    FConsumableSave Consumable;                                                       // 0x0000 (size: 0x120)
    float RemainingMassToConsume;                                                     // 0x0120 (size: 0x4)
    float MassConsumed;                                                               // 0x0124 (size: 0x4)
    float MassAbsorbed;                                                               // 0x0128 (size: 0x4)
    FSubstancesData SubstancesInStomach;                                              // 0x0130 (size: 0xD0)
    FSubstancesData SubstancesInIntestine;                                            // 0x0200 (size: 0xD0)
    TArray<FConsumableDigestionHandlerSave> DigestionHandlers;                        // 0x02D0 (size: 0x10)

}; // Size: 0x2E0

struct FDistantLevelDescription
{
    FString Name;                                                                     // 0x0000 (size: 0x10)
    FTransform Transform;                                                             // 0x0010 (size: 0x30)
    EDistantMeshStreamingBehavior MeshStreamingBehavior;                              // 0x0040 (size: 0x1)
    float MaxDrawDistance;                                                            // 0x0044 (size: 0x4)
    bool NeverDistanceCull;                                                           // 0x0048 (size: 0x1)
    FBoxSphereBounds MeshBounds;                                                      // 0x004C (size: 0x1C)
    TSoftObjectPtr<UStaticMesh> CollisionMesh;                                        // 0x0068 (size: 0x28)
    TArray<TSoftObjectPtr<UStaticMesh>> MeshLODs;                                     // 0x0090 (size: 0x10)

}; // Size: 0xA0

struct FDoorEntityRepData
{
    FDbIntegerId OwningUserProfileId;                                                 // 0x0000 (size: 0x8)
    FDbIntegerId BaseElementDoorId;                                                   // 0x0008 (size: 0x8)
    EAccessLevel AccessLevel;                                                         // 0x0010 (size: 0x1)
    TArray<FDoorEntityUpgradeLock> Locks;                                             // 0x0018 (size: 0x10)
    TArray<FDoorEntityUpgradeAttachment> Attachments;                                 // 0x0028 (size: 0x10)

}; // Size: 0x38

struct FDoorEntityUpgradeAttachment
{
    float PassiveItemHealthNormalized;                                                // 0x0000 (size: 0x4)
    TSoftClassPtr<AActor> Class;                                                      // 0x0008 (size: 0x28)
    FEntityId AttachedEntityId;                                                       // 0x0030 (size: 0x8)

}; // Size: 0x38

struct FDoorEntityUpgradeLock
{
    float ItemHealthNormalized;                                                       // 0x0000 (size: 0x4)
    TSoftClassPtr<AItem> Class;                                                       // 0x0008 (size: 0x28)
    class ULockData* LockData;                                                        // 0x0030 (size: 0x8)

}; // Size: 0x38

struct FDoorRepData
{
    bool IsBrokenDown;                                                                // 0x0000 (size: 0x1)
    EDoorStateFlags StateFlags;                                                       // 0x0001 (size: 0x1)
    FEntityId EntityId;                                                               // 0x0008 (size: 0x8)
    FDoorEntityRepData EntityRepData;                                                 // 0x0010 (size: 0x38)

}; // Size: 0x48

struct FDoorUnlockDataCollection
{
    TArray<FDoorUnlockDataDescription> Data;                                          // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FDoorUnlockDataDescription
{
    TSubclassOf<class UDoorUnlockData> DoorUnlockData;                                // 0x0000 (size: 0x8)
    int32 ProbabilityCount;                                                           // 0x0008 (size: 0x4)

}; // Size: 0x10

struct FDrivingSkillEngineStallingParameters
{
    float Chance;                                                                     // 0x0000 (size: 0x4)
    float MinDuration;                                                                // 0x0004 (size: 0x4)
    float MaxDuration;                                                                // 0x0008 (size: 0x4)
    float StopEngineChance;                                                           // 0x000C (size: 0x4)
    class UCurveFloat* ThrottleCurve;                                                 // 0x0010 (size: 0x8)
    float ThrottleCurveFrequencyMultiplier;                                           // 0x0018 (size: 0x4)
    class UCurveFloat* BrakeCurve;                                                    // 0x0020 (size: 0x8)
    float BrakeCurveFrequencyMultiplier;                                              // 0x0028 (size: 0x4)
    float ForceMagnitudeScale;                                                        // 0x002C (size: 0x4)
    class UCurveFloat* ForceMagnitudeScaleCurve;                                      // 0x0030 (size: 0x8)
    float ForceMagnitudeScaleCurveFrequencyMultiplier;                                // 0x0038 (size: 0x4)
    float ForceDirectionRandomizationAngle;                                           // 0x003C (size: 0x4)

}; // Size: 0x40

struct FDrivingSkillParametersPerSkillLevel
{
    float EngineStartViaMotionDuration;                                               // 0x0000 (size: 0x4)
    float EngineStartViaMotionFailureChance;                                          // 0x0004 (size: 0x4)
    float EngineReadyDelay;                                                           // 0x0008 (size: 0x4)
    float EngineFailedToStartDelay;                                                   // 0x000C (size: 0x4)
    float EngineFailedToStartNoFuelDelay;                                             // 0x0010 (size: 0x4)
    float EngineFailedToStartNoBatteryDelay;                                          // 0x0014 (size: 0x4)
    float EngineStalledDelay;                                                         // 0x0018 (size: 0x4)
    float MaxSpeedModifier;                                                           // 0x001C (size: 0x4)
    float ThrottleModifier;                                                           // 0x0020 (size: 0x4)
    float BrakeModifier;                                                              // 0x0024 (size: 0x4)
    float WheelSteeringLerpSpeedMultiplier;                                           // 0x0028 (size: 0x4)
    FEngineHandlingParameters EngineHandlingParameters;                               // 0x002C (size: 0x8)
    FGearboxHandlingParameters GearboxHandlingParameters;                             // 0x0034 (size: 0xC)
    FDrivingSkillEngineStallingParameters EngineStallingByAccelerationParameters;     // 0x0040 (size: 0x40)
    FDrivingSkillEngineStallingParameters EngineStallingByUpShiftParameters;          // 0x0080 (size: 0x40)
    FDrivingSkillEngineStallingParameters EngineStallingWhenStartingViaMotion;        // 0x00C0 (size: 0x40)

}; // Size: 0x100

struct FDroneVisitTimeData
{
    float MinVisitTime;                                                               // 0x0000 (size: 0x4)
    float MaxVisitTime;                                                               // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FDropZoneParameters
{
    float IntroAnnouncementDelay;                                                     // 0x0000 (size: 0x4)
    float WarmupPhaseDuration;                                                        // 0x0004 (size: 0x4)
    float CrateDropDuration;                                                          // 0x0008 (size: 0x4)
    float SearchPhaseTimeLimit;                                                       // 0x000C (size: 0x4)
    float CargoDropDuration;                                                          // 0x0010 (size: 0x4)
    float CapturePhaseTimeLimit;                                                      // 0x0014 (size: 0x4)
    float CargoOpeningDuration;                                                       // 0x0018 (size: 0x4)
    bool SkipKeyPhase;                                                                // 0x001C (size: 0x1)
    FGameEventRewardPoints PointsPerActivation;                                       // 0x0020 (size: 0xC)

}; // Size: 0x2C

struct FDropshipDamageEffectData
{
    class UNiagaraSystem* ParticleSystem;                                             // 0x0000 (size: 0x8)
    float EffectsScaleDistanceStart;                                                  // 0x0008 (size: 0x4)
    float EffectsScaleDistanceRange;                                                  // 0x000C (size: 0x4)
    float EffectsScaleByDistanceFactor;                                               // 0x0010 (size: 0x4)

}; // Size: 0x18

struct FDropshipDataPerStance
{
    float MaxSpeed;                                                                   // 0x0000 (size: 0x4)
    float MaxAcceleration;                                                            // 0x0004 (size: 0x4)
    float BrakingFriction;                                                            // 0x0008 (size: 0x4)
    FRotator RotationChangeRate;                                                      // 0x000C (size: 0xC)

}; // Size: 0x18

struct FDummyCollisionCapsuleInfo
{
    TWeakObjectPtr<class AActor> AttachParent;                                        // 0x0000 (size: 0x8)
    FGameplayTag Attachment;                                                          // 0x0008 (size: 0x8)
    FTransform RelativeTransform;                                                     // 0x0010 (size: 0x30)
    float UnscaledRadius;                                                             // 0x0040 (size: 0x4)
    float UnscaledHalfHeight;                                                         // 0x0044 (size: 0x4)

}; // Size: 0x50

struct FEconomyManagerRequestData
{
}; // Size: 0xB0

struct FEditableParameter
{
    FString Name;                                                                     // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FElementMorphQuery
{
    bool DebugSolo;                                                                   // 0x0000 (size: 0x1)
    FName QueryName;                                                                  // 0x0004 (size: 0x8)
    TArray<FElementQueryMarker> Markers;                                              // 0x0010 (size: 0x10)
    class UStaticMesh* StaticMesh;                                                    // 0x0020 (size: 0x8)
    FElementSnapMarkerOverride MarkersOverride;                                       // 0x0028 (size: 0x18)

}; // Size: 0x50

struct FElementQueryMarker
{
    bool Include;                                                                     // 0x0000 (size: 0x1)
    TSubclassOf<class UModularBaseBuildingSocketType> SocketClass;                    // 0x0008 (size: 0x8)
    FTransform Transform;                                                             // 0x0010 (size: 0x30)

}; // Size: 0x40

struct FElementSnapMarker
{
    FTransform Transform;                                                             // 0x0000 (size: 0x30)
    FVector Slack;                                                                    // 0x0030 (size: 0xC)
    bool HangOnOtherElement;                                                          // 0x003C (size: 0x1)
    bool HasForbiddenArea;                                                            // 0x003D (size: 0x1)
    FVector ForbiddenAreaCenter;                                                      // 0x0040 (size: 0xC)
    FVector ForbiddenAreaExtent;                                                      // 0x004C (size: 0xC)
    bool ElementTypesMustMatch;                                                       // 0x0058 (size: 0x1)
    bool IncreaseLevelOnSnap;                                                         // 0x0059 (size: 0x1)
    uint8 MaxLevelToSnap;                                                             // 0x005A (size: 0x1)
    FVector RequiredElementSize;                                                      // 0x005C (size: 0xC)
    FVector RequiredElementSizeTolerance;                                             // 0x0068 (size: 0xC)
    bool DestroySnappedElementWhenDestroyed;                                          // 0x0074 (size: 0x1)
    uint16 OutSocketTypes;                                                            // 0x0076 (size: 0x2)
    uint16 InSocketTypes;                                                             // 0x0078 (size: 0x2)

}; // Size: 0x80

struct FElementSnapMarkerOverride
{
    ESnapMarkerOverrideType OverrideType;                                             // 0x0000 (size: 0x1)
    TArray<FName> SnapMarkersToRemove;                                                // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FEncounterGroupedCharacterSpawnPoint
{
    FBox GroupBounds;                                                                 // 0x0000 (size: 0x1C)
    TArray<FTransform> SpawnTransforms;                                               // 0x0020 (size: 0x10)
    ESpawnType Type;                                                                  // 0x0030 (size: 0x1)

}; // Size: 0x38

struct FEncounterLegacyCharacterSpawnPoint
{
    ESpawnType Type;                                                                  // 0x0000 (size: 0x1)
    FTransform Transform;                                                             // 0x0010 (size: 0x30)

}; // Size: 0x40

struct FEncounterSpawnPointTypeArrayData
{
    uint8 SpawnPointTypes;                                                            // 0x0000 (size: 0x1)
    ESpawnType SpawnType;                                                             // 0x0001 (size: 0x1)
    TArray<FEncounterSpawnTypeData> HiddenSpawnTypeDataArray;                         // 0x0008 (size: 0x10)
    int32 MinimumNecessarySpawnedCharacterNum;                                        // 0x0018 (size: 0x4)

}; // Size: 0x20

struct FEncounterSpawnTypeArrayData
{
    TArray<FEncounterSpawnTypeData> HiddenSpawnTypeDataArray;                         // 0x0000 (size: 0x10)
    int32 MinimumNecessarySpawnedCharacterNum;                                        // 0x0010 (size: 0x4)

}; // Size: 0x18

struct FEncounterSpawnTypeData
{
    ECharacterHiddenSpawnType HiddenSpawnType;                                        // 0x0000 (size: 0x1)
    float Weight;                                                                     // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FEncounterStaticZoneDescription
{
    FTransform _transform;                                                            // 0x0010 (size: 0x30)
    float _semiXAxisSize;                                                             // 0x0040 (size: 0x4)
    float _semiYAxisSize;                                                             // 0x0044 (size: 0x4)
    float _zoneActivationRadiusMultiplier;                                            // 0x0048 (size: 0x4)
    float _LPCZoneActivationRadiusMultiplier;                                         // 0x004C (size: 0x4)
    FBox _boundingBox;                                                                // 0x0050 (size: 0x1C)
    FBox _zoneActivationBoundingBox;                                                  // 0x006C (size: 0x1C)
    FBox _LPCZoneActivationBoundingBox;                                               // 0x0088 (size: 0x1C)
    TArray<FTransform> _flyingSpawnedCharacterApproachLocations;                      // 0x00A8 (size: 0x10)
    class UEncounterZoneData* _zoneData;                                              // 0x00B8 (size: 0x8)
    class UEncounterZoneData* _lpcZoneData;                                           // 0x00C0 (size: 0x8)
    TArray<FEncounterSubZoneData> _subZoneData;                                       // 0x00C8 (size: 0x10)

}; // Size: 0x160

struct FEncounterSubZoneBoxData
{
    FBox AreaBox;                                                                     // 0x0000 (size: 0x1C)
    FRotator BoxRotation;                                                             // 0x001C (size: 0xC)

}; // Size: 0x28

struct FEncounterSubZoneData
{
    TArray<FEncounterSubZoneBoxData> BoxDataArray;                                    // 0x0000 (size: 0x10)
    FBox SubZoneBox;                                                                  // 0x0010 (size: 0x1C)
    bool ShouldInstantlyLoadAllNecessaryClasses;                                      // 0x002C (size: 0x1)
    class UEncounterZoneData* EncounterZoneData;                                      // 0x0030 (size: 0x8)
    int32 SubZonePriority;                                                            // 0x0038 (size: 0x4)

}; // Size: 0x40

struct FEncounterSubZoneEditorData
{
    TArray<FEncounterZoneSubZoneBoxComponentEditorData> VisualizationBoxes;           // 0x0000 (size: 0x10)
    FEncounterSubZoneData ZoneData;                                                   // 0x0010 (size: 0x40)
    FColor VisualizationBoxColor;                                                     // 0x0050 (size: 0x4)
    bool ShouldInstantlyLoadAllCharacterClasses;                                      // 0x0054 (size: 0x1)

}; // Size: 0x58

struct FEncounterZoneSubZoneBoxComponentEditorData
{
    class UEncounterZoneSubZoneBoxComponent* BoxComponent;                            // 0x0000 (size: 0x8)

}; // Size: 0x8

struct FEnduranceSkillExperienceAwards
{
    float PointsPerMinuteOfWalking;                                                   // 0x0000 (size: 0x4)
    float PointsPerMinuteOfJogging;                                                   // 0x0004 (size: 0x4)
    float PointsPerMinuteOfRunning;                                                   // 0x0008 (size: 0x4)

}; // Size: 0xC

struct FEnduranceSkillParametersPerSkillLevel
{
    FExperienceDependentFloat EnergyConsumptionMultiplier;                            // 0x0000 (size: 0x8)
    FExperienceDependentFloat WaterConsumptionMultiplier;                             // 0x0008 (size: 0x8)
    FExperienceDependentFloat StaminaRecoveryMultiplier;                              // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FEngineHandlingParameters
{
    float IgnitionDurationMultiplier;                                                 // 0x0000 (size: 0x4)
    float IgnitionFailureChance;                                                      // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FEngineeringEventData
{
}; // Size: 0x8

struct FEngineeringSkillExperienceAwards
{
    float RepairExperienceMultiplier;                                                 // 0x0000 (size: 0x4)
    float FillFuelExperienceMultiplier;                                               // 0x0004 (size: 0x4)
    float DrainFuelExperienceMultiplier;                                              // 0x0008 (size: 0x4)
    float ChargeBatteryExperienceMultiplier;                                          // 0x000C (size: 0x4)

}; // Size: 0x10

struct FEngineeringSkillParametersPerSkillLevel
{
    float RepairRadius;                                                               // 0x0000 (size: 0x4)
    float RepairTimeMultiplier;                                                       // 0x0004 (size: 0x4)
    float ResultQuality;                                                              // 0x0008 (size: 0x4)
    float ToolUsageMultiplier;                                                        // 0x000C (size: 0x4)
    float FillFuelDurationMultiplier;                                                 // 0x0010 (size: 0x4)
    float DrainFuelDurationMultiplier;                                                // 0x0014 (size: 0x4)
    float ChargeBatteryDurationMultiplier;                                            // 0x0018 (size: 0x4)

}; // Size: 0x1C

struct FEntityComponentId
{
    FEntityId EntityId;                                                               // 0x0000 (size: 0x8)
    FName ComponentName;                                                              // 0x0008 (size: 0x8)

}; // Size: 0x10

struct FEntityId
{
    int64 Value;                                                                      // 0x0000 (size: 0x8)

}; // Size: 0x8

struct FEntitySetup_Component
{
    FName Name;                                                                       // 0x0000 (size: 0x8)
    class UEntityComponentSetup* Component;                                           // 0x0008 (size: 0x8)

}; // Size: 0x10

struct FEntityToCreateOnStartupParams
{
    TSubclassOf<class UEntitySetup> Entity;                                           // 0x0000 (size: 0x8)
    bool CreateOnServer;                                                              // 0x0008 (size: 0x1)
    bool CreateOnClient;                                                              // 0x0009 (size: 0x1)
    bool CreateInShippingBuilds;                                                      // 0x000A (size: 0x1)

}; // Size: 0x10

struct FEnvironmentDescription
{
    EEnvironmentClass EnvironmentClass;                                               // 0x0000 (size: 0x1)
    bool IsUnderground;                                                               // 0x0001 (size: 0x1)
    bool IsAbandonedBunker;                                                           // 0x0002 (size: 0x1)
    bool ShouldBlockWeatherEffects;                                                   // 0x0003 (size: 0x1)

}; // Size: 0x4

struct FEventsRankingStats
{
    float FamePoints;                                                                 // 0x0008 (size: 0x4)
    int32 FameLevel;                                                                  // 0x000C (size: 0x4)
    float EventScore;                                                                 // 0x0010 (size: 0x4)
    int32 EventKills;                                                                 // 0x0014 (size: 0x4)
    int32 EventTeamKills;                                                             // 0x0018 (size: 0x4)
    int32 EventDeaths;                                                                // 0x001C (size: 0x4)
    int32 EventSuicides;                                                              // 0x0020 (size: 0x4)
    int32 EventAssists;                                                               // 0x0024 (size: 0x4)
    int32 EventHeadshots;                                                             // 0x0028 (size: 0x4)
    bool IsBanned;                                                                    // 0x002C (size: 0x1)

}; // Size: 0x30

struct FEventsRankingStatsItem
{
    int32 Rank;                                                                       // 0x0000 (size: 0x4)
    FString PlayerName;                                                               // 0x0008 (size: 0x10)
    FEventsRankingStats CharacterStats;                                               // 0x0018 (size: 0x30)

}; // Size: 0x48

struct FEventsUISounds
{
    class UAkAudioEvent* EventSelectionCollapseExpandToggleClick;                     // 0x0000 (size: 0x8)
    class UAkAudioEvent* EventSelectionClick;                                         // 0x0008 (size: 0x8)

}; // Size: 0x10

struct FExamineItemSpawnerConstraint_MaxOccurrencesPerSpawnTypes
{
    FGameplayTagContainer ItemSpawnTypes;                                             // 0x0000 (size: 0x20)
    int32 MaxNumberOfOccurrences;                                                     // 0x0020 (size: 0x4)

}; // Size: 0x28

struct FExamineItemSpawnerData
{
    int32 MinQuantity;                                                                // 0x0000 (size: 0x4)
    int32 MaxQuantity;                                                                // 0x0004 (size: 0x4)
    bool AllowDuplicates;                                                             // 0x0008 (size: 0x1)
    FItemSpawnerDataBasedOnPreset Spawner;                                            // 0x0010 (size: 0x90)
    TArray<FExamineItemSpawnerConstraint_MaxOccurrencesPerSpawnTypes> MaxOccurrencesPerSpawnTypes; // 0x00A0 (size: 0x10)

}; // Size: 0xB0

struct FExperienceDependentFloat
{
    float ValueWhenExperienceIsMinimal;                                               // 0x0000 (size: 0x4)
    float ValueWhenExperienceIsMaximal;                                               // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FExplosionRadialDamageEvent : public FScumRadialDamageEvent
{
    TSubclassOf<class UDamageCustomization> DamageCustomizationClass;                 // 0x0048 (size: 0x8)
    float Force;                                                                      // 0x0050 (size: 0x4)
    FTargetTypeDamageMultiplier TargetTypeMultiplier;                                 // 0x0058 (size: 0x10)
    class UObject* DamageDealer;                                                      // 0x0068 (size: 0x8)
    class AActor* DirectlyHitActor;                                                   // 0x0070 (size: 0x8)
    FName BoneName;                                                                   // 0x0078 (size: 0x8)
    bool IsEventDamage;                                                               // 0x0080 (size: 0x1)
    UClass* OriginatingWeapon;                                                        // 0x0088 (size: 0x8)

}; // Size: 0xB8

struct FFamePointAwards
{
    float BaseFameInflux;                                                             // 0x0000 (size: 0x4)
    float MovingOnFoot;                                                               // 0x0004 (size: 0x4)
    float MovingDriving;                                                              // 0x0008 (size: 0x4)
    float MovingFlying;                                                               // 0x000C (size: 0x4)
    float RustyLockLockpick;                                                          // 0x0010 (size: 0x4)
    float IronLockLockpick;                                                           // 0x0014 (size: 0x4)
    float SilverLockLockpick;                                                         // 0x0018 (size: 0x4)
    float GoldLockLockpick;                                                           // 0x001C (size: 0x4)
    float DialLockLockpick;                                                           // 0x0020 (size: 0x4)
    float BombDefuse;                                                                 // 0x0024 (size: 0x4)
    float OwningTheBase;                                                              // 0x0028 (size: 0x4)
    FTimespan MaxTimeFromLastLogin;                                                   // 0x0030 (size: 0x8)
    float BaseOvertakeMultiplier;                                                     // 0x0038 (size: 0x4)
    float VehicleSold;                                                                // 0x003C (size: 0x4)
    float WheelBarrowSold;                                                            // 0x0040 (size: 0x4)
    float AcquiredGoldCreditCard;                                                     // 0x0044 (size: 0x4)
    float TreatedWoundC1;                                                             // 0x0048 (size: 0x4)
    float TreatedWoundC2;                                                             // 0x004C (size: 0x4)
    float TreatedWoundC3;                                                             // 0x0050 (size: 0x4)
    float TreatedWoundC4;                                                             // 0x0054 (size: 0x4)
    float CuredInfectionC1;                                                           // 0x0058 (size: 0x4)
    float CuredInfectionC2;                                                           // 0x005C (size: 0x4)
    float CuredInfectionC3;                                                           // 0x0060 (size: 0x4)
    float CuredSepsis;                                                                // 0x0064 (size: 0x4)
    float AbundantFishCaughtMultiplier;                                               // 0x0068 (size: 0x4)
    float CommonFishCaughtMultiplier;                                                 // 0x006C (size: 0x4)
    float UncommonFishCaughtMultiplier;                                               // 0x0070 (size: 0x4)
    float RareFishCaughtMultiplier;                                                   // 0x0074 (size: 0x4)
    float VeryRareFishCaughtMultiplier;                                               // 0x0078 (size: 0x4)
    float ExtremelyRareFishCaughtMultiplier;                                          // 0x007C (size: 0x4)
    float FishCaughtFamePointsPerKg;                                                  // 0x0080 (size: 0x4)
    float ConsecutivelyKept50Fish;                                                    // 0x0084 (size: 0x4)
    float ConsecutivelyReleased50Fish;                                                // 0x0088 (size: 0x4)
    float UnlockedDoorKillbox;                                                        // 0x008C (size: 0x4)
    float SurvivedConsecutiveDays2;                                                   // 0x0090 (size: 0x4)
    float SurvivedConsecutiveDays4;                                                   // 0x0094 (size: 0x4)
    float SurvivedConsecutiveDays8;                                                   // 0x0098 (size: 0x4)
    float SurvivedConsecutiveDays16;                                                  // 0x009C (size: 0x4)
    float SurvivedConsecutiveDays32;                                                  // 0x00A0 (size: 0x4)
    float EscapedSharkBite;                                                           // 0x00A4 (size: 0x4)
    float PuppetKills;                                                                // 0x00A8 (size: 0x4)
    float PuppetKills10;                                                              // 0x00AC (size: 0x4)
    float PuppetKills100;                                                             // 0x00B0 (size: 0x4)
    float PuppetKills500;                                                             // 0x00B4 (size: 0x4)
    float AnimalKills;                                                                // 0x00B8 (size: 0x4)
    float AnimalKills10;                                                              // 0x00BC (size: 0x4)
    float AnimalKills100;                                                             // 0x00C0 (size: 0x4)
    float AnimalKills500;                                                             // 0x00C4 (size: 0x4)
    float FirearmKills10;                                                             // 0x00C8 (size: 0x4)
    float FirearmKills100;                                                            // 0x00CC (size: 0x4)
    float FirearmKills500;                                                            // 0x00D0 (size: 0x4)
    float FirearmHeadShotOver200m;                                                    // 0x00D4 (size: 0x4)
    float BowHeadshotOver100m;                                                        // 0x00D8 (size: 0x4)
    float MeleeKills10;                                                               // 0x00DC (size: 0x4)
    float MeleeKills100;                                                              // 0x00E0 (size: 0x4)
    float MeleeKills500;                                                              // 0x00E4 (size: 0x4)
    float BareHandedKills10;                                                          // 0x00E8 (size: 0x4)
    float BareHandedKills100;                                                         // 0x00EC (size: 0x4)
    float BareHandedKills500;                                                         // 0x00F0 (size: 0x4)
    float FinishedHauntedHouseRitual;                                                 // 0x00F4 (size: 0x4)
    float SkillLeveledUpToBasic;                                                      // 0x00F8 (size: 0x4)
    float SkillLeveledUpToMedium;                                                     // 0x00FC (size: 0x4)
    float SkillLeveledUpToAdvanced;                                                   // 0x0100 (size: 0x4)
    float SkillLeveledUpToAdvancedPlus;                                               // 0x0104 (size: 0x4)
    float MaxedOutAttributes;                                                         // 0x0108 (size: 0x4)
    float Decontaminated;                                                             // 0x010C (size: 0x4)
    float WashedClothing;                                                             // 0x0110 (size: 0x4)
    float LandedWithParachute;                                                        // 0x0114 (size: 0x4)
    float BuiltGarden;                                                                // 0x0118 (size: 0x4)
    float SeedsPlanted;                                                               // 0x011C (size: 0x4)
    float SuccessfulHarvest;                                                          // 0x0120 (size: 0x4)
    float WeedsPlucked;                                                               // 0x0124 (size: 0x4)
    float CollectedSeeds;                                                             // 0x0128 (size: 0x4)
    float AppliedPesticideOrFungicide;                                                // 0x012C (size: 0x4)
    float HadPlasticSurgery;                                                          // 0x0130 (size: 0x4)

}; // Size: 0x138

struct FFamePointPenalties
{
    float IronLockLockpick;                                                           // 0x0000 (size: 0x4)
    float SilverLockLockpick;                                                         // 0x0004 (size: 0x4)
    float GoldLockLockpick;                                                           // 0x0008 (size: 0x4)
    float DialLockLockpick;                                                           // 0x000C (size: 0x4)
    float VehiclePurchased;                                                           // 0x0010 (size: 0x4)
    float WheelBarrowPurchased;                                                       // 0x0014 (size: 0x4)
    float PrisonerCommittedSuicide;                                                   // 0x0018 (size: 0x4)

}; // Size: 0x1C

struct FFarmingSkillParametersPerSkillLevel
{
    float PlantingSeedTime;                                                           // 0x0000 (size: 0x4)
    float PlantingSeedTimeDecreaseByStrength;                                         // 0x0004 (size: 0x4)
    float FertilizingTime;                                                            // 0x0008 (size: 0x4)
    float WateringTime;                                                               // 0x000C (size: 0x4)
    float WeedingByHandTime;                                                          // 0x0010 (size: 0x4)
    float WeedingByToolTime;                                                          // 0x0014 (size: 0x4)
    float ApplyWeedRepellentTime;                                                     // 0x0018 (size: 0x4)
    float ApplyPesticideTime;                                                         // 0x001C (size: 0x4)
    float GardenSlotCraftTime;                                                        // 0x0020 (size: 0x4)
    float RemovePlantTime;                                                            // 0x0024 (size: 0x4)
    float RemovePlantTimeDecreaseByStrength;                                          // 0x0028 (size: 0x4)
    float DestroyGardenTime;                                                          // 0x002C (size: 0x4)
    float DestroyGardenTimeDecreaseByStrength;                                        // 0x0030 (size: 0x4)
    float BaseMultiplier;                                                             // 0x0034 (size: 0x4)
    float ExpMultiplier;                                                              // 0x0038 (size: 0x4)
    float SuccessfulHarvestChancePercentage;                                          // 0x003C (size: 0x4)
    FInt32Interval SuccessfulHarvestNumItemsToSpawn;                                  // 0x0040 (size: 0x8)
    float SkillLevelBonusExperience;                                                  // 0x0048 (size: 0x4)
    float PlantingSeedExperience;                                                     // 0x004C (size: 0x4)
    float AddFertilizerExperience;                                                    // 0x0050 (size: 0x4)
    float WateringPlantExperiencePerLiter;                                            // 0x0054 (size: 0x4)
    float ReachingNextPlantStageExperience;                                           // 0x0058 (size: 0x4)
    float WeedingByHandExperience;                                                    // 0x005C (size: 0x4)
    float WeedingByToolExperience;                                                    // 0x0060 (size: 0x4)
    float ApplyWeedRepellentExperience;                                               // 0x0064 (size: 0x4)
    float ApplyPesticideExperience;                                                   // 0x0068 (size: 0x4)
    float CraftGardenExperience;                                                      // 0x006C (size: 0x4)

}; // Size: 0x70

struct FFillItemWithReplenishableResourceInteractionData
{
    FText InteractionCaptionOverride;                                                 // 0x0000 (size: 0x18)
    bool CanShowDrinkAsDefaultInteraction;                                            // 0x0018 (size: 0x1)
    float BaseActionDuration;                                                         // 0x001C (size: 0x4)
    float ActionDurationPerAmountFilled;                                              // 0x0020 (size: 0x4)
    float ResourceFillingExperiencePerAmount;                                         // 0x0024 (size: 0x4)
    class UAnimMontage* PrisonerFillingMontage;                                       // 0x0028 (size: 0x8)
    class UAkAudioEvent* StartItemNoiseAudioEvent;                                    // 0x0030 (size: 0x8)
    class UAkAudioEvent* StopItemNoiseAudioEvent;                                     // 0x0038 (size: 0x8)

}; // Size: 0x40

struct FFilteredPrimaryAssetId
{
    FPrimaryAssetId Value;                                                            // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FFireAnimationData
{
    FBodyWeaponAnimation BodyWeaponAnimation;                                         // 0x0000 (size: 0x10)
    float TimeBetweenShots;                                                           // 0x0010 (size: 0x4)
    FBodyWeaponAnimation BodyWeaponAnimationChamber;                                  // 0x0018 (size: 0x10)
    float TimeForChamber;                                                             // 0x0028 (size: 0x4)
    TSubclassOf<class UWeaponActionWornOutFiringConditions> Conditions;               // 0x0030 (size: 0x8)
    FRuntimeFloatCurve ProbabilityWeightCurve;                                        // 0x0038 (size: 0x88)

}; // Size: 0xC0

struct FFireShotDescription
{
}; // Size: 0x8

struct FFireShotProjectileData
{
    FVector StartLocation;                                                            // 0x0000 (size: 0xC)
    FVector_NetQuantizeNormal shootDirection;                                         // 0x000C (size: 0xC)
    int32 ZeroRange;                                                                  // 0x0018 (size: 0x4)
    float Windage;                                                                    // 0x001C (size: 0x4)
    int32 RandomFactor;                                                               // 0x0020 (size: 0x4)
    float ConeHalfAngle;                                                              // 0x0024 (size: 0x4)
    float ProjectileDamageMultiplier;                                                 // 0x0028 (size: 0x4)
    FFireShotProjectileDescription Description;                                       // 0x002C (size: 0x1)

}; // Size: 0x30

struct FFireShotProjectileDescription
{
}; // Size: 0x1

struct FFiredShotDescriptionRep
{
    uint32 PackedData;                                                                // 0x0000 (size: 0x4)

}; // Size: 0x4

struct FFirstPersonViewParameters
{
    FFloatInterval MinMaxViewPitch;                                                   // 0x0000 (size: 0x8)
    FFloatInterval MinMaxViewYaw;                                                     // 0x0008 (size: 0x8)
    FFloatInterval MinMaxViewYawInCombatMode;                                         // 0x0010 (size: 0x8)
    FFloatInterval MinMaxViewYawIfBlocked;                                            // 0x0018 (size: 0x8)
    class UCurveLinearColor* MinMaxViewPitchByYaw;                                    // 0x0020 (size: 0x8)

}; // Size: 0x28

struct FFishSpawnData
{
    class UFishSpeciesData* FishSpeciesData;                                          // 0x0000 (size: 0x8)
    float SpawningWeight;                                                             // 0x0008 (size: 0x4)

}; // Size: 0x10

struct FFishStateParameters
{
    float MaxSpeed;                                                                   // 0x0000 (size: 0x4)
    float Acceleration;                                                               // 0x0004 (size: 0x4)
    float Deceleration;                                                               // 0x0008 (size: 0x4)
    float TurnSpeed;                                                                  // 0x000C (size: 0x4)

}; // Size: 0x10

struct FFishingData
{
    FVector Location;                                                                 // 0x0000 (size: 0xC)
    float HookDepth;                                                                  // 0x000C (size: 0x4)

}; // Size: 0x18

struct FFishingMinigameData
{
}; // Size: 0x74

struct FFishingStats
{
    int32 FishCaught;                                                                 // 0x0000 (size: 0x4)
    int32 FishKept;                                                                   // 0x0004 (size: 0x4)
    int32 FishReleased;                                                               // 0x0008 (size: 0x4)
    int32 LinesBroken;                                                                // 0x000C (size: 0x4)
    float HeaviestFishCaught;                                                         // 0x0010 (size: 0x4)
    float LongestFishCaught;                                                          // 0x0014 (size: 0x4)
    TArray<FCaughtFishData> FishSpeciesCaught;                                        // 0x0018 (size: 0x10)

}; // Size: 0x28

struct FFloatingWidgetUIData
{
}; // Size: 0x1C

struct FFoliageAIPerceptionData
{
    bool CanCoverPrisoner;                                                            // 0x0000 (size: 0x1)
    bool CanBlockVisibilityTrace;                                                     // 0x0001 (size: 0x1)
    bool UseOnlyUpperCanopyHemisphereForSeenCheck;                                    // 0x0002 (size: 0x1)
    EPrisonerGroundStance MaxUndetectedPrisonerStance;                                // 0x0003 (size: 0x1)

}; // Size: 0x4

struct FFoliageCanopyData
{
    bool UseSphere;                                                                   // 0x0000 (size: 0x1)
    FTreeCanopySphere Sphere;                                                         // 0x0004 (size: 0x14)
    bool UseCapsule;                                                                  // 0x0018 (size: 0x1)
    FTreeCanopyCapsule Capsule;                                                       // 0x001C (size: 0x24)

}; // Size: 0x40

struct FFoliageEffectsData
{
    class UAkAudioEvent* StartMovingThroughFoliageAudioEvent;                         // 0x0000 (size: 0x8)
    class UAkAudioEvent* StopMovingThroughFoliageAudioEvent;                          // 0x0008 (size: 0x8)
    class UAkAudioEvent* OneShotMovingThroughFoliageAudioEvent;                       // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FFoliageGeneralData
{
    float CollisionBoundsScale;                                                       // 0x0000 (size: 0x4)
    FVector CollisionBoundsOffset;                                                    // 0x0004 (size: 0xC)
    bool ShouldBeConsideredForEnemySpawning;                                          // 0x0010 (size: 0x1)

}; // Size: 0x14

struct FForeignSubstanceSave
{
    TArray<uint8> Data;                                                               // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FFortificationData
{
    FVector LocationZeroOrigin;                                                       // 0x0000 (size: 0xC)
    UClass* FortificationClass;                                                       // 0x0010 (size: 0x8)
    FDbIntegerId OwnerUserProfileId;                                                  // 0x0018 (size: 0x8)
    float health;                                                                     // 0x0020 (size: 0x4)

}; // Size: 0x28

struct FFundsOverviewUIData
{
}; // Size: 0x60

struct FGameEventNotificationUIData
{
}; // Size: 0x50

struct FGameEventParameters
{
    float AnnounceDuration;                                                           // 0x0000 (size: 0x4)
    float CancelDuration;                                                             // 0x0004 (size: 0x4)
    float RoundDuration;                                                              // 0x0008 (size: 0x4)
    int32 RoundLimit;                                                                 // 0x000C (size: 0x4)
    int32 WinLimit;                                                                   // 0x0010 (size: 0x4)
    float RespawnDelay;                                                               // 0x0014 (size: 0x4)
    float TimeoutDuration;                                                            // 0x0018 (size: 0x4)
    int32 MinParticipants;                                                            // 0x001C (size: 0x4)
    int32 MaxParticipants;                                                            // 0x0020 (size: 0x4)
    bool AllowRespawn;                                                                // 0x0024 (size: 0x1)
    bool FriendlyFire;                                                                // 0x0025 (size: 0x1)
    TArray<int32> TeamLimit;                                                          // 0x0028 (size: 0x10)
    int32 EntryFee;                                                                   // 0x0038 (size: 0x4)
    FGameEventRewardPoints PointsPerEnemyKill;                                        // 0x003C (size: 0xC)
    FGameEventRewardPoints PointsPerTeamKill;                                         // 0x0048 (size: 0xC)
    FGameEventRewardPoints PointsPerDeath;                                            // 0x0054 (size: 0xC)
    FGameEventRewardPoints PointsPerSuicide;                                          // 0x0060 (size: 0xC)
    FGameEventRewardPoints PointsPerAssist;                                           // 0x006C (size: 0xC)
    FGameEventRewardPoints PointsPerHeadshot;                                         // 0x0078 (size: 0xC)
    FGameEventRewardPoints PointsPerRoundWin;                                         // 0x0084 (size: 0xC)
    TArray<FGameEventRewardPoints> PointsPerRank;                                     // 0x0090 (size: 0x10)
    FGameEventRewardPoints PointsForParticipation;                                    // 0x00A0 (size: 0xC)
    float ScoreToFameConversionFactor;                                                // 0x00AC (size: 0x4)
    TArray<TSoftObjectPtr<UItemSelection>> PossiblePrimaryWeapons;                    // 0x00B0 (size: 0x10)
    TArray<TSoftObjectPtr<UItemSelection>> PossibleSecondaryWeapons;                  // 0x00C0 (size: 0x10)
    TArray<TSoftObjectPtr<UItemSelection>> PossibleTertiaryWeapons;                   // 0x00D0 (size: 0x10)
    TArray<TSoftObjectPtr<UItemSelection>> PossibleOutfits;                           // 0x00E0 (size: 0x10)
    TArray<TSoftObjectPtr<UItemSelection>> PossibleSupportItems;                      // 0x00F0 (size: 0x10)
    TArray<TSoftObjectPtr<UItemSelection>> MandatoryGear;                             // 0x0100 (size: 0x10)
    FText EventName;                                                                  // 0x0110 (size: 0x18)
    FText EventDescription;                                                           // 0x0128 (size: 0x18)
    FText PrerequisitesText;                                                          // 0x0140 (size: 0x18)
    FText WeaponText;                                                                 // 0x0158 (size: 0x18)
    FText RewardsText;                                                                // 0x0170 (size: 0x18)

}; // Size: 0x188

struct FGameEventParticipantInfo
{
    FString UniqueId;                                                                 // 0x0000 (size: 0x10)
    TWeakObjectPtr<class APrisoner> Prisoner;                                         // 0x0010 (size: 0x8)
    FString Name;                                                                     // 0x0018 (size: 0x10)
    EGameEventParticipantState State;                                                 // 0x0028 (size: 0x1)
    int32 TeamIndex;                                                                  // 0x002C (size: 0x4)
    TArray<class UGameEventParticipantStats*> RoundStats;                             // 0x0030 (size: 0x10)
    class UGameEventParticipantStats* EventStats;                                     // 0x0040 (size: 0x8)
    TArray<class APrisoner*> HurtBy;                                                  // 0x0048 (size: 0x10)
    int32 RepHelper;                                                                  // 0x0058 (size: 0x4)

}; // Size: 0x78

struct FGameEventRewardPoints
{
    int32 Cash;                                                                       // 0x0000 (size: 0x4)
    int32 Score;                                                                      // 0x0004 (size: 0x4)
    float FamePoints;                                                                 // 0x0008 (size: 0x4)

}; // Size: 0xC

struct FGameEventTeamColours
{
    FLinearColor TeamName;                                                            // 0x0000 (size: 0x10)
    FLinearColor ParticipantStatsDarker;                                              // 0x0010 (size: 0x10)
    FLinearColor ParticipantStatsLighter;                                             // 0x0020 (size: 0x10)
    FLinearColor ParticipantStatsHighlighted;                                         // 0x0030 (size: 0x10)
    FLinearColor ParticipantStatsDisabled;                                            // 0x0040 (size: 0x10)
    FLinearColor ParticipantStatsMini;                                                // 0x0050 (size: 0x10)

}; // Size: 0x60

struct FGamePaymentTransactionRequestData
{
}; // Size: 0x18

struct FGameResourceConsumptionDataForeignSubstance
{
    TSubclassOf<class UForeignSubstance> Class;                                       // 0x0000 (size: 0x8)
    float Amount;                                                                     // 0x0008 (size: 0x4)

}; // Size: 0x10

struct FGameResourceMixingRule
{
    TSubclassOf<class UGameResourceType> Source;                                      // 0x0000 (size: 0x8)
    TSubclassOf<class UGameResourceType> Destination;                                 // 0x0008 (size: 0x8)
    TSubclassOf<class UGameResourceType> Result;                                      // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FGardenSlot : public FFastArraySerializerItem
{
    FIntPoint _slotPosition;                                                          // 0x000C (size: 0x8)
    class UPlantSpecies* _species;                                                    // 0x0018 (size: 0x8)
    EPlantGrowthStage _stage;                                                         // 0x0020 (size: 0x1)
    uint16 _repWater;                                                                 // 0x0022 (size: 0x2)
    uint8 _repGrowthPercentage;                                                       // 0x0028 (size: 0x1)
    bool _organicFertilizer;                                                          // 0x0030 (size: 0x1)
    bool _industrialFertilizer;                                                       // 0x0031 (size: 0x1)
    class UPlantPestSpecies* _pests;                                                  // 0x0038 (size: 0x18)
    uint8 _repPestsIntensities;                                                       // 0x0050 (size: 0x3)
    class UPlantDiseaseSpecies* _diseases;                                            // 0x0060 (size: 0x18)
    uint8 _repDiseaseIntensities;                                                     // 0x0078 (size: 0x3)
    uint8 _repWeedIntensity;                                                          // 0x0088 (size: 0x1)
    bool _pesticideActive;                                                            // 0x0090 (size: 0x1)
    bool _fungicideActive;                                                            // 0x0098 (size: 0x1)
    bool _weedRepellentActive;                                                        // 0x00A0 (size: 0x1)
    uint8 _repHealth;                                                                 // 0x00A8 (size: 0x1)
    bool _isDead;                                                                     // 0x00B0 (size: 0x1)
    bool _isOld;                                                                      // 0x00B1 (size: 0x1)

}; // Size: 0x200

struct FGardenSlotArray : public FFastArraySerializer
{
    TArray<FGardenSlot> _gardenSlots;                                                 // 0x0108 (size: 0x10)

}; // Size: 0x120

struct FGearboxHandlingParameters
{
    float GearChangeDelayMultiplier;                                                  // 0x0000 (size: 0x4)
    float GearUpRatioMultiplier;                                                      // 0x0004 (size: 0x4)
    float GearDownRatioMultiplier;                                                    // 0x0008 (size: 0x4)

}; // Size: 0xC

struct FGenericUISounds
{
    class UAkAudioEvent* StopDeena;                                                   // 0x0000 (size: 0x8)
    class UAkAudioEvent* ButtonClick;                                                 // 0x0008 (size: 0x8)
    class UAkAudioEvent* ButtonHover;                                                 // 0x0010 (size: 0x8)
    class UAkAudioEvent* TabMenuTabClick;                                             // 0x0018 (size: 0x8)
    class UAkAudioEvent* TabMenuSubtabClick;                                          // 0x0020 (size: 0x8)
    class UAkAudioEvent* TabMenuCategoryTabClick;                                     // 0x0028 (size: 0x8)
    class UAkAudioEvent* FilterClick;                                                 // 0x0030 (size: 0x8)
    class UAkAudioEvent* DropdownCollapseExpandToggleClick;                           // 0x0038 (size: 0x8)

}; // Size: 0x40

struct FGlobalRaidProtectionPlayerLoginMessagesData
{
}; // Size: 0x30

struct FGlobalRaidProtectionRaidPeriod
{
}; // Size: 0x10

struct FGrappleActionMontagePair
{
    class UAnimMontage* GrapplerMontage;                                              // 0x0000 (size: 0x8)
    class UAnimMontage* GrapplerMontageFP;                                            // 0x0008 (size: 0x8)
    class UAnimMontage* VictimMontage;                                                // 0x0010 (size: 0x8)
    class UAnimMontage* VictimMontageFP;                                              // 0x0018 (size: 0x8)

}; // Size: 0x20

struct FHalloweenSacrificePitRequiredItemVariants
{
    TArray<TSoftClassPtr<AItem>> Variants;                                            // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FHandsPoseCorrections
{
    class UAnimSequenceBase* RightHand;                                               // 0x0000 (size: 0x8)
    class UAnimSequenceBase* RightFist;                                               // 0x0008 (size: 0x8)
    class UAnimSequenceBase* RightFistInCombatMode;                                   // 0x0010 (size: 0x8)
    float RightHandToIdleBlendAlpha;                                                  // 0x0018 (size: 0x4)
    class UAnimSequenceBase* LeftHand;                                                // 0x0020 (size: 0x8)
    class UAnimSequenceBase* LeftFist;                                                // 0x0028 (size: 0x8)
    class UAnimSequenceBase* LeftFistInCombatMode;                                    // 0x0030 (size: 0x8)
    float LeftHandToIdleBlendAlpha;                                                   // 0x0038 (size: 0x4)

}; // Size: 0x40

struct FHeatSource
{
    FVector Location;                                                                 // 0x0000 (size: 0xC)
    FHeatSourceParameters Parameters;                                                 // 0x000C (size: 0x24)
    bool IsUsingFuelSimulation;                                                       // 0x0030 (size: 0x1)
    int32 TimesUpdatedWithoutMoving;                                                  // 0x0054 (size: 0x4)

}; // Size: 0xA8

struct FHeatSourceParameters
{
    float Temperature;                                                                // 0x0000 (size: 0x4)
    float TemperatureMultiplier;                                                      // 0x0004 (size: 0x4)
    float FuelMassRatio;                                                              // 0x0008 (size: 0x4)
    float Emissivity;                                                                 // 0x000C (size: 0x4)
    float DistanceScale;                                                              // 0x0010 (size: 0x4)
    float InnerRadiusTemperatureScale;                                                // 0x0014 (size: 0x4)
    float AdditionalTemperaturePerGramOfOxygen;                                       // 0x0018 (size: 0x4)
    float InnerRadius;                                                                // 0x001C (size: 0x4)
    float OuterRadius;                                                                // 0x0020 (size: 0x4)

}; // Size: 0x24

struct FHitByMeleeImpactSoundsInfo
{
    ECharacterImpactSourceSoundCategory ImpactSourceSoundCategory;                    // 0x0000 (size: 0x1)
    EHitSeverity HitSeverity;                                                         // 0x0001 (size: 0x1)
    EDetectHitCollisionType ImpactBodyPart;                                           // 0x0002 (size: 0x1)
    FVector ImpactPoint;                                                              // 0x0004 (size: 0xC)

}; // Size: 0x10

struct FHitEffects
{
    float SpeedThreshold;                                                             // 0x0000 (size: 0x4)
    class UParticleSystem* ParticleSystem;                                            // 0x0008 (size: 0x8)
    FVector ParticlesScale;                                                           // 0x0010 (size: 0xC)
    class UAkAudioEvent* AudioEvent;                                                  // 0x0020 (size: 0x8)
    TSubclassOf<class UMatineeCameraShake> CameraShake;                               // 0x0028 (size: 0x8)
    float CameraShakeScale;                                                           // 0x0030 (size: 0x4)

}; // Size: 0x38

struct FHitReactBodyPartDataItem
{
    class UAnimMontage* MontageToPlay;                                                // 0x0000 (size: 0x8)
    class UAnimMontage* FollowupMontage;                                              // 0x0008 (size: 0x8)
    float RegainControlDurationMultiplier;                                            // 0x0010 (size: 0x4)

}; // Size: 0x18

struct FHitReactDirectionData
{
    TArray<FHitReactBodyPartDataItem> FrontHit;                                       // 0x0000 (size: 0x10)
    TArray<FHitReactBodyPartDataItem> LeftHit;                                        // 0x0010 (size: 0x10)
    TArray<FHitReactBodyPartDataItem> BackHit;                                        // 0x0020 (size: 0x10)
    TArray<FHitReactBodyPartDataItem> RightHit;                                       // 0x0030 (size: 0x10)
    float RegainControlDurationMultiplier;                                            // 0x0040 (size: 0x4)

}; // Size: 0x48

struct FHitReactLandingData
{
    float MinImpactSpeedToReact;                                                      // 0x0000 (size: 0x4)
    class UAnimMontage* MontageToPlay;                                                // 0x0008 (size: 0x8)
    float RegainControlDurationMultiplier;                                            // 0x0010 (size: 0x4)
    bool CanEverGoToRagdoll;                                                          // 0x0014 (size: 0x1)
    float MinImpactSpeedForRagdoll;                                                   // 0x0018 (size: 0x4)
    float MinRagdollDuration;                                                         // 0x001C (size: 0x4)
    float MaxRagdollDuration;                                                         // 0x0020 (size: 0x4)
    float RagdollDurationPerSpeedUnit;                                                // 0x0024 (size: 0x4)

}; // Size: 0x28

struct FHitReactMagnitudeData
{
    FHitReactDirectionData SmallHit;                                                  // 0x0000 (size: 0x48)
    FHitReactDirectionData MediumHit;                                                 // 0x0048 (size: 0x48)
    FHitReactDirectionData LargeHit;                                                  // 0x0090 (size: 0x48)
    FHitReactDirectionData KnockoutHit;                                               // 0x00D8 (size: 0x48)

}; // Size: 0x120

struct FHitReactResult
{
    class UAnimMontage* MontageToPlay;                                                // 0x0000 (size: 0x8)
    class UAnimMontage* FollowupMontage;                                              // 0x0008 (size: 0x8)
    float RegainControlDurationMultiplier;                                            // 0x0010 (size: 0x4)

}; // Size: 0x18

struct FHordeParametersPresetPair
{
    class UEncounterManagerHordePreset* Preset;                                       // 0x0000 (size: 0x8)
    float Weight;                                                                     // 0x0008 (size: 0x4)

}; // Size: 0x10

struct FHoverClickButtonVisualInfo
{
    FLinearColor BackgroundColor;                                                     // 0x0000 (size: 0x10)
    FLinearColor BorderColor;                                                         // 0x0010 (size: 0x10)

}; // Size: 0x20

struct FHuntingBiomeDescription
{
    FTransform Transform;                                                             // 0x0000 (size: 0x30)
    float Radius;                                                                     // 0x0030 (size: 0x4)
    FHuntingBiomeParameters Parameters;                                               // 0x0038 (size: 0x38)

}; // Size: 0x70

struct FHuntingBiomeParameters
{
    class UBiomeData* BiomeData;                                                      // 0x0000 (size: 0x8)
    float AnimalSpawnChance;                                                          // 0x0008 (size: 0x4)
    float DaytimeSpawnMultiplier;                                                     // 0x000C (size: 0x10)
    float SpawnCheckCooldownMin;                                                      // 0x001C (size: 0x4)
    float SpawnCheckCooldownMax;                                                      // 0x0020 (size: 0x4)
    int8 MaxAnimalEncounters;                                                         // 0x0024 (size: 0x1)
    int8 MaxAnimalEncountersPerPlayer;                                                // 0x0025 (size: 0x1)
    int8 MaxPlayerTriggers;                                                           // 0x0026 (size: 0x1)
    bool PacksAllowed;                                                                // 0x0027 (size: 0x1)
    uint8 Priority;                                                                   // 0x0028 (size: 0x1)
    float AnimalSoundCooldownMin;                                                     // 0x002C (size: 0x4)
    float AnimalSoundCooldownMax;                                                     // 0x0030 (size: 0x4)
    float AnimalSoundPlayProbability;                                                 // 0x0034 (size: 0x4)

}; // Size: 0x38

struct FHuntingClueVisuals
{
    float Weight;                                                                     // 0x0000 (size: 0x4)
    class UStaticMesh* ClueStaticMesh;                                                // 0x0008 (size: 0x8)
    class UMaterialInstance* ClueStaticMeshMaterial;                                  // 0x0010 (size: 0x8)
    FTransform StaticMeshOverrideRelativeTransform;                                   // 0x0020 (size: 0x30)
    class UMaterialInstance* ClueDecalMaterials;                                      // 0x0050 (size: 0x8)
    FTransform ClueDecalOverrideRelativeTransform;                                    // 0x0060 (size: 0x30)
    bool ShouldOverrideBoxDimensions;                                                 // 0x0090 (size: 0x1)
    FVector ClueDecalOverrideBoxDimensions;                                           // 0x0094 (size: 0xC)

}; // Size: 0xA0

struct FIgnitableItemIgnitionRequirements
{
    TArray<class UFireSourceItemTag*> PossibleItemTags;                               // 0x0000 (size: 0x10)
    int32 Uses;                                                                       // 0x0010 (size: 0x4)
    float UsageWeight;                                                                // 0x0014 (size: 0x4)

}; // Size: 0x18

struct FImageAssetToLoad
{
    FGameplayTag Name;                                                                // 0x0000 (size: 0x8)
    FString FilePath;                                                                 // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FImpactEffectData
{
    class UParticleSystem* ParticleSystem;                                            // 0x0000 (size: 0x8)
    class UNiagaraSystem* NiagaraParticleSystem;                                      // 0x0008 (size: 0x8)
    class UMaterial* Decal;                                                           // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FInPlaceTurnAnimationInfo
{
    float Duration;                                                                   // 0x0000 (size: 0x4)
    float TurnSpeed;                                                                  // 0x0004 (size: 0x4)
    float AnimationPlayRate;                                                          // 0x0008 (size: 0x4)
    float BlendInDuration;                                                            // 0x000C (size: 0x4)
    float BlendOutDuration;                                                           // 0x0010 (size: 0x4)

}; // Size: 0x14

struct FInPlaceTurningData
{
    FInPlaceTurnAnimationInfo LAnimationInfo;                                         // 0x0000 (size: 0x14)
    FInPlaceTurnAnimationInfo RAnimationInfo;                                         // 0x0014 (size: 0x14)
    float BlendAlphaInterpolationSpeed;                                               // 0x0028 (size: 0x4)

}; // Size: 0x2C

struct FInputValue
{
    FName Name;                                                                       // 0x0000 (size: 0x8)

}; // Size: 0xC

struct FInstrumentEvent
{
}; // Size: 0x10

struct FInteractableDescription
{
    FString AnchorMeshPathStringRef;                                                  // 0x0000 (size: 0x10)
    int32 InstanceIndex;                                                              // 0x0010 (size: 0x4)
    FTransform FallbackTransform;                                                     // 0x0020 (size: 0x30)
    TSoftObjectPtr<UStaticMesh> VisibleMesh;                                          // 0x0050 (size: 0x28)

}; // Size: 0x80

struct FInteractionData
{
    bool ModifierPressed;                                                             // 0x0000 (size: 0x1)
    int64 IntegerData;                                                                // 0x0008 (size: 0x8)
    class UObject* PointerData;                                                       // 0x0010 (size: 0x8)
    bool BoolData;                                                                    // 0x0018 (size: 0x1)
    FText TextData;                                                                   // 0x0020 (size: 0x18)
    FVector InteractionLocation;                                                      // 0x0038 (size: 0xC)
    FVector InteractionNormal;                                                        // 0x0044 (size: 0xC)
    FVector VectorData;                                                               // 0x0050 (size: 0xC)
    int64 BaseElementId;                                                              // 0x0060 (size: 0x8)

}; // Size: 0x68

struct FInteractionQueryParameters
{
    FVector InteractionLocation;                                                      // 0x0000 (size: 0xC)
    FVector InteractionNormal;                                                        // 0x000C (size: 0xC)
    TWeakObjectPtr<class UPrimitiveComponent> Component;                              // 0x0018 (size: 0x8)
    int32 InstanceIndex;                                                              // 0x0020 (size: 0x4)

}; // Size: 0x40

struct FInteractionStruct
{
    EInteractionType interactionType;                                                 // 0x0000 (size: 0x1)
    FString InteractionCaption;                                                       // 0x0008 (size: 0x10)

}; // Size: 0x98

struct FInventoryContainer2DRepData
{
    TArray<FInventoryItemPositionPair> ItemsData;                                     // 0x0000 (size: 0x10)
    class UObject* Parent;                                                            // 0x0010 (size: 0x8)
    int32 SizeX;                                                                      // 0x0018 (size: 0x4)
    int32 SizeY;                                                                      // 0x001C (size: 0x4)

}; // Size: 0x20

struct FInventoryContainerClothesData
{
    TArray<FInventoryItemPositionPair> ItemsData;                                     // 0x0000 (size: 0x10)
    class UObject* Parent;                                                            // 0x0010 (size: 0x8)
    int32 RepCounter;                                                                 // 0x0018 (size: 0x4)

}; // Size: 0x20

struct FInventoryContainerHandsHolstersData
{
    TArray<FInventoryItemPositionPair> ItemsData;                                     // 0x0000 (size: 0x10)
    class UObject* Parent;                                                            // 0x0010 (size: 0x8)
    int32 RepCounter;                                                                 // 0x0018 (size: 0x4)

}; // Size: 0x20

struct FInventoryItemPositionPair
{
    FInventoryPositionDataRepHelper position;                                         // 0x0000 (size: 0x20)
    class UObject* Item;                                                              // 0x0020 (size: 0x8)

}; // Size: 0x28

struct FInventoryNodeWidgetData
{
    FName Slot;                                                                       // 0x0000 (size: 0x8)
    EInventoryNodeWidgetDataType Type;                                                // 0x0008 (size: 0x1)
    float NumberData;                                                                 // 0x000C (size: 0x4)
    int32 IntegerNumberData;                                                          // 0x0010 (size: 0x4)
    FText TextData;                                                                   // 0x0018 (size: 0x18)
    class UTexture2D* IconData;                                                       // 0x0030 (size: 0x8)
    ESlateVisibility VisibilityData;                                                  // 0x0038 (size: 0x1)
    bool IsAnimated;                                                                  // 0x0039 (size: 0x1)
    bool IsSaturated;                                                                 // 0x003A (size: 0x1)
    bool IsOpened;                                                                    // 0x003B (size: 0x1)
    float Opacity;                                                                    // 0x003C (size: 0x4)

}; // Size: 0x40

struct FInventoryPositionDataRepHelper
{
    UClass* _dataClass;                                                               // 0x0000 (size: 0x8)
    class UInventoryPositionData* _positionData;                                      // 0x0008 (size: 0x8)
    class UObject* _owner;                                                            // 0x0010 (size: 0x8)
    int32 _repKey;                                                                    // 0x0018 (size: 0x4)

}; // Size: 0x20

struct FInventoryStackData
{
    UClass* _stackClass;                                                              // 0x0000 (size: 0x8)
    float _approximateCount;                                                          // 0x0008 (size: 0x4)
    float _approximateMaxCount;                                                       // 0x000C (size: 0x4)
    float _weight;                                                                    // 0x0010 (size: 0x4)
    TArray<uint8> _data;                                                              // 0x0018 (size: 0x10)

}; // Size: 0x80

struct FInventoryStackMemberData
{
    int32 position;                                                                   // 0x0000 (size: 0x4)
    int32 Size;                                                                       // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FItemContainerRepData
{
    TArray<class UClass*> Locks;                                                      // 0x0000 (size: 0x10)
    TArray<int32> RemainingNeutralizationAttemptsPerLock;                             // 0x0010 (size: 0x10)

}; // Size: 0x20

struct FItemContainersArray
{
    TArray<class AItemContainer*> _itemContainers;                                    // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FItemContainersReplicationHelper
{
    TMap<class FString, class FItemContainerRepData> ItemContainerData;               // 0x0000 (size: 0x50)

}; // Size: 0x70

struct FItemFirstPersonUpperBodyAnimationsData
{
    class UAnimSequenceBase* StandIdle;                                               // 0x0000 (size: 0x8)
    class UBlendSpace1D* StandWalk;                                                   // 0x0008 (size: 0x8)
    class UBlendSpace1D* StandWalkLimping;                                            // 0x0010 (size: 0x8)
    class UBlendSpace1D* StandJog;                                                    // 0x0018 (size: 0x8)
    class UBlendSpace1D* StandJogLimping;                                             // 0x0020 (size: 0x8)
    class UAnimSequenceBase* StandRun;                                                // 0x0028 (size: 0x8)
    class UAnimSequenceBase* CrouchIdle;                                              // 0x0030 (size: 0x8)
    class UBlendSpace1D* CrouchWalk;                                                  // 0x0038 (size: 0x8)
    class UBlendSpace1D* CrouchWalkLimping;                                           // 0x0040 (size: 0x8)
    class UAnimSequenceBase* ProneIdle;                                               // 0x0048 (size: 0x8)

}; // Size: 0x50

struct FItemGeneralParametersTableRow : public FTableRowBase
{
    FText _caption;                                                                   // 0x0008 (size: 0x18)
    FText _description;                                                               // 0x0020 (size: 0x18)
    TSoftObjectPtr<UTexture2D> _outsideInventoryIcon;                                 // 0x0038 (size: 0x28)
    TArray<FCraftingIngredientInstance> _craftingIngredientInstances;                 // 0x0060 (size: 0x10)
    bool _isSubjectToAllowMinesAndTrapsSetting;                                       // 0x0070 (size: 0x1)
    EDeluxeVersion _requiredDLC;                                                      // 0x0071 (size: 0x1)

}; // Size: 0x78

struct FItemLocation
{
    bool Coastal;                                                                     // 0x0000 (size: 0x1)
    bool Continantal;                                                                 // 0x0001 (size: 0x1)
    bool Mountain;                                                                    // 0x0002 (size: 0x1)
    bool Urban;                                                                       // 0x0003 (size: 0x1)
    bool Rural;                                                                       // 0x0004 (size: 0x1)
    bool Industrial;                                                                  // 0x0005 (size: 0x1)
    bool Police;                                                                      // 0x0006 (size: 0x1)
    bool MilitaryBasic;                                                               // 0x0007 (size: 0x1)
    bool MilitaryMedium;                                                              // 0x0008 (size: 0x1)
    bool MilitaryAdvanced;                                                            // 0x0009 (size: 0x1)
    bool MilitaryWW2;                                                                 // 0x000A (size: 0x1)
    bool Sport;                                                                       // 0x000B (size: 0x1)
    bool Market;                                                                      // 0x000C (size: 0x1)
    bool GasStation;                                                                  // 0x000D (size: 0x1)
    bool Airfield;                                                                    // 0x000E (size: 0x1)

}; // Size: 0xF

struct FItemLootTreeNodeTableRow : public FGameplayTagTableRow
{
    EItemRarity Rarity;                                                               // 0x0020 (size: 0x1)
    TArray<TSoftClassPtr<UItemPostSpawnAction>> PostSpawnActions;                     // 0x0028 (size: 0x10)

}; // Size: 0x38

struct FItemMotionNoise
{
    class UAkAudioEvent* AudioEvent;                                                  // 0x0000 (size: 0x8)

}; // Size: 0x8

struct FItemObstructionTestCapsule
{
}; // Size: 0x50

struct FItemSpawnerData
{
    TArray<TSoftClassPtr<AItem>> ItemClasses;                                         // 0x0000 (size: 0x10)
    FGameplayTagContainer ItemSpawnTypes;                                             // 0x0010 (size: 0x20)
    bool AlwaysSpawn;                                                                 // 0x0030 (size: 0x1)
    float Probability;                                                                // 0x0034 (size: 0x4)
    bool UseItemZone;                                                                 // 0x0038 (size: 0x1)
    bool UseItemRarity;                                                               // 0x0039 (size: 0x1)
    bool UseItemSpawnGroup;                                                           // 0x003A (size: 0x1)
    float InitialDamage;                                                              // 0x003C (size: 0x4)
    float RandomizeDamage;                                                            // 0x0040 (size: 0x4)
    float InitialUsage;                                                               // 0x0044 (size: 0x4)
    float RandomizeUsage;                                                             // 0x0048 (size: 0x4)
    float InitialDirtiness;                                                           // 0x004C (size: 0x4)
    float RandomizeDirtiness;                                                         // 0x0050 (size: 0x4)
    int32 MinAmmoCount;                                                               // 0x0054 (size: 0x4)
    int32 MaxAmmoCount;                                                               // 0x0058 (size: 0x4)
    int32 MinCashAmount;                                                              // 0x005C (size: 0x4)
    int32 MaxCashAmount;                                                              // 0x0060 (size: 0x4)
    bool UseCollisionTraceToAdjustSpawnLocation;                                      // 0x0064 (size: 0x1)
    bool UseCollisionTraceToAdjustSpawnRotation;                                      // 0x0065 (size: 0x1)
    TSubclassOf<class UItemPostSpawnAction> PostItemsSpawnedActions;                  // 0x0068 (size: 0x8)

}; // Size: 0x70

struct FItemSpawnerDataBasedOnPreset
{
    TSubclassOf<class UItemSpawnerPreset> Preset;                                     // 0x0000 (size: 0x8)
    bool OverrideItemClasses;                                                         // 0x0008 (size: 0x1)
    bool OverrideItemSpawnTypes;                                                      // 0x0009 (size: 0x1)
    bool OverrideAlwaysSpawn;                                                         // 0x000A (size: 0x1)
    bool OverrideProbability;                                                         // 0x000B (size: 0x1)
    bool OverrideUseItemZone;                                                         // 0x000C (size: 0x1)
    bool OverrideUseItemRarity;                                                       // 0x000D (size: 0x1)
    bool OverrideUseItemSpawnGroup;                                                   // 0x000E (size: 0x1)
    bool OverrideInitialDamage;                                                       // 0x000F (size: 0x1)
    bool OverrideRandomizeDamage;                                                     // 0x0010 (size: 0x1)
    bool OverrideInitialUsage;                                                        // 0x0011 (size: 0x1)
    bool OverrideRandomizeUsage;                                                      // 0x0012 (size: 0x1)
    bool OverrideInitialDirtiness;                                                    // 0x0013 (size: 0x1)
    bool OverrideRandomizeDirtiness;                                                  // 0x0014 (size: 0x1)
    bool OverrideMinAmmoCount;                                                        // 0x0015 (size: 0x1)
    bool OverrideMaxAmmoCount;                                                        // 0x0016 (size: 0x1)
    bool OverrideMinCashAmount;                                                       // 0x0017 (size: 0x1)
    bool OverrideMaxCashAmount;                                                       // 0x0018 (size: 0x1)
    bool OverrideUseCollisionTraceToAdjustSpawnLocation;                              // 0x0019 (size: 0x1)
    bool OverrideUseCollisionTraceToAdjustSpawnRotation;                              // 0x001A (size: 0x1)
    bool OverridePostItemsSpawnedActions;                                             // 0x001B (size: 0x1)
    TArray<TSoftClassPtr<AItem>> ItemClasses;                                         // 0x0020 (size: 0x10)
    FGameplayTagContainer ItemSpawnTypes;                                             // 0x0030 (size: 0x20)
    bool AlwaysSpawn;                                                                 // 0x0050 (size: 0x1)
    float Probability;                                                                // 0x0054 (size: 0x4)
    bool UseItemZone;                                                                 // 0x0058 (size: 0x1)
    bool UseItemRarity;                                                               // 0x0059 (size: 0x1)
    bool UseItemSpawnGroup;                                                           // 0x005A (size: 0x1)
    float InitialDamage;                                                              // 0x005C (size: 0x4)
    float RandomizeDamage;                                                            // 0x0060 (size: 0x4)
    float InitialUsage;                                                               // 0x0064 (size: 0x4)
    float RandomizeUsage;                                                             // 0x0068 (size: 0x4)
    float InitialDirtiness;                                                           // 0x006C (size: 0x4)
    float RandomizeDirtiness;                                                         // 0x0070 (size: 0x4)
    int32 MinAmmoCount;                                                               // 0x0074 (size: 0x4)
    int32 MaxAmmoCount;                                                               // 0x0078 (size: 0x4)
    int32 MinCashAmount;                                                              // 0x007C (size: 0x4)
    int32 MaxCashAmount;                                                              // 0x0080 (size: 0x4)
    bool UseCollisionTraceToAdjustSpawnLocation;                                      // 0x0084 (size: 0x1)
    bool UseCollisionTraceToAdjustSpawnRotation;                                      // 0x0085 (size: 0x1)
    TSubclassOf<class UItemPostSpawnAction> PostItemsSpawnedActions;                  // 0x0088 (size: 0x8)

}; // Size: 0x90

struct FItemSpawnerMarker
{
    FTransform Transform;                                                             // 0x0000 (size: 0x30)
    FItemSpawnerDataBasedOnPreset Spawner;                                            // 0x0030 (size: 0x90)
    FItemSpawnerPresetWithOverrides SpawnerPreset;                                    // 0x00C0 (size: 0xB8)

}; // Size: 0x180

struct FItemSpawnerPresetWithOverrides
{
    TSubclassOf<class UItemSpawnerPreset2> Preset;                                    // 0x0000 (size: 0x8)
    bool OverrideNodes;                                                               // 0x0008 (size: 0x1)
    TArray<FItemSpawnerPreset_Node> Nodes;                                            // 0x0010 (size: 0x10)
    bool OverrideItems;                                                               // 0x0020 (size: 0x1)
    TArray<FItemSpawnerPreset_Item> Items;                                            // 0x0028 (size: 0x10)
    bool OverrideSubpresets;                                                          // 0x0038 (size: 0x1)
    TArray<FItemSpawnerPreset_Subpreset> Subpresets;                                  // 0x0040 (size: 0x10)
    bool OverrideFixedItems;                                                          // 0x0050 (size: 0x1)
    TArray<TSoftClassPtr<AItem>> FixedItems;                                          // 0x0058 (size: 0x10)
    bool OverrideAlwaysSpawn;                                                         // 0x0068 (size: 0x1)
    bool AlwaysSpawn;                                                                 // 0x0069 (size: 0x1)
    bool OverrideProbability;                                                         // 0x006A (size: 0x1)
    float Probability;                                                                // 0x006C (size: 0x4)
    bool OverrideQuantity;                                                            // 0x0070 (size: 0x1)
    FInt32Interval Quantity;                                                          // 0x0074 (size: 0x8)
    bool OverrideAllowDuplicates;                                                     // 0x007C (size: 0x1)
    bool AllowDuplicates;                                                             // 0x007D (size: 0x1)
    bool OverrideShouldFilterItemsByZone;                                             // 0x007E (size: 0x1)
    bool ShouldFilterItemsByZone;                                                     // 0x007F (size: 0x1)
    bool OverrideShouldApplyLocationSpecificDamageModifier;                           // 0x0080 (size: 0x1)
    bool ShouldApplyLocationSpecificDamageModifier;                                   // 0x0081 (size: 0x1)
    bool OverrideShouldApplyLocationSpecificProbabilityModifier;                      // 0x0082 (size: 0x1)
    bool ShouldApplyLocationSpecificProbabilityModifier;                              // 0x0083 (size: 0x1)
    bool OverrideInitialDamage;                                                       // 0x0084 (size: 0x1)
    float InitialDamage;                                                              // 0x0088 (size: 0x4)
    bool OverrideRandomDamage;                                                        // 0x008C (size: 0x1)
    float RandomDamage;                                                               // 0x0090 (size: 0x4)
    bool OverrideInitialUsage;                                                        // 0x0094 (size: 0x1)
    float InitialUsage;                                                               // 0x0098 (size: 0x4)
    bool OverrideRandomUsage;                                                         // 0x009C (size: 0x1)
    float RandomUsage;                                                                // 0x00A0 (size: 0x4)
    bool OverridePostSpawnActions;                                                    // 0x00A4 (size: 0x1)
    TArray<TSoftClassPtr<UItemPostSpawnAction>> PostSpawnActions;                     // 0x00A8 (size: 0x10)

}; // Size: 0xB8

struct FItemSpawnerPreset_Item
{
    TSoftClassPtr<AItem> Item;                                                        // 0x0000 (size: 0x28)
    EItemRarity Rarity;                                                               // 0x0028 (size: 0x1)

}; // Size: 0x30

struct FItemSpawnerPreset_Node
{
    FGameplayTagContainer Nodes;                                                      // 0x0000 (size: 0x20)
    EItemRarity Rarity;                                                               // 0x0030 (size: 0x1)

}; // Size: 0x38

struct FItemSpawnerPreset_Subpreset
{
    TSubclassOf<class UItemSpawnerPreset2> Preset;                                    // 0x0000 (size: 0x8)
    EItemRarity Rarity;                                                               // 0x0008 (size: 0x1)

}; // Size: 0x10

struct FItemSpawningCooldownGroupTableRow : public FTableRowBase
{
    FFloatInterval cooldown;                                                          // 0x0008 (size: 0x8)
    bool IsAffectedByLowerGroups;                                                     // 0x0010 (size: 0x1)

}; // Size: 0x18

struct FItemSpawningParametersTableRow : public FTableRowBase
{
    int32 MaxOccurrences;                                                             // 0x0008 (size: 0x4)
    FItemLocation AllowedLocations;                                                   // 0x000C (size: 0xF)
    FFloatInterval CooldownPerSquadMember;                                            // 0x001C (size: 0x8)
    FDataTableRowHandle CooldownGroup;                                                // 0x0028 (size: 0x10)
    bool IsSubjectToAllowTrapsConfig;                                                 // 0x0038 (size: 0x1)
    TArray<TSoftClassPtr<AItem>> Variations;                                          // 0x0040 (size: 0x10)
    bool ShouldOverrideInitialAndRandomUsage;                                         // 0x0050 (size: 0x1)
    float InitialUsageOverride;                                                       // 0x0054 (size: 0x4)
    float RandomUsageOverride;                                                        // 0x0058 (size: 0x4)
    FVector SpawnLocationOffset;                                                      // 0x005C (size: 0xC)
    FRotator SpawnRotationOffset;                                                     // 0x0068 (size: 0xC)
    float SpawnRotationRandomization;                                                 // 0x0074 (size: 0x4)

}; // Size: 0x78

struct FItemSpawningSettings
{
    float RelevantSpawnerGroupsUpdateInterval;                                        // 0x0000 (size: 0x4)
    float MinPlayerLocationDeltaToUpdateRelevantSpawnerGroups;                        // 0x0004 (size: 0x4)
    float SpawnerGroupsCullDistance;                                                  // 0x0008 (size: 0x4)
    float SpawnerExpirationTimeInMinutes;                                             // 0x000C (size: 0x4)
    float ExamineSpawnerExpirationTimeInMinutes;                                      // 0x0010 (size: 0x4)
    float SpawnerTasksProcessingInterval;                                             // 0x0014 (size: 0x4)
    float SpawnerTasksProcessingBudgetInMilliseconds;                                 // 0x0018 (size: 0x4)
    int32 MaxNumberOfSpawnerTasksPerUpdate;                                           // 0x001C (size: 0x4)
    bool ShouldDestroySpawnedItemsIfNoPlayersAround;                                  // 0x0020 (size: 0x1)
    float RarityRatio;                                                                // 0x0024 (size: 0x4)
    float SpawnerProbabilityMultiplier;                                               // 0x0028 (size: 0x4)
    float ExamineSpawnerProbabilityMultiplier;                                        // 0x002C (size: 0x4)
    float ItemHealthMultiplierWhenUnderwater;                                         // 0x0030 (size: 0x4)
    bool IgnoreSpawnerProbability;                                                    // 0x0034 (size: 0x1)
    bool IgnoreItemLimit;                                                             // 0x0035 (size: 0x1)
    bool IgnoreItemZone;                                                              // 0x0036 (size: 0x1)
    bool IgnoreItemRarity;                                                            // 0x0037 (size: 0x1)
    bool DebugDrawItemSpawnTransforms;                                                // 0x0038 (size: 0x1)
    float DebugDrawItemSpawnTransformsDuration;                                       // 0x003C (size: 0x4)

}; // Size: 0x40

struct FItemUnpackingSpawnedItem
{
    TSubclassOf<class AItem> ItemClass;                                               // 0x0000 (size: 0x8)
    EUnpackedItemCountType CountType;                                                 // 0x0008 (size: 0x1)
    int32 Count;                                                                      // 0x000C (size: 0x4)
    TSubclassOf<class UItemUnpackingSpawnMethod> CustomSpawnMethod;                   // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FItemsCraftingUISounds
{
    class UAkAudioEvent* CraftButtonClick;                                            // 0x0000 (size: 0x8)
    class UAkAudioEvent* AutoCraftButtonClick;                                        // 0x0008 (size: 0x8)
    class UAkAudioEvent* DetailsButtonClick;                                          // 0x0010 (size: 0x8)
    class UAkAudioEvent* BackButtonClick;                                             // 0x0018 (size: 0x8)

}; // Size: 0x20

struct FJournalUISounds
{
    class UAkAudioEvent* QuestEntryClick;                                             // 0x0000 (size: 0x8)
    class UAkAudioEvent* QuestEntryHover;                                             // 0x0008 (size: 0x8)
    class UAkAudioEvent* TrackQuest;                                                  // 0x0010 (size: 0x8)
    class UAkAudioEvent* UntrackQuest;                                                // 0x0018 (size: 0x8)
    class UAkAudioEvent* AbandonQuest;                                                // 0x0020 (size: 0x8)

}; // Size: 0x28

struct FLadderDetectionParams
{
    FVector RayOrigin;                                                                // 0x0000 (size: 0xC)
    FVector RayDirection;                                                             // 0x000C (size: 0xC)
    float MaxHorzDistanceToLadder;                                                    // 0x0018 (size: 0x4)
    float MaxRayToLadderAngle;                                                        // 0x001C (size: 0x4)

}; // Size: 0x20

struct FLadderInfoRepData
{
    FTransform LadderTransform;                                                       // 0x0000 (size: 0x30)
    FVector CapsuleBias;                                                              // 0x0030 (size: 0xC)
    FVector RootBoneOffset;                                                           // 0x003C (size: 0xC)
    float StepHeight;                                                                 // 0x0048 (size: 0x4)
    TEnumAsByte<EPhysicalSurface> PhysicalSurfaceForSounds;                           // 0x004C (size: 0x1)
    uint8 NumberOfSteps;                                                              // 0x004D (size: 0x1)

}; // Size: 0x50

struct FLadderMarker
{
    FTransform FirstStep;                                                             // 0x0000 (size: 0x30)
    FVector LastStep;                                                                 // 0x0030 (size: 0xC)
    FTransform Edge;                                                                  // 0x0040 (size: 0x30)
    FVector CapsuleBias;                                                              // 0x0070 (size: 0xC)
    float StepHeight;                                                                 // 0x007C (size: 0x4)
    float StepWidth;                                                                  // 0x0080 (size: 0x4)
    float HitDetectionExtraAboveLastStep;                                             // 0x0084 (size: 0x4)
    float HitDetectionExtraBelowFirstStep;                                            // 0x0088 (size: 0x4)
    float HitDetectionExtraOnTheSides;                                                // 0x008C (size: 0x4)
    bool HasEdge;                                                                     // 0x0090 (size: 0x1)
    bool IsNarrow;                                                                    // 0x0091 (size: 0x1)
    TEnumAsByte<EPhysicalSurface> PhysicalSurfaceForSounds;                           // 0x0092 (size: 0x1)

}; // Size: 0xA0

struct FLandingEffectDataPerPhysicalSurface
{
    FLandingEffectDataPerSeverity Light;                                              // 0x0000 (size: 0x10)
    FLandingEffectDataPerSeverity Medium;                                             // 0x0010 (size: 0x10)
    FLandingEffectDataPerSeverity Heavy;                                              // 0x0020 (size: 0x10)

}; // Size: 0x30

struct FLandingEffectDataPerSeverity
{
    class UParticleSystem* ParticleSystem;                                            // 0x0000 (size: 0x8)
    bool SpawnParticlesInDirectionOfVelocity;                                         // 0x0008 (size: 0x1)

}; // Size: 0x10

struct FLastDamageDealtInfo
{
}; // Size: 0x28

struct FLazyLoadedClassPtr
{
    TSoftClassPtr<UObject> Class;                                                     // 0x0000 (size: 0x28)
    UClass* _loadedClass;                                                             // 0x0028 (size: 0x8)

}; // Size: 0x30

struct FLazyLoadedObjectPtr
{
    TSoftObjectPtr<UObject> Object;                                                   // 0x0000 (size: 0x28)
    class UObject* _loadedObject;                                                     // 0x0028 (size: 0x8)

}; // Size: 0x30

struct FLedgeMantlingAnimationInfo
{
    FVector AnchorOffset;                                                             // 0x0000 (size: 0xC)
    class UAnimSequenceBase* AnchoringAnimation;                                      // 0x0010 (size: 0x8)
    float AnchoringAnimationTime;                                                     // 0x0018 (size: 0x4)
    float AnchoringDuration;                                                          // 0x001C (size: 0x4)
    class UAnimMontage* ClimbingMontage;                                              // 0x0020 (size: 0x8)
    float StaminaDrain;                                                               // 0x0028 (size: 0x4)
    float MinEdgeHeight;                                                              // 0x002C (size: 0x4)
    float MaxEdgeHeight;                                                              // 0x0030 (size: 0x4)
    float VaultDistance;                                                              // 0x0034 (size: 0x4)
    float MaxVaultLandHeightError;                                                    // 0x0038 (size: 0x4)

}; // Size: 0x40

struct FLegalTender
{
    int32 Amount;                                                                     // 0x0000 (size: 0x4)
    ECurrencyType Currency;                                                           // 0x0004 (size: 0x1)

}; // Size: 0x8

struct FLightsAttachmentSimulationData
{
    uint8 TurnedOnMask;                                                               // 0x0000 (size: 0x1)

}; // Size: 0x1

struct FLineTraceSocketPair
{
    FName TraceStart;                                                                 // 0x0000 (size: 0x8)
    FName TraceEnd;                                                                   // 0x0008 (size: 0x8)

}; // Size: 0x10

struct FLocalOffsetCurves
{
    class UCurveLinearColor* YawIdle;                                                 // 0x0000 (size: 0x8)
    class UCurveLinearColor* YawMoving;                                               // 0x0008 (size: 0x8)
    class UCurveLinearColor* PitchIdle;                                               // 0x0010 (size: 0x8)
    class UCurveLinearColor* PitchMoving;                                             // 0x0018 (size: 0x8)

}; // Size: 0x20

struct FMainPointSnappedUtilities
{
    TArray<FEntityId> _repSnappedKey;                                                 // 0x00A0 (size: 0x10)
    TArray<FEntityId> _repSnappedValue;                                               // 0x00B0 (size: 0x10)

}; // Size: 0xC8

struct FManualEnhancedImageTextInformation
{
    FVector2D DesiredLocation;                                                        // 0x0000 (size: 0x8)
    float DesiredWidth;                                                               // 0x0008 (size: 0x4)
    FText Text;                                                                       // 0x0010 (size: 0x18)

}; // Size: 0x28

struct FManualUISounds
{
    class UAkAudioEvent* CategoryCollapseExpandToggleClick;                           // 0x0000 (size: 0x8)
    class UAkAudioEvent* CodexEntryClick;                                             // 0x0008 (size: 0x8)
    class UAkAudioEvent* TaskEntryClick;                                              // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FMapHUDDroneObject : public FMapHUDObject
{
    class UTexture* _droneDirectionTexture;                                           // 0x0018 (size: 0x8)
    class UTexture* _dronePositionTexture;                                            // 0x0020 (size: 0x8)
    class UTexture* _dronePingAnimationTexture;                                       // 0x0028 (size: 0x8)

}; // Size: 0x38

struct FMapHUDFlagsObject : public FMapHUDObject
{
    class UTexture* _flagPositionOuterRingTexture;                                    // 0x0018 (size: 0x8)
    FLinearColor _flagOuterRingColor;                                                 // 0x0020 (size: 0x10)
    FLinearColor _flagHighlightOuterRingColor;                                        // 0x0030 (size: 0x10)
    class UTexture* _flagPositionInnerCircleTexture;                                  // 0x0040 (size: 0x8)
    FLinearColor _flagInnerCircleColor;                                               // 0x0048 (size: 0x10)
    FLinearColor _flagHighlightInnerCircleColor;                                      // 0x0058 (size: 0x10)
    class UFont* _flagFont;                                                           // 0x0068 (size: 0x8)
    FLinearColor _flagNameHighlightColor;                                             // 0x0070 (size: 0x10)
    FLinearColor _flagNameHighlightOutlineColor;                                      // 0x0080 (size: 0x10)
    FLinearColor _flagNameColor;                                                      // 0x0090 (size: 0x10)
    FLinearColor _flagNameOutlineColor;                                               // 0x00A0 (size: 0x10)
    FVector2D _flagPositionTextureSize;                                               // 0x00B0 (size: 0x8)
    int32 _flagTextStackOffset;                                                       // 0x00B8 (size: 0x4)

}; // Size: 0xC0

struct FMapHUDHomeLocationObject : public FMapHUDObject
{
    class UFont* _font;                                                               // 0x0018 (size: 0x8)

}; // Size: 0x48

struct FMapHUDObject
{
    int32 _priority;                                                                  // 0x0008 (size: 0x4)
    bool _showText;                                                                   // 0x000C (size: 0x1)
    bool _showMarkers;                                                                // 0x000D (size: 0x1)

}; // Size: 0x18

struct FMapHUDOtherPlayersObject : public FMapHUDObject
{
    class UTexture* _otherPlayerPositionOuterRingTexture;                             // 0x0018 (size: 0x8)
    FLinearColor _otherPlayerOuterRingColor;                                          // 0x0020 (size: 0x10)
    FLinearColor _otherPlayerHighlightOuterRingColor;                                 // 0x0030 (size: 0x10)
    class UTexture* _otherPlayerPositionInnerCicleTexture;                            // 0x0040 (size: 0x8)
    FLinearColor _otherPlayerInnerCircleColor;                                        // 0x0048 (size: 0x10)
    FLinearColor _otherPlayerHighlightInnerCircleColor;                               // 0x0058 (size: 0x10)
    class UFont* _otherPlayerFont;                                                    // 0x0068 (size: 0x8)
    FLinearColor _otherPlayerNameHighlightColor;                                      // 0x0070 (size: 0x10)
    FLinearColor _otherPlayerNameHighlightOutlineColor;                               // 0x0080 (size: 0x10)
    FLinearColor _otherPlayerNameColor;                                               // 0x0090 (size: 0x10)
    FLinearColor _otherPlayerNameOutlineColor;                                        // 0x00A0 (size: 0x10)
    FVector2D _prisonerPositionTextureSize;                                           // 0x00B0 (size: 0x8)
    int32 _otherPlayerTextStackOffset;                                                // 0x00B8 (size: 0x4)

}; // Size: 0xC0

struct FMapHUDPrisonerObject : public FMapHUDObject
{
    FVector2D _prisonerPositionTextureSize;                                           // 0x0018 (size: 0x8)
    class UTexture* _myPrisonerPositionTexture;                                       // 0x0020 (size: 0x8)
    class UTexture* _prisonerPingAnimationTexture;                                    // 0x0028 (size: 0x8)
    float _prisonerPingSizeMultiplier;                                                // 0x0030 (size: 0x4)

}; // Size: 0x40

struct FMapHUDQuestObject : public FMapHUDObject
{
    class UTexture* _questPositionOuterRingTexture;                                   // 0x0018 (size: 0x8)
    FLinearColor _questOuterRingColor;                                                // 0x0020 (size: 0x10)
    class UTexture* _questPositionInnerCircleTexture;                                 // 0x0030 (size: 0x8)
    FLinearColor _questInnerCircleColor;                                              // 0x0038 (size: 0x10)
    class UFont* _questFont;                                                          // 0x0048 (size: 0x8)
    FLinearColor _questNameColor;                                                     // 0x0050 (size: 0x10)
    FLinearColor _questNameOutlineColor;                                              // 0x0060 (size: 0x10)
    FVector2D _questPositionTextureSize;                                              // 0x0070 (size: 0x8)
    int32 _questTextStackOffset;                                                      // 0x0078 (size: 0x4)

}; // Size: 0x80

struct FMapHUDVehiclesObject : public FMapHUDObject
{
    class UTexture* _vehiclePositionOuterRingTexture;                                 // 0x0018 (size: 0x8)
    FLinearColor _vehicleOuterRingColor;                                              // 0x0020 (size: 0x10)
    FLinearColor _vehicleHighlightOuterRingColor;                                     // 0x0030 (size: 0x10)
    class UTexture* _vehiclePositionInnerCircleTexture;                               // 0x0040 (size: 0x8)
    FLinearColor _vehicleInnerCircleColor;                                            // 0x0048 (size: 0x10)
    FLinearColor _vehicleHighlightInnerCircleColor;                                   // 0x0058 (size: 0x10)
    class UFont* _vehicleFont;                                                        // 0x0068 (size: 0x8)
    FLinearColor _vehicleNameHighlightColor;                                          // 0x0070 (size: 0x10)
    FLinearColor _vehicleNameHighlightOutlineColor;                                   // 0x0080 (size: 0x10)
    FLinearColor _vehicleNameColor;                                                   // 0x0090 (size: 0x10)
    FLinearColor _vehicleNameOutlineColor;                                            // 0x00A0 (size: 0x10)
    FVector2D _vehiclePositionTextureSize;                                            // 0x00B0 (size: 0x8)
    int32 _vehicleTextStackOffset;                                                    // 0x00B8 (size: 0x4)

}; // Size: 0xC0

struct FMapHUDWorldEventsObject : public FMapHUDObject
{
}; // Size: 0x18

struct FMapLimits
{
    FMapLimits_Wall NorthWall;                                                        // 0x0000 (size: 0x30)
    FMapLimits_Wall EastWall;                                                         // 0x0030 (size: 0x30)
    float SouthLimit;                                                                 // 0x0060 (size: 0x4)
    float WestLimit;                                                                  // 0x0064 (size: 0x4)

}; // Size: 0x68

struct FMapLimits_Wall
{
    FBox Bounds;                                                                      // 0x0000 (size: 0x1C)
    TArray<FMapLimits_WallSegment> Segments;                                          // 0x0020 (size: 0x10)

}; // Size: 0x30

struct FMapLimits_WallSegment
{
    float Key;                                                                        // 0x0000 (size: 0x4)
    float Value;                                                                      // 0x0004 (size: 0x4)
    float TerrainZ;                                                                   // 0x0008 (size: 0x4)
    float MaxZ;                                                                       // 0x000C (size: 0x4)

}; // Size: 0x10

struct FMapLocationMarker
{
    FVector Location;                                                                 // 0x0000 (size: 0xC)
    float SizeFactor;                                                                 // 0x000C (size: 0x4)

}; // Size: 0x10

struct FMedicalSkillParametersPerSkillLevel
{
    float ManualBCUUpgradeSuccessChance;                                              // 0x0000 (size: 0x4)
    float ExtractBloodSampleDurationMultiplier;                                       // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FMeleeAction
{
    EMeleeActionType ActionType;                                                      // 0x0000 (size: 0x1)
    TWeakObjectPtr<class UAnimMontage> Montage;                                       // 0x0004 (size: 0x8)
    float StartDelay;                                                                 // 0x000C (size: 0x4)
    float PlayRate;                                                                   // 0x0010 (size: 0x4)
    float BlockDuration;                                                              // 0x0014 (size: 0x4)
    float OrientToTargetSpeedFactor;                                                  // 0x0018 (size: 0x4)
    float RegainControlDurationModifier;                                              // 0x001C (size: 0x4)

}; // Size: 0x20

struct FMeleeAttack
{
}; // Size: 0x20

struct FMeleeAttackCapsule
{
    TWeakObjectPtr<class AActor> AttachParent;                                        // 0x0000 (size: 0x8)
    FGameplayTag Attachment;                                                          // 0x0008 (size: 0x8)
    FTransform RelativeTransform;                                                     // 0x0010 (size: 0x30)
    float UnscaledRadius;                                                             // 0x0040 (size: 0x4)
    float UnscaledHalfHeight;                                                         // 0x0044 (size: 0x4)
    FMeleeWeaponDesc WeaponDesc;                                                      // 0x0048 (size: 0x38)

}; // Size: 0x80

struct FMeleeAttackCapsuleHitInfo
{
    FMeleeAttackCapsule MeleeAttackCapsule;                                           // 0x0000 (size: 0x80)
    FHitResult HitResult;                                                             // 0x0080 (size: 0x98)
    EHitSeverity HitSeverity;                                                         // 0x0118 (size: 0x1)
    EAttackType AttackType;                                                           // 0x0119 (size: 0x1)
    FVector_NetQuantize100 AttackerLocation;                                          // 0x011C (size: 0xC)
    FVector_NetQuantize100 VictimLocation;                                            // 0x0128 (size: 0xC)
    FGameplayTagContainer Tags;                                                       // 0x0138 (size: 0x20)

}; // Size: 0x160

struct FMeleeDodge
{
}; // Size: 0x10

struct FMeleeHitDetectionMarker
{
    float Time;                                                                       // 0x0000 (size: 0x4)
    FTransform Transform;                                                             // 0x0010 (size: 0x30)
    FTransform RootMotion;                                                            // 0x0040 (size: 0x30)
    float DamageMultiplier;                                                           // 0x0070 (size: 0x4)
    float SelectionWeight;                                                            // 0x0074 (size: 0x4)

}; // Size: 0x80

struct FMeleeSkillAnimations
{
    class UAnimSequenceBase* PrimaryIdleAnimationTP;                                  // 0x0000 (size: 0x8)
    class UAnimSequenceBase* PrimaryIdleAnimationFP;                                  // 0x0008 (size: 0x8)
    class UAnimSequenceBase* TiredIdleAnimationTP;                                    // 0x0010 (size: 0x8)
    class UAnimSequenceBase* TiredIdleAnimationFP;                                    // 0x0018 (size: 0x8)
    class UAnimSequenceBase* WalkingIdleAnimationTP;                                  // 0x0020 (size: 0x8)
    class UAnimSequenceBase* WalkingIdleAnimationFP;                                  // 0x0028 (size: 0x8)
    class UAnimSequenceBase* BlockIdleAnimationTP;                                    // 0x0030 (size: 0x8)
    class UAnimSequenceBase* BlockIdleAnimationFP;                                    // 0x0038 (size: 0x8)
    class UBlendSpace* AimOffsetBlendSpaceTP;                                         // 0x0040 (size: 0x8)
    class UBlendSpace* AimOffsetBlendSpaceFP;                                         // 0x0048 (size: 0x8)
    class UAnimMontage* EnterCombatModeMontage;                                       // 0x0050 (size: 0x8)
    class UAnimMontage* LeaveCombatModeMontage;                                       // 0x0058 (size: 0x8)
    TArray<class UAnimSequenceBase*> InactivityIdleAnimations;                        // 0x0060 (size: 0x10)
    float IdleToBlockBlendDuration;                                                   // 0x0070 (size: 0x4)
    float BlockToIdleBlendDuration;                                                   // 0x0074 (size: 0x4)
    TArray<FMeleeSkillAttack> Attacks;                                                // 0x0078 (size: 0x10)
    TArray<FMeleeSkillDodge> Dodges;                                                  // 0x0088 (size: 0x10)

}; // Size: 0x98

struct FMeleeSkillAttack
{
    FGameplayTagContainer AttackTypes;                                                // 0x0000 (size: 0x20)
    FGameplayTagContainer IgnoreReason;                                               // 0x0020 (size: 0x20)
    class UAnimMontage* Montage;                                                      // 0x0040 (size: 0x8)
    class UAnimMontage* MontageFP;                                                    // 0x0048 (size: 0x8)
    FFloatInterval PitchRange;                                                        // 0x0050 (size: 0x8)
    float MaxDistance;                                                                // 0x0058 (size: 0x4)
    float MinDistance;                                                                // 0x005C (size: 0x4)
    float MinStamina;                                                                 // 0x0060 (size: 0x4)
    float OrientToTargetSpeedFactor;                                                  // 0x0064 (size: 0x4)
    float RegainControlDurationMultiplier;                                            // 0x0068 (size: 0x4)
    float StaminaDrainMultiplier;                                                     // 0x006C (size: 0x4)
    bool CanBeUsedAsInitialAttack;                                                    // 0x0070 (size: 0x1)
    bool CanBeUsedToCloseLargeDistanceToTarget;                                       // 0x0071 (size: 0x1)
    bool Solo;                                                                        // 0x0072 (size: 0x1)
    bool Mute;                                                                        // 0x0073 (size: 0x1)
    bool IsAlwaysCandidate;                                                           // 0x0074 (size: 0x1)

}; // Size: 0x78

struct FMeleeSkillDodge
{
    EDodgeDirectionType DodgeDirectionType;                                           // 0x0000 (size: 0x1)
    class UAnimMontage* Montage;                                                      // 0x0008 (size: 0x8)
    float RegainControlDurationMultiplier;                                            // 0x0010 (size: 0x4)

}; // Size: 0x18

struct FMeleeSkillExperienceAwards
{
    float PointsForHit;                                                               // 0x0000 (size: 0x4)
    float PointsForKill;                                                              // 0x0004 (size: 0x4)
    float SubsequentHitMultiplier;                                                    // 0x0008 (size: 0x4)
    float SkillLevelBonusPoints;                                                      // 0x000C (size: 0x4)

}; // Size: 0x10

struct FMeleeSkillParametersPerSkillLevel
{
    FExperienceDependentFloat StartDelay;                                             // 0x0000 (size: 0x8)
    FExperienceDependentFloat StartDelayPenaltyPerStrengthShortage;                   // 0x0008 (size: 0x8)
    FExperienceDependentFloat AnimationPlayRateModifier;                              // 0x0010 (size: 0x8)
    FExperienceDependentFloat AnimationPlayRatePenaltyPerStrengthShortage;            // 0x0018 (size: 0x8)
    FExperienceDependentFloat RegainControlDurationModifier;                          // 0x0020 (size: 0x8)
    FExperienceDependentFloat StaminaDrain;                                           // 0x0028 (size: 0x8)
    FExperienceDependentFloat StaminaDrainPenaltyPerStrengthShortage;                 // 0x0030 (size: 0x8)
    FExperienceDependentFloat StaminaRecoveryDelay;                                   // 0x0038 (size: 0x8)
    FExperienceDependentFloat StaminaRecoveryDuration;                                // 0x0040 (size: 0x8)
    FExperienceDependentFloat StaminaInfluenceWindowMin;                              // 0x0048 (size: 0x8)
    FExperienceDependentFloat StaminaInfluenceWindowMax;                              // 0x0050 (size: 0x8)
    FExperienceDependentFloat StaminaInfluenceWindowLinearity;                        // 0x0058 (size: 0x8)
    FExperienceDependentFloat StartDelayWhenExhausted;                                // 0x0060 (size: 0x8)
    FExperienceDependentFloat AnimationPlayRateModifierWhenExhausted;                 // 0x0068 (size: 0x8)
    FExperienceDependentFloat RegainControlDurationModifierWhenExhausted;             // 0x0070 (size: 0x8)
    FExperienceDependentFloat StaminaMultiplierPerExcessGearWeight;                   // 0x0078 (size: 0x8)
    FExperienceDependentFloat ComboCooldownDuration;                                  // 0x0080 (size: 0x8)

}; // Size: 0x88

struct FMeleeWeaponDesc
{
    float Damage;                                                                     // 0x0000 (size: 0x4)
    float DamageInGameEvent;                                                          // 0x0004 (size: 0x4)
    FTargetTypeDamageMultiplier TargetTypeMultiplier;                                 // 0x0008 (size: 0x10)
    float Energy;                                                                     // 0x0018 (size: 0x4)
    float SharpnessSlash;                                                             // 0x001C (size: 0x4)
    float SharpnessPierce;                                                            // 0x0020 (size: 0x4)
    int32 HitSeverityChange;                                                          // 0x0024 (size: 0x4)
    ECharacterImpactSourceSoundCategory ImpactSoundCategory;                          // 0x0028 (size: 0x1)
    class UProjectileImpactEffects* ImpactEffects;                                    // 0x0030 (size: 0x8)

}; // Size: 0x38

struct FMeshHitZone
{
}; // Size: 0x1C

struct FMeshInstanceId
{
}; // Size: 0x8

struct FMeshInstancesRestoreOptions
{
    float RestoreInterval;                                                            // 0x0000 (size: 0x4)

}; // Size: 0x4

struct FMeshMaterialPair
{
    class USkeletalMesh* SkeletalMesh;                                                // 0x0000 (size: 0x8)
    class UMaterialInstance* EquippedMaterialOverride;                                // 0x0008 (size: 0x8)

}; // Size: 0x10

struct FMessageStruct
{
    FText Text;                                                                       // 0x0000 (size: 0x18)
    float Duration;                                                                   // 0x0018 (size: 0x4)
    FLinearColor Color;                                                               // 0x001C (size: 0x10)

}; // Size: 0x30

struct FMetabolismAPBFontStyle
{
    class UFont* Font;                                                                // 0x0000 (size: 0x8)
    int32 FontSize;                                                                   // 0x0008 (size: 0x4)
    FMargin TitlePadding;                                                             // 0x000C (size: 0x10)
    FMargin ValuePadding;                                                             // 0x001C (size: 0x10)
    TEnumAsByte<EVerticalAlignment> TitleVerticalAlignment;                           // 0x002C (size: 0x1)
    TEnumAsByte<EHorizontalAlignment> TitleHorizontalAlignment;                       // 0x002D (size: 0x1)
    FSlateChildSize TitleSize;                                                        // 0x0030 (size: 0x8)
    TEnumAsByte<EVerticalAlignment> ValueVerticalAlignment;                           // 0x0038 (size: 0x1)
    TEnumAsByte<EHorizontalAlignment> ValueHorizontalAlignment;                       // 0x0039 (size: 0x1)
    FSlateChildSize ValueSize;                                                        // 0x003C (size: 0x8)

}; // Size: 0x48

struct FMetabolismConfiguration
{
    float InitialAbsorbedEnergyRatio;                                                 // 0x0000 (size: 0x4)
    float InitialAbsorbedWaterRatio;                                                  // 0x0004 (size: 0x4)
    float InitialAbsorbedVitaminsRatio;                                               // 0x0008 (size: 0x4)
    float InitialAbsorbedMineralsRatio;                                               // 0x000C (size: 0x4)
    float InitialColonFullness;                                                       // 0x0010 (size: 0x4)
    float InitialBladderFullness;                                                     // 0x0014 (size: 0x4)
    float MaxStomachVolume;                                                           // 0x0018 (size: 0x4)
    float MaxIntestineVolume;                                                         // 0x001C (size: 0x4)
    float MaxColonVolume;                                                             // 0x0020 (size: 0x4)
    float MaxBladderVolume;                                                           // 0x0024 (size: 0x4)
    float EnergyAbsorptionCapacityMultiplier;                                         // 0x0028 (size: 0x4)
    float WaterAbsorptionCapacityMultiplier;                                          // 0x002C (size: 0x4)
    float AlcoholAbsorptionBaseCapacity;                                              // 0x0030 (size: 0x4)
    float AbsorbedAlcoholDiscardRate;                                                 // 0x0034 (size: 0x4)
    float MaxEnergyToRecoverFromFatPerHour;                                           // 0x0038 (size: 0x4)
    float MaxAbsorbedEnergyExcessToStoreAsFatPerHour;                                 // 0x003C (size: 0x4)
    FSubstancesData NutrientsAbsorptionRateModifier;                                  // 0x0040 (size: 0xD0)
    float MinSubstancesToAbsorbRatio;                                                 // 0x0110 (size: 0x4)
    FSubstancesData AbsorbedNonEnergyProvidingNutrientsExcessDiscardRateMultiplier;   // 0x0118 (size: 0xD0)
    FSubstancesData AdditionalRequiredWaterPerNutrientAbsorbed;                       // 0x01E8 (size: 0xD0)
    float IntestineToColonFecesTransferRate;                                          // 0x02B8 (size: 0x4)
    FSubstancesData NutrientAbsorptionWasteFecesRatios;                               // 0x02C0 (size: 0xD0)
    FSubstancesData NutrientAbsorptionWasteUrineRatios;                               // 0x0390 (size: 0xD0)

}; // Size: 0x460

struct FMetabolismRadialAttributeProgressBarColor
{
    FLinearColor PositiveColor;                                                       // 0x0000 (size: 0x10)
    FLinearColor NeutralColor;                                                        // 0x0010 (size: 0x10)
    FLinearColor NegativeColor;                                                       // 0x0020 (size: 0x10)

}; // Size: 0x30

struct FMetabolismRadialProgressBarColorScheme
{
    FLinearColor BackgroundColor;                                                     // 0x0000 (size: 0x10)
    FLinearColor PrimaryBarColor;                                                     // 0x0010 (size: 0x10)
    FLinearColor PrimaryBarGlowColor;                                                 // 0x0020 (size: 0x10)
    FLinearColor SecondaryBarColor;                                                   // 0x0030 (size: 0x10)
    FLinearColor SecondaryBarGlowColor;                                               // 0x0040 (size: 0x10)
    FLinearColor FontColor;                                                           // 0x0050 (size: 0x10)
    FLinearColor FontInnerGlowColor;                                                  // 0x0060 (size: 0x10)
    FLinearColor FontOuterGlowColor;                                                  // 0x0070 (size: 0x10)

}; // Size: 0x80

struct FMetabolismRadialProgressBarFontSettings
{
    int32 FontSize;                                                                   // 0x0000 (size: 0x4)
    FMargin FontPadding;                                                              // 0x0004 (size: 0x10)

}; // Size: 0x14

struct FMetabolismSPBColorScheme
{
    FLinearColor BaseColor;                                                           // 0x0000 (size: 0x10)
    FLinearColor FillColorBottom;                                                     // 0x0010 (size: 0x10)
    FLinearColor FillColorTop;                                                        // 0x0020 (size: 0x10)
    FLinearColor OutlineColorBottom;                                                  // 0x0030 (size: 0x10)
    FLinearColor OutlineColorTop;                                                     // 0x0040 (size: 0x10)

}; // Size: 0x50

struct FMiniGameEndParams
{
}; // Size: 0x4

struct FMinigameToolRequestData
{
}; // Size: 0x18

struct FModularElementSnapMarker
{
    FName Name;                                                                       // 0x0000 (size: 0x8)
    bool CopyTransformFromSocket;                                                     // 0x0008 (size: 0x1)
    FTransform Transform;                                                             // 0x0010 (size: 0x30)
    FModularElementSnapMarkerSocket Socket;                                           // 0x0040 (size: 0x18)
    bool InfluenceStability;                                                          // 0x0058 (size: 0x1)
    float Stability;                                                                  // 0x005C (size: 0x4)
    bool InfluenceMarkerGroup;                                                        // 0x0060 (size: 0x1)
    int32 MarkerGroupIndex;                                                           // 0x0064 (size: 0x4)
    bool RequiresServerSetting;                                                       // 0x0068 (size: 0x1)
    FName RequiredServerSettingName;                                                  // 0x006C (size: 0x8)

}; // Size: 0x80

struct FModularElementSnapMarkerSocket
{
    TSubclassOf<class UModularBaseBuildingSocketType> Type;                           // 0x0000 (size: 0x8)
    TSubclassOf<class UModularBaseBuildingSocketType> InType;                         // 0x0008 (size: 0x8)
    TSubclassOf<class UModularBaseBuildingSocketType> OutType;                        // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FModularTooltipSectionData
{
    TArray<class UModularTooltipElementData*> Elements;                               // 0x0018 (size: 0x10)

}; // Size: 0x28

struct FMovableCollisionFieldMoveInfo
{
    float Duration;                                                                   // 0x0000 (size: 0x4)
    EMovableCollisionFieldMovementCurveType curveType;                                // 0x0004 (size: 0x1)

}; // Size: 0x8

struct FMovableCollisionFieldState
{
    bool IsTurnedOn;                                                                  // 0x0000 (size: 0x1)
    uint8 PackedCurrentPercentage;                                                    // 0x0001 (size: 0x1)
    EMovableCollisionFieldMoveType MoveType;                                          // 0x0002 (size: 0x1)

}; // Size: 0x3

struct FMovableMeshComponentData
{
}; // Size: 0x14

struct FMovingSplineSoundData
{
    class UAkAudioEvent* StartAudioEvent;                                             // 0x0000 (size: 0x8)
    class UAkAudioEvent* StopAudioEvent;                                              // 0x0008 (size: 0x8)
    float LifetimeAfterStopping;                                                      // 0x0010 (size: 0x4)
    float AudioMovementSpeed;                                                         // 0x0014 (size: 0x4)

}; // Size: 0x18

struct FMultiplierByClass
{
    UClass* ObjectClass;                                                              // 0x0000 (size: 0x8)
    float Multiplier;                                                                 // 0x0008 (size: 0x4)

}; // Size: 0x10

struct FMultistageRandomRoll
{
    FFloatInterval _valueRange;                                                       // 0x0000 (size: 0x8)
    bool _shouldWrapValue;                                                            // 0x0008 (size: 0x1)
    TArray<FRandomRollStage> _baseValueRollStages;                                    // 0x0010 (size: 0x10)
    bool _isVarianceEnabled;                                                          // 0x0020 (size: 0x1)
    FFloatInterval _varianceRollInterval;                                             // 0x0024 (size: 0x8)
    FFloatInterval _varianceTargetInterval;                                           // 0x002C (size: 0x8)
    float _varianceTargetInterpSpeed;                                                 // 0x0034 (size: 0x4)
    int32 _baseValueStageToSetWhenForcingBaseValue;                                   // 0x0064 (size: 0x4)

}; // Size: 0x68

struct FMusicPlayerPlaybackOptions
{
    TArray<FString> MusicPlaylist;                                                    // 0x0000 (size: 0x10)
    int32 CurrentPlaylistIndex;                                                       // 0x0010 (size: 0x4)
    bool PlaybackPaused;                                                              // 0x0014 (size: 0x1)
    float CurrentPlaybackVolume;                                                      // 0x0018 (size: 0x4)
    bool ShouldRepeatCurrent;                                                         // 0x001C (size: 0x1)
    bool ShouldLoop;                                                                  // 0x001D (size: 0x1)
    bool ShouldShuffle;                                                               // 0x001E (size: 0x1)
    bool ShouldPlayRadio;                                                             // 0x001F (size: 0x1)
    bool IsTurnedOn;                                                                  // 0x0020 (size: 0x1)

}; // Size: 0x28

struct FNPCGuardAttackDescription
{
    ENPCGuardAttackType Type;                                                         // 0x0000 (size: 0x1)
    class UAnimMontage* Montage;                                                      // 0x0008 (size: 0x8)
    float cooldown;                                                                   // 0x0010 (size: 0x4)

}; // Size: 0x18

struct FNetPackedProjectileDamageEvent : public FScumPointDamageEvent
{
    FVector_NetQuantize100 DealerLocation;                                            // 0x00C0 (size: 0xC)
    FVector_NetQuantize100 TargetLocation;                                            // 0x00CC (size: 0xC)
    float ProjectileMass;                                                             // 0x00D8 (size: 0x4)
    float ProjectileSpeed;                                                            // 0x00DC (size: 0x4)
    float ProjectileMuzzleVelocity;                                                   // 0x00E0 (size: 0x4)
    uint8 SharpnessHardnessPacked;                                                    // 0x00E4 (size: 0x1)
    uint8 ArmorPiercingFactorPacked;                                                  // 0x00E5 (size: 0x1)
    uint8 EventDataPacked;                                                            // 0x00E6 (size: 0x1)
    TSubclassOf<class AActor> WeaponClass;                                            // 0x00E8 (size: 0x8)
    class UObject* DamageDealer;                                                      // 0x00F0 (size: 0x8)
    class UVehicleAttachment* DamageReceiverVehicleAttachment;                        // 0x00F8 (size: 0x8)
    float DistanceTravelled;                                                          // 0x0100 (size: 0x4)
    float ExperienceMultiplier;                                                       // 0x0104 (size: 0x4)
    bool IsVehicleCollision;                                                          // 0x0108 (size: 0x1)
    int64 BaseElementId;                                                              // 0x0110 (size: 0x8)
    class UProjectileImpactEffects* overrideProjectileImpactEffects;                  // 0x0118 (size: 0x8)

}; // Size: 0x120

struct FNotificationAndDelay
{
    class UNotificationDescription* Notification;                                     // 0x0000 (size: 0x8)
    float Delay;                                                                      // 0x0008 (size: 0x4)

}; // Size: 0x10

struct FNotificationDescriptionReplicationHelper
{
}; // Size: 0x18

struct FNotificationUISounds
{
    class UAkAudioEvent* PlayerKillIndicator;                                         // 0x0000 (size: 0x8)
    class UAkAudioEvent* DialogueInterruptIndicator;                                  // 0x0008 (size: 0x8)

}; // Size: 0x10

struct FNutrientsRDA
{
    float MinProteinsPerLeanBodyMass;                                                 // 0x0000 (size: 0x4)
    float MaxProteinsPerLeanBodyMass;                                                 // 0x0004 (size: 0x4)
    float Fats;                                                                       // 0x0008 (size: 0x4)
    float Water;                                                                      // 0x000C (size: 0x4)
    float VitaminA;                                                                   // 0x0010 (size: 0x4)
    float VitaminB1;                                                                  // 0x0014 (size: 0x4)
    float VitaminB2;                                                                  // 0x0018 (size: 0x4)
    float VitaminB3;                                                                  // 0x001C (size: 0x4)
    float VitaminB4;                                                                  // 0x0020 (size: 0x4)
    float VitaminB5;                                                                  // 0x0024 (size: 0x4)
    float VitaminB6;                                                                  // 0x0028 (size: 0x4)
    float VitaminB9;                                                                  // 0x002C (size: 0x4)
    float VitaminB12;                                                                 // 0x0030 (size: 0x4)
    float VitaminC;                                                                   // 0x0034 (size: 0x4)
    float VitaminD;                                                                   // 0x0038 (size: 0x4)
    float VitaminE;                                                                   // 0x003C (size: 0x4)
    float VitaminK;                                                                   // 0x0040 (size: 0x4)
    float Calcium;                                                                    // 0x0044 (size: 0x4)
    float Magnesium;                                                                  // 0x0048 (size: 0x4)
    float Potassium;                                                                  // 0x004C (size: 0x4)
    float Copper;                                                                     // 0x0050 (size: 0x4)
    float Selenium;                                                                   // 0x0054 (size: 0x4)
    float Iron;                                                                       // 0x0058 (size: 0x4)
    float Phosphorus;                                                                 // 0x005C (size: 0x4)
    float Zinc;                                                                       // 0x0060 (size: 0x4)
    float Manganese;                                                                  // 0x0064 (size: 0x4)
    float Sodium;                                                                     // 0x0068 (size: 0x4)

}; // Size: 0x6C

struct FObjectConditionContainer
{
    TArray<class UClass*> _objectConditions;                                          // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FOutpostInformationTraderUIData
{
    TSoftClassPtr<ASedentaryNPC> TraderClass;                                         // 0x0000 (size: 0x28)

}; // Size: 0x28

struct FPBCTIIT_ApplyBandagesOrDisinfect_ApplyBandages_PerSkillData
{
    TArray<int32> NumUsesPerSeverityLevel;                                            // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FPBCTIIT_ApplyBandagesOrDisinfect_Disinfect_PerSkillData
{
    TArray<int32> NumUsesPerSeverityLevel;                                            // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FPBCTIIT_ApplyGel_PerSkillData
{
    TArray<int32> NumUsesPerSeverityLevel;                                            // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FPBCTI_ApplyBandagesOrDisinfect_ApplyBandagesData
{
    float BaseActionDuration;                                                         // 0x0000 (size: 0x4)
    FFloatRange ActionDurationLimits;                                                 // 0x0004 (size: 0x10)
    float BaseExperienceGainVsSkillLevel;                                             // 0x0014 (size: 0x14)
    float StabilizationDurationReductionVsSkillLevel;                                 // 0x0028 (size: 0x14)
    float RecoveryDurationReductionVsSkillLevel;                                      // 0x003C (size: 0x14)

}; // Size: 0x50

struct FPBCTI_ApplyBandagesOrDisinfect_DisinfectData
{
    float BaseActionDuration;                                                         // 0x0000 (size: 0x4)
    FFloatRange ActionDurationLimits;                                                 // 0x0004 (size: 0x10)
    float BaseExperienceGainVsSkillLevel;                                             // 0x0014 (size: 0x14)
    class UAkAudioEvent* BeginInteractionPatientAudioEvent;                           // 0x0028 (size: 0x8)
    class UAkAudioEvent* EndInteractionPatientAudioEvent;                             // 0x0030 (size: 0x8)

}; // Size: 0x38

struct FPBCTI_ApplyGelData
{
    float BaseActionDuration;                                                         // 0x0000 (size: 0x4)
    FFloatRange ActionDurationLimits;                                                 // 0x0004 (size: 0x10)
    float BaseExperienceGainVsSkillLevel;                                             // 0x0014 (size: 0x14)
    class UAkAudioEvent* BeginInteractionPatientAudioEvent;                           // 0x0028 (size: 0x8)
    class UAkAudioEvent* EndInteractionPatientAudioEvent;                             // 0x0030 (size: 0x8)

}; // Size: 0x38

struct FPackedEntitySetupAndId
{
    uint64 _value;                                                                    // 0x0000 (size: 0x8)

}; // Size: 0x8

struct FPackedLocation
{
}; // Size: 0x8

struct FPackedState
{
    uint64 _value;                                                                    // 0x0000 (size: 0x8)

}; // Size: 0x10

struct FPageSplatterInfo
{
    int32 MaxNumOfSplatters;                                                          // 0x0000 (size: 0x4)
    TArray<FSlateBrush> SplatterTextures;                                             // 0x0008 (size: 0x10)
    float Frequency;                                                                  // 0x0018 (size: 0x4)

}; // Size: 0x20

struct FPaintJobColor
{
    FColor WeaponColor;                                                               // 0x0000 (size: 0x4)
    FColor VehicleColor;                                                              // 0x0004 (size: 0x4)
    FColor BaseElementColor;                                                          // 0x0008 (size: 0x4)
    FColor TurretColor;                                                               // 0x000C (size: 0x4)

}; // Size: 0x10

struct FParachuteAnimParams
{
    class UAnimSequence* OpeningAnimation;                                            // 0x0000 (size: 0x8)
    FFloatInterval OpeningAnimationTimeRange;                                         // 0x0008 (size: 0x8)

}; // Size: 0x10

struct FParameterFloat : public FEditableParameter
{
    float Value;                                                                      // 0x0010 (size: 0x4)

}; // Size: 0x18

struct FParameterInt32 : public FEditableParameter
{
    int32 Value;                                                                      // 0x0010 (size: 0x4)

}; // Size: 0x18

struct FParameterVector : public FEditableParameter
{
    FVector Value;                                                                    // 0x0010 (size: 0xC)

}; // Size: 0x20

struct FParameterVector4 : public FEditableParameter
{
    FVector4 Value;                                                                   // 0x0010 (size: 0x10)

}; // Size: 0x20

struct FParticleCollisionDecalData
{
    class UMaterialInterface* Decal;                                                  // 0x0000 (size: 0x8)
    float MinSize;                                                                    // 0x0008 (size: 0x4)
    float MaxSize;                                                                    // 0x000C (size: 0x4)
    float MinLifetime;                                                                // 0x0010 (size: 0x4)
    float MaxLifetime;                                                                // 0x0014 (size: 0x4)

}; // Size: 0x18

struct FPendingTraderPersonalityDataHelperStruct
{
    class UTraderPersonalityDataAsset* Personality;                                   // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FPerSkillLevelFloatData
{
    float NoSkill;                                                                    // 0x0000 (size: 0x4)
    float Basic;                                                                      // 0x0004 (size: 0x4)
    float Medium;                                                                     // 0x0008 (size: 0x4)
    float Advanced;                                                                   // 0x000C (size: 0x4)
    float AboveAdvanced;                                                              // 0x0010 (size: 0x4)

}; // Size: 0x14

struct FPerSkillLevelIntegerData
{
    int32 NoSkill;                                                                    // 0x0000 (size: 0x4)
    int32 Basic;                                                                      // 0x0004 (size: 0x4)
    int32 Medium;                                                                     // 0x0008 (size: 0x4)
    int32 Advanced;                                                                   // 0x000C (size: 0x4)
    int32 AboveAdvanced;                                                              // 0x0010 (size: 0x4)

}; // Size: 0x14

struct FPerTraderOverrideDataHelper
{
}; // Size: 0x70

struct FPeriodicallyReplenishedResourceDescription
{
    float InitialAmount;                                                              // 0x0000 (size: 0x4)
    float MaxAmount;                                                                  // 0x0004 (size: 0x4)
    float ReplenishInterval;                                                          // 0x0008 (size: 0x4)
    float ReplenishAmount;                                                            // 0x000C (size: 0x4)

}; // Size: 0x10

struct FPhysicalAnimationDesc
{
}; // Size: 0x34

struct FPhysicalHitReactData
{
    FName ProfileName;                                                                // 0x0000 (size: 0x8)
    FName PelvisBoneName;                                                             // 0x0008 (size: 0x8)
    float InitialStrengthMultiplier;                                                  // 0x0010 (size: 0x4)
    float BlendDuration;                                                              // 0x0014 (size: 0x4)

}; // Size: 0x18

struct FPhysicalSurfaceData
{
    float DirtinessFactor;                                                            // 0x0000 (size: 0x4)
    float WetnessFactor;                                                              // 0x0004 (size: 0x4)
    float LandingImpactVelocityModifier;                                              // 0x0008 (size: 0x4)
    float NoiseLoudnessModifier;                                                      // 0x000C (size: 0x4)
    float FootstepEnhancerChance;                                                     // 0x0010 (size: 0x4)
    float FootwearDamageMultiplier;                                                   // 0x0014 (size: 0x4)
    float FootAbrasionsMultiplier;                                                    // 0x0018 (size: 0x4)
    float VisualCoverageWhileInProne;                                                 // 0x001C (size: 0x4)
    float VisualCoverageWhileCrouching;                                               // 0x0020 (size: 0x4)
    float VisualCoverageWhileStanding;                                                // 0x0024 (size: 0x4)

}; // Size: 0x28

struct FPhysicalSurfaceEffectsData
{
    FPhysicalSurfaceVehicleEffectsData Vehicle;                                       // 0x0000 (size: 0x50)

}; // Size: 0x50

struct FPhysicalSurfaceVehicleEffectsData
{
    class UParticleSystem* ParticleTrail;                                             // 0x0000 (size: 0x8)
    float ParticleTrailSlipModifier;                                                  // 0x0008 (size: 0x4)
    float ParticleTrailDestructionDelay;                                              // 0x000C (size: 0x4)
    class UParticleSystem* ParticleWave;                                              // 0x0010 (size: 0x8)
    float ParticleWaveSlipModifier;                                                   // 0x0018 (size: 0x4)
    float ParticleWaveDestructionDelay;                                               // 0x001C (size: 0x4)
    FPhysicalSurfaceVehicleTireParticleData SmallTireParticles;                       // 0x0020 (size: 0x10)
    FPhysicalSurfaceVehicleTireParticleData MediumTireParticles;                      // 0x0030 (size: 0x10)
    FPhysicalSurfaceVehicleTireParticleData LargeTireParticles;                       // 0x0040 (size: 0x10)

}; // Size: 0x50

struct FPhysicalSurfaceVehicleTireParticleData
{
    class UParticleSystem* ParticleTrail;                                             // 0x0000 (size: 0x8)
    class UParticleSystem* ParticleWave;                                              // 0x0008 (size: 0x8)

}; // Size: 0x10

struct FPlaceableActorStateReplicationHelper
{
}; // Size: 0x8

struct FPlantGrowthStageData
{
    float MinWaterMililiters;                                                         // 0x0000 (size: 0x4)
    float MinSunHours;                                                                // 0x0004 (size: 0x4)
    FFloatInterval OptimalAvgTemperature;                                             // 0x0008 (size: 0x8)
    float WaterDeficiencyGrowthExtendHours;                                           // 0x0010 (size: 0x4)
    float WaterDeficiencyDeathTimeHours;                                              // 0x0014 (size: 0x4)
    float TemperatureDeficiencyGrowthExtendHours;                                     // 0x0018 (size: 0x4)
    float TemperatureDeficiencyDeathTimeHours;                                        // 0x001C (size: 0x4)
    float SunDeficiencyGrowthExtendHours;                                             // 0x0020 (size: 0x4)
    float PlantPestGrowthExtendPercentage;                                            // 0x0024 (size: 0x4)
    float DeathFromPlantPestTimeHours;                                                // 0x0028 (size: 0x4)
    float PlantDiseaseGrowthExendPercentage;                                          // 0x002C (size: 0x4)
    float DeathFromPlantDiseaseTimeHours;                                             // 0x0030 (size: 0x4)
    float WeedGrowthExtendPercentage;                                                 // 0x0034 (size: 0x4)
    float RecoveryTimeHours;                                                          // 0x0038 (size: 0x4)
    float WeedHarvestingReductionPercentage;                                          // 0x003C (size: 0x4)
    float OrganicFertilizerHarvestingIncreasePercentage;                              // 0x0040 (size: 0x4)
    float IndustrialFertilizerHarvestingIncreasePercentage;                           // 0x0044 (size: 0x4)
    float WaterDeficiencyHarvestingDecreasePercentage;                                // 0x0048 (size: 0x4)
    float TemperatureDeficiencyHarvestingDecreasePercentage;                          // 0x004C (size: 0x4)
    float WaterDeficiencyHarvestingSearchTimeIncrease;                                // 0x0050 (size: 0x4)
    float TemperatureDeficiencyHarvestingSearchTimeIncrease;                          // 0x0054 (size: 0x4)
    float PlantHealthAtWhichProduceStartsDecaying;                                    // 0x0058 (size: 0x4)
    float HarvestedProduceMinHealthPercentage;                                        // 0x005C (size: 0x4)

}; // Size: 0x60

struct FPlantMesh
{
    FStaticMeshMaterialPair Mesh;                                                     // 0x0000 (size: 0x18)
    FFloatInterval StageMorphTargetInterpolationRange;                                // 0x0018 (size: 0x8)
    FVector GrowthExponents;                                                          // 0x0020 (size: 0xC)
    FTransform Transform;                                                             // 0x0030 (size: 0x30)

}; // Size: 0x60

struct FPlantMeshData
{
    bool PlantGrowsUpright;                                                           // 0x0000 (size: 0x1)
    FVector Translation;                                                              // 0x0004 (size: 0xC)
    FFloatInterval RandomVerticalOffsetInterval;                                      // 0x0010 (size: 0x8)
    FFloatInterval RandomHorizontalOffsetInterval;                                    // 0x0018 (size: 0x8)
    FFloatInterval RandomScaleInterval;                                               // 0x0020 (size: 0x8)
    FPlantStageMeshData VegetatingPlantMesh;                                          // 0x0028 (size: 0x18)
    FPlantStageMeshData FloweringPlantMesh;                                           // 0x0040 (size: 0x18)
    FPlantStageMeshData RipeningPlantMesh;                                            // 0x0058 (size: 0x18)

}; // Size: 0x70

struct FPlantStageMeshData
{
    bool SkipStage;                                                                   // 0x0000 (size: 0x1)
    float ProduceReadyStagePercent;                                                   // 0x0004 (size: 0x4)
    TArray<FPlantMesh> Meshes;                                                        // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FPlayerLoginInfo
{
    FString UserId;                                                                   // 0x0000 (size: 0x10)
    FDbIntegerId UserProfileId;                                                       // 0x0010 (size: 0x8)
    FString UserProfileName;                                                          // 0x0018 (size: 0x10)
    bool IsUserAdmin;                                                                 // 0x0028 (size: 0x1)
    bool IsUserServerSettingsAdmin;                                                   // 0x0029 (size: 0x1)
    bool PlayAsDrone;                                                                 // 0x002A (size: 0x1)
    FDeluxeVersion DeluxeVersion;                                                     // 0x002B (size: 0xC)
    int32 ServerResponsePort;                                                         // 0x0038 (size: 0x4)
    FDbIntegerId ServerUserProfileId;                                                 // 0x0040 (size: 0x8)

}; // Size: 0x48

struct FPlayerPawnBirdInfo
{
    int32 CoastalBirdsinProximity;                                                    // 0x0000 (size: 0x4)
    int32 ContinetalBirdsinProximity;                                                 // 0x0004 (size: 0x4)
    int32 VirtualAssignedCoastalBirds;                                                // 0x0008 (size: 0x4)
    int32 VirtualAssignedContinentalBirds;                                            // 0x000C (size: 0x4)

}; // Size: 0x10

struct FPlayerRpcChannelServerDataRequestNetSerializer
{
}; // Size: 0x8

struct FPlayerRpcChannelServerDataResponseNetSerializer
{
}; // Size: 0x8

struct FPlayerUnsubscribeData
{
}; // Size: 0x78

struct FPossibleChoppingTools
{
    TArray<FChoppingTool2> PossibleTools;                                             // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FPossibleEncounterData
{
    TSubclassOf<class UEncounterBase> EncounterClass;                                 // 0x0000 (size: 0x8)
    float EncounterWeight;                                                            // 0x0008 (size: 0x4)

}; // Size: 0x10

struct FPossibleRecipeIngredient
{
    bool IsResource;                                                                  // 0x0000 (size: 0x1)
    TSoftClassPtr<AItem> Item;                                                        // 0x0008 (size: 0x28)
    bool ShouldConsumeWhole;                                                          // 0x0030 (size: 0x1)
    int32 Usage;                                                                      // 0x0034 (size: 0x4)
    TSubclassOf<class UGameResourceType> ResourceType;                                // 0x0038 (size: 0x8)
    float Liters;                                                                     // 0x0040 (size: 0x4)
    float NutrientInclusionFactor;                                                    // 0x0044 (size: 0x4)

}; // Size: 0x48

struct FPowerCableMeshInfo
{
    class UStaticMesh* Mesh;                                                          // 0x0000 (size: 0x8)
    float Length;                                                                     // 0x0008 (size: 0x4)

}; // Size: 0x10

struct FPowerNodeConnector
{
    FName SocketName;                                                                 // 0x0000 (size: 0x8)
    bool ShouldHaveCable;                                                             // 0x0008 (size: 0x1)
    int32 CableMeshIndex;                                                             // 0x000C (size: 0x4)
    int32 TargetConnectorIndex;                                                       // 0x0010 (size: 0x4)
    class UStaticMeshComponent* CableMeshComponent;                                   // 0x0018 (size: 0x8)

}; // Size: 0x20

struct FPriceUpdateData
{
}; // Size: 0x90

struct FPrisonerActionDifficultyCurve
{
    float _resting;                                                                   // 0x0000 (size: 0x4)
    float _idle;                                                                      // 0x0004 (size: 0x4)
    float _easy;                                                                      // 0x0008 (size: 0x4)
    float _demanding;                                                                 // 0x000C (size: 0x4)
    float _veryDemanding;                                                             // 0x0010 (size: 0x4)
    float _extremelyDemanding;                                                        // 0x0014 (size: 0x4)

}; // Size: 0x18

struct FPrisonerAerialPoseData
{
    float TerminalVelocity;                                                           // 0x0000 (size: 0x4)
    float LateralMaxSpeed;                                                            // 0x0004 (size: 0x4)
    float LateralDrag;                                                                // 0x0008 (size: 0x4)
    float DesiredPitch;                                                               // 0x000C (size: 0x4)
    float DragIntensity;                                                              // 0x0010 (size: 0x4)
    float YawRotationRate;                                                            // 0x0014 (size: 0x4)

}; // Size: 0x18

struct FPrisonerAerialPosePair
{
    EPrisonerAerialPose PoseA;                                                        // 0x0000 (size: 0x1)
    EPrisonerAerialPose PoseB;                                                        // 0x0001 (size: 0x1)

}; // Size: 0x2

struct FPrisonerAerialPoseTransition
{
    float Duration;                                                                   // 0x0000 (size: 0x4)
    class UAnimSequence* Animation;                                                   // 0x0008 (size: 0x8)
    FFloatInterval AnimationTimeRange;                                                // 0x0010 (size: 0x8)
    class UCurveFloat* PitchBlendCurve;                                               // 0x0018 (size: 0x8)

}; // Size: 0x20

struct FPrisonerAirMovementParameters
{
    float TerminalVelocity;                                                           // 0x0000 (size: 0x4)
    float LateralMaxSpeed;                                                            // 0x0004 (size: 0x4)
    float LateralDrag;                                                                // 0x0008 (size: 0x4)
    float DesiredPitch;                                                               // 0x000C (size: 0x4)
    float YawRotationRateFactor;                                                      // 0x0010 (size: 0x4)
    float DragIntensity;                                                              // 0x0014 (size: 0x4)

}; // Size: 0x18

struct FPrisonerAppearanceId
{
    EConZGender Gender;                                                               // 0x0000 (size: 0x1)
    int32 Index;                                                                      // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FPrisonerAppearance_FaceVariation
{
    TSoftObjectPtr<UTexture2D> SkinColor;                                             // 0x0000 (size: 0x28)
    TSoftObjectPtr<UTexture2D> SkinNormal;                                            // 0x0028 (size: 0x28)

}; // Size: 0x50

struct FPrisonerAppearance_HairColorPreset
{
    FLinearColor PreviewColor;                                                        // 0x0000 (size: 0x10)
    EConZColor ColorName;                                                             // 0x0010 (size: 0x1)
    float Brightness;                                                                 // 0x0014 (size: 0x4)
    FLinearColor RootColor;                                                           // 0x0018 (size: 0x10)
    FLinearColor RootColorOnHead;                                                     // 0x0028 (size: 0x10)
    float Roughness;                                                                  // 0x0038 (size: 0x4)
    float Scatter;                                                                    // 0x003C (size: 0x4)
    FLinearColor TipColor;                                                            // 0x0040 (size: 0x10)
    float RandomHueVariation;                                                         // 0x0050 (size: 0x4)
    float RandomValueVariation;                                                       // 0x0054 (size: 0x4)
    float FacialHair_Brightness;                                                      // 0x0058 (size: 0x4)
    FLinearColor FacialHair_RootColor;                                                // 0x005C (size: 0x10)
    float FacialHair_Roughness;                                                       // 0x006C (size: 0x4)
    float FacialHair_Scatter;                                                         // 0x0070 (size: 0x4)
    FLinearColor FacialHair_TipColor;                                                 // 0x0074 (size: 0x10)
    float FacialHair_RandomHueVariation;                                              // 0x0084 (size: 0x4)
    float FacialHair_RandomValueVariation;                                            // 0x0088 (size: 0x4)

}; // Size: 0x8C

struct FPrisonerAppearance_HairStyle
{
    EDeluxeVersion GameUpgradeRequired;                                               // 0x0000 (size: 0x1)
    class UCharacterMesh* Mesh;                                                       // 0x0008 (size: 0x8)
    float Haircontrast;                                                               // 0x0010 (size: 0x4)

}; // Size: 0x18

struct FPrisonerAppearance_IrisColor
{
    FLinearColor PreviewColor;                                                        // 0x0000 (size: 0x10)
    FVector4 IrisColor;                                                               // 0x0010 (size: 0x10)
    EConZColor ColorName;                                                             // 0x0020 (size: 0x1)

}; // Size: 0x30

struct FPrisonerAppearance_IrisVariation
{
    TSoftObjectPtr<UTexture2D> IrisHeight;                                            // 0x0000 (size: 0x28)
    TSoftObjectPtr<UTexture2D> IrisMasks;                                             // 0x0028 (size: 0x28)

}; // Size: 0x50

struct FPrisonerAppearance_SkinParams
{
    TArray<FPrisonerAppearance_FaceVariation> FaceVariations;                         // 0x0000 (size: 0x10)
    TArray<FPrisonerAppearance_SkinTone> SkinTones;                                   // 0x0010 (size: 0x10)
    TArray<FPrisonerAppearance_HairColorPreset> HairColorPresets;                     // 0x0020 (size: 0x10)
    int32 DefaultSkinToneIndex;                                                       // 0x0030 (size: 0x4)

}; // Size: 0x38

struct FPrisonerAppearance_SkinTone
{
    FLinearColor PreviewColor;                                                        // 0x0000 (size: 0x10)
    FLinearColor SkinColorOffset;                                                     // 0x0010 (size: 0x10)
    FLinearColor AverageLipColor;                                                     // 0x0020 (size: 0x10)

}; // Size: 0x30

struct FPrisonerAppearance_Tattoo
{
    EDeluxeVersion GameUpgradeRequired;                                               // 0x0000 (size: 0x1)
    TMap<class FName, class TSoftObjectPtr<UTexture2D>> TattooTextures;               // 0x0008 (size: 0x50)

}; // Size: 0x58

struct FPrisonerAppearance_TattooArray
{
    TArray<FPrisonerAppearance_Tattoo> Tattoos;                                       // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FPrisonerAquaticModeData
{
    float CapsuleHalfHeight;                                                          // 0x0000 (size: 0x4)
    EPrisonerMovementPace MaxMovementPace;                                            // 0x0004 (size: 0x1)
    float YawRotationRate;                                                            // 0x0008 (size: 0x4)

}; // Size: 0xC

struct FPrisonerBodyBoneGroupsVsSeverity
{
    TArray<FPrisonerBodyBoneGroupsVsSeverityKey> Keys;                                // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FPrisonerBodyBoneGroupsVsSeverityKey
{
    FFloatRange SeverityRange;                                                        // 0x0000 (size: 0x10)
    TSet<EPrisonerBodyBoneGroup> Values;                                              // 0x0010 (size: 0x50)

}; // Size: 0x60

struct FPrisonerBodyEffectSave
{
    TArray<uint8> Data;                                                               // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FPrisonerBodyMuscleGroupsVsSeverity
{
    TArray<FPrisonerBodyMuscleGroupsVsSeverityKey> Keys;                              // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FPrisonerBodyMuscleGroupsVsSeverityKey
{
    FFloatRange SeverityRange;                                                        // 0x0000 (size: 0x10)
    TSet<EPrisonerBodyMuscleGroup> Values;                                            // 0x0010 (size: 0x50)

}; // Size: 0x60

struct FPrisonerBodyOrganGroupsVsSeverity
{
    TArray<FPrisonerBodyOrganGroupsVsSeverityKey> Keys;                               // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FPrisonerBodyOrganGroupsVsSeverityKey
{
    FFloatRange SeverityRange;                                                        // 0x0000 (size: 0x10)
    TSet<EPrisonerBodyOrganGroup> Values;                                             // 0x0010 (size: 0x50)

}; // Size: 0x60

struct FPrisonerBodySimulationData_BodyPartMappingArray
{
    TArray<EBodyPart> BodyParts;                                                      // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRange
{
    FFloatRange ValueRange;                                                           // 0x0000 (size: 0x10)
    bool IsConstrainedByConsumptionMethod;                                            // 0x0010 (size: 0x1)
    EGameResourceConsumptionMethod ConsumptionMethodConstraint;                       // 0x0011 (size: 0x1)
    TArray<class UConsumableDigestionHandler*> DigestionHandlers;                     // 0x0018 (size: 0x10)

}; // Size: 0x28

struct FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRanges
{
    TArray<FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRange> ValueRanges; // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FPrisonerBodySimulationData_Effects
{
    TSubclassOf<class UPrisonerBodyCondition_Knockout> KnockoutWithoutBlackout;       // 0x0000 (size: 0x8)
    TSubclassOf<class UPrisonerBodyCondition_Knockout> KnockoutWithBlackout;          // 0x0008 (size: 0x8)
    TSubclassOf<class UPrisonerBodyCondition_BleedingInjury> BleedingInjury;          // 0x0010 (size: 0x8)
    class UPrisonerBodyMuscleGroupToBurnInjuryClassMappings* DefaultMuscleGroupToBurnInjuryClassMappings; // 0x0018 (size: 0x8)
    TSubclassOf<class UPrisonerBodyCondition_Choking> Choking;                        // 0x0020 (size: 0x8)
    TSubclassOf<class UPrisonerBodyCondition_FoodDisgust> FoodDisgust;                // 0x0028 (size: 0x8)
    TSubclassOf<class UPrisonerBodyCondition_TearGasExposure> TearGasExposure;        // 0x0030 (size: 0x8)
    TSubclassOf<class UPrisonerBodyEffect_Limping> Limping;                           // 0x0038 (size: 0x8)
    FPrisonerBodySimulationData_Effects_ExhaustionChange ExhaustionChange;            // 0x0040 (size: 0x18)

}; // Size: 0x58

struct FPrisonerBodySimulationData_Effects_ExhaustionChange
{
    TSubclassOf<class UPrisonerBodyEffect_ExhaustionChange> Consumption;              // 0x0000 (size: 0x8)
    TSubclassOf<class UPrisonerBodyEffect_ExhaustionChange> Resting;                  // 0x0008 (size: 0x8)
    TSubclassOf<class UPrisonerBodyEffect_ExhaustionChange> Smoking;                  // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FPrisonerCharacterMeshDecayMultiplierData
{
    float DamageMultiplierPerPace;                                                    // 0x0000 (size: 0x10)
    float DamageMultiplierPerStance;                                                  // 0x0010 (size: 0xC)
    float WetnessDamageThreshold;                                                     // 0x001C (size: 0x4)
    float WetnessDamageMultiplier;                                                    // 0x0020 (size: 0x4)
    bool DamagedByFloor;                                                              // 0x0024 (size: 0x1)

}; // Size: 0x28

struct FPrisonerClimbAnimationInfo
{
    float MinEdgeHeight;                                                              // 0x0000 (size: 0x4)
    float MaxEdgeHeight;                                                              // 0x0004 (size: 0x4)
    float VaultDistance;                                                              // 0x0008 (size: 0x4)
    float MaxVaultLandHeightError;                                                    // 0x000C (size: 0x4)
    FVector AnchorOffset;                                                             // 0x0010 (size: 0xC)
    class UAnimSequenceBase* AnchoringAnimation;                                      // 0x0020 (size: 0x8)
    float AnchoringAnimationTime;                                                     // 0x0028 (size: 0x4)
    float AnchoringDuration;                                                          // 0x002C (size: 0x4)
    class UAnimMontage* ClimbingMontage;                                              // 0x0030 (size: 0x8)
    float StaminaDrain;                                                               // 0x0038 (size: 0x4)

}; // Size: 0x40

struct FPrisonerCommonData_ResponseIdles
{
    TSubclassOf<class UPrisonerResponseIdle> DirtyAfterProne;                         // 0x0000 (size: 0x8)

}; // Size: 0x8

struct FPrisonerConditionalSpawnEquipment
{
    FGameplayTagQuery Condition;                                                      // 0x0000 (size: 0x48)
    TSoftClassPtr<AItem> ItemClass;                                                   // 0x0048 (size: 0x28)
    EBiomeType BiomeRequirement;                                                      // 0x0070 (size: 0x4)

}; // Size: 0x78

struct FPrisonerDistanceTravelledContext
{
}; // Size: 0x20

struct FPrisonerFPWeaponFOVSettings
{
}; // Size: 0x10

struct FPrisonerFirstPersonSubviewBlendOverride
{
    EPrisonerFirstPersonSubview Source;                                               // 0x0000 (size: 0x1)
    EPrisonerFirstPersonSubview Target;                                               // 0x0001 (size: 0x1)
    float Duration;                                                                   // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FPrisonerGroundStanceData
{
    float CapsuleHalfHeight;                                                          // 0x0000 (size: 0x4)
    EPrisonerMovementPace MaxMovementPace;                                            // 0x0004 (size: 0x1)
    EPrisonerMovementPace MaxLimpingMovementPace;                                     // 0x0005 (size: 0x1)
    float YawRotationRate;                                                            // 0x0008 (size: 0x4)

}; // Size: 0xC

struct FPrisonerHallucinationIllusionInfo
{
    TSoftClassPtr<APrisonerHallucinationIllusion> Class;                              // 0x0000 (size: 0x28)
    TSet<TSoftClassPtr<APrisonerHallucinationIllusion>> IncompatibleClasses;          // 0x0028 (size: 0x50)
    FInt32Range SeverityLevelConstraint;                                              // 0x0078 (size: 0x10)

}; // Size: 0x88

struct FPrisonerHallucinationSymptomSeverityLevelParams
{
    int32 MaxNumHallucinationIllusions;                                               // 0x0000 (size: 0x4)

}; // Size: 0x4

struct FPrisonerInitialSkillInfo
{
    class USkill* Skill;                                                              // 0x0000 (size: 0x8)
    ESkillLevel InitialLevel;                                                         // 0x0008 (size: 0x1)
    float InitialExperiencePoints;                                                    // 0x000C (size: 0x4)

}; // Size: 0x10

struct FPrisonerInjuryTypeLikelihoods
{
    FString Name;                                                                     // 0x0000 (size: 0x10)
    float BoneInjuryLikelihood;                                                       // 0x0010 (size: 0x4)
    float MuscleInjuryLikelihood;                                                     // 0x0014 (size: 0x4)
    float OrganInjuryLikelihood;                                                      // 0x0018 (size: 0x4)

}; // Size: 0x20

struct FPrisonerMaxMovementPaceVsSeverity
{
    TArray<FPrisonerMaxMovementPaceVsSeverityKey> Keys;                               // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FPrisonerMaxMovementPaceVsSeverityKey
{
    FFloatRange SeverityRange;                                                        // 0x0000 (size: 0x10)
    EPrisonerMovementPace MaxMovementPace;                                            // 0x0010 (size: 0x1)

}; // Size: 0x14

struct FPrisonerMeleeAttackTypes
{
    FGameplayTag PrimaryMeleeAttackTypeWhenNotMoving;                                 // 0x0000 (size: 0x8)
    FGameplayTag PrimaryMeleeAttackTypeWhenWalking;                                   // 0x0008 (size: 0x8)
    FGameplayTag PrimaryMeleeAttackTypeWhenJogging;                                   // 0x0010 (size: 0x8)
    FGameplayTag PrimaryMeleeAttackTypeWhenRunning;                                   // 0x0018 (size: 0x8)
    FGameplayTag PrimaryMeleeAttackTypeWhenFalling;                                   // 0x0020 (size: 0x8)
    FGameplayTag SecondaryMeleeAttackTypeWhenNotMoving;                               // 0x0028 (size: 0x8)
    FGameplayTag SecondaryMeleeAttackTypeWhenWalking;                                 // 0x0030 (size: 0x8)
    FGameplayTag SecondaryMeleeAttackTypeWhenJogging;                                 // 0x0038 (size: 0x8)
    FGameplayTag SecondaryMeleeAttackTypeWhenRunning;                                 // 0x0040 (size: 0x8)
    FGameplayTag SecondaryMeleeAttackTypeWhenFalling;                                 // 0x0048 (size: 0x8)
    FGameplayTag ComboMeleeAttackTypeWhenNotMoving;                                   // 0x0050 (size: 0x8)
    FGameplayTag ComboMeleeAttackTypeWhenWalking;                                     // 0x0058 (size: 0x8)
    FGameplayTag ComboMeleeAttackTypeWhenJogging;                                     // 0x0060 (size: 0x8)
    FGameplayTag ComboMeleeAttackTypeWhenRunning;                                     // 0x0068 (size: 0x8)
    FGameplayTag ComboMeleeAttackTypeWhenFalling;                                     // 0x0070 (size: 0x8)
    FGameplayTag BashMeleeAttackType;                                                 // 0x0078 (size: 0x8)
    FGameplayTag WeaponBayonetMeleeAttackType;                                        // 0x0080 (size: 0x8)

}; // Size: 0x88

struct FPrisonerMountReplication
{
    class UObject* MountedSlot;                                                       // 0x0000 (size: 0x8)
    EPrisonerMountSlotFlags _mountFlags;                                              // 0x0008 (size: 0x1)
    uint8 _version;                                                                   // 0x0009 (size: 0x1)

}; // Size: 0x10

struct FPrisonerMovementParams
{
    float MaxSpeed;                                                                   // 0x0000 (size: 0x4)
    float Acceleration;                                                               // 0x0004 (size: 0x4)
    float Deceleration;                                                               // 0x0008 (size: 0x4)
    float Friction;                                                                   // 0x000C (size: 0x4)

}; // Size: 0x10

struct FPrisonerMovementSettings_Air
{
    FPrisonerAirMovementParameters Fall;                                              // 0x0000 (size: 0x18)
    FPrisonerAirMovementParameters SkydiveSlow;                                       // 0x0018 (size: 0x18)
    FPrisonerAirMovementParameters SkydiveFast;                                       // 0x0030 (size: 0x18)
    FPrisonerAirMovementParameters HandsBound;                                        // 0x0048 (size: 0x18)
    TMap<class FPrisonerAerialPosePair, class FPrisonerAerialPoseTransition> PoseTransitionParamsMap; // 0x0060 (size: 0x50)
    float JumpZVelocity;                                                              // 0x00B0 (size: 0x4)
    FFloatInterval JumpZVelocityMultiplierVsPerformanceScore;                         // 0x00F0 (size: 0x8)

}; // Size: 0xF8

struct FPrisonerMovementSettings_Ground
{
    FFloatInterval MaxSpeedMultiplierVsPerformanceScore;                              // 0x0000 (size: 0x8)
    FFloatInterval AccelerationMultiplierVsPerformanceScore;                          // 0x0008 (size: 0x8)
    float AccelerationMultiplierWhenImmersedInWater;                                  // 0x0010 (size: 0x4)
    FFloatInterval FrictionMultiplierVsPerformanceScore;                              // 0x0014 (size: 0x8)

}; // Size: 0x1C

struct FPrisonerMovementSettings_Misc
{
    FFloatInterval RotationRateMultiplierVsPerformanceScore;                          // 0x0000 (size: 0x8)
    FFloatInterval ClimbingSpeedMultiplierVsPerformanceScore;                         // 0x0008 (size: 0x8)
    FFloatInterval WindowClimbingSpeedMultiplierVsPerformanceScore;                   // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FPrisonerMovementSettings_Water
{
    FFloatInterval MaxSpeedMultiplierVsPerformanceScore;                              // 0x0000 (size: 0x8)
    float DivingWaterEdgeMargin;                                                      // 0x0008 (size: 0x4)

}; // Size: 0xC

struct FPrisonerNameChangeRequestData
{
}; // Size: 0x20

struct FPrisonerPlayerInfo
{
}; // Size: 0x70

struct FPrisonerReportingEvents
{
}; // Size: 0x288

struct FPrisonerReportingEventsMap
{
}; // Size: 0x60

struct FPrisonerRestingData
{
    EPrisonerRestingMode mode;                                                        // 0x0000 (size: 0x1)
    bool IsRestingOnGround;                                                           // 0x0001 (size: 0x1)
    bool HasChangedTransform;                                                         // 0x0002 (size: 0x1)
    bool HasDisabledCapsuleCollision;                                                 // 0x0003 (size: 0x1)
    bool HasLockedRestingLocation;                                                    // 0x0004 (size: 0x1)
    TWeakObjectPtr<class UAnimSequenceBase> RestingAnimation;                         // 0x0008 (size: 0x8)
    float FeetIKOffset;                                                               // 0x0010 (size: 0x4)
    bool IsRestingOnBedroll;                                                          // 0x0014 (size: 0x1)

}; // Size: 0x18

struct FPrisonerRestingDataAutonomous
{
    bool HasDisabledMovement;                                                         // 0x0000 (size: 0x1)
    FVector_NetQuantize Location;                                                     // 0x0004 (size: 0xC)
    FVector_NetQuantize EulerRotation;                                                // 0x0010 (size: 0xC)

}; // Size: 0x1C

struct FPrisonerRestingParameters
{
    EPrisonerRestingMode mode;                                                        // 0x0000 (size: 0x1)
    bool ShouldUpdateTransform;                                                       // 0x0001 (size: 0x1)
    bool ShouldDisableMovement;                                                       // 0x0002 (size: 0x1)
    bool ShouldDisableCapsuleCollision;                                               // 0x0003 (size: 0x1)
    bool ShouldLockRestingLocation;                                                   // 0x0004 (size: 0x1)
    TWeakObjectPtr<class UAnimSequenceBase> RestingAnimation;                         // 0x0008 (size: 0x8)
    TArray<FVector> EndRestLocations;                                                 // 0x0010 (size: 0x10)
    FTransform Transform;                                                             // 0x0020 (size: 0x30)
    bool IsRestingOnGround;                                                           // 0x0050 (size: 0x1)
    float FeetIKOffset;                                                               // 0x0054 (size: 0x4)
    TWeakObjectPtr<class AItem> Item;                                                 // 0x0058 (size: 0x8)

}; // Size: 0x60

struct FPrisonerSkillInfo
{
}; // Size: 0x18

struct FPrisonerTeleportRequest
{
}; // Size: 0x20

struct FPrisonerThirdPersonSubviewBlendOverride
{
    EPrisonerThirdPersonSubview Source;                                               // 0x0000 (size: 0x1)
    EPrisonerThirdPersonSubview Target;                                               // 0x0001 (size: 0x1)
    float Duration;                                                                   // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FPrisonerTurnMontageDescription
{
    class UAnimSequenceBase* AnimationL90;                                            // 0x0000 (size: 0x8)
    class UAnimSequenceBase* AnimationR90;                                            // 0x0008 (size: 0x8)
    FName TurnAngleCurveName;                                                         // 0x0010 (size: 0x8)
    FName SlotName;                                                                   // 0x0018 (size: 0x8)
    float BlendInTime;                                                                // 0x0020 (size: 0x4)
    float BlendOutTime;                                                               // 0x0024 (size: 0x4)
    float BlendOutTriggerTime;                                                        // 0x0028 (size: 0x4)
    float PlayRate;                                                                   // 0x002C (size: 0x4)

}; // Size: 0x30

struct FPrisonerViewInfo : public FMinimalViewInfo
{
    float WeaponFOV;                                                                  // 0x05F0 (size: 0x4)
    FVector WeaponFoveationOffset;                                                    // 0x05F4 (size: 0xC)
    float MinViewYaw;                                                                 // 0x0600 (size: 0x4)
    float MaxViewYaw;                                                                 // 0x0604 (size: 0x4)
    float MinViewPitch;                                                               // 0x0608 (size: 0x4)
    float MaxViewPitch;                                                               // 0x060C (size: 0x4)

}; // Size: 0x610

struct FProjectileArrowData
{
    UClass* AmmunitionArrowClass;                                                     // 0x0000 (size: 0x8)
    float ItemsHealth;                                                                // 0x0008 (size: 0x4)
    float StiffnessFactor;                                                            // 0x000C (size: 0x4)
    float FlightRotationCorrectionSpeed;                                              // 0x0010 (size: 0x4)
    float DeviationDegrees;                                                           // 0x0014 (size: 0x4)
    bool IsPartOfEvent;                                                               // 0x0018 (size: 0x1)

}; // Size: 0x20

struct FProjectileData
{
    FText Caption;                                                                    // 0x0000 (size: 0x18)
    float Caliber;                                                                    // 0x0018 (size: 0x4)
    float Weight;                                                                     // 0x001C (size: 0x4)
    float MuzzleVelocity;                                                             // 0x0020 (size: 0x4)
    float BallisticCoefficient;                                                       // 0x0024 (size: 0x4)
    EBallisticDragModel BallisticDragModel;                                           // 0x0028 (size: 0x1)
    float InitialDamage;                                                              // 0x002C (size: 0x4)
    float InitialDamageInGameEvent;                                                   // 0x0030 (size: 0x4)
    FTargetTypeDamageMultiplier TargetTypeMultiplier;                                 // 0x0038 (size: 0x10)
    float PenetrationFactor;                                                          // 0x0048 (size: 0x4)
    float GlancingAngle;                                                              // 0x004C (size: 0x4)
    bool AllowGlanceOrForceBounce;                                                    // 0x0050 (size: 0x1)
    float BounceAngle;                                                                // 0x0054 (size: 0x4)
    float ArmorPiercingFactor;                                                        // 0x0058 (size: 0x4)
    bool CanCauseHeadExplosion;                                                       // 0x005C (size: 0x1)

}; // Size: 0x60

struct FProjectileImpulseMultiplier
{
    TSubclassOf<class AActor> ActorClass;                                             // 0x0000 (size: 0x8)
    float Multiplier;                                                                 // 0x0008 (size: 0x4)

}; // Size: 0x10

struct FProximityReplenishedResourceDescription
{
    float ReplenishChance;                                                            // 0x0000 (size: 0x4)
    FFloatInterval ReplenishAmount;                                                   // 0x0004 (size: 0x8)
    float ReplenishTimeout;                                                           // 0x000C (size: 0x4)

}; // Size: 0x10

struct FQuestCycleStatsKey
{
}; // Size: 0x30

struct FQuestGiverIdentifier
{
}; // Size: 0x20

struct FQuestGiverSetup
{
    int32 MaxQuestsGeneratedPerDay;                                                   // 0x0000 (size: 0x4)
    int32 InitiallyGeneratedQuests;                                                   // 0x0004 (size: 0x4)
    int32 MaxAvailableQuests;                                                         // 0x0008 (size: 0x4)
    TMap<int32, int32> MinQuestsAvailablePerTier;                                     // 0x0010 (size: 0x50)
    TMap<int32, float> QuestsProbabilityPerTier;                                      // 0x0060 (size: 0x50)
    TSoftClassPtr<ASedentaryNPC> AllowedOnlyFromNPC;                                  // 0x00B0 (size: 0x28)
    TSoftClassPtr<ASedentaryNPC> RequireCompletedQuestFromOtherNPC;                   // 0x00D8 (size: 0x28)
    int32 RequireCompletedQuestsFromOtherNPCTier;                                     // 0x0100 (size: 0x4)
    int32 RequireCompletedQuestsFromOtherNPCNum;                                      // 0x0104 (size: 0x4)
    bool AllowAutoComplete;                                                           // 0x0108 (size: 0x1)

}; // Size: 0x110

struct FQuestGiverUIData
{
    FText Name;                                                                       // 0x0000 (size: 0x18)
    TSoftObjectPtr<UTexture2D> Icon;                                                  // 0x0018 (size: 0x28)
    TArray<FText> PlayerQuestAcceptResponses;                                         // 0x0040 (size: 0x10)
    TArray<FText> QuestGiverQuestCompletedResponses;                                  // 0x0050 (size: 0x10)
    TArray<FText> QuestGiverQuestFailedResponses;                                     // 0x0060 (size: 0x10)
    class UAkAudioEvent* QuestAcceptedAudioEvent;                                     // 0x0070 (size: 0x8)
    class UAkAudioEvent* QuestCompletedAudioEvent;                                    // 0x0078 (size: 0x8)
    class UAkAudioEvent* QuestBookOpenedAudioEvent;                                   // 0x0080 (size: 0x8)
    class UAkAudioEvent* QuestBookNoQuestTakenAudioEvent;                             // 0x0088 (size: 0x8)
    class UAkAudioEvent* QuestBookNoQuestsAvailableAudioEvent;                        // 0x0090 (size: 0x8)

}; // Size: 0x98

struct FQuestInstance
{
}; // Size: 0x20

struct FQuestItem
{
    TSet<TSoftClassPtr<AItem>> AcceptedItems;                                         // 0x0000 (size: 0x50)
    int32 Count;                                                                      // 0x0050 (size: 0x4)
    int32 MaxRandomAdditionalCount;                                                   // 0x0054 (size: 0x4)
    int32 MinAcceptedItemUses;                                                        // 0x0058 (size: 0x4)
    EFoodCookLevel MinAcceptedCookLevel;                                              // 0x005C (size: 0x1)
    EFoodCookLevel MaxAcceptedCookLevel;                                              // 0x005D (size: 0x1)
    EFoodCookQuality MinAcceptedCookQuality;                                          // 0x005E (size: 0x1)
    float MinAcceptedItemMass;                                                        // 0x0060 (size: 0x4)
    float MinAcceptedItemHealth;                                                      // 0x0064 (size: 0x4)
    float MinAcceptedItemResourceAmount;                                              // 0x0068 (size: 0x4)
    float MinAcceptedItemResourceRatio;                                               // 0x006C (size: 0x4)

}; // Size: 0x70

struct FQuestItemSet_Data
{
    TArray<FQuestItem> Items;                                                         // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FQuestLifetimeStatsKey
{
}; // Size: 0x38

struct FQuestRewards
{
    FTraderSpecialDeal RewardTradeDeal;                                               // 0x0000 (size: 0x70)
    TArray<FTraderSpecialDeal> RewardTradeDeals;                                      // 0x0070 (size: 0x10)
    TMap<ECurrencyType, int64> RewardCurrency;                                        // 0x0080 (size: 0x50)
    int32 RewardFame;                                                                 // 0x00D0 (size: 0x4)
    TMap<TSoftClassPtr<USkill>, float> RewardSkillExperience;                         // 0x00D8 (size: 0x50)

}; // Size: 0x128

struct FQuestTrackingDataWidgetStyle
{
    FLinearColor IncompleteColor;                                                     // 0x0000 (size: 0x10)
    FLinearColor IncompleteHighlightColor;                                            // 0x0010 (size: 0x10)
    FSlateBrush IncompleteIcon;                                                       // 0x0020 (size: 0x88)
    FLinearColor CompleteColor;                                                       // 0x00A8 (size: 0x10)
    FSlateBrush CompleteIcon;                                                         // 0x00B8 (size: 0x88)
    uint32 FontSize;                                                                  // 0x0140 (size: 0x4)
    FVector2D IconSize;                                                               // 0x0144 (size: 0x8)

}; // Size: 0x150

struct FQuestUISounds
{
    class UAkAudioEvent* QuestHover;                                                  // 0x0000 (size: 0x8)
    class UAkAudioEvent* QuestZoomIn;                                                 // 0x0008 (size: 0x8)
    class UAkAudioEvent* AcceptQuest;                                                 // 0x0010 (size: 0x8)
    class UAkAudioEvent* AcceptQuestFailed;                                           // 0x0018 (size: 0x8)
    class UAkAudioEvent* QuestCompleted;                                              // 0x0020 (size: 0x8)
    class UAkAudioEvent* QuestStepCompleted;                                          // 0x0028 (size: 0x8)
    class UAkAudioEvent* QuestFailed;                                                 // 0x0030 (size: 0x8)
    class UAkAudioEvent* OpenQuestDetails;                                            // 0x0038 (size: 0x8)
    class UAkAudioEvent* FlipQuestBookPage;                                           // 0x0040 (size: 0x8)
    class UAkAudioEvent* OpenQuestBook;                                               // 0x0048 (size: 0x8)
    class UAkAudioEvent* CloseQuestBook;                                              // 0x0050 (size: 0x8)

}; // Size: 0x58

struct FQuickAccessClientSyncData
{
}; // Size: 0x18

struct FQuickAccessSlotData
{
}; // Size: 0x14

struct FRadialDamageDescription
{
    float RandomDamageMultiplier;                                                     // 0x0000 (size: 0x4)
    float MinRandomMultiplierChance;                                                  // 0x0004 (size: 0x4)
    float MaxRandomMultiplierChance;                                                  // 0x0008 (size: 0x4)
    FVector BlastDirection;                                                           // 0x000C (size: 0xC)
    float BlastInnerAngle;                                                            // 0x0018 (size: 0x4)
    float BlastOuterAngle;                                                            // 0x001C (size: 0x4)
    float BlastAngleDamageFalloff;                                                    // 0x0020 (size: 0x4)

}; // Size: 0x24

struct FRadiationSourceDescription
{
    FTransform Transform;                                                             // 0x0000 (size: 0x30)
    FVector Extents;                                                                  // 0x0030 (size: 0xC)
    FVector EpicenterLocation;                                                        // 0x003C (size: 0xC)
    float EpicenterRadius;                                                            // 0x0048 (size: 0x4)
    float MaxRadiationAmountIncreaseRate;                                             // 0x004C (size: 0x4)
    float RadiationAmountIncreaseRateFalloffExponent;                                 // 0x0050 (size: 0x4)
    float RadiationNoiseAmountScale;                                                  // 0x0054 (size: 0x4)
    float RadiationNoiseLocationScale;                                                // 0x0058 (size: 0x4)

}; // Size: 0x60

struct FRadioProgramData
{
    TSubclassOf<class URadioProgram> ProgramClass;                                    // 0x0000 (size: 0x8)
    class URadioProgram* Program;                                                     // 0x0008 (size: 0x8)
    float Chance;                                                                     // 0x0010 (size: 0x4)

}; // Size: 0x18

struct FRaidProtection : public FFastArraySerializerItem
{
    FDbIntegerId FlagId;                                                              // 0x0010 (size: 0x8)
    uint32 _raidProtectionPacked;                                                     // 0x0030 (size: 0x4)
    uint16 _lastProtectionTimeChangedPacked;                                          // 0x0034 (size: 0x2)

}; // Size: 0x40

struct FRaidProtectionArray : public FFastArraySerializer
{
    TArray<FRaidProtection> _activeRaidProtections;                                   // 0x0108 (size: 0x10)

}; // Size: 0x188

struct FRandomRollStage
{
    FFloatInterval BaseValueRollInterval;                                             // 0x0000 (size: 0x8)
    FRuntimeFloatCurve BaseValueTargetCurve;                                          // 0x0008 (size: 0x88)
    float BaseValueTargetInterpSpeed;                                                 // 0x0090 (size: 0x4)

}; // Size: 0x98

struct FRangedWeaponSkillExperienceAwards
{
    float PointsPerShotDistance;                                                      // 0x0000 (size: 0x4)
    float PointsPerSubsequentHit;                                                     // 0x0004 (size: 0x4)
    float PointsForKill;                                                              // 0x0008 (size: 0x4)
    float PointsForHeadshot;                                                          // 0x000C (size: 0x4)
    float PointsForLowWindSpeed;                                                      // 0x0010 (size: 0x4)
    float PointsForMediumWindSpeed;                                                   // 0x0014 (size: 0x4)
    float PointsForHighWindSpeed;                                                     // 0x0018 (size: 0x4)
    float PointsForProne;                                                             // 0x001C (size: 0x4)
    float PointsForCrouching;                                                         // 0x0020 (size: 0x4)
    float PointsForStanding;                                                          // 0x0024 (size: 0x4)
    float ClearMalfunctionBadRound;                                                   // 0x0028 (size: 0x4)
    float ClearMalfunctionStovePipe;                                                  // 0x002C (size: 0x4)
    float ClearMalfunctionRoundNotLoaded;                                             // 0x0030 (size: 0x4)
    float ClearMalfunctionDoubleFeed;                                                 // 0x0034 (size: 0x4)
    float ClearMalfunctionStuckBullet;                                                // 0x0038 (size: 0x4)
    float ClearMalfunctionClipPartiallyEjected;                                       // 0x003C (size: 0x4)

}; // Size: 0x40

struct FRangedWeaponSkillParametersPerSkillLevel
{
    float CrosshairHidingDuration;                                                    // 0x0000 (size: 0x4)

}; // Size: 0x4

struct FRazorAttackMontageDescription
{
    class UAnimMontage* Montage;                                                      // 0x0000 (size: 0x8)
    float MaxCombatDistance;                                                          // 0x0008 (size: 0x4)
    float MinCombatDistance;                                                          // 0x000C (size: 0x4)
    float MinPitch;                                                                   // 0x0010 (size: 0x4)

}; // Size: 0x18

struct FRazorDeathAnimationData
{
    class UAnimMontage* AnimMontage;                                                  // 0x0000 (size: 0x8)
    FFloatInterval TimeToRagdollRange;                                                // 0x0008 (size: 0x8)

}; // Size: 0x10

struct FRazorTurnMontageDescription
{
    class UAnimMontage* MontageL90;                                                   // 0x0000 (size: 0x8)
    class UAnimMontage* MontageL180;                                                  // 0x0008 (size: 0x8)
    class UAnimMontage* MontageR90;                                                   // 0x0010 (size: 0x8)
    class UAnimMontage* MontageR180;                                                  // 0x0018 (size: 0x8)
    FName TurnAngleCurveName;                                                         // 0x0020 (size: 0x8)

}; // Size: 0x28

struct FRazorUpperBodyPitchRangeData
{
    FFloatRange ActualPitchRange;                                                     // 0x0000 (size: 0x10)
    float AppliedPitch;                                                               // 0x0010 (size: 0x4)

}; // Size: 0x14

struct FRecentlyUsedDistantLevelStaticMesh
{
    class UStaticMesh* StaticMesh;                                                    // 0x0000 (size: 0x8)

}; // Size: 0x10

struct FRecentlyUsedDistantLevelStaticMeshLODs
{
    TArray<FRecentlyUsedDistantLevelStaticMesh> MeshLODs;                             // 0x0010 (size: 0x10)

}; // Size: 0x20

struct FRecipeIngredient
{
    FText IngredientTitle;                                                            // 0x0000 (size: 0x18)
    bool IsResource;                                                                  // 0x0018 (size: 0x1)
    TArray<FPossibleRecipeIngredient> PossibleIngredient;                             // 0x0020 (size: 0x10)

}; // Size: 0x30

struct FRepActionData
{
    EAnimalAction action;                                                             // 0x0000 (size: 0x1)
    uint8 IndexParameter;                                                             // 0x0001 (size: 0x1)
    uint8 Version;                                                                    // 0x0002 (size: 0x1)

}; // Size: 0x3

struct FRepairToolItemParams
{
    FGameplayTagContainer RepairableItemTypes;                                        // 0x0000 (size: 0x20)
    class UAkAudioEvent* StartRepairSound;                                            // 0x0020 (size: 0x8)
    class UAkAudioEvent* StopRepairSound;                                             // 0x0028 (size: 0x8)
    class UAnimMontage* StartRepairMontage;                                           // 0x0030 (size: 0x8)
    class UAnimMontage* StopRepairMontage;                                            // 0x0038 (size: 0x8)
    float HealthGainPerUseMultiplier;                                                 // 0x0040 (size: 0x4)
    TArray<FRequiredRepairingItemTagParams> RequiredRepairingItemTagsParms;           // 0x0048 (size: 0x10)

}; // Size: 0x58

struct FRepairableParams
{
    FGameplayTagContainer RepairableTypes;                                            // 0x0000 (size: 0x20)
    float HealthRepairedPerUse;                                                       // 0x0020 (size: 0x4)
    float ExperienceAwardedPerHealthRepaired;                                         // 0x0024 (size: 0x4)
    float MinRepairDuration;                                                          // 0x0028 (size: 0x4)
    float MaxRepairDuration;                                                          // 0x002C (size: 0x4)
    bool ShouldRepairZeroHealth;                                                      // 0x0030 (size: 0x1)
    ESkillLevel MinSkillLevelRequired;                                                // 0x0031 (size: 0x1)

}; // Size: 0x38

struct FReplenishableResource
{
}; // Size: 0xA0

struct FReplenishableResourceDescription
{
    TSubclassOf<class UGameResourceType> Type;                                        // 0x0008 (size: 0x8)
    FGameplayTagContainer InSocketTypes;                                              // 0x0010 (size: 0x20)
    FGameplayTagContainer OutSocketTypes;                                             // 0x0030 (size: 0x20)
    float PricePerUnit;                                                               // 0x0050 (size: 0x4)
    bool IsReplenishedPeriodically;                                                   // 0x0054 (size: 0x1)
    FPeriodicallyReplenishedResourceDescription PeriodicReplenishment;                // 0x0058 (size: 0x10)
    FProximityReplenishedResourceDescription ProximityReplenishment;                  // 0x0068 (size: 0x10)

}; // Size: 0x88

struct FReplenishableResourceSlotDescription
{
}; // Size: 0x1C

struct FRequestSpamFilter
{
}; // Size: 0x14

struct FRequiredItemForItemTagParams
{
}; // Size: 0xC

struct FRequiredRepairingItemTagParams
{
    class UBaseItemTag* ItemTag;                                                      // 0x0000 (size: 0x8)
    int32 ItemUsageConsumption;                                                       // 0x0008 (size: 0x4)

}; // Size: 0x10

struct FResourceNetworkGUID
{
}; // Size: 0x4

struct FRespawnParameters
{
    int32 RandomLocationPrice;                                                        // 0x0000 (size: 0x4)
    int32 SectorLocationPrice;                                                        // 0x0004 (size: 0x4)
    ECurrencyType SectorLocationPriceCurrency;                                        // 0x0008 (size: 0x1)
    int32 ShelterLocationPrice;                                                       // 0x000C (size: 0x4)
    ECurrencyType ShelterLocationPriceCurrency;                                       // 0x0010 (size: 0x1)
    int32 SquadLocationPrice;                                                         // 0x0014 (size: 0x4)
    ECurrencyType SquadLocationPriceCurrency;                                         // 0x0018 (size: 0x1)
    int32 PermadeathThreshold;                                                        // 0x001C (size: 0x4)
    ECurrencyType PermadeathThresholdPriceCurrency;                                   // 0x0020 (size: 0x1)
    float RandomPriceModifier;                                                        // 0x0024 (size: 0x4)
    float SectorPriceModifier;                                                        // 0x0028 (size: 0x4)
    float HomePriceModifier;                                                          // 0x002C (size: 0x4)
    float RandomInitialTime;                                                          // 0x0030 (size: 0x4)
    float SectorInitialTime;                                                          // 0x0034 (size: 0x4)
    float ShelterInitialTime;                                                         // 0x0038 (size: 0x4)
    float SquadInitialTime;                                                           // 0x003C (size: 0x4)
    float RandomCooldownTime;                                                         // 0x0040 (size: 0x4)
    float SectorCooldownTime;                                                         // 0x0044 (size: 0x4)
    float ShelterCooldownTime;                                                        // 0x0048 (size: 0x4)
    float SquadCooldownTime;                                                          // 0x004C (size: 0x4)
    float RandomCooldownResetMultiplier;                                              // 0x0050 (size: 0x4)
    float SectorCooldownResetMultiplier;                                              // 0x0054 (size: 0x4)
    float ShelterCooldownResetMultiplier;                                             // 0x0058 (size: 0x4)
    float SquadCooldownResetMultiplier;                                               // 0x005C (size: 0x4)
    float CommitSuicideInitialTime;                                                   // 0x0060 (size: 0x4)
    float CommitSuicideCooldownTime;                                                  // 0x0064 (size: 0x4)
    float CommitSuicideCooldownResetMultiplier;                                       // 0x0068 (size: 0x4)

}; // Size: 0x6C

struct FRestorableMeshInstanceId
{
}; // Size: 0x18

struct FRoomDefinition
{
    class ADoor* RoomDoor;                                                            // 0x0000 (size: 0x8)
    class UStaticMeshComponent* Locker;                                               // 0x0008 (size: 0x8)
    class AKillBoxC4SpawnPoint* C4;                                                   // 0x0010 (size: 0x8)

}; // Size: 0x20

struct FRoomDifficultyConfiguration
{
    TArray<class TSubclassOf<AItem>> Locks;                                           // 0x0000 (size: 0x10)
    TArray<class TSubclassOf<AItem>> Zappers;                                         // 0x0010 (size: 0x10)
    bool IsC4Present;                                                                 // 0x0020 (size: 0x1)
    TArray<FSpawnerConfiguration> PossibleSpawners;                                   // 0x0028 (size: 0x10)

}; // Size: 0x38

struct FRotatedZone
{
    FVector Center;                                                                   // 0x0000 (size: 0xC)
    FVector Extent;                                                                   // 0x000C (size: 0xC)
    FRotator Rotation;                                                                // 0x0018 (size: 0xC)

}; // Size: 0x24

struct FRunningSkillExperienceAwards
{
    float PointsPerMinuteOfJogging;                                                   // 0x0000 (size: 0x4)
    float PointsPerMinuteOfRunning;                                                   // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FRunningSkillParametersPerSkillLevel
{
    FExperienceDependentFloat MaxSpeedMultiplier;                                     // 0x0000 (size: 0x8)
    FExperienceDependentFloat StaminaConsumptionMultiplier;                           // 0x0008 (size: 0x8)

}; // Size: 0x10

struct FScopeZoomLevelSettings
{
    float Magnification;                                                              // 0x0000 (size: 0x4)
    float DisplayedMagnification;                                                     // 0x0004 (size: 0x4)
    FPostProcessSettings PostProcessSettings;                                         // 0x0010 (size: 0x560)

}; // Size: 0x570

struct FScumPointDamageEvent : public FPointDamageEvent
{
}; // Size: 0xC0

struct FScumRadialDamageEvent : public FRadialDamageEvent
{
}; // Size: 0x48

struct FSearchItemClassesArray
{
    TArray<TSoftClassPtr<AItem>> ItemClasses;                                         // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FSearchItemSpawnerPresetArray
{
    TArray<class TSubclassOf<UItemSpawnerPreset>> ItemSpawnerPresets;                 // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FSearchPerItemData
{
    TArray<class UPhysicalMaterial*> NeededMaterials;                                 // 0x0000 (size: 0x10)
    TArray<class UPhysicalMaterial*> RequiredMaterials;                               // 0x0010 (size: 0x10)
    TArray<class UPhysicalMaterial*> ProhibitedMaterials;                             // 0x0020 (size: 0x10)
    FItemSpawnerPresetWithOverrides SpawnerPreset;                                    // 0x0030 (size: 0xB8)

}; // Size: 0xE8

struct FSectorId
{
}; // Size: 0x8

struct FSedentaryNPCHeadAnimationAndAudio
{
    class UAnimMontage* HeadAnimation;                                                // 0x0000 (size: 0x8)
    class UAkAudioEvent* AudioEvent;                                                  // 0x0008 (size: 0x8)
    bool OverrideNativeTrackingAnimations;                                            // 0x0010 (size: 0x1)

}; // Size: 0x18

struct FSedentaryNPCMarker
{
    TSoftClassPtr<ASedentaryNPC> SedentaryNPCClass;                                   // 0x0000 (size: 0x28)
    FTransform SpawnTransform;                                                        // 0x0030 (size: 0x30)
    bool ShouldRaycastSpawnPosition;                                                  // 0x0060 (size: 0x1)

}; // Size: 0x70

struct FSelectedChoppingTool
{
    class AItem* Item;                                                                // 0x0000 (size: 0x8)
    FChoppingTool2 Tool;                                                              // 0x0008 (size: 0x50)
    bool IsRequiredToBeInHands;                                                       // 0x0058 (size: 0x1)

}; // Size: 0x60

struct FSentryCombatBehaviorMode
{
    float CombatVariationWeights;                                                     // 0x0000 (size: 0x14)
    float GrenadeLaunchVariationWeights;                                              // 0x0014 (size: 0xC)

}; // Size: 0x20

struct FSentryDamageEffectData
{
    class UNiagaraSystem* ParticleSystem;                                             // 0x0000 (size: 0x8)
    float EffectsScaleDistanceStart;                                                  // 0x0008 (size: 0x4)
    float EffectsScaleDistanceRange;                                                  // 0x000C (size: 0x4)
    float EffectsScaleByDistanceFactor;                                               // 0x0010 (size: 0x4)

}; // Size: 0x18

struct FSentryGlitchingPartInfo
{
    bool IsGlitching;                                                                 // 0x0000 (size: 0x1)
    float NextUpdateTime;                                                             // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FSentryHotZoneVolumeData
{
    class USentryHotZoneBoxComponent* HotZoneBoxComponent;                            // 0x0000 (size: 0x8)

}; // Size: 0x8

struct FSentryMeleeAttackDescription
{
    class UAnimMontage* AttackAnimation;                                              // 0x0000 (size: 0x8)
    float EnemyAngleMin;                                                              // 0x0008 (size: 0x4)
    float EnemyAngleMax;                                                              // 0x000C (size: 0x4)

}; // Size: 0x10

struct FSentryPatrolPoint
{
    FVector LocationRelativeToSentry;                                                 // 0x0000 (size: 0xC)

}; // Size: 0x20

struct FServerInfo
{
    FString Address;                                                                  // 0x0000 (size: 0x10)
    int32 Port;                                                                       // 0x0010 (size: 0x4)
    FString Name;                                                                     // 0x0018 (size: 0x10)
    uint8 PlayerCount;                                                                // 0x0028 (size: 0x1)
    uint8 MaxPlayerCount;                                                             // 0x0029 (size: 0x1)
    uint8 AverageFPS;                                                                 // 0x002A (size: 0x1)
    bool PasswordProtected;                                                           // 0x002B (size: 0x1)
    float Ping;                                                                       // 0x002C (size: 0x4)
    float InGameTime;                                                                 // 0x0030 (size: 0x4)
    FString Version;                                                                  // 0x0038 (size: 0x10)
    bool IsOfficial;                                                                  // 0x0049 (size: 0x1)
    bool IsComplete;                                                                  // 0x004A (size: 0x1)

}; // Size: 0x50

struct FSettingsUISounds
{
    class UAkAudioEvent* CarouselSelectionClick;                                      // 0x0000 (size: 0x8)
    class UAkAudioEvent* CarouselHover;                                               // 0x0008 (size: 0x8)
    class UAkAudioEvent* SliderIncrement;                                             // 0x0010 (size: 0x8)
    class UAkAudioEvent* SliderDecrement;                                             // 0x0018 (size: 0x8)
    class UAkAudioEvent* SliderHover;                                                 // 0x0020 (size: 0x8)
    class UAkAudioEvent* ControlMappingClick;                                         // 0x0028 (size: 0x8)
    class UAkAudioEvent* ControlMappingHover;                                         // 0x0030 (size: 0x8)
    class UAkAudioEvent* TextBoxFocusReceived;                                        // 0x0038 (size: 0x8)
    class UAkAudioEvent* TextBoxTextInput;                                            // 0x0040 (size: 0x8)
    class UAkAudioEvent* TextBoxHover;                                                // 0x0048 (size: 0x8)

}; // Size: 0x50

struct FSizeVariatedTilesData : public FTilesData
{
}; // Size: 0x40

struct FSkillEventWeapon
{
    EWeaponCategory WeaponCategory;                                                   // 0x0000 (size: 0x1)

}; // Size: 0x1

struct FSkillEventWeaponClearedMalfunction : public FSkillEventWeapon
{
    EWeaponMalfunction malfunction;                                                   // 0x0001 (size: 0x1)

}; // Size: 0x2

struct FSkillEventWeaponFireShot : public FSkillEventWeapon
{
}; // Size: 0x1

struct FSkillEventWeaponProjectileHitTarget : public FSkillEventWeapon
{
    class AActor* Target;                                                             // 0x0008 (size: 0x8)
    float Distance;                                                                   // 0x0010 (size: 0x4)
    float EnergyRatio;                                                                // 0x0014 (size: 0x4)
    bool IsHeadShot;                                                                  // 0x0018 (size: 0x1)
    bool IsKill;                                                                      // 0x0019 (size: 0x1)
    bool WasSniping;                                                                  // 0x001A (size: 0x1)
    EPrisonerGroundStance stance;                                                     // 0x001B (size: 0x1)
    EWindSpeedCategory WindSpeedCategory;                                             // 0x001C (size: 0x1)
    float ExperienceMultiplier;                                                       // 0x0020 (size: 0x4)

}; // Size: 0x28

struct FSkillEventWeaponReload : public FSkillEventWeapon
{
}; // Size: 0x1

struct FSkillExperienceChange
{
    float ExperienceChange;                                                           // 0x0000 (size: 0x4)
    float Time;                                                                       // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FSkillRecord
{
    ESkillReplicationID ID;                                                           // 0x0000 (size: 0x1)
    float ExperiencePoints;                                                           // 0x0004 (size: 0x4)
    ESkillLevel Level;                                                                // 0x0008 (size: 0x1)
    int8 Counter;                                                                     // 0x0009 (size: 0x1)
    TArray<uint8> SkillSpecificData;                                                  // 0x0010 (size: 0x10)

}; // Size: 0x20

struct FSkillTemplate
{
    ESkillAttribute Attribute;                                                        // 0x0000 (size: 0x1)
    FText Name;                                                                       // 0x0008 (size: 0x18)
    FString ClassName;                                                                // 0x0020 (size: 0x10)
    ESkillLevel Level;                                                                // 0x0030 (size: 0x1)
    float Experience;                                                                 // 0x0034 (size: 0x4)

}; // Size: 0x38

struct FSkillTemplateUIData
{
}; // Size: 0x38

struct FSliderWithLabelAndNumberStyle
{
    FSlateBrush FocusBackgroundImage;                                                 // 0x0000 (size: 0x88)
    FSliderWithLabelAndNumberTextStyle LabelText;                                     // 0x0088 (size: 0x68)
    FSliderWithLabelAndNumberTextStyle NumberText;                                    // 0x00F0 (size: 0x68)

}; // Size: 0x158

struct FSliderWithLabelAndNumberTextStyle
{
    FSlateFontInfo Font;                                                              // 0x0000 (size: 0x58)
    FLinearColor ColorAndOpacity;                                                     // 0x0058 (size: 0x10)

}; // Size: 0x68

struct FSlidingDoorPartInfo
{
}; // Size: 0x20

struct FSmokableSubstance
{
    TSubclassOf<class UPrisonerBodyCondition_InhalationPoisoning> InhalationPoisoningType; // 0x0000 (size: 0x8)
    float Amount;                                                                     // 0x0008 (size: 0x4)

}; // Size: 0x10

struct FSnipingSkillExperienceAwards
{
    float PointsPerShotDistance;                                                      // 0x0000 (size: 0x4)
    float PointsPerSubsequentHit;                                                     // 0x0004 (size: 0x4)
    float PointsForKillUnderDistanceLimit;                                            // 0x0008 (size: 0x4)
    float PointsForHeadshotUnderDistanceLimit;                                        // 0x000C (size: 0x4)
    float PointsForHit;                                                               // 0x0010 (size: 0x4)
    float PointsForKill;                                                              // 0x0014 (size: 0x4)
    float PointsForHeadshot;                                                          // 0x0018 (size: 0x4)
    float PointsForLowWindSpeed;                                                      // 0x001C (size: 0x4)
    float PointsForMediumWindSpeed;                                                   // 0x0020 (size: 0x4)
    float PointsForHighWindSpeed;                                                     // 0x0024 (size: 0x4)
    float PointsForProne;                                                             // 0x0028 (size: 0x4)
    float PointsForCrouching;                                                         // 0x002C (size: 0x4)
    float PointsForStanding;                                                          // 0x0030 (size: 0x4)

}; // Size: 0x34

struct FSpamConsequences
{
    float Timeout;                                                                    // 0x0000 (size: 0x4)
    bool PermanentTimeout;                                                            // 0x0004 (size: 0x1)

}; // Size: 0x8

struct FSpamSeverityConditions
{
    float ResetDuration;                                                              // 0x0000 (size: 0x4)
    int32 OffenceRepetitions;                                                         // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FSpawnArea
{
    FVector Center;                                                                   // 0x0000 (size: 0xC)
    float Radius;                                                                     // 0x000C (size: 0x4)
    int32 TeamIndex;                                                                  // 0x0010 (size: 0x4)

}; // Size: 0x14

struct FSpawnedDepotsHelperStruct
{
}; // Size: 0x58

struct FSpawnedItems
{
    int32 ID;                                                                         // 0x0000 (size: 0x4)
    EPickupItemOperation Operation;                                                   // 0x0004 (size: 0x1)
    TArray<class AItem*> Items;                                                       // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FSpawnerConfiguration
{
    TSubclassOf<class UItemSpawnerPreset> Spawner;                                    // 0x0000 (size: 0x8)
    TSubclassOf<class UItemSpawnerPreset2> SpawnerPreset;                             // 0x0008 (size: 0x8)
    int32 MinimumItemsCount;                                                          // 0x0010 (size: 0x4)
    int32 MaximumItemsCount;                                                          // 0x0014 (size: 0x4)

}; // Size: 0x18

struct FSpecialQuestSetupArray
{
    FGameplayTagQuery TagsRequirements;                                               // 0x0000 (size: 0x48)
    TArray<class UQuestSetup*> Quests;                                                // 0x0048 (size: 0x10)

}; // Size: 0x58

struct FSplineDescription
{
    class USplineComponent* SplineComponent;                                          // 0x0000 (size: 0x8)
    TArray<class USplineMeshComponent*> SplineMeshComponents;                         // 0x0008 (size: 0x10)
    class UStaticMeshComponent* SplineStartConnector;                                 // 0x0018 (size: 0x8)
    class UStaticMeshComponent* SplineEndConnector;                                   // 0x0020 (size: 0x8)

}; // Size: 0x30

struct FSquadLeaveInfo
{
    FDateTime LastProbationStartTimestamp;                                            // 0x0000 (size: 0x8)
    uint8 LastProbationSquadSize;                                                     // 0x0008 (size: 0x1)
    uint8 LastPenaltySquadSize;                                                       // 0x0009 (size: 0x1)

}; // Size: 0x10

struct FSquadUISounds
{
    class UAkAudioEvent* CreateSquadClick;                                            // 0x0000 (size: 0x8)
    class UAkAudioEvent* EditSquadClick;                                              // 0x0008 (size: 0x8)
    class UAkAudioEvent* LeaveSquadClick;                                             // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FStartLocationDescription
{
    uint8 TypeFlags;                                                                  // 0x0000 (size: 0x1)
    FTransform Transform;                                                             // 0x0010 (size: 0x30)
    bool IsDisabled;                                                                  // 0x0040 (size: 0x1)

}; // Size: 0x50

struct FStaticMeshMaterialPair
{
    class UStaticMesh* Mesh;                                                          // 0x0000 (size: 0x8)
    TArray<class UMaterialInterface*> Materials;                                      // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FStealthSkillExperienceAwards
{
    float PointsForCrouchedMovementPerSecond;                                         // 0x0000 (size: 0x4)
    float PointsForProneMovementPerSecond;                                            // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FSubstancesData
{
    float Nutrients;                                                                  // 0x0000 (size: 0x80)
    TMap<int32, float> ForeignSubstances;                                             // 0x0080 (size: 0x50)

}; // Size: 0xD0

struct FSurvivalStats
{
    float HighestPositiveFamePoints;                                                  // 0x0008 (size: 0x4)
    int32 DoorsClaimed;                                                               // 0x000C (size: 0x4)
    int32 AnimalsKilled;                                                              // 0x0010 (size: 0x4)
    float MinutesSurvived;                                                            // 0x0014 (size: 0x4)
    int32 Kills;                                                                      // 0x0018 (size: 0x4)
    int32 Deaths;                                                                     // 0x001C (size: 0x4)
    int32 LocksPicked;                                                                // 0x0020 (size: 0x4)
    int32 PuppetsKilled;                                                              // 0x0024 (size: 0x4)
    int32 GunsCrafted;                                                                // 0x0028 (size: 0x4)
    int32 AmmoCrafted;                                                                // 0x002C (size: 0x4)
    int32 BulletsCrafted;                                                             // 0x0030 (size: 0x4)
    int32 ArrowsCrafted;                                                              // 0x0034 (size: 0x4)
    int32 ClothingCrafted;                                                            // 0x0038 (size: 0x4)
    float LongestKillDistance;                                                        // 0x003C (size: 0x4)
    int32 MeleeKills;                                                                 // 0x0040 (size: 0x4)
    int32 ArcheryKills;                                                               // 0x0044 (size: 0x4)
    int32 PlayersKnockedOut;                                                          // 0x0048 (size: 0x4)
    int32 TotalDefecations;                                                           // 0x004C (size: 0x4)
    int32 TotalUrinations;                                                            // 0x0050 (size: 0x4)
    int32 LightsFired;                                                                // 0x0054 (size: 0x4)
    int32 ContainersLooted;                                                           // 0x0058 (size: 0x4)
    int32 ItemsPutIntoContainers;                                                     // 0x005C (size: 0x4)
    int32 DeathsByPrisoners;                                                          // 0x0060 (size: 0x4)
    int32 AnimalsSkinned;                                                             // 0x0064 (size: 0x4)
    float FoodEaten;                                                                  // 0x0068 (size: 0x4)
    float DistanceTravelledByFoot;                                                    // 0x006C (size: 0x4)
    int32 WoundsPatched;                                                              // 0x0070 (size: 0x4)
    int32 ItemsPickedUp;                                                              // 0x0074 (size: 0x4)
    float LiquidDrank;                                                                // 0x0078 (size: 0x4)
    int32 TeethLost;                                                                  // 0x007C (size: 0x4)
    int32 TotalCaloriesIntake;                                                        // 0x0080 (size: 0x4)
    int32 ShotsFired;                                                                 // 0x0084 (size: 0x4)
    int32 ShotsHit;                                                                   // 0x0088 (size: 0x4)
    float RangeWeaponAccuracy;                                                        // 0x008C (size: 0x4)
    int32 Headshots;                                                                  // 0x0090 (size: 0x4)
    int32 MeleeWeaponSwings;                                                          // 0x0094 (size: 0x4)
    int32 MeleeWeaponHits;                                                            // 0x0098 (size: 0x4)
    float MeleeWeaponAccuracy;                                                        // 0x009C (size: 0x4)
    int32 MeleeWeaponsCrafted;                                                        // 0x00A0 (size: 0x4)
    int32 DroneKills;                                                                 // 0x00A4 (size: 0x4)
    int32 SentryKills;                                                                // 0x00A8 (size: 0x4)
    int32 PrisonerKills;                                                              // 0x00AC (size: 0x4)
    int32 PuppetsKnockedOut;                                                          // 0x00B0 (size: 0x4)
    int32 Diarrheas;                                                                  // 0x00B4 (size: 0x4)
    int32 Vomits;                                                                     // 0x00B8 (size: 0x4)
    float DistanceTravelledInVehicle;                                                 // 0x00BC (size: 0x4)
    int32 MushroomsEaten;                                                             // 0x00C0 (size: 0x4)
    float HighestMuscleMass;                                                          // 0x00C4 (size: 0x4)
    float HighestFat;                                                                 // 0x00C8 (size: 0x4)
    int32 HeartAttacks;                                                               // 0x00CC (size: 0x4)
    int32 Overdose;                                                                   // 0x00D0 (size: 0x4)
    int32 Starvation;                                                                 // 0x00D4 (size: 0x4)
    float HighestDamageTaken;                                                         // 0x00D8 (size: 0x4)
    float HighestWeightCarried;                                                       // 0x00DC (size: 0x4)
    int32 EventsWon;                                                                  // 0x00E0 (size: 0x4)
    int32 EventsLost;                                                                 // 0x00E4 (size: 0x4)
    float LowestNegativeFamePoints;                                                   // 0x00E8 (size: 0x4)
    float DistanceTravelledSwimming;                                                  // 0x00EC (size: 0x4)
    int32 EventsEnemyKills;                                                           // 0x00F0 (size: 0x4)
    int32 EventsDeaths;                                                               // 0x00F4 (size: 0x4)
    int32 FlagCaptures;                                                               // 0x00F8 (size: 0x4)
    int32 CrowsKilled;                                                                // 0x00FC (size: 0x4)
    int32 SeagullsKilled;                                                             // 0x0100 (size: 0x4)
    int32 HorsesKilled;                                                               // 0x0104 (size: 0x4)
    int32 BoarsKilled;                                                                // 0x0108 (size: 0x4)
    int32 BearsKilled;                                                                // 0x010C (size: 0x4)
    int32 GoatsKilled;                                                                // 0x0110 (size: 0x4)
    int32 DeersKilled;                                                                // 0x0114 (size: 0x4)
    int32 ChickensKilled;                                                             // 0x0118 (size: 0x4)
    int32 RabbitsKilled;                                                              // 0x011C (size: 0x4)
    int32 DonkeysKilled;                                                              // 0x0120 (size: 0x4)
    int32 WolvesKilled;                                                               // 0x0124 (size: 0x4)
    int32 TimesMauledByABear;                                                         // 0x0128 (size: 0x4)
    float LongestAnimalKillDistance;                                                  // 0x012C (size: 0x4)
    int32 EventTeamKills;                                                             // 0x0130 (size: 0x4)
    float KillDeathRatio;                                                             // 0x0134 (size: 0x4)
    float EventsKillDeathRatio;                                                       // 0x0138 (size: 0x4)
    float AlcoholDrank;                                                               // 0x013C (size: 0x4)
    int32 FoliageCut;                                                                 // 0x0140 (size: 0x4)
    FFishingStats FishingStats;                                                       // 0x0148 (size: 0x28)
    float DistanceTravelledByBoat;                                                    // 0x0170 (size: 0x4)
    float DistanceSailed;                                                             // 0x0174 (size: 0x4)
    int32 TimesCaughtByShark;                                                         // 0x0178 (size: 0x4)
    int32 TimesEscapedSharkBite;                                                      // 0x017C (size: 0x4)
    int32 LastFamePointAwardConsecutiveDays;                                          // 0x0180 (size: 0x4)
    int32 FirearmKills;                                                               // 0x0184 (size: 0x4)
    int32 BareHandedKills;                                                            // 0x0188 (size: 0x4)

}; // Size: 0x190

struct FSurvivalTipData : public FTableRowBase
{
    FText Text;                                                                       // 0x0008 (size: 0x18)
    FName DeenaDialogueName;                                                          // 0x0020 (size: 0x8)
    float Duration;                                                                   // 0x0028 (size: 0x4)
    uint8 Priority;                                                                   // 0x002C (size: 0x1)
    ESurvivalTipLevel Level;                                                          // 0x002D (size: 0x1)
    ESurvivalTipCodexCategory Category;                                               // 0x002E (size: 0x1)

}; // Size: 0x30

struct FSwitchMaterialEmissiveColorProperties
{
    FLinearColor OnEmissiveColor;                                                     // 0x0000 (size: 0x10)
    FLinearColor OffEmissiveColor;                                                    // 0x0010 (size: 0x10)
    int32 EmissiveMaterialIndex;                                                      // 0x0020 (size: 0x4)
    FName EmissiveColorPropertyName;                                                  // 0x0024 (size: 0x8)

}; // Size: 0x2C

struct FTabButtonStyle
{
    FVector2D Size;                                                                   // 0x0000 (size: 0x8)
    TEnumAsByte<EHorizontalAlignment> HorizontalAlignment;                            // 0x0008 (size: 0x1)
    TEnumAsByte<EVerticalAlignment> VerticalAlignment;                                // 0x0009 (size: 0x1)
    FButtonStyle ButtonStyle;                                                         // 0x0010 (size: 0x278)

}; // Size: 0x288

struct FTabTextStyle
{
    FMargin Padding;                                                                  // 0x0000 (size: 0x10)
    TEnumAsByte<EHorizontalAlignment> HorizontalAlignment;                            // 0x0010 (size: 0x1)
    TEnumAsByte<EVerticalAlignment> VerticalAlignment;                                // 0x0011 (size: 0x1)
    FSlateFontInfo Font;                                                              // 0x0018 (size: 0x58)
    FLinearColor Color;                                                               // 0x0070 (size: 0x10)
    FVector2D ShadowOffset;                                                           // 0x0080 (size: 0x8)
    FLinearColor ShadowColorAndOpacity;                                               // 0x0088 (size: 0x10)

}; // Size: 0x98

struct FTargetTypeDamageMultiplier
{
    TArray<FDamageMultiplier> _multipliers;                                           // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FTaskInstance
{
}; // Size: 0x20

struct FTaskInstanceId : public FDbIntegerId
{
}; // Size: 0x8

struct FTeamDeathmatchParameters
{
    int32 RoundScoreLimit;                                                            // 0x0000 (size: 0x4)
    float AreaRestrictionInterval;                                                    // 0x0004 (size: 0x4)
    float AreaRestrictionDuration;                                                    // 0x0008 (size: 0x4)
    float AreaRestrictionStep;                                                        // 0x000C (size: 0x4)
    float BarrierHeatUpDuration;                                                      // 0x0010 (size: 0x4)

}; // Size: 0x14

struct FTeleportRepData
{
    uint8 RequestID;                                                                  // 0x0000 (size: 0x1)
    bool IsInProgress;                                                                // 0x0001 (size: 0x1)
    bool IsRespawn;                                                                   // 0x0002 (size: 0x1)
    TWeakObjectPtr<class AActor> Subject;                                             // 0x0004 (size: 0x8)
    FVector TargetLocation;                                                           // 0x000C (size: 0xC)
    FRotator TargetRotation;                                                          // 0x0018 (size: 0xC)
    FTeleportUserDataReplicator UserDataReplicator;                                   // 0x0028 (size: 0x8)

}; // Size: 0x30

struct FTeleportRequest
{
    TWeakObjectPtr<class AActor> Subject;                                             // 0x0000 (size: 0x8)
    FVector TargetLocation;                                                           // 0x0008 (size: 0xC)
    FRotator TargetRotation;                                                          // 0x0014 (size: 0xC)
    TWeakObjectPtr<class UTeleportUserData> UserData;                                 // 0x0020 (size: 0x8)

}; // Size: 0x2C

struct FTeleportUserDataReplicator
{
    class UTeleportUserData* UserData;                                                // 0x0000 (size: 0x8)

}; // Size: 0x8

struct FTextBoxTextStyle
{
    FSlateFontInfo Font;                                                              // 0x0000 (size: 0x58)
    FLinearColor ColorAndOpacity;                                                     // 0x0058 (size: 0x10)

}; // Size: 0x68

struct FTextBoxWithLabelStyle
{
    FSlateBrush FocusBackgroundImage;                                                 // 0x0000 (size: 0x88)
    FTextBoxTextStyle LabelText;                                                      // 0x0088 (size: 0x68)
    FTextBoxTextStyle InputBoxText;                                                   // 0x00F0 (size: 0x68)

}; // Size: 0x158

struct FThieverySkillExperienceAwards
{
    float PointsForSuccessfulLockpicking;                                             // 0x0000 (size: 0x4)
    float PointsForUnsuccessfulLockpicking;                                           // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FThrowingAnimationSet
{
    class UAnimMontage* PlayerLongThrowMontage;                                       // 0x0000 (size: 0x8)
    class UAnimMontage* PlayerLongThrowLoopMontage;                                   // 0x0008 (size: 0x8)
    class UAnimMontage* PlayerShortThrowMontage;                                      // 0x0010 (size: 0x8)
    class UAnimMontage* PlayerThrowbackMontage;                                       // 0x0018 (size: 0x8)

}; // Size: 0x20

struct FThrowingItemData
{
}; // Size: 0x10

struct FTilesData
{
    class UHierarchicalInstancedStaticMeshComponent* HISMComponentMain;               // 0x0000 (size: 0x8)
    class UHierarchicalInstancedStaticMeshComponent* HISMComponentOutline;            // 0x0008 (size: 0x8)
    class UHierarchicalInstancedStaticMeshComponent* HISMComponentDepth;              // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FTimestampedObject
{
    class UObject* Object;                                                            // 0x0000 (size: 0x8)

}; // Size: 0x10

struct FTipAndItems
{
    FName SurvivalTip;                                                                // 0x0000 (size: 0x8)
    TArray<TSoftClassPtr<AItem>> NeededItemsClasses;                                  // 0x0008 (size: 0x10)
    bool AllowChildClassesToMatch;                                                    // 0x0018 (size: 0x1)

}; // Size: 0x30

struct FTireSurfaceAudioEntry
{
    class UAkAudioEvent* SoundGroup;                                                  // 0x0000 (size: 0x8)
    TArray<TEnumAsByte<EPhysicalSurface>> RelatedPhysicalSurfaces;                    // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FTooltipPanelData
{
    UClass* ItemClass;                                                                // 0x0000 (size: 0x8)
    TSubclassOf<class UUserWidget> WidgetClass;                                       // 0x0008 (size: 0x8)
    ETooltipPanelType PanelType;                                                      // 0x0010 (size: 0x1)
    int32 Layer;                                                                      // 0x0014 (size: 0x4)
    bool IsEditorOnly;                                                                // 0x0018 (size: 0x1)

}; // Size: 0x20

struct FTournamentParameters
{
}; // Size: 0x10

struct FTournamentStats
{
    FDbIntegerId UserProfileId;                                                       // 0x0000 (size: 0x8)
    FString PlayerName;                                                               // 0x0008 (size: 0x10)
    bool Online;                                                                      // 0x0018 (size: 0x1)
    bool Alive;                                                                       // 0x0019 (size: 0x1)
    int32 FamePoints;                                                                 // 0x001C (size: 0x4)
    int32 Kills;                                                                      // 0x0020 (size: 0x4)
    int32 Deaths;                                                                     // 0x0024 (size: 0x4)
    FDateTime LastDeathTime;                                                          // 0x0028 (size: 0x8)

}; // Size: 0x30

struct FTrackedQuest
{
    FTrackingDataSetId ID;                                                            // 0x0000 (size: 0x8)
    EQuestType Type;                                                                  // 0x0008 (size: 0x1)

}; // Size: 0x10

struct FTrackingDataId : public FDbIntegerId
{
}; // Size: 0x8

struct FTrackingDataNetPackedBits
{
}; // Size: 0x90

struct FTrackingDataSet
{
}; // Size: 0x30

struct FTrackingDataSetId : public FDbIntegerId
{
}; // Size: 0x8

struct FTradeOutpostManagerDescription
{
}; // Size: 0xB8

struct FTradeOutpostProsperityLevelInfo
{
    FString ProsperityLevelName;                                                      // 0x0000 (size: 0x10)
    float ProsperityLevelThreshold;                                                   // 0x0010 (size: 0x4)
    float FundsChangeRatePerHour;                                                     // 0x0014 (size: 0x4)
    int32 ProsperityLevelThresholdGold;                                               // 0x0018 (size: 0x4)
    float GBCRefreshRatePerHour;                                                      // 0x001C (size: 0x4)
    float GSCRefreshRatePerHour;                                                      // 0x0020 (size: 0x4)

}; // Size: 0x28

struct FTradeableClassAndQuantity
{
}; // Size: 0x20

struct FTradeableClassDataOverrideReplicationHelper
{
}; // Size: 0x70

struct FTradeableOverrideData
{
}; // Size: 0x1C

struct FTradeablesResponseData
{
}; // Size: 0x40

struct FTraderDropdownMenuEntry
{
    FText Title;                                                                      // 0x0000 (size: 0x18)
    int32 IndentationLevel;                                                           // 0x0018 (size: 0x4)
    FGameplayTagContainer TradeCategories;                                            // 0x0020 (size: 0x20)
    class UUserWidget* RelatedCategoryButton;                                         // 0x0040 (size: 0x8)
    class UPanelWidget* PanelToOpenOnClick;                                           // 0x0048 (size: 0x8)

}; // Size: 0x50

struct FTraderLocationMarker
{
    ETraderLocationMarkerType MarkerType;                                             // 0x0000 (size: 0x4)
    FTransform Transform;                                                             // 0x0010 (size: 0x30)

}; // Size: 0x40

struct FTraderMarker : public FSedentaryNPCMarker
{
    class UTraderPersonalityDataAsset* TraderPersonality;                             // 0x0068 (size: 0x8)
    FTransform PurchasedTradeablesSpawnTransform;                                     // 0x0070 (size: 0x30)
    FTransform DepotSpawnTransform;                                                   // 0x00A0 (size: 0x30)

}; // Size: 0xD0

struct FTraderMarkerTradeableOverrideStruct
{
    TSoftClassPtr<UObject> TradeableClass;                                            // 0x0000 (size: 0x28)
    int32 BasePlayerPurchasePrice;                                                    // 0x0028 (size: 0x4)
    ECurrencyType PurchaseCurrencyType;                                               // 0x002C (size: 0x1)
    int32 PurchasePriceAlternateCurrencyPrice;                                        // 0x0030 (size: 0x4)
    int32 BasePlayerSellPrice;                                                        // 0x0034 (size: 0x4)
    float DeltaPrice;                                                                 // 0x0038 (size: 0x4)
    bool IsOverridingPurchaseAbility;                                                 // 0x003C (size: 0x1)
    bool CanBePurchasedByPlayer;                                                      // 0x003D (size: 0x1)
    bool IsLocallyImmuneToUserOverrides;                                              // 0x003E (size: 0x1)
    int32 RequiredFamePoints;                                                         // 0x0040 (size: 0x4)

}; // Size: 0x48

struct FTraderRuntimeId
{
}; // Size: 0xC

struct FTraderSpecialDeal
{
    TSoftClassPtr<UObject> TradeableClass;                                            // 0x0038 (size: 0x28)
    int32 BasePurchasePrice;                                                          // 0x0060 (size: 0x4)
    int32 AmountInStore;                                                              // 0x0064 (size: 0x4)
    bool OverridePurchaseAbility;                                                     // 0x0068 (size: 0x1)
    bool CanBePurchasedByPlayer;                                                      // 0x0069 (size: 0x1)
    int32 RequiredFamePoints;                                                         // 0x006C (size: 0x4)

}; // Size: 0x70

struct FTraderUISounds
{
    class UAkAudioEvent* ExitButtonClick;                                             // 0x0000 (size: 0x8)
    class UAkAudioEvent* BackButtonClick;                                             // 0x0008 (size: 0x8)
    class UAkAudioEvent* CartButtonClick;                                             // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FTraderUnsubscribeData
{
}; // Size: 0x28

struct FTrapTriggerParams
{
    class AActor* TriggeredActor;                                                     // 0x0000 (size: 0x8)
    float DeltaTime;                                                                  // 0x0008 (size: 0x4)

}; // Size: 0x10

struct FTreeCanopyCapsule
{
    FVector Center;                                                                   // 0x0000 (size: 0xC)
    FRotator Rotation;                                                                // 0x000C (size: 0xC)
    float Radius;                                                                     // 0x0018 (size: 0x4)
    float Length;                                                                     // 0x001C (size: 0x4)
    float CanopyDensity;                                                              // 0x0020 (size: 0x4)

}; // Size: 0x24

struct FTreeCanopySphere
{
    FVector Center;                                                                   // 0x0000 (size: 0xC)
    float Radius;                                                                     // 0x000C (size: 0x4)
    float CanopyDensity;                                                              // 0x0010 (size: 0x4)

}; // Size: 0x14

struct FTriggeredEventData
{
}; // Size: 0x10

struct FTurnMontages
{
    class UAnimMontage* TurnInPlaceLeft;                                              // 0x0000 (size: 0x8)
    class UAnimMontage* TurnInPlaceRight;                                             // 0x0008 (size: 0x8)

}; // Size: 0x10

struct FTurretPaintjobPatternParams
{
    FText Name;                                                                       // 0x0000 (size: 0x18)
    class UTexture2D* Texture;                                                        // 0x0018 (size: 0x8)
    int32 ColorCount;                                                                 // 0x0020 (size: 0x4)
    float ScaleMultiplier;                                                            // 0x0024 (size: 0x4)
    EDeluxeVersion DeluxeVersionRequired;                                             // 0x0028 (size: 0x1)

}; // Size: 0x30

struct FUnlockLocation
{
    FTransform Transform;                                                             // 0x0000 (size: 0x30)

}; // Size: 0x30

struct FUserProfileAuthorityInfo
{
    FString Name;                                                                     // 0x0000 (size: 0x10)
    FString Ip;                                                                       // 0x0010 (size: 0x10)
    int32 ResponsePort;                                                               // 0x0020 (size: 0x4)
    int32 GameplayPort;                                                               // 0x0024 (size: 0x4)
    FDbIntegerId UserProfileId;                                                       // 0x0028 (size: 0x8)
    FString AuthToken;                                                                // 0x0030 (size: 0x10)

}; // Size: 0x40

struct FUserServerHistoryItem
{
    FString Name;                                                                     // 0x0000 (size: 0x10)
    FString Host;                                                                     // 0x0010 (size: 0x10)
    int32 Port;                                                                       // 0x0020 (size: 0x4)

}; // Size: 0x28

struct FVATMaterialParam
{
    class UMaterialInstanceDynamic* DynamicMaterial;                                  // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FVehicleAttachmentAdditionalSocket
{
    FName Name;                                                                       // 0x0000 (size: 0x8)
    FTransform Transform;                                                             // 0x0010 (size: 0x30)

}; // Size: 0x40

struct FVehicleAttachmentAlternatorSetup
{
    class UCurveFloat* RpmChargeCurve;                                                // 0x0000 (size: 0x8)

}; // Size: 0x8

struct FVehicleAttachmentAssociatedTradeables
{
    TSoftClassPtr<UObject> RepairServiceClass;                                        // 0x0000 (size: 0x28)
    TSoftClassPtr<UObject> InstallationServiceClass;                                  // 0x0028 (size: 0x28)

}; // Size: 0x50

struct FVehicleAttachmentBatterySetup
{
    TSubclassOf<class UGameResourceType> BatteryResourceType;                         // 0x0000 (size: 0x8)
    float Charge;                                                                     // 0x0008 (size: 0x4)
    float ChargingBaseDuration;                                                       // 0x000C (size: 0x4)
    float ChargingDurationPerAmountCharged;                                           // 0x0010 (size: 0x4)
    float ExperienceAwardedPerAmountCharged;                                          // 0x0014 (size: 0x4)
    class UAnimMontage* PrisonerChargingMontage;                                      // 0x0018 (size: 0x8)
    class UAkAudioEvent* StartChargingAudioEvent;                                     // 0x0020 (size: 0x8)
    class UAkAudioEvent* StopChargingAudioEvent;                                      // 0x0028 (size: 0x8)

}; // Size: 0x30

struct FVehicleAttachmentBatterySimulationData
{
    float CurrentCharge;                                                              // 0x0000 (size: 0x4)

}; // Size: 0x4

struct FVehicleAttachmentDestructionEffect
{
    TArray<FVehicleAttachmentDestructionEffectMesh> DestructionMeshes;                // 0x0000 (size: 0x10)
    TArray<FVehicleAttachmentDestructionEffectParticle> DestructionParticles;         // 0x0010 (size: 0x10)
    float MeshesLifetime;                                                             // 0x0020 (size: 0x4)

}; // Size: 0x28

struct FVehicleAttachmentDestructionEffectMesh
{
    FSoftObjectPath Mesh;                                                             // 0x0000 (size: 0x18)
    FTransform Offset;                                                                // 0x0020 (size: 0x30)

}; // Size: 0x50

struct FVehicleAttachmentDestructionEffectParticle
{
    class UParticleSystem* ParticleEffect;                                            // 0x0000 (size: 0x8)
    FTransform Offset;                                                                // 0x0010 (size: 0x30)

}; // Size: 0x40

struct FVehicleAttachmentDoorAnimationSet
{
    FTransform PrisonerTransformToInteract;                                           // 0x0000 (size: 0x30)
    class UAnimMontage* PrisonerUnmountedOpenMontage;                                 // 0x0030 (size: 0x8)
    class UAnimMontage* PrisonerUnmountedCloseMontage;                                // 0x0038 (size: 0x8)
    class UAnimMontage* PrisonerMountedOpenMontage;                                   // 0x0040 (size: 0x8)
    class UAnimMontage* PrisonerMountedCloseMontage;                                  // 0x0048 (size: 0x8)

}; // Size: 0x50

struct FVehicleAttachmentDoorSetup
{
    FRotator OpenRotator;                                                             // 0x0000 (size: 0xC)
    TArray<FVehicleAttachmentDoorAnimationSet> DoorAnimationSets;                     // 0x0010 (size: 0x10)
    float DestinationAcceptanceRadius;                                                // 0x0020 (size: 0x4)
    float MinDestinationAcceptanceRadius;                                             // 0x0024 (size: 0x4)
    float MaxSlopeAngleForOpen;                                                       // 0x0028 (size: 0x4)

}; // Size: 0x30

struct FVehicleAttachmentEngineBlockSetup
{
    class UCurveFloat* AccelerationCurve;                                             // 0x0000 (size: 0x8)
    class UCurveFloat* TorqueCurve;                                                   // 0x0008 (size: 0x8)
    float RpmMax;                                                                     // 0x0010 (size: 0x4)
    float RpmLimiter;                                                                 // 0x0014 (size: 0x4)
    float RpmIdle;                                                                    // 0x0018 (size: 0x4)
    float RpmRise;                                                                    // 0x001C (size: 0x4)
    float RpmFall;                                                                    // 0x0020 (size: 0x4)
    float RpmCrank;                                                                   // 0x0024 (size: 0x4)
    float FuelCapacity;                                                               // 0x0028 (size: 0x4)
    TSubclassOf<class UGameResourceType> FuelResourceType;                            // 0x0030 (size: 0x8)
    class UCurveFloat* FuelConsumptionVsEngineRpm;                                    // 0x0038 (size: 0x8)
    class UCurveFloat* FuelConsumptionMultiplierVsEngineLoad;                         // 0x0040 (size: 0x8)
    class UCurveFloat* FuelConsumptionMultiplierVsAdditionalMass;                     // 0x0048 (size: 0x8)
    float FuelFillingBaseDuration;                                                    // 0x0050 (size: 0x4)
    float FuelDrainingBaseDuration;                                                   // 0x0054 (size: 0x4)
    float FillingDurationPerFuelAmountFilled;                                         // 0x0058 (size: 0x4)
    float DrainingDurationPerFuelAmountDrained;                                       // 0x005C (size: 0x4)
    float ExperienceAwardedPerFuelAmountFilled;                                       // 0x0060 (size: 0x4)
    float ExperienceAwardedPerFuelAmountDrained;                                      // 0x0064 (size: 0x4)
    class UAnimMontage* PrisonerFillingFuelMontage;                                   // 0x0068 (size: 0x8)
    class UAnimMontage* PrisonerDrainingFuelMontage;                                  // 0x0070 (size: 0x8)
    FGameplayTagContainer InSocketTypes;                                              // 0x0078 (size: 0x20)
    FGameplayTagContainer OutSocketTypes;                                             // 0x0098 (size: 0x20)
    class UAkAudioEvent* StartFillingFuelAudioEvent;                                  // 0x00B8 (size: 0x8)
    class UAkAudioEvent* StopFillingFuelAudioEvent;                                   // 0x00C0 (size: 0x8)
    class UAkAudioEvent* StartFillingFuelWithReplenishableResourceAudioEvent;         // 0x00C8 (size: 0x8)
    class UAkAudioEvent* StopFillingFuelWithReplenishableResourceAudioEvent;          // 0x00D0 (size: 0x8)
    class UAkAudioEvent* StartDrainingFuelAudioEvent;                                 // 0x00D8 (size: 0x8)
    class UAkAudioEvent* StopDrainingFuelAudioEvent;                                  // 0x00E0 (size: 0x8)
    FVector ReplenishableFillSourceOverlapBoxExtent;                                  // 0x00E8 (size: 0xC)
    class UAkAudioEvent* RunningAudioEventStart;                                      // 0x00F8 (size: 0x8)
    class UAkAudioEvent* RunningAudioEventStop;                                       // 0x0100 (size: 0x8)
    float RTPCRpmMaxMultiplier;                                                       // 0x0108 (size: 0x4)
    float RTPCRpmMinMultiplier;                                                       // 0x010C (size: 0x4)
    float RTPCRpmMultiplier;                                                          // 0x0110 (size: 0x4)
    float RTPCRpmMultiplierReverse;                                                   // 0x0114 (size: 0x4)
    float WorkingTemperature;                                                         // 0x0118 (size: 0x4)
    float MaxTemperature;                                                             // 0x011C (size: 0x4)
    class UCurveFloat* CoolantRatioToTemperatureRiseCurve;                            // 0x0120 (size: 0x8)
    float IgnitionBatteryDrainPerSecond;                                              // 0x0128 (size: 0x4)
    float IgnitionDuration;                                                           // 0x012C (size: 0x4)
    class UAkAudioEvent* IgnitionAudioEventStart;                                     // 0x0130 (size: 0x8)
    class UAkAudioEvent* IgnitionAudioEventStop;                                      // 0x0138 (size: 0x8)
    class UAkAudioEvent* IgnitionSuccessAudioEvent;                                   // 0x0140 (size: 0x8)
    float StallingDuration;                                                           // 0x0148 (size: 0x4)
    float StallingRecoveryChance;                                                     // 0x014C (size: 0x4)
    class UAkAudioEvent* StallingAudioEventStart;                                     // 0x0150 (size: 0x8)
    class UAkAudioEvent* StallingAudioEventStop;                                      // 0x0158 (size: 0x8)
    class UAkAudioEvent* RemovedAudioEventStart;                                      // 0x0160 (size: 0x8)

}; // Size: 0x168

struct FVehicleAttachmentEngineBlockSimulationData
{
    EEngineBlockState State;                                                          // 0x0000 (size: 0x1)
    float IgnitionDurationMultiplier;                                                 // 0x000C (size: 0x4)
    float IgnitionFailureChance;                                                      // 0x0010 (size: 0x4)
    bool StarterMotorTurnedOn;                                                        // 0x0014 (size: 0x1)
    bool ShouldApplyTorque;                                                           // 0x0015 (size: 0x1)
    float CurrentRpm;                                                                 // 0x0018 (size: 0x4)
    float Load;                                                                       // 0x001C (size: 0x4)
    float CurrentFuelCapacity;                                                        // 0x0020 (size: 0x4)
    float TargetTemperature;                                                          // 0x0024 (size: 0x4)
    float CurrentTemperature;                                                         // 0x0028 (size: 0x4)

}; // Size: 0x2C

struct FVehicleAttachmentGearboxSetup
{
    TArray<FVehicleGearSetup> Gears;                                                  // 0x0000 (size: 0x10)
    TArray<FVehicleGearSetup> GearsReduced;                                           // 0x0010 (size: 0x10)
    bool IsAutomatic;                                                                 // 0x0020 (size: 0x1)
    float GearChangeDelay;                                                            // 0x0024 (size: 0x4)

}; // Size: 0x28

struct FVehicleAttachmentGearboxSimulationData
{
    int32 CurrentGearIndex;                                                           // 0x0004 (size: 0x4)

}; // Size: 0x14

struct FVehicleAttachmentMeshSetup
{
    bool ShouldCreate;                                                                // 0x0000 (size: 0x1)
    bool ShouldCreateOnServer;                                                        // 0x0001 (size: 0x1)
    FSoftObjectPath Mesh;                                                             // 0x0008 (size: 0x18)
    TSubclassOf<class UAnimInstance> AnimationBlueprintClass;                         // 0x0020 (size: 0x8)
    bool RefPoseAttach;                                                               // 0x0028 (size: 0x1)
    FTransform Offset;                                                                // 0x0030 (size: 0x30)
    float Mass;                                                                       // 0x0060 (size: 0x4)
    bool ShouldWeld;                                                                  // 0x0064 (size: 0x1)
    bool SimulatePhysics;                                                             // 0x0065 (size: 0x1)
    bool EnableGravity;                                                               // 0x0066 (size: 0x1)
    bool ApplyImpulseOnDamage;                                                        // 0x0067 (size: 0x1)
    bool CastShadow;                                                                  // 0x0068 (size: 0x1)
    bool Visibility;                                                                  // 0x0069 (size: 0x1)
    bool ShouldNotifyRigidBodyCollision;                                              // 0x006A (size: 0x1)
    bool CanEverAffectNavigation;                                                     // 0x006B (size: 0x1)
    TEnumAsByte<ECollisionEnabled::Type> CollisionEnabled;                            // 0x006C (size: 0x1)
    FName CollisionProfileName;                                                       // 0x0070 (size: 0x8)
    class UPhysicalMaterial* PhysicalMaterialOverride;                                // 0x0078 (size: 0x8)

}; // Size: 0x80

struct FVehicleAttachmentMissingParticleEffect
{
    class UParticleSystem* ParticleEffect;                                            // 0x0000 (size: 0x8)
    FTransform Offset;                                                                // 0x0010 (size: 0x30)
    class UParticleSystemComponent* SpawnedEffect;                                    // 0x0040 (size: 0x8)

}; // Size: 0x50

struct FVehicleAttachmentPriceDataPerClassMap
{
}; // Size: 0x50

struct FVehicleAttachmentSave
{
    TArray<uint8> Data;                                                               // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FVehicleAttachmentSlot
{
    TArray<FPrimaryAssetId> PossibleAttachmentAssetIds;                               // 0x0000 (size: 0x10)
    FGameplayTagContainer StateTags;                                                  // 0x0010 (size: 0x20)
    TArray<FVehicleAttachmentMissingParticleEffect> ParticleEffectsToPlayWhileMissingAttachment; // 0x0030 (size: 0x10)
    class UMaterialInstanceDynamic* ServiceModeMaterial;                              // 0x0048 (size: 0x8)
    class UMeshComponent* _previewMesh;                                               // 0x0050 (size: 0x8)

}; // Size: 0x58

struct FVehicleAttachmentSlotId
{
}; // Size: 0x18

struct FVehicleAttachmentWheelSetup
{
    float Radius;                                                                     // 0x0000 (size: 0x4)
    float SteeringAngle;                                                              // 0x0004 (size: 0x4)
    bool ApplyTorque;                                                                 // 0x0008 (size: 0x1)
    float BrakeStrengthMultiplier;                                                    // 0x000C (size: 0x4)
    bool ApplyHandbrake;                                                              // 0x0010 (size: 0x1)
    float SuspensionLength;                                                           // 0x0014 (size: 0x4)
    float SuspensionStrength;                                                         // 0x0018 (size: 0x4)
    float SuspensionDamping;                                                          // 0x001C (size: 0x4)
    float SuspensionRestLength;                                                       // 0x0020 (size: 0x4)
    float SuspensionAngle;                                                            // 0x0024 (size: 0x4)
    FName SteeringBoneName;                                                           // 0x0028 (size: 0x8)
    FName SuspensionBoneName;                                                         // 0x0030 (size: 0x8)
    float MinWobbleAngleDeg;                                                          // 0x0038 (size: 0x4)
    float MaxWobbleAngleDeg;                                                          // 0x003C (size: 0x4)
    bool ShouldSpawnParticles;                                                        // 0x0040 (size: 0x1)

}; // Size: 0x44

struct FVehicleBaseTickFunction : public FTickFunction
{
}; // Size: 0x30

struct FVehicleCorpseBurningParticles
{
    class UParticleSystem* Particles;                                                 // 0x0000 (size: 0x8)
    FTransform ParticlesTransform;                                                    // 0x0010 (size: 0x30)
    FHeatSourceParameters DEPRECATED_HeatSourceParameters;                            // 0x0040 (size: 0x24)
    FDbIntegerId DEPRECATED_HeatSourceId;                                             // 0x0068 (size: 0x8)

}; // Size: 0x70

struct FVehicleDamageHandlerParams
{
    TArray<FGameplayTag> DamageRegions;                                               // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FVehicleDamagedEffectsParameters
{
    FFloatRange HealthRatioRange;                                                     // 0x0000 (size: 0x10)
    FTransform Transform;                                                             // 0x0010 (size: 0x30)
    class UParticleSystem* ParticleSystem;                                            // 0x0040 (size: 0x8)
    class UAkAudioEvent* StartAudioEvent;                                             // 0x0048 (size: 0x8)
    class UAkAudioEvent* StopAudioEvent;                                              // 0x0050 (size: 0x8)
    float DeactivationDelay;                                                          // 0x0058 (size: 0x4)

}; // Size: 0x60

struct FVehicleEngineStallingParameters
{
    float MinDuration;                                                                // 0x0000 (size: 0x4)
    float MaxDuration;                                                                // 0x0004 (size: 0x4)
    float StopEngineChance;                                                           // 0x0008 (size: 0x4)
    bool ShouldStallingStopOnThrottleOrBreakRelease;                                  // 0x000C (size: 0x1)
    bool ShouldEngineStopOnThrottleOrBreakRelease;                                    // 0x000D (size: 0x1)
    class UCurveFloat* ThrottleCurve;                                                 // 0x0010 (size: 0x8)
    float ThrottleCurveFrequencyMultiplier;                                           // 0x0018 (size: 0x4)
    class UCurveFloat* BrakeCurve;                                                    // 0x0020 (size: 0x8)
    float BrakeCurveFrequencyMultiplier;                                              // 0x0028 (size: 0x4)
    float ForceMagnitudeScale;                                                        // 0x002C (size: 0x4)
    class UCurveFloat* ForceMagnitudeScaleCurve;                                      // 0x0030 (size: 0x8)
    float ForceMagnitudeScaleCurveFrequencyMultiplier;                                // 0x0038 (size: 0x4)
    float ForceDirectionRandomizationAngle;                                           // 0x003C (size: 0x4)
    class UAkAudioEvent* AudioEvent;                                                  // 0x0040 (size: 0x8)
    TArray<float> AudioEventTriggerTimeRatios;                                        // 0x0048 (size: 0x10)

}; // Size: 0x58

struct FVehicleExhaustEffects
{
    TArray<FVehicleExhaustParticles> Particles;                                       // 0x0000 (size: 0x10)
    float ThrottleImpulseMinValue;                                                    // 0x0010 (size: 0x4)
    float ThrottleImpulseMaxValue;                                                    // 0x0014 (size: 0x4)
    float ThrottleImpulseSpeedTermMaxValue;                                           // 0x0018 (size: 0x4)
    float ThrottleImpulseAttackDuration;                                              // 0x001C (size: 0x4)
    float ThrottleImpulseSustainDuration;                                             // 0x0020 (size: 0x4)
    float ThrottleImpulseReleaseDuration;                                             // 0x0024 (size: 0x4)
    float ParticlesDestructionDelay;                                                  // 0x0028 (size: 0x4)

}; // Size: 0x48

struct FVehicleExhaustEffectsParameters
{
    FTransform Transform;                                                             // 0x0000 (size: 0x30)
    class UParticleSystem* EngineStartedParticleSystem;                               // 0x0030 (size: 0x8)
    class UParticleSystem* EngineIdleParticleSystem;                                  // 0x0038 (size: 0x8)
    class UParticleSystem* ThrottlePressedParticleSystem;                             // 0x0040 (size: 0x8)
    class UAkAudioEvent* ThrottlePressedAudioEvent;                                   // 0x0048 (size: 0x8)
    float MinDurationBetweenThrottlePressedEffects;                                   // 0x0050 (size: 0x4)
    float DeactivationDelay;                                                          // 0x0054 (size: 0x4)

}; // Size: 0x70

struct FVehicleExhaustParticles
{
    FName AttachSocketName;                                                           // 0x0000 (size: 0x8)
    class UParticleSystem* ParticleSystem;                                            // 0x0008 (size: 0x8)

}; // Size: 0x18

struct FVehicleForcePushParams
{
    FText InteractionName;                                                            // 0x0000 (size: 0x18)
    float ActionDuration;                                                             // 0x0018 (size: 0x4)
    bool IsRadialImpulse;                                                             // 0x001C (size: 0x1)
    FVector Impulse;                                                                  // 0x0020 (size: 0xC)
    FVector Location;                                                                 // 0x002C (size: 0xC)

}; // Size: 0x38

struct FVehicleGearSetup
{
    FName Name;                                                                       // 0x0000 (size: 0x8)
    float GearUpRatio;                                                                // 0x0008 (size: 0x4)
    float GearDownRatio;                                                              // 0x000C (size: 0x4)
    float GearRatio;                                                                  // 0x0010 (size: 0x4)

}; // Size: 0x14

struct FVehicleHandlingExperienceAwards
{
    float PointsForStartingEngine;                                                    // 0x0000 (size: 0x4)
    float PointsPerDrivenDistanceInKm;                                                // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FVehicleImpactEffects
{
    float HitImpulseThreshold;                                                        // 0x0000 (size: 0x4)
    class UParticleSystem* ParticleSystem;                                            // 0x0008 (size: 0x8)
    FVector ParticlesScale;                                                           // 0x0010 (size: 0xC)
    class UAkAudioEvent* AudioEvent;                                                  // 0x0020 (size: 0x8)
    TSubclassOf<class UMatineeCameraShake> CameraShake;                               // 0x0028 (size: 0x8)
    float CameraShakeScale;                                                           // 0x0030 (size: 0x4)

}; // Size: 0x38

struct FVehicleInfo
{
}; // Size: 0x60

struct FVehicleLightReference
{
    FName Name;                                                                       // 0x0000 (size: 0x8)
    EVehicleLightSourceType LightType;                                                // 0x0008 (size: 0x1)
    FName MaterialSlotName;                                                           // 0x000C (size: 0x8)
    float MaterialSlotFloatValue;                                                     // 0x0014 (size: 0x4)

}; // Size: 0x18

struct FVehicleLightsData
{
    FGameplayTagContainer ToggleTags;                                                 // 0x0000 (size: 0x20)
    FGameplayTagContainer EnableTags;                                                 // 0x0020 (size: 0x20)
    FGameplayTagContainer DisableTags;                                                // 0x0040 (size: 0x20)
    float ElectricityConsumption;                                                     // 0x0060 (size: 0x4)
    TArray<FVehicleLightReference> LightReferences;                                   // 0x0068 (size: 0x10)
    TArray<FVATMaterialParam> MaterialParameters;                                     // 0x0088 (size: 0x10)

}; // Size: 0x98

struct FVehicleManualSpawnPresetArray
{
    class UVehiclePreset* PresetPerSpawnType;                                         // 0x0000 (size: 0x20)

}; // Size: 0x20

struct FVehicleMarkerData
{
}; // Size: 0x20

struct FVehicleMaterialParameterDescription
{
    FName ParameterName;                                                              // 0x0000 (size: 0x8)
    float MinValue;                                                                   // 0x0008 (size: 0x4)
    float MaxValue;                                                                   // 0x000C (size: 0x4)

}; // Size: 0x10

struct FVehiclePaintjobPatternParams
{
    FText Name;                                                                       // 0x0000 (size: 0x18)
    class UTexture2D* Texture;                                                        // 0x0018 (size: 0x8)
    int32 ColorCount;                                                                 // 0x0020 (size: 0x4)
    float ScaleMultiplier;                                                            // 0x0024 (size: 0x4)
    EDeluxeVersion DeluxeVersionRequired;                                             // 0x0028 (size: 0x1)

}; // Size: 0x30

struct FVehiclePartDescription
{
    FGameplayTag PartType;                                                            // 0x0000 (size: 0x8)
    float health;                                                                     // 0x0008 (size: 0x4)

}; // Size: 0xC

struct FVehicleServiceData
{
    class UVehicleServiceStationSaveObject* ServiceStationSaveObject;                 // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FVehicleServiceItemSlot
{
    FName ItemLocationSocketName;                                                     // 0x0000 (size: 0x8)
    FName AttachPointSocketName;                                                      // 0x0008 (size: 0x8)
    FGameplayTag ServiceTag;                                                          // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FVehicleServiceRequest_InstallAttachment
{
}; // Size: 0x1

struct FVehicleSpawnPointData
{
    FTransform SpawnTransform;                                                        // 0x0000 (size: 0x30)
    TArray<class UVehiclePreset*> VehicleSpawnPresets;                                // 0x0030 (size: 0x10)

}; // Size: 0x40

struct FVehicleSpawnerInfo
{
    FEntityId VehicleEntityId;                                                        // 0x0000 (size: 0x8)
    FPrimaryAssetId VehicleAssetId;                                                   // 0x0008 (size: 0x10)
    FEntityId ContainerId;                                                            // 0x0018 (size: 0x8)
    TWeakObjectPtr<class AVehicleBase> VehicleBase;                                   // 0x0020 (size: 0x8)
    FString VehicleAlias;                                                             // 0x0028 (size: 0x10)
    FTransform VehicleTransform;                                                      // 0x0040 (size: 0x30)
    int64 VehicleLastAccessTime;                                                      // 0x0070 (size: 0x8)

}; // Size: 0x80

struct FVehicleSpawnerMarker
{
    FTransform Transform;                                                             // 0x0000 (size: 0x30)
    class UVehicleGroupSpawningPreset* VehicleGroupSpawningPreset;                    // 0x0030 (size: 0x8)

}; // Size: 0x40

struct FVehicleThirdPersonWeaponTypeData
{
    EWeaponType WeaponType;                                                           // 0x0000 (size: 0x1)
    bool alwaysIgnorePreMountAimOffsets;                                              // 0x0001 (size: 0x1)
    FBasePoseAimOffsetPair IdlePoseAndAimOffset;                                      // 0x0008 (size: 0x30)

}; // Size: 0x38

struct FVehicleTireEffectProperties
{
    FVector TireLocalOffset;                                                          // 0x0000 (size: 0xC)

}; // Size: 0x14

struct FVehicleWeaponAimingFirstPersonData
{
    FFirstPersonViewParameters ViewParameters;                                        // 0x0000 (size: 0x28)
    FVector LocationOffset;                                                           // 0x0028 (size: 0xC)
    class UCurveVector* LocationOffsetByYaw;                                          // 0x0038 (size: 0x8)
    class UCurveVector* LocationOffsetByPitch;                                        // 0x0040 (size: 0x8)

}; // Size: 0x48

struct FVehicleWeaponAimingStanceData
{
    TArray<FVehicleWeaponAimingStanceTransitionMontages> StanceTransitionMontages;    // 0x0000 (size: 0x10)
    TArray<FVehicleWeaponAimingStanceTransitionCurves> SupportedAnglesForTransition;  // 0x0010 (size: 0x10)
    FVehicleWeaponAimingFirstPersonData FirstPerson;                                  // 0x0020 (size: 0x48)
    FVehicleWeaponAimingThirdPersonData ThirdPerson;                                  // 0x0068 (size: 0x10)

}; // Size: 0x78

struct FVehicleWeaponAimingStanceTransitionCurves
{
    EVehicleWeaponAimingStance stance;                                                // 0x0000 (size: 0x1)
    class UCurveFloat* SupportedYawAngles;                                            // 0x0008 (size: 0x8)

}; // Size: 0x10

struct FVehicleWeaponAimingStanceTransitionMontages
{
    EVehicleWeaponAimingStance stance;                                                // 0x0000 (size: 0x1)
    TArray<FWeaponTypeMontage> WeaponTypeMontages;                                    // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FVehicleWeaponAimingThirdPersonData
{
    TArray<FVehicleThirdPersonWeaponTypeData> WeaponTypeData;                         // 0x0000 (size: 0x10)

}; // Size: 0x10

struct FVersion
{
    uint16 Release;                                                                   // 0x0000 (size: 0x2)
    uint16 Major;                                                                     // 0x0002 (size: 0x2)
    uint32 Minor;                                                                     // 0x0004 (size: 0x4)
    uint32 Hotfix;                                                                    // 0x0008 (size: 0x4)
    uint32 Changeset;                                                                 // 0x000C (size: 0x4)
    uint32 Shelveset;                                                                 // 0x0010 (size: 0x4)

}; // Size: 0x14

struct FVicinityItems
{
    TArray<TSoftClassPtr<AItem>> AcceptedItems;                                       // 0x0000 (size: 0x10)
    int32 Count;                                                                      // 0x0010 (size: 0x4)

}; // Size: 0x18

struct FVideoInfo
{
    FString VideoUrl;                                                                 // 0x0000 (size: 0x10)
    bool ShouldShowSkipText;                                                          // 0x0010 (size: 0x1)

}; // Size: 0x18

struct FVirtualizedEncounterBBForeignCharacterData
{
    TSoftClassPtr<AConZCharacter> CharacterClass;                                     // 0x0000 (size: 0x28)
    FGameplayTag PresetType;                                                          // 0x0028 (size: 0x8)
    FTransform CharacterTransform;                                                    // 0x0030 (size: 0x30)
    TArray<uint8> CharacterData;                                                      // 0x0060 (size: 0x10)

}; // Size: 0x70

struct FVirtualizedEncounterCharacterData
{
    TSoftClassPtr<AConZCharacter> CharacterClass;                                     // 0x0000 (size: 0x28)
    FTransform CharacterTransform;                                                    // 0x0030 (size: 0x30)
    uint8 SpawnPointTypeFlag;                                                         // 0x0060 (size: 0x1)
    uint8 SpawnPointFlag;                                                             // 0x0061 (size: 0x1)
    float AggressiveSpawnChance;                                                      // 0x0064 (size: 0x4)
    FGameplayTag PresetType;                                                          // 0x0068 (size: 0x8)
    int32 GroupID;                                                                    // 0x0070 (size: 0x4)
    TArray<uint8> CharacterData;                                                      // 0x0078 (size: 0x10)

}; // Size: 0x90

struct FVirtualizedWaterSpline
{
}; // Size: 0xA0

struct FVisibilityReplication
{
    bool Value;                                                                       // 0x0000 (size: 0x1)
    int32 RepHelper;                                                                  // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FVisualParameter
{
    FName MorphName;                                                                  // 0x0000 (size: 0x8)
    FName MaterialParamName;                                                          // 0x0008 (size: 0x8)
    float Value;                                                                      // 0x0010 (size: 0x4)

}; // Size: 0x14

struct FVoltageMatchingElementIndicator
{
    FName SocketId;                                                                   // 0x0000 (size: 0x8)
    FName IndicatorWidgetName;                                                        // 0x0008 (size: 0x8)

}; // Size: 0x10

struct FVoltageMatchingElementRow
{
    TArray<FName> ElementSockets;                                                     // 0x0000 (size: 0x10)

}; // Size: 0x18

struct FVoltageMatchingSwitchElementsPairing
{
    FGameplayTag SwitchTag;                                                           // 0x0000 (size: 0x8)
    TArray<FName> ElementSockets;                                                     // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FWaterForceWhenSwimmingParams
{
    float DownstreamWaterForceMultiplier;                                             // 0x0000 (size: 0x4)
    float UpstreamWaterForceMultiplier;                                               // 0x0004 (size: 0x4)
    float ImpulseThreshold;                                                           // 0x0008 (size: 0x4)
    float ImpulseMultiplier;                                                          // 0x000C (size: 0x4)
    float MinSpeedForUpstream;                                                        // 0x0010 (size: 0x4)

}; // Size: 0x14

struct FWaterParticleTransform
{
    class UParticleSystem* ParticleSystem;                                            // 0x0000 (size: 0x8)
    FTransform Transform;                                                             // 0x0010 (size: 0x30)
    FVector Direction;                                                                // 0x0040 (size: 0xC)
    float MaxAngle;                                                                   // 0x004C (size: 0x4)

}; // Size: 0x50

struct FWaterQueryResult
{
    FVector Location;                                                                 // 0x0000 (size: 0xC)
    bool InWaterIncludingWaves;                                                       // 0x000C (size: 0x1)
    bool InWaterExcludingWaves;                                                       // 0x000D (size: 0x1)
    bool IsBottomValid;                                                               // 0x000E (size: 0x1)
    FVector Surface;                                                                  // 0x0010 (size: 0xC)
    FVector Bottom;                                                                   // 0x001C (size: 0xC)
    FVector Velocity;                                                                 // 0x0028 (size: 0xC)
    float WaveHeight;                                                                 // 0x0034 (size: 0x4)
    FVector WaveNormal;                                                               // 0x0038 (size: 0xC)
    FVirtualizedWaterSpline WaterSpline;                                              // 0x0050 (size: 0xA0)

}; // Size: 0xF0

struct FWeaponAttachmentAnimations
{
    FBodyWeaponAnimation Add;                                                         // 0x0000 (size: 0x10)
    FBodyWeaponAnimation Remove;                                                      // 0x0010 (size: 0x10)

}; // Size: 0x20

struct FWeaponBowAimOffsets
{
    class UBlendSpace* DrawPercentage;                                                // 0x0000 (size: 0x18)

}; // Size: 0x18

struct FWeaponBowArmsShake
{
    class UAnimSequenceBase* ThirdPerson;                                             // 0x0000 (size: 0x18)
    class UAnimSequenceBase* FirstPerson;                                             // 0x0018 (size: 0x18)

}; // Size: 0x30

struct FWeaponBowDrawData
{
}; // Size: 0xC

struct FWeaponBowStateDataReplicated
{
    EBowDrawPercentage BowDrawPercentage;                                             // 0x0000 (size: 0x1)
    float HoldTimeInFullDraw;                                                         // 0x0004 (size: 0x4)
    EWeaponBowState WeaponBowState;                                                   // 0x0008 (size: 0x1)

}; // Size: 0xC

struct FWeaponCheckAmmoData
{
    UClass* ActionSequenceClass;                                                      // 0x0000 (size: 0x8)

}; // Size: 0x8

struct FWeaponMalfunctionChances
{
    FFloatInterval Value;                                                             // 0x0000 (size: 0x38)

}; // Size: 0x38

struct FWeaponMalfunctionData
{
    bool UseCustomProbabilityCurve;                                                   // 0x0000 (size: 0x1)
    FRuntimeFloatCurve ProbabilityCurve;                                              // 0x0008 (size: 0x88)
    TSubclassOf<class UWeaponActionClearMalfunctionSequence> ClearMalfunctionSequence; // 0x0090 (size: 0x8)
    TArray<class TSubclassOf<UWeaponActionClearMalfunctionSequence>> ClearMalfunctionSequences; // 0x0098 (size: 0x10)

}; // Size: 0xA8

struct FWeaponMalfunctionEventDescription
{
}; // Size: 0x8

struct FWeaponMalfunctionProbability
{
    EWeaponMalfunction malfunction;                                                   // 0x0000 (size: 0x1)
    float Probability;                                                                // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FWeaponMalfunctionProbabilityCurves
{
    FRuntimeFloatCurve ProbabilityCurve;                                              // 0x0000 (size: 0x3B8)

}; // Size: 0x3B8

struct FWeaponManualSettingsBow
{
    float ProjectileDamageMultiplier;                                                 // 0x0000 (size: 0x4)
    EWeaponOverrideSpreadType SpreadType;                                             // 0x0004 (size: 0x1)
    float SpreadExactValue;                                                           // 0x0008 (size: 0x4)
    float SpreadMultiplier;                                                           // 0x000C (size: 0x4)
    FFloatInterval DrawHoldDuration;                                                  // 0x0010 (size: 0x8)
    FFloatInterval FiringPauseDuration;                                               // 0x0018 (size: 0x8)
    FFloatInterval ReloadPauseDuration;                                               // 0x0020 (size: 0x8)
    float PostReloadDelay;                                                            // 0x0028 (size: 0x4)

}; // Size: 0x2C

struct FWeaponManualSettingsCrossBow
{
    float ProjectileDamageMultiplier;                                                 // 0x0000 (size: 0x4)
    EWeaponOverrideSpreadType SpreadType;                                             // 0x0004 (size: 0x1)
    float SpreadExactValue;                                                           // 0x0008 (size: 0x4)
    float SpreadMultiplier;                                                           // 0x000C (size: 0x4)
    FFloatInterval FiringPauseDuration;                                               // 0x0010 (size: 0x8)
    FFloatInterval ReloadPauseDuration;                                               // 0x0018 (size: 0x8)

}; // Size: 0x20

struct FWeaponManualSettingsHandgun
{
    float ProjectileDamageMultiplier;                                                 // 0x0000 (size: 0x4)
    EWeaponOverrideSpreadType SpreadType;                                             // 0x0004 (size: 0x1)
    float SpreadExactValue;                                                           // 0x0008 (size: 0x4)
    float SpreadMultiplier;                                                           // 0x000C (size: 0x4)
    int32 NumberOfConsecutiveShots;                                                   // 0x0010 (size: 0x4)
    FFloatInterval TimeBetweenShot;                                                   // 0x0014 (size: 0x8)
    FFloatInterval FiringPauseDuration;                                               // 0x001C (size: 0x8)
    FFloatInterval ReloadPauseDuration;                                               // 0x0024 (size: 0x8)

}; // Size: 0x2C

struct FWeaponManualSettingsRifleAutomatic
{
    float ProjectileDamageMultiplier;                                                 // 0x0000 (size: 0x4)
    EWeaponOverrideSpreadType SpreadType;                                             // 0x0004 (size: 0x1)
    float SpreadExactValue;                                                           // 0x0008 (size: 0x4)
    float SpreadMultiplier;                                                           // 0x000C (size: 0x4)
    int32 NumberOfConsecutiveShots;                                                   // 0x0010 (size: 0x4)
    FFloatInterval FiringPauseDuration;                                               // 0x0014 (size: 0x8)
    FFloatInterval ReloadPauseDuration;                                               // 0x001C (size: 0x8)

}; // Size: 0x24

struct FWeaponManualSettingsRifleManual
{
    float ProjectileDamageMultiplier;                                                 // 0x0000 (size: 0x4)
    EWeaponOverrideSpreadType SpreadType;                                             // 0x0004 (size: 0x1)
    float SpreadExactValue;                                                           // 0x0008 (size: 0x4)
    float SpreadMultiplier;                                                           // 0x000C (size: 0x4)
    FFloatInterval TimeBetweenShot;                                                   // 0x0010 (size: 0x8)
    FFloatInterval FiringPauseDuration;                                               // 0x0018 (size: 0x8)
    FFloatInterval ReloadPauseDuration;                                               // 0x0020 (size: 0x8)

}; // Size: 0x28

struct FWeaponMountData
{
    FName MountedSocket;                                                              // 0x0000 (size: 0x8)
    TWeakObjectPtr<class AWeapon> Weapon;                                             // 0x0008 (size: 0x8)

}; // Size: 0x18

struct FWeaponMountSetup
{
    FSoftClassPath WeaponClass;                                                       // 0x0000 (size: 0x18)
    FName MountingWeaponSocket;                                                       // 0x0018 (size: 0x8)

}; // Size: 0x20

struct FWeaponPaintjobPatternParams
{
    FText Name;                                                                       // 0x0000 (size: 0x18)
    class UTexture2D* Texture;                                                        // 0x0018 (size: 0x8)
    int32 ColorCount;                                                                 // 0x0020 (size: 0x4)
    float ScaleMultiplier;                                                            // 0x0024 (size: 0x4)
    EDeluxeVersion DeluxeVersionRequired;                                             // 0x0028 (size: 0x1)

}; // Size: 0x30

struct FWeaponReloadData
{
    bool IsQuick;                                                                     // 0x0000 (size: 0x1)
    class AItem* Item;                                                                // 0x0008 (size: 0x8)
    class AItem* Item2;                                                               // 0x0010 (size: 0x8)
    int32 Count;                                                                      // 0x0018 (size: 0x4)
    UClass* ReloadSequenceClass;                                                      // 0x0020 (size: 0x8)
    float AnimationPlayRate;                                                          // 0x0028 (size: 0x4)

}; // Size: 0x30

struct FWeaponSpreadData
{
    FWeaponSpreadItem ByStance;                                                       // 0x0000 (size: 0x24)
    float IncrementPerShot;                                                           // 0x0024 (size: 0x4)
    float IncrementFromShotsMax;                                                      // 0x0028 (size: 0x4)
    float IncrementSpeed;                                                             // 0x002C (size: 0x4)
    float DecrementSpeed;                                                             // 0x0030 (size: 0x4)

}; // Size: 0x34

struct FWeaponSpreadItem
{
    float Idle;                                                                       // 0x0000 (size: 0x4)
    float Moving;                                                                     // 0x0004 (size: 0x4)
    float SpeedTarget;                                                                // 0x0008 (size: 0x4)

}; // Size: 0xC

struct FWeaponStateSyncData
{
    int32 ZeroRange;                                                                  // 0x0000 (size: 0x4)
    TArray<FAmmunitionData> LoadedAmmoData;                                           // 0x0008 (size: 0x10)
    TArray<FAmmunitionData> InternalMagazineAmmoData;                                 // 0x0018 (size: 0x10)
    UClass* LoadedAmmunitionItemClass;                                                // 0x0028 (size: 0x8)
    TSubclassOf<class AProjectile> LoadedProjectileClass;                             // 0x0030 (size: 0x8)
    EWeaponFiringMode FiringMode;                                                     // 0x0038 (size: 0x1)
    int32 malfunction;                                                                // 0x003C (size: 0x4)
    bool IsChamberOpened;                                                             // 0x0040 (size: 0x1)

}; // Size: 0x48

struct FWeaponTypeAimOffset
{
    EWeaponType WeaponType;                                                           // 0x0000 (size: 0x1)
    class UBlendSpace* AimOffset;                                                     // 0x0008 (size: 0x10)

}; // Size: 0x18

struct FWeaponTypeMontage
{
    EWeaponType WeaponType;                                                           // 0x0000 (size: 0x1)
    class UAnimMontage* Montage;                                                      // 0x0008 (size: 0x8)
    class UCurveFloat* SupportedYawAngles;                                            // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FWeaponUnloadAmmoData
{
    UClass* ActionSequenceClass;                                                      // 0x0000 (size: 0x8)
    int32 AmmoCount;                                                                  // 0x0008 (size: 0x4)

}; // Size: 0x10

struct FWeaponViewKickData
{
    float PitchMin;                                                                   // 0x0000 (size: 0x4)
    float PitchMax;                                                                   // 0x0004 (size: 0x4)
    float YawMin;                                                                     // 0x0008 (size: 0x4)
    float YawMax;                                                                     // 0x000C (size: 0x4)
    float PitchDecrementSpeed;                                                        // 0x0010 (size: 0x4)
    float YawDecrementSpeed;                                                          // 0x0014 (size: 0x4)

}; // Size: 0x18

struct FWeatherReplicatedStateSnapshot
{
}; // Size: 0x30

struct FWheelBarrowParametersPerMovementPace
{
    bool IsValid;                                                                     // 0x0000 (size: 0x1)
    float BaseMaxForwardSpeed;                                                        // 0x0004 (size: 0x4)
    float BaseMaxForwardSpeedLimping;                                                 // 0x0008 (size: 0x4)
    bool CanReverse;                                                                  // 0x000C (size: 0x1)
    float BaseMaxReverseSpeed;                                                        // 0x0010 (size: 0x4)
    float BaseMaxReverseSpeedLimping;                                                 // 0x0014 (size: 0x4)
    float BaseMaxLoad;                                                                // 0x0018 (size: 0x4)
    float MinPrisonerStrength;                                                        // 0x001C (size: 0x4)

}; // Size: 0x20

struct FWheelData
{
    class UStaticMeshComponent* WheelMesh;                                            // 0x0008 (size: 0x8)

}; // Size: 0x28

struct FWidgetDisplayInfo
{
    EWidgetDisplayInfoType DisplayType;                                               // 0x0000 (size: 0x1)
    int32 First;                                                                      // 0x0004 (size: 0x4)
    int32 Second;                                                                     // 0x0008 (size: 0x4)

}; // Size: 0xC

struct FWindowClimbingAnimationInfo
{
    FVector AnchorOffset;                                                             // 0x0000 (size: 0xC)
    class UAnimSequenceBase* AnchoringAnimation;                                      // 0x0010 (size: 0x8)
    float AnchoringAnimationTime;                                                     // 0x0018 (size: 0x4)
    float AnchoringDuration;                                                          // 0x001C (size: 0x4)
    class UAnimMontage* ClimbingMontage;                                              // 0x0020 (size: 0x8)
    float MinWindowWidth;                                                             // 0x0028 (size: 0x4)
    float MinWindowHeight;                                                            // 0x002C (size: 0x4)
    float MinSpacingToLeftWindowEdge;                                                 // 0x0030 (size: 0x4)
    float MinSpacingToRightWindowEdge;                                                // 0x0034 (size: 0x4)
    float MinWindowDistanceToFloor;                                                   // 0x0038 (size: 0x4)
    float MaxWindowDistanceToFloor;                                                   // 0x003C (size: 0x4)
    float StaminaDrain;                                                               // 0x0040 (size: 0x4)

}; // Size: 0x48

struct FWindowDetectionParams
{
    FVector CharacterHeadLocation;                                                    // 0x0000 (size: 0xC)
    FVector CharacterFeetLocation;                                                    // 0x000C (size: 0xC)
    FVector CharacterForwardVector;                                                   // 0x0018 (size: 0xC)
    float MaxHorzDistanceToWindow;                                                    // 0x0024 (size: 0x4)
    float MaxCharacterToWindowAngle;                                                  // 0x0028 (size: 0x4)
    float HorzHitDetectionBias;                                                       // 0x002C (size: 0x4)
    float HitDetectionBiasBelowWindow;                                                // 0x0030 (size: 0x4)
    float HitDetectionBiasAboveWindow;                                                // 0x0034 (size: 0x4)

}; // Size: 0x38

struct FWindowInfo
{
    FTransform Transform;                                                             // 0x0000 (size: 0x30)
    FTransform TransformInverse;                                                      // 0x0030 (size: 0x30)
    FVector Anchor;                                                                   // 0x0060 (size: 0xC)
    FWindowClimbingAnimationInfo AnimationInfo;                                       // 0x0070 (size: 0x48)
    int32 AnimationIndex;                                                             // 0x00B8 (size: 0x4)

}; // Size: 0xC0

struct FWindowMantlingAnimationInfo
{
    FVector AnchorOffset;                                                             // 0x0000 (size: 0xC)
    class UAnimSequenceBase* AnchoringAnimation;                                      // 0x0010 (size: 0x8)
    float AnchoringAnimationTime;                                                     // 0x0018 (size: 0x4)
    float AnchoringDuration;                                                          // 0x001C (size: 0x4)
    class UAnimMontage* ClimbingMontage;                                              // 0x0020 (size: 0x8)
    float StaminaDrain;                                                               // 0x0028 (size: 0x4)
    float MinWindowWidth;                                                             // 0x002C (size: 0x4)
    float MinWindowHeight;                                                            // 0x0030 (size: 0x4)
    float MinSpacingToLeftWindowEdge;                                                 // 0x0034 (size: 0x4)
    float MinSpacingToRightWindowEdge;                                                // 0x0038 (size: 0x4)
    float MinWindowDistanceToFloor;                                                   // 0x003C (size: 0x4)
    float MaxWindowDistanceToFloor;                                                   // 0x0040 (size: 0x4)

}; // Size: 0x48

struct FWindowMarker
{
    bool IsVaultable;                                                                 // 0x0000 (size: 0x1)
    FNavAgentSelector NavSupportedAgents;                                             // 0x0004 (size: 0x4)
    float NavLinkDistance;                                                            // 0x0008 (size: 0x4)
    float NavLinkGroundOffset;                                                        // 0x000C (size: 0x4)
    bool IsFortifiable;                                                               // 0x0010 (size: 0x1)
    class UWindowFortificationsType* WindowFortificationsType;                        // 0x0018 (size: 0x8)
    TArray<int32> AdditionalMarkerIndicesToModify;                                    // 0x0020 (size: 0x10)
    FVector Vertex1;                                                                  // 0x0030 (size: 0xC)
    FVector Vertex2;                                                                  // 0x003C (size: 0xC)
    FVector2D FortificationScaleXZ;                                                   // 0x0054 (size: 0x8)
    float Thickness;                                                                  // 0x005C (size: 0x4)
    FVector FortificationLocationCorrection;                                          // 0x0060 (size: 0xC)
    float CollisionBoxVertBias;                                                       // 0x006C (size: 0x4)
    float CollisionBoxHorzBias;                                                       // 0x0070 (size: 0x4)
    bool ShouldIgnoreCollisionWithOwner;                                              // 0x0074 (size: 0x1)
    bool DidIFailToCorrectlyPlaceWindowMarkers;                                       // 0x0080 (size: 0x1)

}; // Size: 0x88

struct FWireDescription
{
}; // Size: 0x50

struct FWorldEventDrawData
{
}; // Size: 0x50

struct FZombieAttackDescription
{
    class UAnimMontage* Montage;                                                      // 0x0000 (size: 0x8)
    FFloatInterval PitchRange;                                                        // 0x0008 (size: 0x8)
    float MinDistance;                                                                // 0x0010 (size: 0x4)
    float MaxDistance;                                                                // 0x0014 (size: 0x4)
    float RegainControlMultiplier;                                                    // 0x0018 (size: 0x4)

}; // Size: 0x20

struct FZombieCombatStanceAnimations
{
    class UAnimSequenceBase* RunStartAnimation;                                       // 0x0000 (size: 0x8)
    class UAnimSequenceBase* RunLoopAnimation;                                        // 0x0008 (size: 0x8)
    class UAnimSequenceBase* RunStopAnimation;                                        // 0x0010 (size: 0x8)

}; // Size: 0x18

struct FZombieCombatStanceVariation2
{
    FZombieCombatStanceAnimations Animations;                                         // 0x0000 (size: 0x18)
    float RunAcceleration;                                                            // 0x0018 (size: 0x4)
    float RunDeceleration;                                                            // 0x001C (size: 0x4)
    float RunSpeed;                                                                   // 0x0020 (size: 0x4)
    float RunSpeedInAnimation;                                                        // 0x0024 (size: 0x4)
    float RunTurnRate;                                                                // 0x0028 (size: 0x4)

}; // Size: 0x30

struct FZombieMeshVariation2
{
    class USkeletalMesh* DressedMesh;                                                 // 0x0000 (size: 0x8)
    class USkeletalMesh* StrippedMesh;                                                // 0x0008 (size: 0x8)

}; // Size: 0x10

struct FZombieRagdollAutoRecovery
{
    EZombieRagdollAutoRecoveryType Type;                                              // 0x0000 (size: 0x1)
    float Timespan;                                                                   // 0x0004 (size: 0x4)

}; // Size: 0x8

struct FZombieRelaxedStanceAnimations
{
    class UAnimSequenceBase* WalkLoopAnimation;                                       // 0x0000 (size: 0x8)

}; // Size: 0x8

struct FZombieRelaxedStanceVariation2
{
    FZombieRelaxedStanceAnimations Animations;                                        // 0x0000 (size: 0x8)
    float WalkAcceleration;                                                           // 0x0008 (size: 0x4)
    float WalkDeceleration;                                                           // 0x000C (size: 0x4)
    float WalkSpeed;                                                                  // 0x0010 (size: 0x4)
    float WalkSpeedInAnimation;                                                       // 0x0014 (size: 0x4)
    float WalkTurnRate;                                                               // 0x0018 (size: 0x4)

}; // Size: 0x20

struct FZombieSleepingAnimationData
{
    class UAnimSequenceBase* SleepingLoopAnimation;                                   // 0x0000 (size: 0x8)
    class UAnimMontage* GettingUpAnimation;                                           // 0x0008 (size: 0x8)
    float Weight;                                                                     // 0x0010 (size: 0x4)

}; // Size: 0x18

struct FZombieTurnMontageDescription
{
    class UAnimMontage* MontageL90;                                                   // 0x0000 (size: 0x8)
    class UAnimMontage* MontageL180;                                                  // 0x0008 (size: 0x8)
    class UAnimMontage* MontageR90;                                                   // 0x0010 (size: 0x8)
    class UAnimMontage* MontageR180;                                                  // 0x0018 (size: 0x8)
    FName TurnAngleCurveName;                                                         // 0x0020 (size: 0x8)

}; // Size: 0x28

struct FZoneConfiguration
{
    bool IsOutpost;                                                                   // 0x0000 (size: 0x1)
    bool IsItemPlacementAllowed;                                                      // 0x0001 (size: 0x1)
    TArray<EInteractionType> InteractionsToDisable;                                   // 0x0008 (size: 0x10)

}; // Size: 0x18

class AAIDetectionTimerHandler : public AActor
{

    void OnDestroyedEvent(class AActor* DestroyedActor);
}; // Size: 0x270

class AAbandonedBunker : public AActor
{
    class UBillboardComponent* _sprite;                                               // 0x0308 (size: 0x8)
    bool _secretBunker;                                                               // 0x0310 (size: 0x1)
    float _reducedKeycardDurationSeconds;                                             // 0x0314 (size: 0x4)
    float _miuntesUntilResetAfterNoPlayersNearby;                                     // 0x0318 (size: 0x4)
    TSubclassOf<class UDoorUnlockData> _masterKeycardUnlockData;                      // 0x0320 (size: 0x8)
    TArray<FAbandonedBunkerFloorSetup> _floorSetup;                                   // 0x0328 (size: 0x10)
    class UAbandonedBunkerConnectionSetup* _connectionSetup;                          // 0x0338 (size: 0x8)
    FGameplayTagContainer _alwaysPoweredRooms;                                        // 0x0340 (size: 0x20)
    float _alarmDuration;                                                             // 0x0360 (size: 0x4)
    TWeakObjectPtr<class ABuilding> _killboxRoom;                                     // 0x0364 (size: 0x8)
    FGameplayTag _killboxRoomTag;                                                     // 0x036C (size: 0x8)
    float _managerDescriptionReplicatedNoiseNormalized;                               // 0x0374 (size: 0x4)
    TArray<uint16> _poweredRoomIds;                                                   // 0x0378 (size: 0x10)
    TArray<uint16> _alarmedRoomIds;                                                   // 0x0388 (size: 0x10)
    TArray<FTransform> _knockoutTeleportLocationTransforms;                           // 0x0398 (size: 0x10)
    float _prisonerKnockoutDurationOnLock;                                            // 0x03A8 (size: 0x4)
    FActivationReservation _temporaryOverrideActivationReservation;                   // 0x0438 (size: 0x18)
    FActivationReservation _currentActivationReservation;                             // 0x0450 (size: 0x18)
    class UAbandonedBunkerZoneManagerComponent* _abandonedBunkerManagerComponent;     // 0x0478 (size: 0x8)
    class UNavigationInvokerComponent* _razorNavigationInvokerComponent;              // 0x0480 (size: 0x8)

    void OnRep_PoweredRoomIds(const TArray<uint16>& oldPoweredRoomIds);
    void OnRep_AlarmedRoomIds(const TArray<uint16>& oldAlarmedRoomIds);
    void OnRep_ActivationReservationOverride();
    void OnRep_ActivationReservation();
    void NetMulticast_SetPartialOpenRatioDoorComponent(class UAbandonedBunkerDoorComponent* doorComponent, float Ratio);
}; // Size: 0x570

class AAbandonedBunkerBCUMemoryModuleTerminal : public AActor
{
    class UStaticMeshComponent* _mesh;                                                // 0x0228 (size: 0x8)
    class UStaticMeshComponent* _progressBarMesh;                                     // 0x0230 (size: 0x8)
    FTimespan _cooldown;                                                              // 0x0238 (size: 0x8)
    FDateTime _lastDownloadTime;                                                      // 0x0240 (size: 0x8)
    float _downloadActionDuration;                                                    // 0x0258 (size: 0x4)
    class UAkAudioEvent* _downloadActionStartAudio;                                   // 0x0260 (size: 0x8)
    class UAkAudioEvent* _downloadActionStopAudio;                                    // 0x0268 (size: 0x8)

    void OnRep_LastDownloadTime();
}; // Size: 0x278

class AAbandonedBunkerDialPad : public AActor
{
    TSubclassOf<class ADialPadMinigame> _minigameClass;                               // 0x0228 (size: 0x8)
    TSubclassOf<class UDialPadMinigameConfiguration> _minigameConfigurationClass;     // 0x0230 (size: 0x8)
    TSubclassOf<class AMinigame> _hackingMinigameClass;                               // 0x0238 (size: 0x8)
    TSubclassOf<class UMinigameConfiguration> _hackingMinigameConfiguration;          // 0x0240 (size: 0x8)
    class ADoor* _connectedDoor;                                                      // 0x0248 (size: 0x8)
    FLinearColor _lockedColor;                                                        // 0x0250 (size: 0x10)
    FLinearColor _unlockedColor;                                                      // 0x0260 (size: 0x10)
    FLinearColor _offColor;                                                           // 0x0270 (size: 0x10)
    int32 _combinationLength;                                                         // 0x0280 (size: 0x4)
    float _minigameBaseDuration;                                                      // 0x0284 (size: 0x4)
    TArray<uint8> _wornButtons;                                                       // 0x0288 (size: 0x10)

    void OnRep_WornButtons();
}; // Size: 0x2E8

class AAbandonedBunkerItemContainerBoundToActivation : public AItemContainer
{
}; // Size: 0x340

class AAbandonedBunkerSwitchboard : public AActor
{
    TArray<ESwitchboardSwitch> _disabledSwitches;                                     // 0x0270 (size: 0x10)
    class USwitchboardComponent* _switchboardComponent;                               // 0x0280 (size: 0x8)
    class UGaugeClusterComponent* _gaugeClusterComponent;                             // 0x0288 (size: 0x8)
    bool _isMasterSwitchboard;                                                        // 0x0290 (size: 0x1)
    float _defaultLoadWhenPowered;                                                    // 0x0294 (size: 0x4)
    float _defaultLoadDuringBlackout;                                                 // 0x0298 (size: 0x4)
    float _fuseHealthLowPowerThreshold;                                               // 0x029C (size: 0x4)
    FGameplayTag _defaultFuseGaugeTag;                                                // 0x02A0 (size: 0x8)
    FGameplayTag _attachedFuseGaugeTag;                                               // 0x02A8 (size: 0x8)
    FName _fuseAttachmentSocketName;                                                  // 0x02B0 (size: 0x8)
    TSubclassOf<class ASwitchboardMinigame> _masterSwitchboardMinigameClass;          // 0x02B8 (size: 0x8)
    TSubclassOf<class USwitchboardMinigameConfiguration> _masterSwitchboardMinigameConfigurationClass; // 0x02C0 (size: 0x8)
    TSubclassOf<class ASwitchboardMinigame> _slaveSwitchboardMinigameClass;           // 0x02C8 (size: 0x8)
    TSubclassOf<class USwitchboardMinigameConfiguration> _slaveSwitchboardMinigameConfigurationClass; // 0x02D0 (size: 0x8)
    FTransform _decalTransform;                                                       // 0x02E0 (size: 0x30)
    class UAkAudioEvent* _switchFlippedAudioEvent;                                    // 0x0310 (size: 0x8)
    class UAkAudioEvent* _fuseAddedAudioEvent;                                        // 0x0318 (size: 0x8)
    class UAkAudioEvent* _fuseBurnedAudioEvent;                                       // 0x0320 (size: 0x8)
    float _emissiveStrengthWhenPowered;                                               // 0x0328 (size: 0x4)
    class AItem* _repAttachedFuseItem;                                                // 0x0330 (size: 0x8)
    class AItem* _attachedFuseItem;                                                   // 0x0338 (size: 0x8)

    void OnRep_AttachedFuseItem();
}; // Size: 0x360

class AAchievementsManagerClient : public AActor
{
}; // Size: 0x2B8

class AAchievementsManagerServer : public AActor
{
}; // Size: 0x298

class AAirplane : public ADcxWheeledVehicle4W
{
    class ULiftComponent* _physicsLiftComponent;                                      // 0x15C8 (size: 0x8)
    TMap<class EAerodynamicSurfaceType, class FAerodynamicSurfaceControlData> _aerodynamicSurfaceMap; // 0x15D0 (size: 0x50)
    float _airFlowParticlesSpeedKmhThreshold;                                         // 0x1630 (size: 0x4)
    float _reverseTaxiingForce;                                                       // 0x1634 (size: 0x4)
    float _maxReverseTaxiingVelocity;                                                 // 0x1638 (size: 0x4)
    float _airplaneHeightToStallInMeters;                                             // 0x163C (size: 0x4)
    float _propellerForce;                                                            // 0x1640 (size: 0x4)
    float _maxVelocity;                                                               // 0x1644 (size: 0x4)
    float _inAirSweepDistance;                                                        // 0x1650 (size: 0x4)
    FInt32Range _throttleLevelRange;                                                  // 0x165C (size: 0x10)
    FRuntimeFloatCurve _throttlePerLevel;                                             // 0x1670 (size: 0x88)
    float _throttleLerpAmount;                                                        // 0x16FC (size: 0x4)
    TMap<ESkillLevel, float> _brakeLerpAmountPerSkillLevel;                           // 0x1708 (size: 0x50)
    TMap<ESkillLevel, float> _rollLerpAmountPerSkillLevel;                            // 0x1760 (size: 0x50)
    TMap<ESkillLevel, float> _yawLerpAmountPerSkillLevel;                             // 0x17B8 (size: 0x50)
    TMap<ESkillLevel, float> _pitchLerpAmountPerSkillLevel;                           // 0x1810 (size: 0x50)
    TMap<ESkillLevel, float> _controlResetLerpAmountPerSkillLevel;                    // 0x1868 (size: 0x50)
    FRuntimeFloatCurve _handbrakeFactorVsVelocity;                                    // 0x18C0 (size: 0x88)
    FGameplayTagContainer _criticalAttachmentSlotTags;                                // 0x1950 (size: 0x20)
    float _damagePerSecondWhenMissingCriticalAttachments;                             // 0x1970 (size: 0x4)
    class UStaticMeshComponent* _propellerMesh;                                       // 0x1978 (size: 0x8)
    class UMaterialInterface* _propellerMaterial;                                     // 0x1980 (size: 0x8)
    class UMaterialInstanceDynamic* _propellerMaterialDynamic;                        // 0x1988 (size: 0x8)
    TArray<class UClass*> _classesToIgnorePropellerDamage;                            // 0x1990 (size: 0x10)
    float _EMInterferenceMaxDisabledTime;                                             // 0x19A0 (size: 0x4)
    float _deathExplosionDamage;                                                      // 0x19A8 (size: 0x4)
    float _deathExplosionForce;                                                       // 0x19AC (size: 0x4)
    float _deathExplosionInnerRadius;                                                 // 0x19B0 (size: 0x4)
    float _deathExplosionOuterRadius;                                                 // 0x19B4 (size: 0x4)
    FTargetTypeDamageMultiplier _explosionTargetTypeMultiplier;                       // 0x19B8 (size: 0x10)
    class UAkAudioEvent* _deathExplosionAudioEvent;                                   // 0x19C8 (size: 0x8)
    class UParticleSystem* _deathExplosionParticleSystem;                             // 0x19D0 (size: 0x8)
    FVector _deathExplosionParticleSystemScale;                                       // 0x19D8 (size: 0xC)

    void OnPropellerHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, FVector NormalImpulse, const FHitResult& Hit);
}; // Size: 0x19F0

class AAmbientSounds : public AActor
{
    float MinCameraLocationDeltaForUpdate;                                            // 0x0220 (size: 0x4)
    FGameplayTag ForestMask;                                                          // 0x0224 (size: 0x8)
    float ForestMaskSearchRadius;                                                     // 0x022C (size: 0x4)
    class UAkAudioEvent* CoastalForestAudioEvent;                                     // 0x0230 (size: 0x8)
    class UAkAudioEvent* ContinentalForest1AudioEvent;                                // 0x0238 (size: 0x8)
    class UAkAudioEvent* ContinentalForest2AudioEvent;                                // 0x0240 (size: 0x8)
    class UAkAudioEvent* ContinentalForest3AudioEvent;                                // 0x0248 (size: 0x8)
    class UAkAudioEvent* UndergroundAudioEvent;                                       // 0x0250 (size: 0x8)
    FGameplayTag CityMask;                                                            // 0x0258 (size: 0x8)
    float CityMaskSearchRadius;                                                       // 0x0260 (size: 0x4)
    class UAkAudioEvent* CityAudioEvent;                                              // 0x0268 (size: 0x8)
    class UAkAudioEvent* LargeVillageAudioEvent;                                      // 0x0270 (size: 0x8)
    class UAkAudioEvent* SmallVillageAudioEvent;                                      // 0x0278 (size: 0x8)
    class UAkAudioEvent* IndustrialAreaAudioEvent;                                    // 0x0280 (size: 0x8)

}; // Size: 0x2F8

class AAmmunitionArrow : public AAmmunitionItem
{
    bool DestroyOnHit;                                                                // 0x09F8 (size: 0x1)
    TSubclassOf<class ABrokenArrow> BrokenArrowClass;                                 // 0x0A00 (size: 0x8)
    float _muzzleVelocityMultiplier;                                                  // 0x0A08 (size: 0x4)
    float _stiffnessFactor;                                                           // 0x0A0C (size: 0x4)
    float _flightRotationCorrectionSpeed;                                             // 0x0A10 (size: 0x4)
    float _elasticityFactorSpread;                                                    // 0x0A14 (size: 0x4)

}; // Size: 0xA20

class AAmmunitionBoxItem : public AItem
{
    TSubclassOf<class AAmmunitionItem> AmmunitionItemClass;                           // 0x09A8 (size: 0x8)
    int32 MaxAmmoCount;                                                               // 0x09B0 (size: 0x4)
    int32 _ammoCount;                                                                 // 0x09B4 (size: 0x4)

    void OnRep_AmmoCount();
}; // Size: 0x9C0

class AAmmunitionExplosiveArrow : public AAmmunitionArrow
{
    class UAkAudioEvent* _startBeepingEvent;                                          // 0x0A18 (size: 0x8)
    class UAkAudioEvent* _stopBeepingEvent;                                           // 0x0A20 (size: 0x8)
    float _startOfBeepingBeforeDetonation;                                            // 0x0A28 (size: 0x4)
    float _innerExplosionRadius;                                                      // 0x0A2C (size: 0x4)
    float _outerExplosionRadius;                                                      // 0x0A30 (size: 0x4)
    float _explosionBaseDamage;                                                       // 0x0A34 (size: 0x4)
    float _explosionMinDamage;                                                        // 0x0A38 (size: 0x4)
    float _explosionDistanceFalloff;                                                  // 0x0A3C (size: 0x4)
    float _explosionTimerTime;                                                        // 0x0A40 (size: 0x4)
    float _explosionForce;                                                            // 0x0A44 (size: 0x4)
    FTargetTypeDamageMultiplier _targetTypeMultiplier;                                // 0x0A48 (size: 0x10)
    FName _detonationPointSocketName;                                                 // 0x0A58 (size: 0x8)
    TSubclassOf<class AReplicatedExplosionEffectsActor> _effectsActorClass;           // 0x0A60 (size: 0x8)
    bool _shouldStartCountdown;                                                       // 0x0A78 (size: 0x1)

    void Server_Explode();
}; // Size: 0xA80

class AAmmunitionItem : public AItem
{
    FGameplayTag AmmunitionTag;                                                       // 0x09A8 (size: 0x8)
    FString AmmunitionTypeString;                                                     // 0x09B0 (size: 0x10)
    TSubclassOf<class AProjectile> projectileClass;                                   // 0x09C0 (size: 0x8)
    class UStaticMesh* CartridgeMesh;                                                 // 0x09C8 (size: 0x8)
    class UStaticMesh* CasingMesh;                                                    // 0x09D0 (size: 0x8)
    class UStaticMesh* UsedBadRoundMesh;                                              // 0x09D8 (size: 0x8)
    float WeaponSpreadMultiplier;                                                     // 0x09E0 (size: 0x4)
    int32 MaxAmmoCount;                                                               // 0x09E4 (size: 0x4)
    int32 _ammoCount;                                                                 // 0x09E8 (size: 0x4)
    int32 _ammoCountOwnerHelper;                                                      // 0x09EC (size: 0x4)

    void SetAmmoCount(int32 Count, ERPCType broadcastRPCType);
    void OnRep_AmmoCountOwnerHelper();
    void OnRep_AmmoCount();
    void NetMulticast_SetAmmoCount(int32 Count);
    float GetSpreadMultiplierForWeapon(const class AWeapon* Weapon);
    int32 GetAmmoCount();
    void Client_SetAmmoCount(int32 Count);
}; // Size: 0xA00

class AAnimal2 : public AConZCharacter
{
    FText SpeciesName;                                                                // 0x0830 (size: 0x18)
    EAnimalSpecies SpeciesType;                                                       // 0x0848 (size: 0x1)
    EAnimalActivityCycle ActivityCycle;                                               // 0x0849 (size: 0x1)
    float MaxHealth;                                                                  // 0x084C (size: 0x4)
    class UHitReactComponent* HitReactComponent;                                      // 0x0850 (size: 0x8)
    FGameplayTag HitReactType;                                                        // 0x0858 (size: 0x8)
    FName EyesViewPointSocketName;                                                    // 0x0860 (size: 0x8)
    FName TargetLocationSocketName;                                                   // 0x0868 (size: 0x8)
    float BleedingSpeed;                                                              // 0x0870 (size: 0x4)
    float LightWoundDamageAmount;                                                     // 0x0874 (size: 0x4)
    float MeleeBleedingThreshold;                                                     // 0x0878 (size: 0x4)
    float StuckCheckDuration;                                                         // 0x087C (size: 0x4)
    float StuckRadius;                                                                // 0x0880 (size: 0x4)
    uint8 UnstuckMode;                                                                // 0x0884 (size: 0x1)
    FAnimal2OnDamageTaken OnDamageTaken;                                              // 0x0888 (size: 0x10)
    void TakeDamageDelegate(class AActor* damageActor, float Damage, FVector HitLocation, class APawn* eventInstigator);
    float HeadBoneRotationSendToServerInterval;                                       // 0x0898 (size: 0x4)
    float SightRange;                                                                 // 0x089C (size: 0x4)
    bool TiltMeshOnSlopes;                                                            // 0x08A0 (size: 0x1)
    bool AdjustMeshHeightOnSlopes;                                                    // 0x08A1 (size: 0x1)
    float MeshPositionLerpSpeed;                                                      // 0x08A4 (size: 0x4)
    float BleedInterval;                                                              // 0x08A8 (size: 0x4)
    bool ShouldGoToRagdolIfTakenDamage;                                               // 0x08AC (size: 0x1)
    float RagdollDuration;                                                            // 0x08B0 (size: 0x4)
    float _health;                                                                    // 0x08B4 (size: 0x4)
    bool _canBeModifiedWithServerSettings;                                            // 0x08BC (size: 0x1)
    int32 _packSizeMin;                                                               // 0x08CC (size: 0x4)
    int32 _packSizeMax;                                                               // 0x08D0 (size: 0x4)
    EAnimalStance _animalStance;                                                      // 0x0908 (size: 0x1)
    bool _shouldUpdateMovementSpeedRTPCValue;                                         // 0x0910 (size: 0x1)
    bool _doNotCrumble;                                                               // 0x0958 (size: 0x1)
    float _collisionDamageMultiplierPerBodyPart;                                      // 0x095C (size: 0x30)
    float _delayBetweenTakeDamageSounds;                                              // 0x0990 (size: 0x4)
    bool _canDrown;                                                                   // 0x0994 (size: 0x1)
    float _drownDamageCycleLength;                                                    // 0x0998 (size: 0x4)
    float _drownDamagePerCycle;                                                       // 0x099C (size: 0x4)
    float _baseEyeForwardDistance;                                                    // 0x09A4 (size: 0x4)
    bool _isSearched;                                                                 // 0x09A8 (size: 0x1)
    float _corpseSearchDuration;                                                      // 0x09AC (size: 0x4)
    float _corpseMaxLifeTimeInMinutes;                                                // 0x09B0 (size: 0x4)
    float _destroyCorpseTimerInterval;                                                // 0x09B4 (size: 0x4)
    float _minDistanceToPlayerPawnOrSpectatorToDestroyCorpse;                         // 0x09B8 (size: 0x4)

    void UnpackUint8(const uint8 pack, TArray<bool>& B);
    uint8 PackBoolsIntoUint8(const TArray<bool>& B);
    void OnRep_Health();
    void NetMulticast_PlaySoundOnClients(EAnimal2Sound SoundToPlay);
    class APrisoner* ClosestPrisoner();
}; // Size: 0x9D0

class AAnimalContinuousChargeAttackAIController : public AComplexAnimalAIController
{
    float LockAttackDirectionDistance;                                                // 0x0620 (size: 0x4)
    float ContinueAttackDistance;                                                     // 0x0624 (size: 0x4)

}; // Size: 0x638

class AAquaticLifeSpawningVolume : public AVolume
{
    EWaterZoneType _waterZoneType;                                                    // 0x0258 (size: 0x1)
    class UFishSpeciesPreset* _fishSpeciesPreset;                                     // 0x0260 (size: 0x8)
    class UFishSpawningPreset* _fishSpawningPreset;                                   // 0x0268 (size: 0x8)
    float _requiredDepthForSpawning;                                                  // 0x0270 (size: 0x4)
    float _fishSchoolManagerSpawningExtent;                                           // 0x0274 (size: 0x4)
    int32 _maxSchoolsPerFishSchoolManager;                                            // 0x0278 (size: 0x4)
    float _fishingZoneIndicatorMinSpawnTime;                                          // 0x027C (size: 0x4)
    float _fishingZoneIndicatorMaxSpawnTime;                                          // 0x0280 (size: 0x4)
    float _fishingZoneIndicatorMinLifetime;                                           // 0x0284 (size: 0x4)
    float _fishingZoneIndicatorMaxLifetime;                                           // 0x0288 (size: 0x4)
    int32 _maxFishingZoneIndicatorPerPlayer;                                          // 0x028C (size: 0x4)
    float _fishingZoneIndicatorMinSpawningExtent;                                     // 0x0290 (size: 0x4)
    float _fishingZoneIndicatorMaxSpawningExtent;                                     // 0x0294 (size: 0x4)
    float _fishingZoneIndicatorMinRadius;                                             // 0x0298 (size: 0x4)
    float _fishingZoneIndicatorMaxRadius;                                             // 0x029C (size: 0x4)
    float _requiredDepthForFishingIndicator;                                          // 0x02A0 (size: 0x4)

}; // Size: 0x2A8

class AArmband : public AClothesItem
{
    uint64 _replicatedSquadEmblem;                                                    // 0x0A48 (size: 0x8)

    void OnRep_SquadEmblem();
}; // Size: 0xA50

class AArmedNPCBase : public AConZCharacter
{
    class UEntityOverlapDetectionComponent* _trapOverlapDetection;                    // 0x0880 (size: 0x8)
    class UBaseInteractionComponent* _baseInteractionComponent;                       // 0x0888 (size: 0x8)
    class UNavigationInvokerComponent* _navigationInvokerComponent;                   // 0x0890 (size: 0x8)
    class UMeleeCombatComponent* _meleeCombatComponent;                               // 0x0898 (size: 0x8)
    class UNPCInventoryComponent* _inventoryComponent;                                // 0x08A0 (size: 0x8)
    FAttachmentSocket RightHandAttachmentSocket;                                      // 0x08A8 (size: 0x10)
    FAttachmentSocket LeftHandAttachmentSocket;                                       // 0x08B8 (size: 0x10)
    bool _enableBaseInteraction;                                                      // 0x08C8 (size: 0x1)
    bool _isInCombatMode;                                                             // 0x08C9 (size: 0x1)
    class AActor* _meleeTarget;                                                       // 0x08D0 (size: 0x8)
    class AItem* _itemInHands;                                                        // 0x08D8 (size: 0x8)
    class UHitReactComponent* _hitReactComponent;                                     // 0x08F8 (size: 0x8)
    EArmedNPCBaseMovementPace _pace;                                                  // 0x0900 (size: 0x1)
    class UArmedNPCBaseCommonData* _armedNPCBaseCommonData;                           // 0x0908 (size: 0x8)
    bool _canEverBeSearched;                                                          // 0x0910 (size: 0x1)
    float _corpseSearchDuration;                                                      // 0x0914 (size: 0x4)
    float _drownDamageCycleLength;                                                    // 0x0918 (size: 0x4)
    float _drownDamagePerCycle;                                                       // 0x091C (size: 0x4)
    class AActor* _aimLocationTargetForSimulatedProxy;                                // 0x0950 (size: 0x8)
    bool _assignAimLocationOnSimulatedProxy;                                          // 0x0958 (size: 0x1)
    class UArmedNPCWeaponManual* _weaponManual;                                       // 0x0960 (size: 0x8)
    class UMeleeSkillAnimationsPreset* _meleeSkillAnimationsPreset;                   // 0x0970 (size: 0x8)
    float _health;                                                                    // 0x099C (size: 0x4)
    bool _isSearched;                                                                 // 0x09A0 (size: 0x1)
    int32 _bodyMeshIndex;                                                             // 0x09A4 (size: 0x4)
    int32 _itemInHandsIndex;                                                          // 0x09A8 (size: 0x4)
    bool _checkSurroundings;                                                          // 0x09BC (size: 0x1)

    void OnRep_Pace();
    void OnRep_MeleeTarget();
    void OnRep_IsSearched(bool oldValue);
    void OnRep_IsInCombatMode();
    void OnMontageEnded(class UAnimMontage* Montage, bool interrupted);
    void NetMulticast_StopAnimation(EArmedNPCAnimation Animation);
    void NetMulticast_PlayVoiceLine(EArmedNPCVoiceLine line);
    void NetMulticast_PlayAnimation(EArmedNPCAnimation Animation);
    void NetMulticast_OnConZCharacterKilled();
    void BaseInteractionComponent_OnBaseInteractionEvent(class UBaseInteractionComponent* Component, const FBaseInteractionEvent& BaseInteractionEvent);
}; // Size: 0xA00

class AArmedNPCBaseAIController : public AConZAIController
{
    class UAISenseConfig_Sight* _sightSenseConfigCombat;                              // 0x0450 (size: 0x8)
    class UAISenseConfig_Hearing* _hearingSenseConfigCombat;                          // 0x0458 (size: 0x8)
    class UAISenseConfig_Touch* _touchSenseConfig;                                    // 0x0460 (size: 0x8)
    TMap<FName, float> _noiseAccumulationMultiplierPerNoiseTag;                       // 0x0468 (size: 0x50)
    float _genericAcceptanceRadius;                                                   // 0x04B8 (size: 0x4)

    void SensingComponent_OnActorSensed(const TArray<class AActor*>& actorsPercepted);
}; // Size: 0x598

class ABCULockItem : public AItem
{
    class UBasicGameResourceSlotItemComponent* _batterySlot;                          // 0x09B0 (size: 0x8)
    FDbIntegerId _connectedServerUserProfileId;                                       // 0x09B8 (size: 0x8)

    void OnResourceObjectDeactivated(class UActorComponent* containerComponent);
    void OnRep_ConnectionPrisonerId();
}; // Size: 0x9C0

class ABCULockRegistry : public AActor
{

    void UpdateBCULockRegistryOnClientWithUserProfileId(FDbIntegerId ServerUserProfileId);
}; // Size: 0x2A0

class ABCUMemoryModuleItem : public AItem
{
    float _intelligenceReward;                                                        // 0x09A8 (size: 0x4)
    class UAkAudioEvent* _upgradeStartAudio;                                          // 0x09B0 (size: 0x8)
    class UAkAudioEvent* _upgradeStopAudio;                                           // 0x09B8 (size: 0x8)
    class UAkAudioEvent* _upgradeSuccessAudio;                                        // 0x09C0 (size: 0x8)
    class UAkAudioEvent* _upgradeFailureAudio;                                        // 0x09C8 (size: 0x8)
    float _upgradeActionDuration;                                                     // 0x09D0 (size: 0x4)
    TSoftClassPtr<UObject> _tradeableServiceClass;                                    // 0x09D8 (size: 0x28)

}; // Size: 0xA00

class ABankATMMinigame : public AMinigame
{
    class UBankATMUIController* _uiController;                                        // 0x0340 (size: 0x8)
    class UStaticMeshComponent* _bankATMMesh;                                         // 0x0348 (size: 0x8)
    class UWidgetComponent* _bankATMWidget;                                           // 0x0350 (size: 0x8)
    FVector _zoomStartLocation;                                                       // 0x0358 (size: 0xC)
    FVector _zoomEndLocation;                                                         // 0x0364 (size: 0xC)
    class UCurveFloat* _zoomCurve;                                                    // 0x0370 (size: 0x8)
    float _virtualMouseMinSensitivityModifier;                                        // 0x0378 (size: 0x4)
    float _virtualMouseMaxSensitivityModifier;                                        // 0x037C (size: 0x4)
    class UStaticMesh* _atmMesh;                                                      // 0x0390 (size: 0x8)
    class UStaticMesh* _tabletMesh;                                                   // 0x0398 (size: 0x8)

}; // Size: 0x3A0

class ABanker : public ASedentaryNPC
{
    float _bankTransactionCooldownTime;                                               // 0x09A0 (size: 0x4)
    TSubclassOf<class ABankATMMinigame> _bankMinigameClass;                           // 0x09A8 (size: 0x8)

}; // Size: 0x9C0

class ABarberShop : public ACharacterModificationRoom
{
    TArray<class UCharacterMesh*> _characterMeshesToAddOntoPrisoner;                  // 0x02C8 (size: 0x10)

}; // Size: 0x2E0

class ABasicLadder : public AActor
{
    class UStaticMeshComponent* _mesh;                                                // 0x0220 (size: 0x8)
    TArray<FLadderMarker> _ladderMarkers;                                             // 0x0228 (size: 0x10)

}; // Size: 0x248

class ABatteryChargerItem : public AEquipmentItem
{
    class UInventoryContainer2D* _inventoryContainer2D;                               // 0x09C0 (size: 0x8)
    class URangedResourceConsumerComponentMultipleProviders* _rangedResourceConsumerComponent; // 0x09C8 (size: 0x8)
    uint32 _capacityX;                                                                // 0x09D0 (size: 0x4)
    uint32 _capacityY;                                                                // 0x09D4 (size: 0x4)
    float _chargingRate;                                                              // 0x09D8 (size: 0x4)

    void OnRangedResourceConsumerComponentDeactivated(class UActorComponent* Component);
}; // Size: 0x9E0

class ABedroll : public AClothesItem
{
    FDbIntegerId _occupiedUserProfileId;                                              // 0x0A48 (size: 0x8)
    bool _occupantOnline;                                                             // 0x0A50 (size: 0x1)
    bool _isRolledUpRep;                                                              // 0x0A51 (size: 0x1)
    class UStaticMesh* _meshInHands;                                                  // 0x0A58 (size: 0x8)
    class UMaterialInterface* _materialInHands;                                       // 0x0A60 (size: 0x8)
    class UStaticMesh* _meshOnGround;                                                 // 0x0A68 (size: 0x8)
    class UMaterialInterface* _materialOnGround;                                      // 0x0A70 (size: 0x8)
    float _maxRestHeight;                                                             // 0x0A78 (size: 0x4)
    float _damageOverTimeWhenOccupied;                                                // 0x0A7C (size: 0x4)
    float _autoDestructTimeWhenOccupied;                                              // 0x0A80 (size: 0x4)

    void VirtualizeTimerCallback();
    void SetOccupantOfflineTimerCallback();
    void OnUserLogout(FDbIntegerId UserId);
    void OnUserLogin(FDbIntegerId UserId);
    void OnRep_IsRolledUpRep();
    void OnOccupantRemoved();
    void OnOccupantKilled(class AConZCharacter* ConZCharacter);
}; // Size: 0xAB0

class ABiome : public AActor
{
    class USceneComponent* _root;                                                     // 0x0220 (size: 0x8)
    class UStaticMeshComponent* _visualizationSphere;                                 // 0x0228 (size: 0x8)
    float _radius;                                                                    // 0x0230 (size: 0x4)
    FHuntingBiomeParameters _parameters;                                              // 0x0238 (size: 0x38)

}; // Size: 0x270

class ABird2 : public AAnimal2
{
    bool IsStaringPerched;                                                            // 0x09C8 (size: 0x1)
    float MinFlightAltitude;                                                          // 0x09CC (size: 0x4)
    float MaxFlightAltitude;                                                          // 0x09D0 (size: 0x4)
    bool _isLanding;                                                                  // 0x09D4 (size: 0x1)
    bool _isTakingOff;                                                                // 0x09D5 (size: 0x1)
    bool _isPerched;                                                                  // 0x09D6 (size: 0x1)
    bool _isFlying;                                                                   // 0x09D7 (size: 0x1)
    TArray<bool> _states;                                                             // 0x09D8 (size: 0x10)
    uint8 _repStates;                                                                 // 0x09E8 (size: 0x1)

    void OnRep_States();
    bool GetIsTakingOff();
    bool GetIsStaringPerched();
    bool GetIsPerched();
    bool GetIsLanding();
    bool GetIsFlying();
    void CapsuleComponent_OnComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit);
}; // Size: 0xA00

class ABird2AIController : public AConZAIController
{
    float FlyDurationMin;                                                             // 0x0450 (size: 0x4)
    float FlyDurationMax;                                                             // 0x0454 (size: 0x4)
    float RemainOnGroundDurationMin;                                                  // 0x0458 (size: 0x4)
    float RemainOnGroundDurationMax;                                                  // 0x045C (size: 0x4)
    float TurnSpeed;                                                                  // 0x0460 (size: 0x4)
    float FlightSegmentDistance;                                                      // 0x0464 (size: 0x4)
    float LandingDistance;                                                            // 0x0468 (size: 0x4)

    void UpdatePerception(const TArray<class AActor*>& actorsPercepted);
}; // Size: 0x4A8

class ABirdTargetPoint : public AActor
{
    bool IsOccupied;                                                                  // 0x0220 (size: 0x1)

}; // Size: 0x228

class ABloodStain : public AActor
{
    class UStaticMeshComponent* _mesh;                                                // 0x0228 (size: 0x8)
    FText _name;                                                                      // 0x0230 (size: 0x18)
    FText _sampleExtractionText;                                                      // 0x0248 (size: 0x18)
    TSubclassOf<class AItem> _sampleExtractionTool;                                   // 0x0260 (size: 0x8)
    TSubclassOf<class AItem> _sampleExtractionProduct;                                // 0x0268 (size: 0x8)
    class UAnimMontage* _sampleExtractionMontage;                                     // 0x0270 (size: 0x8)
    class UAkAudioEvent* _sampleExtractionStartAudioEvent;                            // 0x0278 (size: 0x8)
    class UAkAudioEvent* _sampleExtractionStopAudioEvent;                             // 0x0280 (size: 0x8)
    float _sampleExtractionBaseDuration;                                              // 0x0288 (size: 0x4)
    bool _isSampleBeingExtracted;                                                     // 0x028C (size: 0x1)
    float _timeBeforeDecayStarts;                                                     // 0x02A0 (size: 0x4)
    float _decayDuration;                                                             // 0x02A4 (size: 0x4)
    float _fallThroughGroundRateWhenDecaying;                                         // 0x02A8 (size: 0x4)
    bool _isDecaying;                                                                 // 0x02B0 (size: 0x1)

}; // Size: 0x2B8

class ABoat : public AVehicleBase
{
    class UAdvancedBuoyancyComponent* _advancedBuoyancyComponent;                     // 0x1300 (size: 0x8)
    class UVehiclePowertrainComponent* _powertrainComponent;                          // 0x1308 (size: 0x8)
    class UParticleSystemComponent* _motorWaterSplashParticleComponent;               // 0x1310 (size: 0x8)
    float _throttleForceMagnitude;                                                    // 0x131C (size: 0x4)
    FVector _forcePosition;                                                           // 0x1320 (size: 0xC)
    float _yawImpulse;                                                                // 0x132C (size: 0x4)
    float _rollImpulse;                                                               // 0x1330 (size: 0x4)
    float _pitchImpulse;                                                              // 0x1334 (size: 0x4)
    FRuntimeFloatCurve _driverActionDifficultyVsSpeed;                                // 0x1338 (size: 0x88)
    FRuntimeFloatCurve _driverActionDifficultyVsForce;                                // 0x13C0 (size: 0x88)
    FRuntimeFloatCurve _driverConstitutionChangeRateModifierVsSpeed;                  // 0x1448 (size: 0x88)
    FRuntimeFloatCurve _driverStrengthChangeRateModifierVsSpeed;                      // 0x14D0 (size: 0x88)
    FBoatParametersPerMovementPace _parametersPerMovementPace;                        // 0x1558 (size: 0x48)
    FFloatInterval _maxSpeedModifierInterpedWithDriverDexterity;                      // 0x15A0 (size: 0x8)
    float _throttleInterpSpeed;                                                       // 0x15A8 (size: 0x4)
    float _brakeInterpSpeed;                                                          // 0x15B0 (size: 0x4)
    float _steerInterpSpeed;                                                          // 0x15B8 (size: 0x4)
    float _maxSteeringAngle;                                                          // 0x15C0 (size: 0x4)
    float _motorSteeringForce;                                                        // 0x15C4 (size: 0x4)
    float _motorSteerTurnMultiplier;                                                  // 0x15C8 (size: 0x4)
    float _maxSpeedForBase;                                                           // 0x15CC (size: 0x4)
    FRuntimeFloatCurve _rudderEfficiencyBySpeedKmH;                                   // 0x15D0 (size: 0x88)
    FRuntimeFloatCurve _sidewaysVelocityFalloff;                                      // 0x1658 (size: 0x88)
    FRuntimeFloatCurve _speedKmhVsDensityMultiplier;                                  // 0x16E0 (size: 0x88)
    float _maxMotorSpeed;                                                             // 0x1768 (size: 0x4)
    float _throttleToRpmMultiplier;                                                   // 0x176C (size: 0x4)
    EBoatPaddlingState _paddlingState;                                                // 0x1780 (size: 0x1)
    float _maxRowingSpeed;                                                            // 0x1784 (size: 0x4)
    float _rowingForce;                                                               // 0x1788 (size: 0x4)
    FRuntimeFloatCurve _rowForceMultiplierPerKph;                                     // 0x1790 (size: 0x88)
    float _rowTurnMultiplier;                                                         // 0x1818 (size: 0x4)
    FRuntimeFloatCurve _rowTurnMultiplierPerKph;                                      // 0x1820 (size: 0x88)
    class UAkAudioEvent* _rowingAudioEvent;                                           // 0x18A8 (size: 0x8)
    float _desiredDriftMultiplier;                                                    // 0x18B0 (size: 0x4)
    float _paddleDriftSteerMultiplier;                                                // 0x18B4 (size: 0x4)
    uint32 _numPaddleSwingsInOneHand;                                                 // 0x18B8 (size: 0x4)
    bool _hasSails;                                                                   // 0x18BC (size: 0x1)
    FName _sailCollisionShapeName;                                                    // 0x18C0 (size: 0x8)
    float _sailingForceMultiplier;                                                    // 0x18C8 (size: 0x4)
    FFloatInterval _windIntensityInterval;                                            // 0x18CC (size: 0x8)
    FRuntimeFloatCurve _sailingForceMultiplierPerKph;                                 // 0x18D8 (size: 0x88)
    float _sailingTurnMultiplier;                                                     // 0x1960 (size: 0x4)
    FRuntimeFloatCurve _sailingTurnMultiplierPerKph;                                  // 0x1968 (size: 0x88)
    class UAkAudioEvent* _sailingRudderStartAudioEvent;                               // 0x19F0 (size: 0x8)
    class UAkAudioEvent* _sailingRudderEndAudioEvent;                                 // 0x19F8 (size: 0x8)
    class UAkAudioEvent* _sailsTautAudioEvent;                                        // 0x1A00 (size: 0x8)
    int32 _sailsDeploySteps;                                                          // 0x1A08 (size: 0x4)
    float _sailsDeploySpeedMultiplier;                                                // 0x1A0C (size: 0x4)
    uint32 _sailsTurnSteps;                                                           // 0x1A10 (size: 0x4)
    float _sailsTurnSpeedMultiplier;                                                  // 0x1A14 (size: 0x4)
    float _sailsMaxTurnAngle;                                                         // 0x1A18 (size: 0x4)
    float _maxSailingSpeed;                                                           // 0x1A1C (size: 0x4)
    FRuntimeFloatCurve _sailsDeploymentRatioVsForceMultiplier;                        // 0x1A20 (size: 0x88)
    float _sailingSteerSoundMultiplier;                                               // 0x1AA8 (size: 0x4)
    EBoatSDFType _sdfType;                                                            // 0x1ACC (size: 0x4)
    class UParticleSystemComponent* _LOarWaterParticles;                              // 0x1AD0 (size: 0x8)
    class UParticleSystemComponent* _ROarWaterParticles;                              // 0x1AD8 (size: 0x8)
    FBox _dryVolume;                                                                  // 0x1AE0 (size: 0x1C)
    float _EMInterferenceMaxDisabledTime;                                             // 0x1AFC (size: 0x4)

}; // Size: 0x1B60

class ABombDefusalMinigame : public ABombDefusalMinigameBase
{
}; // Size: 0x540

class ABombDefusalMinigameBase : public AMinigame
{
    class UStaticMeshComponent* _timeBomb;                                            // 0x0340 (size: 0x8)
    class UStaticMesh* _splineConnectorMesh;                                          // 0x0348 (size: 0x8)
    FVector _wireButtonsSize;                                                         // 0x0358 (size: 0xC)
    class USkeletalMeshComponent* _defusalTool;                                       // 0x0368 (size: 0x8)
    float _toolMovementSensitivity;                                                   // 0x0370 (size: 0x4)
    FVector _minDefusingToolOffsetFromCenter;                                         // 0x0374 (size: 0xC)
    FVector _maxDefusingToolOffsetFromCenter;                                         // 0x0380 (size: 0xC)
    class UMaterialInterface* _greenLedLight;                                         // 0x0390 (size: 0x8)
    class UMaterialInterface* _redLedLight;                                           // 0x0398 (size: 0x8)
    class UMaterialInterface* _yellowLedLight;                                        // 0x03A0 (size: 0x8)
    TArray<class UStaticMeshComponent*> _ledLights;                                   // 0x03A8 (size: 0x10)
    class UStaticMesh* _ledLightMesh;                                                 // 0x03B8 (size: 0x8)
    class UStaticMesh* _wireMesh;                                                     // 0x03C8 (size: 0x8)
    TArray<EWireType> _wiresEndPositions;                                             // 0x03D0 (size: 0x10)
    TArray<FWireDescription> _wires;                                                  // 0x03E0 (size: 0x10)
    TArray<FSplineDescription> _splines;                                              // 0x0400 (size: 0x10)
    int32 _numberOfWires;                                                             // 0x0420 (size: 0x4)
    int32 _numberOfWirePoints;                                                        // 0x0424 (size: 0x4)
    int32 _wiresShuffleIntensity;                                                     // 0x0428 (size: 0x4)
    int32 _minWiresComplexity;                                                        // 0x042C (size: 0x4)
    ESplineAxis _wiresForwardAxis;                                                    // 0x0430 (size: 0x1)
    float _wiresStartSmoothness;                                                      // 0x0434 (size: 0x4)
    float _wiresEndSmoothness;                                                        // 0x0438 (size: 0x4)
    float _wiresMiddleSmoothness;                                                     // 0x043C (size: 0x4)
    float _wiresSharpCornerSmoothness;                                                // 0x0440 (size: 0x4)
    float _maxSegmentSize;                                                            // 0x0444 (size: 0x4)
    float _wirePointsSpreadPositive;                                                  // 0x0448 (size: 0x4)
    float _wirePointsSpreadNegative;                                                  // 0x044C (size: 0x4)
    float _wireHeight;                                                                // 0x0450 (size: 0x4)
    float _wireVerticalSpacing;                                                       // 0x0454 (size: 0x4)
    FVector _wirePointsOffset;                                                        // 0x0458 (size: 0xC)
    float _wireEndOffset;                                                             // 0x0464 (size: 0x4)
    FVector _additionalWireEndPointOffset;                                            // 0x0468 (size: 0xC)
    class UStaticMeshComponent* _cutWireSegment0;                                     // 0x0478 (size: 0x8)
    class UStaticMeshComponent* _cutWireSegment1;                                     // 0x0480 (size: 0x8)
    class UStaticMeshComponent* _cutWireSegment2;                                     // 0x0488 (size: 0x8)
    class UStaticMeshComponent* _cutWireSegment3;                                     // 0x0490 (size: 0x8)
    class UStaticMeshComponent* _cutWireSegment4;                                     // 0x0498 (size: 0x8)
    class UStaticMeshComponent* _cutWireSegment5;                                     // 0x04A0 (size: 0x8)
    class UStaticMeshComponent* _uncutWireSegment0;                                   // 0x04A8 (size: 0x8)
    class UStaticMeshComponent* _uncutWireSegment1;                                   // 0x04B0 (size: 0x8)
    class UStaticMeshComponent* _uncutWireSegment2;                                   // 0x04B8 (size: 0x8)
    class UStaticMeshComponent* _uncutWireSegment3;                                   // 0x04C0 (size: 0x8)
    class UStaticMeshComponent* _uncutWireSegment4;                                   // 0x04C8 (size: 0x8)
    class UStaticMeshComponent* _uncutWireSegment5;                                   // 0x04D0 (size: 0x8)
    class UBoxComponent* _wireBox1;                                                   // 0x04D8 (size: 0x8)
    class UBoxComponent* _wireBox2;                                                   // 0x04E0 (size: 0x8)
    class UBoxComponent* _wireBox3;                                                   // 0x04E8 (size: 0x8)
    class UBoxComponent* _wireBox4;                                                   // 0x04F0 (size: 0x8)
    class UBoxComponent* _wireBox5;                                                   // 0x04F8 (size: 0x8)
    class UBoxComponent* _wireBox6;                                                   // 0x0500 (size: 0x8)
    class UAkAudioEvent* _bombDefusalTimerStartSound;                                 // 0x0508 (size: 0x8)
    class UAkAudioEvent* _bombDefusalTimerStopSound;                                  // 0x0510 (size: 0x8)
    class UAkAudioEvent* _cutWireSound;                                               // 0x0518 (size: 0x8)
    class UAkAudioEvent* _bombDefusedSound;                                           // 0x0520 (size: 0x8)

    void PlayCutWireMontage();
}; // Size: 0x530

class ABowAttachmentSilencer : public AWeaponAttachment
{
    float _noiseMultiplier;                                                           // 0x09D8 (size: 0x4)

}; // Size: 0x9E0

class ABowAttachmentStabilizer : public ABowAttachmentSilencer
{
    float _shakinessModifier;                                                         // 0x09E0 (size: 0x4)

}; // Size: 0x9F0

class ABrenner : public AConZCharacter
{
    class UNavigationInvokerComponent* _navigationInvokerComponent;                   // 0x0870 (size: 0x8)
    class UHitReactComponent* _hitReactComponent;                                     // 0x0878 (size: 0x8)
    class UFlamethrowerComponent* _flamethrowerComponent;                             // 0x0880 (size: 0x8)
    class UBrennerCommonData* _brennerCommonData;                                     // 0x0888 (size: 0x8)
    EBrennerState _state;                                                             // 0x0918 (size: 0x1)
    bool _aimFlamethrower;                                                            // 0x091A (size: 0x1)
    TWeakObjectPtr<class AActor> _flamethrowerTarget;                                 // 0x091C (size: 0x8)

    void OnRep_State(EBrennerState oldState);
    void OnMontageEnded(class UAnimMontage* Montage, bool interrupted);
    void NetMulticast_StopAttack(EBrennerAttackType AttackType);
    void NetMulticast_StopAnimation(EBrennerAnimation Animation);
    void NetMulticast_StartBleeding();
    void NetMulticast_StartAttack(FBrennerAttackDescription attackDescription);
    void NetMulticast_PlayHitReact(EHitDirectionType hitDirectionType);
    void NetMulticast_PlayAnimation(EBrennerAnimation Animation);
    FVector GetFlamethrowerAimLocation();
}; // Size: 0x960

class ABrennerAIController : public AConZAIController
{
    class UAISenseConfig_Sight* _sightSenseConfigCombat;                              // 0x0450 (size: 0x8)
    class UAISenseConfig_Hearing* _hearingSenseConfigCombat;                          // 0x0458 (size: 0x8)
    class UAISenseConfig_Touch* _touchSenseConfig;                                    // 0x0460 (size: 0x8)
    TMap<FName, float> _noiseAccumulationMultiplierPerNoiseTag;                       // 0x0468 (size: 0x50)
    FVector _hibernateLocation;                                                       // 0x04B8 (size: 0xC)
    float _genericAcceptanceRadius;                                                   // 0x04C4 (size: 0x4)
    class UNPCControllerStateBrennerBase* _statesByEnum;                              // 0x04D0 (size: 0x50)

    void SensingComponent_OnActorSensed(const TArray<class AActor*>& actorsPercepted);
}; // Size: 0x5D0

class ABrokenArrow : public AItem
{
}; // Size: 0x9B0

class ABuilding : public AActor
{
    TArray<FLadderMarker> _ladderMarkers;                                             // 0x0240 (size: 0x10)
    TArray<FWindowMarker> _windowMarkers;                                             // 0x0260 (size: 0x10)
    bool _isClaimable;                                                                // 0x0310 (size: 0x1)
    TMap<int32, FBuildingNavLinkData> _generatedNavLinkDataByWindowIndex;             // 0x03C8 (size: 0x50)
    TMap<class FString, class FBuildingNavLinkData> _generatedNavLinkDataByDoorRuntimeId; // 0x0418 (size: 0x50)
    TSubclassOf<class UNavArea> _doorNavArea;                                         // 0x0468 (size: 0x8)
    TSubclassOf<class UNavArea> _windowNavArea;                                       // 0x0470 (size: 0x8)

}; // Size: 0x4C8

class ABuildingInterior : public AActor
{
}; // Size: 0x220

class ABuildingManager : public AActor
{
    TMap<class ABuilding*, class FBox2D> _buildings;                                  // 0x0268 (size: 0x50)
    FBuildingsReplicationHelper _buildingsDataRepHelper;                              // 0x02C0 (size: 0x70)

    void NetMulticast_UpdateBuildingData(int32 dataVersion, FString runtimeId, const FBuildingData& BuildingData);
}; // Size: 0x3A8

class ABunkerBoundsTagActor : public AActor
{
    FName _bunkerId;                                                                  // 0x0220 (size: 0x8)
    class UBoxComponent* _bounds;                                                     // 0x0228 (size: 0x8)
    bool _tagAsSentryLocation;                                                        // 0x0230 (size: 0x1)
    bool _tagAsNormalBunker;                                                          // 0x0231 (size: 0x1)

}; // Size: 0x238

class ACTFBase : public AActor
{
    class USphereComponent* SphereComponent;                                          // 0x0220 (size: 0x8)
    class UStaticMeshComponent* Mesh;                                                 // 0x0228 (size: 0x8)
    TArray<class UMaterialInstance*> TeamMaterials;                                   // 0x0230 (size: 0x10)
    class ACTFGameEvent* _gameEvent;                                                  // 0x0240 (size: 0x8)
    int32 _team;                                                                      // 0x0248 (size: 0x4)
    float _radius;                                                                    // 0x024C (size: 0x4)

    void SphereOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
    void OnRep_Team();
    void OnRep_Radius();
}; // Size: 0x250

class ACTFFlag : public AActor
{
    class USphereComponent* SphereComponent;                                          // 0x0220 (size: 0x8)
    class USkeletalMeshComponent* FlagMesh;                                           // 0x0228 (size: 0x8)
    TArray<class UMaterialInstance*> TeamMaterials;                                   // 0x0230 (size: 0x10)
    FName AttachSocketName;                                                           // 0x0240 (size: 0x8)
    class ACTFGameEvent* _gameEvent;                                                  // 0x0248 (size: 0x8)
    int32 _team;                                                                      // 0x0250 (size: 0x4)
    class APrisoner* _carrier;                                                        // 0x0258 (size: 0x8)
    float _resetProgress;                                                             // 0x0268 (size: 0x4)
    FTransform _baseTransform;                                                        // 0x0270 (size: 0x30)
    FTransform _flagTransform;                                                        // 0x02A0 (size: 0x30)

    void SphereOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
    void OnRep_Team();
    void OnRep_FlagTransform();
}; // Size: 0x2D0

class ACTFFlagStand : public AActor
{
    class UStaticMeshComponent* Mesh;                                                 // 0x0220 (size: 0x8)
    class UPointLightComponent* Light;                                                // 0x0228 (size: 0x8)
    FLinearColor _lightColor;                                                         // 0x0230 (size: 0x10)

    void OnRep_LightColor();
}; // Size: 0x240

class ACTFGameEvent : public AGameEventBase
{
    TSubclassOf<class ACTFFlag> FlagClass;                                            // 0x0588 (size: 0x8)
    TSubclassOf<class ACTFBase> CaptureBaseClass;                                     // 0x0590 (size: 0x8)
    TSubclassOf<class ACTFFlagStand> FlagStandClass;                                  // 0x0598 (size: 0x8)
    class UTexture2D* FlagIconTexture;                                                // 0x05A0 (size: 0x8)
    class UTexture2D* FlagAccentTexture;                                              // 0x05A8 (size: 0x8)
    class UTexture2D* BaseIconTexture;                                                // 0x05B0 (size: 0x8)
    class UTexture2D* BaseAccentTexture;                                              // 0x05B8 (size: 0x8)
    class UTexture2D* EmptyBaseIconTexture;                                           // 0x05C0 (size: 0x8)
    class UTexture2D* EmptyBaseAccentTexture;                                         // 0x05C8 (size: 0x8)
    FLinearColor TeamColorA;                                                          // 0x05D0 (size: 0x10)
    FLinearColor TeamColorB;                                                          // 0x05E0 (size: 0x10)
    class UAkAudioEvent* BlueTeamPickedUpFlagAnnouncement;                            // 0x05F0 (size: 0x8)
    class UAkAudioEvent* BlueTeamCapturedFlagAnnouncement;                            // 0x05F8 (size: 0x8)
    class UAkAudioEvent* BlueTeamFlagDroppedAnnouncement;                             // 0x0600 (size: 0x8)
    class UAkAudioEvent* BlueTeamFlagReturnedAnnouncement;                            // 0x0608 (size: 0x8)
    class UAkAudioEvent* RedTeamPickedUpFlagAnnouncement;                             // 0x0610 (size: 0x8)
    class UAkAudioEvent* RedTeamCapturedFlagAnnouncement;                             // 0x0618 (size: 0x8)
    class UAkAudioEvent* RedTeamFlagDroppedAnnouncement;                              // 0x0620 (size: 0x8)
    class UAkAudioEvent* RedTeamFlagReturnedAnnouncement;                             // 0x0628 (size: 0x8)
    FCTFParameters _CTFParameters;                                                    // 0x0630 (size: 0x30)
    class ACTFFlag* _flagA;                                                           // 0x0660 (size: 0x8)
    class ACTFFlag* _flagB;                                                           // 0x0668 (size: 0x8)
    class ACTFBase* _baseA;                                                           // 0x0670 (size: 0x8)
    class ACTFBase* _baseB;                                                           // 0x0678 (size: 0x8)

    void SetCTFParameters(const FCTFParameters& Params);
    void OnParticipantDied(class APrisoner* victim, class AController* eventInstigator, class AActor* causer);
    class ACTFFlag* GetFlagB();
    class ACTFFlag* GetFlagA();
    FCTFParameters GetCTFParameters();
}; // Size: 0x6B0

class ACTFLocationMarker : public AGameEventLocationMarker
{
    FCTFParameters CTFParameters;                                                     // 0x0418 (size: 0x30)
    FVector CaptureOffsetA;                                                           // 0x0448 (size: 0xC)
    FVector CaptureOffsetB;                                                           // 0x0454 (size: 0xC)
    float CaptureRadiusA;                                                             // 0x0460 (size: 0x4)
    float CaptureRadiusB;                                                             // 0x0464 (size: 0x4)
    FTransform FlagOffsetA;                                                           // 0x0470 (size: 0x30)
    FTransform FlagOffsetB;                                                           // 0x04A0 (size: 0x30)
    class UStaticMeshComponent* FlagAPreviewMesh;                                     // 0x04D0 (size: 0x8)
    class UStaticMeshComponent* FlagBPreviewMesh;                                     // 0x04D8 (size: 0x8)

}; // Size: 0x4E0

class ACargoDropContainer : public AActor
{
    float DelayDuration;                                                              // 0x0220 (size: 0x4)
    float FallDuration;                                                               // 0x0224 (size: 0x4)
    float DetonationTime;                                                             // 0x0228 (size: 0x4)
    float DetonationCountdown;                                                        // 0x022C (size: 0x4)
    class UAkAudioEvent* LandSound;                                                   // 0x0230 (size: 0x8)
    class UAkAudioEvent* WarningSound;                                                // 0x0238 (size: 0x8)
    class UAkAudioEvent* DetonationSound;                                             // 0x0240 (size: 0x8)
    class UParticleSystem* DetonationParticles;                                       // 0x0248 (size: 0x8)
    TSubclassOf<class UMatineeCameraShake> CameraShakeClass;                          // 0x0250 (size: 0x8)
    TArray<class TSubclassOf<UItemSpawnerPreset>> MajorSpawnerOptions;                // 0x0258 (size: 0x10)
    TArray<class TSubclassOf<UItemSpawnerPreset2>> MajorSpawnerPresetOptions;         // 0x0268 (size: 0x10)
    TArray<FCargoDropSpawnerPreset> MinorSpawnerOptions;                              // 0x0278 (size: 0x10)
    class UAkAudioEvent* UnlockLockersAudioEvent;                                     // 0x0288 (size: 0x8)
    class UStaticMeshComponent* _parachuteMesh;                                       // 0x0290 (size: 0x8)
    class UParticleSystemComponent* _flareParticles;                                  // 0x0298 (size: 0x8)
    class UParticleSystemComponent* _dustParticles;                                   // 0x02A0 (size: 0x8)
    class UKillBoxTimerWidget* _timerWidget;                                          // 0x02A8 (size: 0x8)
    class UDiegeticLockState* _lockStateWidget;                                       // 0x02B0 (size: 0x8)
    FVector _endLocation;                                                             // 0x02C8 (size: 0xC)
    FRotator _rotation;                                                               // 0x02D4 (size: 0xC)
    bool _landed;                                                                     // 0x02E0 (size: 0x1)
    float _fallingSpeed;                                                              // 0x02E4 (size: 0x4)
    int32 _timeRemaining;                                                             // 0x02E8 (size: 0x4)
    bool _flareParticlesEnabled;                                                      // 0x02EC (size: 0x1)
    TArray<class UStaticMeshComponent*> _cargoLockers;                                // 0x02F0 (size: 0x10)

    void SetTimerWidget(class UKillBoxTimerWidget* timerWidget);
    void SetLockStateWidget(class UDiegeticLockState* Value);
    void OnWarning();
    void OnTouchdown();
    void OnRep_FlareParticlesEnabled();
    void OnDetonate();
    void Multicast_StartDetonation();
    void Multicast_Detonate();
    void DropToLocation(FVector EndLocation, float fallingTime);
    void AddCargoLocker(class UStaticMeshComponent* cargoLocker);
}; // Size: 0x318

class ACargoDropEvent : public AWorldEvent
{
    TArray<class TSubclassOf<ACargoDropContainer>> CargoDropClasses;                  // 0x0248 (size: 0x10)
    TMap<class TSubclassOf<UEncounterBase>, class FCargoDropEncounterData> _encounterClasses; // 0x02B0 (size: 0x50)
    FGameplayTag _zombieEncounterTag;                                                 // 0x0300 (size: 0x8)
    FGameplayTag _dropshipEncounterTag;                                               // 0x0308 (size: 0x8)

    void Multicast_DisplayNotification(FString SectorName, const float FallDuration);
}; // Size: 0x390

class AChainsaw : public AWeaponItem
{
    class USkeletalMeshComponent* SkeletalMesh;                                       // 0x09B8 (size: 0x8)
    FCharacterAndItemAnimation AnimationsStartEngine;                                 // 0x09C0 (size: 0x10)
    FCharacterAndItemAnimation AnimationsCheckFuelStatus;                             // 0x09D0 (size: 0x10)
    class UBaseItemTag* ChoppingToolItemTag;                                          // 0x09E0 (size: 0x8)
    class UAkAudioEvent* TurnOnAudioEvent;                                            // 0x09E8 (size: 0x8)
    class UAkAudioEvent* TurnOffAudioEvent;                                           // 0x09F0 (size: 0x8)
    TSubclassOf<class UGameResourceType> _fuelType;                                   // 0x09F8 (size: 0x8)
    FGameplayTagContainer _inFuelingSocketTypes;                                      // 0x0A00 (size: 0x20)
    float _maxFuelAmount;                                                             // 0x0A20 (size: 0x4)
    float _initialFuelAmount;                                                         // 0x0A24 (size: 0x4)
    float _fuelUsagePerHour;                                                          // 0x0A28 (size: 0x4)
    float _fuelUsagePerHourMultiplierWhenActive;                                      // 0x0A2C (size: 0x4)
    float _fuelFillingDurationPerAmountFilled;                                        // 0x0A30 (size: 0x4)
    float _fuelFillingExperiencePerAmount;                                            // 0x0A34 (size: 0x4)
    class UAnimMontage* _fuelFillingMontage;                                          // 0x0A38 (size: 0x8)
    class UMeleeSkillAnimationsPreset* _meleeSkillAnimationsPresetWhenTurnedOff;      // 0x0A40 (size: 0x8)
    class UMeleeSkillAnimationsPreset* _meleeSkillAnimationsPresetWhenTurnedOn;       // 0x0A48 (size: 0x8)
    class UAkAudioEvent* _fuelStartFillingAudioEvent;                                 // 0x0A50 (size: 0x8)
    class UAkAudioEvent* _fuelStopFillingAudioEvent;                                  // 0x0A58 (size: 0x8)
    float _noiseLoudnessWhileStarting;                                                // 0x0A60 (size: 0x4)
    float _noiseLoudnessWhileRunning;                                                 // 0x0A64 (size: 0x4)
    float _noiseLoudnessUpdateFrequencyPerHour;                                       // 0x0A68 (size: 0x4)
    float _currentFuelAmount;                                                         // 0x0A6C (size: 0x4)
    bool _turnedOn;                                                                   // 0x0A70 (size: 0x1)

    void SetUseFuelUsagePerHourMultiplierWhenActive(bool Value);
    void Server_SetUseFuelUsagePerHourMultiplierWhenActive(bool Value);
    void Server_SetTurnedOn(bool Value);
    void OnRep_TurnedOn(bool oldValue);
    bool GetUseFuelUsagePerHourMultiplierWhenActive();
}; // Size: 0x1E20

class ACharacterCreationMenuGameMode : public AGameMode
{
}; // Size: 0x308

class ACharacterModificationRoom : public AActor
{
    class APrisoner* _prisoner;                                                       // 0x0228 (size: 0x8)
    class USceneComponent* _sceneRoot;                                                // 0x0230 (size: 0x8)
    TSoftClassPtr<APrisoner> _prisonerClass;                                          // 0x0238 (size: 0x28)
    FTransform _prisonerTransform;                                                    // 0x0260 (size: 0x30)
    class UCineCameraComponent* _camera;                                              // 0x0290 (size: 0x8)
    class USplineComponent* _positionSpline;                                          // 0x0298 (size: 0x8)
    class USplineComponent* _viewTargetSpline;                                        // 0x02A0 (size: 0x8)
    float _cameraInterpSpeed;                                                         // 0x02A8 (size: 0x4)
    float _mouseTrackingSpeed;                                                        // 0x02B4 (size: 0x4)
    FVector2D _mouseBasedCameraRotationIntensity;                                     // 0x02B8 (size: 0x8)

}; // Size: 0x2D0

class AChestItem : public AItem
{
    int32 _capacityX;                                                                 // 0x09E0 (size: 0x4)
    int32 _capacityY;                                                                 // 0x09E4 (size: 0x4)
    class UInventoryContainer2D* _inventoryContainer2D;                               // 0x09E8 (size: 0x8)
    class UBuriableChestItemComponent* _buriableChestItemComponent;                   // 0x09F8 (size: 0x8)
    class UNameableItemComponent* _nameableItemComponent;                             // 0x0A00 (size: 0x8)
    bool _canContainChestItem;                                                        // 0x0A08 (size: 0x1)
    bool _lockpickableEnabled;                                                        // 0x0A09 (size: 0x1)
    bool _overrideCanBeNamed;                                                         // 0x0A0A (size: 0x1)
    bool _canBeNamed;                                                                 // 0x0A0B (size: 0x1)
    bool _canTakeMeleeDamage;                                                         // 0x0A0C (size: 0x1)
    float _containedItemsWeight;                                                      // 0x0A10 (size: 0x4)
    float _maxCarryWeight;                                                            // 0x0A14 (size: 0x4)
    float _pendingContainedItemsRadiationAmount;                                      // 0x0A18 (size: 0x4)
    FDbIntegerId _owningUserProfileId;                                                // 0x0A20 (size: 0x8)
    FTransform _unlockTransform;                                                      // 0x0A30 (size: 0x30)
    float _forceUnlockMovementAcceptanceRadius;                                       // 0x0A60 (size: 0x4)
    TArray<class UClass*> _lockItemsClasses;                                          // 0x0A68 (size: 0x10)
    TArray<class ULockData*> _lockData;                                               // 0x0A78 (size: 0x10)
    TArray<int32> _remainingNeutralizationAttemptsPerLock;                            // 0x0A88 (size: 0x10)
    TWeakObjectPtr<class ABCULockItem> _attachedBCULockItem;                          // 0x0A98 (size: 0x8)
    TArray<FDbIntegerId> _locks;                                                      // 0x0AA0 (size: 0x10)
    FDbIntegerId _protectingFlagId;                                                   // 0x0AC0 (size: 0x8)
    TSoftClassPtr<UBaseBuildingComponent> _baseElementClass;                          // 0x0AE0 (size: 0x28)
    EAccessLevel _activeAccessLevel;                                                  // 0x0B28 (size: 0x1)
    int32 _cachedInventoryCount;                                                      // 0x0B2C (size: 0x4)
    bool _doesSupportBCULocking;                                                      // 0x0B38 (size: 0x1)
    float _additionalDropNoise;                                                       // 0x0B40 (size: 0x4)
    bool _isMadeOfConductiveMaterial;                                                 // 0x0B44 (size: 0x1)
    bool _shouldDecayUnderWater;                                                      // 0x0B45 (size: 0x1)
    float _decayTimeUnderWater;                                                       // 0x0B48 (size: 0x4)
    bool _canBeDestroyedByDrone;                                                      // 0x0B4D (size: 0x1)
    FActorPaintParams _actorPaintParams;                                              // 0x0B50 (size: 0x38)
    uint8 _cachedColorIndex;                                                          // 0x0B88 (size: 0x1)

    void OnRep_RemainingNeutralizationAttemptsPerLock();
    void OnRep_LockItemsClasses();
    void OnRep_CachedInventoryCount();
    void OnRep_CachedColor();
    void OnRep_ActiveAccessLevel();
    void NetMulticast_TriggerLockNeutralizationFailurePenalty(class AActor* triggeringActor);
    void NetMulticast_PlayLockAddedEffects();
    bool CanViewName(const class APrisoner* Prisoner);
    bool CanChangeName(const class APrisoner* Prisoner);
    void BP_OnInventoryCountChanged(int32 numContainedItems);
}; // Size: 0xB90

class AChristmasGhost : public AActor
{
    TArray<TSoftClassPtr<AItem>> _possibleGifts;                                      // 0x0220 (size: 0x10)
    TSoftObjectPtr<UParticleSystem> _giftSpawnParticles;                              // 0x0230 (size: 0x28)
    TSoftObjectPtr<UAkAudioEvent> _giftSpawnAudioEvent;                               // 0x0258 (size: 0x28)
    FTransform _giftSpawnParticlesRelativeTransform;                                  // 0x0280 (size: 0x30)

    void SpawnGift(const FTransform& Transform);
    void Client_SpawnGiftItemEffects(FTransform Transform, class UParticleSystem* ParticleSystem, class UAkAudioEvent* AudioEvent);
    void Client_BeginGiftAssetsLoading(const TSoftClassPtr<AItem>& ItemClass);
}; // Size: 0x300

class AClothesItem : public AItem
{
    class UCharacterMesh* _characterMesh;                                             // 0x09A8 (size: 0x8)
    uint32 _warmth;                                                                   // 0x09B0 (size: 0x4)
    uint32 _waterResistance;                                                          // 0x09B4 (size: 0x4)
    float _inwardsWaterPropagationFactor;                                             // 0x09B8 (size: 0x4)
    float _outwardsWaterPropagationFactor;                                            // 0x09BC (size: 0x4)
    float _camouflageBonus;                                                           // 0x09C0 (size: 0x4)
    float _damageWhenEquipped;                                                        // 0x09C4 (size: 0x4)
    float _dirtinessWhenEquipped;                                                     // 0x09C8 (size: 0x4)
    float _thermalConductivityFactor;                                                 // 0x09CC (size: 0x4)
    float _burnDamageResistanceFactor;                                                // 0x09D0 (size: 0x4)
    bool _overrideTemperatureResistanceThreshold;                                     // 0x09D4 (size: 0x1)
    float _temperatureResistanceThreshold;                                            // 0x09D8 (size: 0x4)
    bool _canBeEquipped;                                                              // 0x09DC (size: 0x1)
    EPrisonerMovementPace _maxPaceWhenEquipped;                                       // 0x09DD (size: 0x1)
    float _dirtiness;                                                                 // 0x09E0 (size: 0x4)
    float _baseBodyPartMultiplier;                                                    // 0x09E4 (size: 0x4)
    float _baseBodyPartMultiplierWhileProne;                                          // 0x09E8 (size: 0x4)
    float _smallMaterialDamageLimit;                                                  // 0x09EC (size: 0x4)
    float _bigMaterialDamageLimit;                                                    // 0x09F0 (size: 0x4)
    float _maxFemaleHairLength;                                                       // 0x09F4 (size: 0x4)
    float _maxMaleHairLength;                                                         // 0x09F8 (size: 0x4)
    float _maxFacialHairLength;                                                       // 0x09FC (size: 0x4)
    float _bellyJiggleMultiplier;                                                     // 0x0A00 (size: 0x4)
    float _breastJiggleMultiplier;                                                    // 0x0A04 (size: 0x4)
    uint32 _armor;                                                                    // 0x0A08 (size: 0x4)
    float _hardness;                                                                  // 0x0A0C (size: 0x4)
    float _projectileHitEnergyAbsorption;                                             // 0x0A10 (size: 0x4)
    float _projectileHitEnergyDamagedAbsorption;                                      // 0x0A14 (size: 0x4)
    float _energyThroughputRatio;                                                     // 0x0A18 (size: 0x4)
    float _totalEnergyAbsorption;                                                     // 0x0A1C (size: 0x4)
    float _sharpMeleeDamageReduction;                                                 // 0x0A20 (size: 0x4)
    float _bluntMeleeDamageReduction;                                                 // 0x0A24 (size: 0x4)
    uint32 _capacityX;                                                                // 0x0A28 (size: 0x4)
    uint32 _capacityY;                                                                // 0x0A2C (size: 0x4)
    uint8 _materialParametersReplicated;                                              // 0x0A30 (size: 0x1)
    class UInventoryContainer2D* _inventoryContainer2D;                               // 0x0A40 (size: 0x8)

    void SetDirtiness(float dirtiness);
    void OnRep_MaterialParameters();
    void NetMulticast_UpdateMaterialParamsOnClients();
    int32 GetWarmth();
    int32 GetCapacityY();
    int32 GetCapacityX();
}; // Size: 0xA50

class ACombinationLockItem : public AItem
{
    int32 _combination;                                                               // 0x09A8 (size: 0x4)

    void Server_SetCombination(int32 Value);
}; // Size: 0x9B0

class ACompanionCrow : public AActor
{
    class USkeletalMeshComponent* _mesh;                                              // 0x0220 (size: 0x8)

}; // Size: 0x228

class AComplexAnimal2 : public AAnimal2
{
    float EnergyDepletionRate;                                                        // 0x09C8 (size: 0x4)
    float HungerDepletionRate;                                                        // 0x09CC (size: 0x4)
    float HungerDepletionRateWhenResting;                                             // 0x09D0 (size: 0x4)
    float EnergyRefillRate;                                                           // 0x09D4 (size: 0x4)
    float HungerRefillRate;                                                           // 0x09D8 (size: 0x4)
    float HealthRegenerationRate;                                                     // 0x09DC (size: 0x4)
    float HealthDepletionRate;                                                        // 0x09E0 (size: 0x4)
    FAnimalPaceSettings MovementPaceSettings;                                         // 0x09E4 (size: 0x10)
    FAnimalStationaryRotationRateSettings RotationRateSettings;                       // 0x09F4 (size: 0x3C)
    FComplexAnimal2OnActionChanged OnActionChanged;                                   // 0x0A30 (size: 0x10)
    void ActionChangedDelegate(EAnimalAction CurrentAction, EAnimalAction PrevAction);
    TArray<FChargeAttackData> ChargeAttacks;                                          // 0x0A40 (size: 0x10)
    TArray<FCloseRangeAttackData> CloseRangeAttacks;                                  // 0x0A50 (size: 0x10)
    FTurnMontages TurnMonatges;                                                       // 0x0A60 (size: 0x10)
    FAnimalActionMontageData AnimalActions;                                           // 0x0A70 (size: 0x18)
    float AttackRotationRate;                                                         // 0x0A88 (size: 0x4)
    float MinActionTime;                                                              // 0x0A8C (size: 0x4)
    FGameplayTag HitReactTypeResting;                                                 // 0x0A90 (size: 0x8)
    FGameplayTag HitReactTypeIntimidate;                                              // 0x0A98 (size: 0x8)
    uint16 _hungerAndEnergyReplicated;                                                // 0x0AA8 (size: 0x2)
    FVector _lookAtPoint;                                                             // 0x0AB0 (size: 0xC)
    float _maxLookUpAngle;                                                            // 0x0B0C (size: 0x4)
    float _maxLookRightAngle;                                                         // 0x0B10 (size: 0x4)
    float _headMovementLerpSpeed;                                                     // 0x0B14 (size: 0x4)

    void Wait(float Time);
    float TurnTowardLocation(FVector Location);
    float TurnTowardActor(class AActor* foe);
    float TurnAwayFromActor(class AActor* foe);
    float Turn(bool directionLeft);
    void StopAction_Multicast();
    void StartAction_Multicast(FRepActionData newAction);
    void Sit(float Time);
    void Rest(float Time);
    void ResetRotationRate();
    bool PreformChargeAttack(int32 attackIndex, float Time);
    void OnRep_HungerAndEnergy();
    void OnRep_ActionData();
    void NetMulticast_ForceSetAnimalRotation(FRotator NewRotation);
    bool IsAttacking();
    void Intimidate(float Time, class AActor* foe);
    FVector GetSpeed();
    float GetAngularVelocity();
    void ForceRoattionRate(FRotator RotationRate);
    void Eat(float Time);
    bool ChargeAttackFoe(class AActor* foe);
    void ChangeSpeed(float pace);
    void ChangePace(EAnimalMovementPace pace);
    void Alert(float Time);
}; // Size: 0xB50

class AComplexAnimalAIController : public AConZAIController
{
    EAnimalAgressivness Agressivness;                                                 // 0x0450 (size: 0x1)
    float SightIntimidateRadius;                                                      // 0x0454 (size: 0x4)
    float SightAttackRadius;                                                          // 0x0458 (size: 0x4)
    float FoeChargeVelocity;                                                          // 0x045C (size: 0x4)
    bool ShouldForceChargeRotation;                                                   // 0x0460 (size: 0x1)
    float AnimalVelocityThatMakesThisAnimalFlee;                                      // 0x0464 (size: 0x4)
    float FleeDistance;                                                               // 0x0468 (size: 0x4)
    float FleeTime;                                                                   // 0x046C (size: 0x4)
    float TrotTime;                                                                   // 0x0470 (size: 0x4)
    float TimeToAttackWhenAggro;                                                      // 0x0474 (size: 0x4)
    float TimeToQuitObserve;                                                          // 0x0478 (size: 0x4)
    float MinReactionTime;                                                            // 0x047C (size: 0x4)
    float MaxReactionTime;                                                            // 0x0480 (size: 0x4)
    float MovingUpdateInterval;                                                       // 0x0484 (size: 0x4)
    float AttackingUpdateInetrval;                                                    // 0x0488 (size: 0x4)
    float PathSegmentLength_OBSOLETE;                                                 // 0x048C (size: 0x4)
    float MinPaceDuration_OBSOLETE;                                                   // 0x0490 (size: 0x4)
    int32 MaxNumWalks_OBSOLETE;                                                       // 0x0494 (size: 0x4)
    int32 MaxNumTrots_OBSOLETE;                                                       // 0x0498 (size: 0x4)
    float PathDirectionCounterResetTime_OBOLETE;                                      // 0x049C (size: 0x4)
    float MoveSegmentLength;                                                          // 0x04A0 (size: 0x4)
    float BackOffDistance;                                                            // 0x04A4 (size: 0x4)
    float AttackTrackingDistance;                                                     // 0x04A8 (size: 0x4)
    float PredictionFactor;                                                           // 0x04AC (size: 0x4)
    bool BackAndForthStuckCheck;                                                      // 0x04B0 (size: 0x1)
    uint8 AttackAttempts;                                                             // 0x04B1 (size: 0x1)
    float ActionChangedDelay;                                                         // 0x04B4 (size: 0x4)
    float CloseAttackRepeatDelay;                                                     // 0x04B8 (size: 0x4)
    float AttackChainDelay;                                                           // 0x04BC (size: 0x4)
    int32 BlockedPathRetryAttempts;                                                   // 0x04C0 (size: 0x4)
    float DirectionLockTime;                                                          // 0x04C4 (size: 0x4)
    float MinWalkTimeDuringRoaming;                                                   // 0x04C8 (size: 0x4)
    float MaxWalkTimeDuringRoaming;                                                   // 0x04CC (size: 0x4)
    float MinStandTimeDuringRoaming;                                                  // 0x04D0 (size: 0x4)
    float MaxStandTimeDuringRoaming;                                                  // 0x04D4 (size: 0x4)
    float IntimidateTime;                                                             // 0x04D8 (size: 0x4)
    float IntimidateAnimationEndTime;                                                 // 0x04DC (size: 0x4)
    float AlertActionTime;                                                            // 0x04E0 (size: 0x4)
    float AlertStartupTime;                                                           // 0x04E4 (size: 0x4)
    float AlertAllowedAgainTime;                                                      // 0x04E8 (size: 0x4)
    float DoNotDespawnTime;                                                           // 0x04EC (size: 0x4)
    class UAISenseConfig_Sight* NormalAISenseSight;                                   // 0x04F0 (size: 0x8)
    class UAISenseConfig_Hearing* NormalAISenseHearing;                               // 0x04F8 (size: 0x8)
    class UAISenseConfig_Hearing* RelaxedAISenseHearing;                              // 0x0500 (size: 0x8)
    class UAISenseConfig_Hearing* AlertedAISenseHearing;                              // 0x0508 (size: 0x8)
    class UAISenseConfig_Sight* SleepAISenseSight;                                    // 0x0510 (size: 0x8)
    class AComplexAnimal2* _animal;                                                   // 0x0518 (size: 0x8)
    float _roamRadius;                                                                // 0x05A8 (size: 0x4)
    float _healthPercentageToFlee;                                                    // 0x05AC (size: 0x4)
    float _damageMagnitudeHealthPercentageToFlee;                                     // 0x05B0 (size: 0x4)
    float _distanceFromFoeToStartIgnoring;                                            // 0x05B4 (size: 0x4)

    void UpdatePerception(const TArray<class AActor*>& actorsPerceived);
    void StartFullAlert();
    void QuitObserve();
    void OnTakeDamageHandler(class AActor* damageActor, float Damage, FVector HitLocation, class APawn* eventInstigator);
    void OnActionChangedHandler(EAnimalAction CurrentAction, EAnimalAction PrevAction);
    EAnimalMode GetMode();
    void ChangeMode(EAnimalMode newMode);
}; // Size: 0x620

class AConZAIController : public AAIController
{
    bool _useConZFlyingNavigation;                                                    // 0x0340 (size: 0x1)
    float _turningSpeed;                                                              // 0x0394 (size: 0x4)
    float _turningSpeedRestore;                                                       // 0x0398 (size: 0x4)
    float _brakingDecelerationFlyingMovementRestore;                                  // 0x039C (size: 0x4)
    float _boundsInflation;                                                           // 0x03A8 (size: 0x4)
    bool _shouldUseBypassAccelerationAndTurning;                                      // 0x03AC (size: 0x1)
    float _bypassAccelerationScale;                                                   // 0x03B0 (size: 0x4)
    float _bypassTurningSpeed;                                                        // 0x03B4 (size: 0x4)
    float _findPathBypassMultiplier;                                                  // 0x03B8 (size: 0x4)
    float _maxTimePerDestinationMultiplier;                                           // 0x03BC (size: 0x4)
    FVector _flyingRandomMovementExtent;                                              // 0x03C4 (size: 0xC)
    float _flyingRepeatChooseLocationTime;                                            // 0x03D0 (size: 0x4)
    float _speedToTurnOffOrientRotationToMovement;                                    // 0x03D4 (size: 0x4)
    TArray<class UClass*> _classesToIgnoreWhenFlyMoving;                              // 0x03D8 (size: 0x10)

}; // Size: 0x450

class AConZBase : public AActor
{
    TWeakObjectPtr<class AConZBaseElement> _baseElementActor;                         // 0x0280 (size: 0x8)
    TSet<UClass*> _referencedBaseElementClasses;                                      // 0x02F8 (size: 0x50)
    bool _overrideBlockStackingRules;                                                 // 0x0506 (size: 0x1)
    float _debugRenderingDistance;                                                    // 0x0508 (size: 0x4)
    int32 _decayProcessingNumberOfFrames;                                             // 0x050C (size: 0x4)
    int32 _decayProcessingMaxDestroyedElementsPerUpdate;                              // 0x0510 (size: 0x4)

    void OnElementInteracted(class APrisoner* User, EInteractionType interactionType, const FInteractionData& InteractionData, const FBaseInteractionParams& BaseInteractionParams);
    FString GetBaseName();
    void AwardFamePointsToOnlineFlagOwners(int32 flagIndex, float totalFlagInterval, float fameInterval);
}; // Size: 0x548

class AConZBaseElement : public AActor
{
    TSubclassOf<class USceneComponent> _weatherMaskComponentClass;                    // 0x0250 (size: 0x8)
    TMap<class UStaticMesh*, class UIndexedHierarchicalInstancedStaticMeshComponent*> _elementClassMap; // 0x0260 (size: 0x50)
    class UIndexedHierarchicalInstancedStaticMeshComponent* _interactRayBlockingMeshInstancedComponent; // 0x0300 (size: 0x8)

}; // Size: 0x380

class AConZBaseManager : public AActor
{
    float _damageEventProcessingPeriod;                                               // 0x02F8 (size: 0x4)
    float _decayProcessingPeriod;                                                     // 0x02FC (size: 0x4)
    float _flagOvertakePeriod;                                                        // 0x0300 (size: 0x4)
    float _baseInteractionsPeriod;                                                    // 0x0304 (size: 0x4)
    TSubclassOf<class AConZBase> _baseClass;                                          // 0x0308 (size: 0x8)
    TSubclassOf<class AConZBaseElement> _baseElementClass;                            // 0x0310 (size: 0x8)
    TSubclassOf<class AFlagAreaVisualizer> _flagAreaVisualizerClass;                  // 0x0318 (size: 0x8)
    FVector2D _initialBaseSize;                                                       // 0x0320 (size: 0x8)
    FGameplayTag _serverSettingMaxAmountParentTag;                                    // 0x0328 (size: 0x8)
    FGameplayTagContainer _serverSettingMaxAmountTagsToIgnoreForDecaySetting;         // 0x0330 (size: 0x20)
    float _flagInfluenceRadius;                                                       // 0x0350 (size: 0x4)
    int32 _flagOvertakeDuration;                                                      // 0x0354 (size: 0x4)
    int32 _maxElementsPerFlag;                                                        // 0x0358 (size: 0x4)
    int32 _extraElementsPerFlagForAdditionalSquadMember;                              // 0x035C (size: 0x4)
    int32 _maxNumberOfExpandedElementsPerFlag;                                        // 0x0360 (size: 0x4)
    bool _allowMultipleFlagsPerPlayer;                                                // 0x0364 (size: 0x1)
    bool _allowFlagPlacementOnBBElements;                                             // 0x0365 (size: 0x1)
    float _maxBaseBuildingHeight;                                                     // 0x0368 (size: 0x4)
    FConZBaseRepairAreaDuration _shortRepairDuration;                                 // 0x036C (size: 0x8)
    FConZBaseRepairAreaDuration _mediumRepairDuration;                                // 0x0374 (size: 0x8)
    FConZBaseRepairAreaDuration _longRepairDuration;                                  // 0x037C (size: 0x8)
    TMap<int64, AConZBase*> _bases;                                                   // 0x03A0 (size: 0x50)

    void NetMulticast_UpdateItemElementsLocationsAndRotations(int32 dataVersion, const TArray<FConZBaseElementTransformData>& itemElements);
    void NetMulticast_TransferOwnership(int32 dataVersion, FDbIntegerId oldId, FDbIntegerId newId);
    void NetMulticast_SpawnBaseElement(int32 dataVersion, const FTransform& Transform, const FConZBaseData& baseData, UClass* ElementClass, int64 ElementID, int64 OwnerUserProfileId, int64 CreatorPrisonerId, bool IsOwnedByPlayer, const FBaseElementSpawnParams& Params);
    void NetMulticast_SetDebugMode(class APrisoner* Prisoner, const EBaseBuildingDebugMode& mode);
    void NetMulticast_SetBaseOwnerPlayerId(int32 dataVersion, const FConZBaseInteractionData& baseData, int64 PlayerId);
    void NetMulticast_SetBaseHasActiveEncounter(int32 dataVersion, int64 BaseId, bool Value);
    void NetMulticast_ProcessDecay(int32 dataVersion, float DeltaSeconds);
    void NetMulticast_InteractWithElement(int32 dataVersion, EInteractionType interactionType, const FConZBaseInteractionData& baseData, const FConZBaseElementInteractionData& baseElementData, class APrisoner* User);
    void NetMulticast_ExecuteFlagOvertake(int32 dataVersion, int64 ElementID, FVector elementLocation, FDbIntegerId PlayerId);
    void NetMulticast_DestroyElement(int32 dataVersion, const FConZBaseElementIdentifier& ElementIdentifier, EDestroyElementReason reason, bool cascade);
    void NetMulticast_DestroyAllElementsInRadius(int32 dataVersion, const FVector& Center, float Radius, float minElementAreaCovered, float minAngleDeg, float maxAngleDeg, const FVector& forwardVector, const EBaseElementType& typeFilter);
    void NetMulticast_ClearBaseOwnerPlayerId(int32 dataVersion, const FConZBaseInteractionData& baseData);
    void NetMulticast_ChangeFlagOwner(int32 dataVersion, FDbIntegerId oldOwnerProfileId, FDbIntegerId newOwnerProfileId);
    void NetMulticast_ApplyDamageToBaseElement(int32 dataVersion, int64 BaseId, int64 ElementID, FVector elementLocation, float damageAmount);
}; // Size: 0x4E8

class AConZCameraManager : public APlayerCameraManager
{
    float _introCinematicDuration;                                                    // 0x282C (size: 0x4)
    FRuntimeFloatCurve _staticMeshLODDistanceScaleVSFOV;                              // 0x2830 (size: 0x88)

}; // Size: 0x28E0

class AConZCharacter : public ACharacter
{
    class UChoppingRecipeDataAsset* ChoppingRecipeDataAsset;                          // 0x0540 (size: 0x8)
    bool IterativeChopping;                                                           // 0x0548 (size: 0x1)
    TSubclassOf<class AItem> ItemRepresentation;                                      // 0x0550 (size: 0x8)
    FName HeadBoneName;                                                               // 0x0558 (size: 0x8)
    TMap<class FName, class EBodyPart> BodyPartByBoneName;                            // 0x0560 (size: 0x50)
    float HeadHeight;                                                                 // 0x05B0 (size: 0x4)
    float TorsoHeight;                                                                // 0x05B4 (size: 0x4)
    bool ShouldAutoUpdateEnvironmentDescription;                                      // 0x05B8 (size: 0x1)
    float EnvironmentDescriptionAutoUpdateInterval;                                   // 0x05BC (size: 0x4)
    class UAkAudioEvent* EnteredIndoorEnvironmentAudioEvent;                          // 0x05C0 (size: 0x8)
    class UAkAudioEvent* EnteredOutdoorEnvironmentAudioEvent;                         // 0x05C8 (size: 0x8)
    class UAkAudioEvent* EnteredUndergroundAudioEvent;                                // 0x05D0 (size: 0x8)
    class UAkAudioEvent* LeftUndergroundAudioEvent;                                   // 0x05D8 (size: 0x8)
    class UVoiceChatComponent* VoiceChatComponent;                                    // 0x05F8 (size: 0x8)
    float _kockoutChanceModifier;                                                     // 0x0608 (size: 0x4)
    EConZGender _gender;                                                              // 0x060C (size: 0x1)
    FGenericTeamId _genericTeamId;                                                    // 0x0610 (size: 0x10)
    class UCharacterSoundComponent* SoundComponent;                                   // 0x0620 (size: 0x8)
    EConZPxDominanceGroup _physicsDominanceGroup;                                     // 0x0660 (size: 0x1)
    float _activeHitTimeToLive;                                                       // 0x0664 (size: 0x4)
    class UCurveFloat* _hitDamageVsVehicleSpeedInKph;                                 // 0x0668 (size: 0x8)
    FHitEffects _effectsOnVehicleHit;                                                 // 0x0670 (size: 0x118)
    bool _allowMultipleDamageReportsFromProjectile;                                   // 0x0798 (size: 0x1)
    class UPhysicsAsset* _physicsAssetOnServer;                                       // 0x07A0 (size: 0x8)
    EAITeam _aiTeam;                                                                  // 0x07A8 (size: 0x1)
    TArray<class UCharacterAction*> _actionsList;                                     // 0x07B0 (size: 0x10)
    float _characterActionPlayRateMultiplier;                                         // 0x07E4 (size: 0x4)
    class UGrappleActionComponent* _grappleActionComponent;                           // 0x07E8 (size: 0x8)
    bool _isSubjectToEncounterManager;                                                // 0x07F0 (size: 0x1)
    bool _isPartOfHorde;                                                              // 0x07F1 (size: 0x1)
    bool _canReceiveForcedStimulusAfterHordeActivation;                               // 0x07F3 (size: 0x1)
    bool _canLeaveOnEncounterEnd;                                                     // 0x07F4 (size: 0x1)
    float _rogueCharacterRemovalDistance;                                             // 0x07F8 (size: 0x4)
    bool _shouldPerformLoadedLevelsCheck;                                             // 0x080C (size: 0x1)
    ECharacterHiddenSpawnType _hiddenSpawnType;                                       // 0x080E (size: 0x1)
    float _fadeTime;                                                                  // 0x0810 (size: 0x4)
    bool _canUseDoorNavlink;                                                          // 0x0814 (size: 0x1)
    bool _canOpenLockedDoors;                                                         // 0x0815 (size: 0x1)
    bool _canOpenUnpoweredDoors;                                                      // 0x0816 (size: 0x1)
    bool _canUseWindowNavlink;                                                        // 0x0817 (size: 0x1)

    void SetGender(EConZGender Value);
    void SetEnvironmentDescription(const FEnvironmentDescription& Value);
    void Server_SetEnvironmentDescription(const FEnvironmentDescription& Value);
    void Server_RequestCharacterAction(const FCharacterActionReplicationHelper& Value);
    void Server_HandleMeleeAttackCapsuleHit(class AConZCharacter* attacker, const FMeleeAttackCapsuleHitInfo& HitInfo);
    void Server_CharacterActionAck(const FCharacterActionAck& ack);
    void OnRep_HiddenSpawnType();
    void OnRep_GrappleActionComponent();
    void OnRep_Gender(EConZGender oldGender);
    void NetMulticast_RequestCharacterAction(const FCharacterActionReplicationHelper& Value, int32 characterActionSet, bool ignoreAutonomousProxy);
    void NetMulticast_PlayAudioEventWithTag(FGameplayTag audioEventTag);
    void NetMulticast_HandleMeleeAttackCapsuleHit(class AConZCharacter* attacker, const FMeleeAttackCapsuleHitInfo& HitInfo);
    void NetMulticast_CharacterActionAck(const FCharacterActionAck& ack, bool ignoreAutonomousProxy);
    bool IsHeadBone(FName BoneName);
    bool IsConscious();
    bool IsAlive();
    bool HasCharacterAction();
    class UCharacterSoundComponent* GetSoundComponent();
    EDetectHitCollisionType GetHitReactBodyPartFromHitResult(const FHitResult& HitResult);
    EDetectHitCollisionType GetHitReactBodyPartFromBodyPart(EBodyPart Value);
    EConZGender GetGender();
    FEnvironmentDescription GetEnvironmentDescription();
    class UCharacterAction* GetCharacterAction();
    EBodyPart GetBodyPartFromBoneName(FName BoneName);
    void Client_RequestCharacterAction(const FCharacterActionReplicationHelper& Value, bool cancelExecutingAction);
    void CharacterAction_EndHandle(const class UCharacterAction* action);
    void CharacterAction_BeginHandle(const class UCharacterAction* action);
    void ActorHitCallback(class AActor* Actor, class AActor* OtherActor, FVector NormalImpulse, const FHitResult& Hit);
}; // Size: 0x830

class AConZEconomyManager : public AActor
{
    class UTraderManagingComponent* _traderManagingComponent;                         // 0x02E0 (size: 0x8)
    float _autoSaveInterval;                                                          // 0x02EC (size: 0x4)
    bool _shouldIgnoreDatabaseSerialization;                                          // 0x02F4 (size: 0x1)
    FTradeOutpostProsperityLevelInfo _prosperityLevelInfoPerLevel;                    // 0x0310 (size: 0xF0)
    TMap<float, int32> _expensiveTradeablesSpawnChanceMap;                            // 0x0408 (size: 0x50)
    class UCurveFloat* _playerPurchasePriceDeltaVsChanceCurve;                        // 0x0458 (size: 0x8)
    float _betterPurchasePricesChance;                                                // 0x0460 (size: 0x4)
    float _maxOutpostBuyingCapability;                                                // 0x0464 (size: 0x4)
    int32 _maxOutpostGoldBuyingCapability;                                            // 0x0468 (size: 0x4)
    int32 _goldBasePrice;                                                             // 0x046C (size: 0x4)
    float _playerGoldSalePriceModifier;                                               // 0x0470 (size: 0x4)
    float _goldPriceChangePercentageStep;                                             // 0x0474 (size: 0x4)
    float _goldPriceChangePerStep;                                                    // 0x0478 (size: 0x4)
    class UDataTable* _tradeableDescTable;                                            // 0x0500 (size: 0x8)
    FString _economyOverrideJSONFileName;                                             // 0x0A28 (size: 0x10)
    FGameplayTag _vehicleSpawnGroupParentTag;                                         // 0x0A38 (size: 0x8)
    int32 _defaultMaxPerGroup;                                                        // 0x0B64 (size: 0x4)
    float _maxSaleDistance;                                                           // 0x0BB8 (size: 0x4)
    int32 _maxTradeablePurchasedPerTransaction;                                       // 0x0BBC (size: 0x4)
    class UCurveFloat* _tradeableBuyPriceMultiplierVsNumberOfPlayersCurve;            // 0x0BD0 (size: 0x8)
    class UCurveFloat* _tradeableSellPriceMultiplierVsNumberOfPlayersCurve;           // 0x0BD8 (size: 0x8)
    float _priceMultiplierBasedOnNumberOfPlayersInterval;                             // 0x0BEC (size: 0x4)
    bool _tradersUnlimitedStock;                                                      // 0x0C0A (size: 0x1)
    bool _isFamePointRequirementEnabled;                                              // 0x0C0D (size: 0x1)
    TArray<FPendingTraderPersonalityDataHelperStruct> _pendingTraderPersonalities;    // 0x0C10 (size: 0x10)
    bool _shouldCommunicateWithMasterServer;                                          // 0x0C30 (size: 0x1)

    void NetMulticast_UpdateTradeablePriceMultiplierFactor(int32 dataVersion, int32 tradeablePriceMultiplierFactor);
    void NetMulticast_UpdateTradeableClassMapHelperOverrides(int32 dataVersion, const FTradeableClassDataOverrideReplicationHelper& overrideUpdates);
    void NetMulticast_UpdateGoldPriceMasterMultiplier(int32 dataVersion, float goldPriceMasterMultiplier);
    void NetMulticast_UpdateDateVsGoldPriceMasterMultiplierMap(int32 dataVersion, const TArray<FDateTime>& dates, const TArray<float>& multipliers);
}; // Size: 0xC98

class AConZGameMode : public AGameMode
{
    class UDoorLockingRegistry* _doorLockingRegistry;                                 // 0x0380 (size: 0x8)
    class UVehicleServiceRegistry* _vehicleServiceRegistry;                           // 0x0388 (size: 0x8)
    class UAbandonedBunkerActivationRegistry* _abandonedBunkerActivationRegistry;     // 0x0390 (size: 0x8)
    FLazyLoadedClassPtr _prisonerClassToSpawnLazy;                                    // 0x0398 (size: 0x30)
    FLazyLoadedClassPtr _droneClassToSpawnLazy;                                       // 0x03C8 (size: 0x30)
    TSubclassOf<class AItemSpawningManager> _itemSpawningManagerClass;                // 0x0500 (size: 0x8)
    class AItemSpawningManager* _itemSpawningManager;                                 // 0x0508 (size: 0x8)
    TSubclassOf<class AItemVirtualizationManager> _itemVirtualizationManagerClass;    // 0x0510 (size: 0x8)
    class AItemVirtualizationManager* _itemVirtualizationManager;                     // 0x0518 (size: 0x8)
    TSubclassOf<class AVehicleManager> _vehicleManagerClass;                          // 0x0520 (size: 0x8)
    class AVehicleManager* _vehicleManager;                                           // 0x0528 (size: 0x8)
    TSubclassOf<class AReportingManager> _reportingManagerClass;                      // 0x0530 (size: 0x8)
    class AReportingManager* _reportingManager;                                       // 0x0538 (size: 0x8)
    TSubclassOf<class AGlobalAquaticLifeManager> _globalAquaticLifeManagerClass;      // 0x0540 (size: 0x8)
    class AGlobalAquaticLifeManager* _globalAquaticLifeManager;                       // 0x0548 (size: 0x8)
    TSubclassOf<class AGlobalGuardedZoneManager> _globalGuardedZoneManagerClass;      // 0x0550 (size: 0x8)
    class AGlobalGuardedZoneManager* _globalGuardedZoneManager;                       // 0x0558 (size: 0x8)
    TSubclassOf<class AAchievementsManagerServer> _achievementsManagerServerClass;    // 0x0560 (size: 0x8)
    class AAchievementsManagerServer* _achievementsManagerServer;                     // 0x0568 (size: 0x8)
    TSubclassOf<class ASurvivalStatsHandler> _survivalStatsHandlerClass;              // 0x0570 (size: 0x8)
    class ASurvivalStatsHandler* _survivalStatsHandler;                               // 0x0578 (size: 0x8)
    TSubclassOf<class AHeatSourceManager> _heatSourceManagerClass;                    // 0x0580 (size: 0x8)
    class AHeatSourceManager* _heatSourceManager;                                     // 0x0588 (size: 0x8)
    TSubclassOf<class AConZBaseManager> _baseManagerClass;                            // 0x0590 (size: 0x8)
    class AConZBaseManager* _baseManager;                                             // 0x0598 (size: 0x8)
    class URainCollectionManager* _rainCollectionManager;                             // 0x05A0 (size: 0x8)
    TSubclassOf<class AEffectOverTimeDealer> _effectOverTimeDealerClass;              // 0x05A8 (size: 0x8)
    class AEffectOverTimeDealer* _effectOverTimeDealer;                               // 0x05B0 (size: 0x8)
    TSubclassOf<class ANotificationsManager> _notificationManagerClass;               // 0x05B8 (size: 0x8)
    class ANotificationsManager* _notificationManager;                                // 0x05C0 (size: 0x8)
    TSubclassOf<class AVoteSystemManager> _voteSystemManagerClass;                    // 0x05C8 (size: 0x8)
    class AVoteSystemManager* _voteSystemManager;                                     // 0x05D0 (size: 0x8)
    TSubclassOf<class AAIDetectionTimerHandler> _aiDetectionTimerHandlerClass;        // 0x05D8 (size: 0x8)
    TSubclassOf<class ABCULockRegistry> _bcuLockRegistryClass;                        // 0x05E0 (size: 0x8)
    class ABCULockRegistry* _bcuLockRegistry;                                         // 0x05E8 (size: 0x8)
    class UWorldDoorOwnershipManager* _worldDoorOwnershipManager;                     // 0x05F0 (size: 0x8)
    class AAIDetectionTimerHandler* _aiDetectionTimerHandler;                         // 0x05F8 (size: 0x8)
    class UDedicatedServerResponse* _serverResponse;                                  // 0x0600 (size: 0x8)
    class UChatSpamProtectionRules* _chatSpamProtectionRules;                         // 0x0608 (size: 0x8)
    TArray<class UPrisonerSpawnEquipment*> _spawnEquipment;                           // 0x0610 (size: 0x10)
    FGameplayTag _spawnParameterTag_AerialSpawn;                                      // 0x0620 (size: 0x8)
    FGameplayTag _spawnParameterTag_ColdClimate;                                      // 0x0628 (size: 0x8)
    FGameplayTag _spawnParameterTag_SupporterPack1;                                   // 0x0630 (size: 0x8)
    FGameplayTag _spawnParameterTag_DigitalDeluxBasicSurvivalPack;                    // 0x0638 (size: 0x8)
    FGameplayTag _spawnParameterTag_Tournament;                                       // 0x0640 (size: 0x8)
    float _maxSpawningAdjustmentDistance;                                             // 0x0648 (size: 0x4)
    int32 _spawningAdjustmentRadialIterations;                                        // 0x064C (size: 0x4)
    int32 _spawningAdjustmentVerticalIterations;                                      // 0x0650 (size: 0x4)
    int32 _spawningAdjustmentCheckingFrequency;                                       // 0x0654 (size: 0x4)
    float _localChatDistance;                                                         // 0x0658 (size: 0x4)

    void SendHUDMessageToAll(FString Message, bool beep);
    bool KickPlayer(class AConZPlayerController* Player, FString kickReason);
    class AVehicleManager* GetVehicleManager();
    class ASurvivalStatsHandler* GetSurvivalStatsHandler();
    class AReportingManager* GetReportingManager();
    class AItemVirtualizationManager* GetItemVirtualizationManager();
    class AItemSpawningManager* GetItemSpawningManager();
    class AHeatSourceManager* GetHeatSourceManager();
    class AGlobalGuardedZoneManager* GetGlobalGuardedZoneManager();
    class AGlobalAquaticLifeManager* GetGlobalAquaticLifeManager();
    class AEffectOverTimeDealer* GetEffectOverTimeDealer();
    class AConZBaseManager* GetBaseManager();
    class AAIDetectionTimerHandler* GetAIDetectionTimerHandler();
    class AAchievementsManagerServer* GetAchievementsManagerServer();
}; // Size: 0x9C0

class AConZGameSession : public AGameSession
{
}; // Size: 0x238

class AConZGameState : public AGameState
{
    class URespawnSettings* RespawnSettings;                                          // 0x02E0 (size: 0x8)
    TArray<class AAbandonedBunker*> _registeredAbandonedBunkers;                      // 0x03E0 (size: 0x10)
    TArray<class AConZSquad*> _squads;                                                // 0x0470 (size: 0x10)
    TMap<TWeakObjectPtr<AConZCharacter>, int32> _currentDroneTargetDispatcherMap;     // 0x0520 (size: 0x50)
    TMap<TWeakObjectPtr<AConZCharacter>, int32> _droneTargetDispatcherHistoryMap;     // 0x0570 (size: 0x50)
    TMap<class TWeakObjectPtr<AConZCharacter>, class UDroneTargetData*> _droneTargetVisits; // 0x05C0 (size: 0x50)
    TSubclassOf<class ALadderMarkersRegistry> _ladderMarkersRegistryClass;            // 0x0610 (size: 0x8)
    class ALadderMarkersRegistry* _ladderMarkersRegistry;                             // 0x0618 (size: 0x8)
    TSubclassOf<class AConZWaterSplineRegistry> _waterSplineRegistryClass;            // 0x0620 (size: 0x8)
    class AConZWaterSplineRegistry* _waterSplineRegistry;                             // 0x0628 (size: 0x8)
    class URemoteSensorRegistry* _remoteSensorRegistry;                               // 0x0638 (size: 0x8)
    class UReplenishableResourceManager* _replenishableResourceManager;               // 0x0690 (size: 0x8)
    class UResourceLockingManager* _resourceLockingManager;                           // 0x0698 (size: 0x8)
    class UItemRegistry* _itemRegistry;                                               // 0x06A0 (size: 0x8)
    class UCustomZoneRegistry* _customZoneRegistry;                                   // 0x06A8 (size: 0x8)
    class UGameResourceContainerProxyRegistry* _gameResourceContainerProxyRegistry;   // 0x06B0 (size: 0x8)
    class UZoneRegistry* _zoneRegistry;                                               // 0x06B8 (size: 0x8)
    class UStaticDoorReplicator* _staticDoorReplicator;                               // 0x06C0 (size: 0x8)
    class UBankAccountRegistry* _bankAccountRegistry;                                 // 0x06C8 (size: 0x8)
    class USquadRankingsCache* _squadRankingsCache;                                   // 0x06D0 (size: 0x8)
    class UWindowMarkersRegistry* _windowMarkersRegistry;                             // 0x06D8 (size: 0x8)
    class UFortificationManager* _fortificationManager;                               // 0x06E0 (size: 0x8)
    class UProjectilePool* _projectilePool;                                           // 0x06E8 (size: 0x8)
    class UAIManager* _aiManager;                                                     // 0x06F0 (size: 0x8)
    class USurvivalTipManager* _survivalTipManager;                                   // 0x06F8 (size: 0x8)
    class USquadPenaltyManager* _squadPenaltyManager;                                 // 0x0700 (size: 0x8)
    class UFoliageInstanceCache* _foliageInstanceCache;                               // 0x0708 (size: 0x8)
    TMap<class FDbIntegerId, class FDbIntegerId> _prisonerKillRegistry;               // 0x07D8 (size: 0x50)
    TSubclassOf<class ACustomMapBorder> _customMapBorderClass;                        // 0x0828 (size: 0x8)
    TSubclassOf<class ATournament> _tournamentClass;                                  // 0x0830 (size: 0x8)
    class ACustomMapBorder* _customMapBorder;                                         // 0x0838 (size: 0x8)
    class ATournament* _tournament;                                                   // 0x0840 (size: 0x8)
    class ARaidProtectionManager* _raidProtectionManager;                             // 0x0848 (size: 0x8)
    class UMaterialParameterCollection* _mainMPC;                                     // 0x0850 (size: 0x8)
    bool _areLockedLootContainersEnabled;                                             // 0x085A (size: 0x1)
    bool _isDrawSentryHealthBarEnabled;                                               // 0x085F (size: 0x1)
    float _disableableComponentRange;                                                 // 0x08BC (size: 0x4)

    void StartTournament(FTournamentParameters& Parameters);
    void SendServerTime(double totalWorldTime, double serverSessionTime);
    bool RemoveMemberFromSquad(const FDbIntegerId UserProfileId, class AConZSquad* Squad, bool destroySquadIfEmpty);
    void RemoveMemberFromAllSquads(const FDbIntegerId UserProfileId, bool destroySquadIfEmpty);
    void OnRep_Squads();
    void OnRep_AreLockedLootContainersEnabled();
    void NetMulticast_SendItemLocationAndRotationToClients(class AItem* Item, FVector Location, FRotator Rotation);
    void NetMulticast_DestroyFoliageAtLocations(const TArray<class UHierarchicalInstancedStaticMeshComponent*>& foliageInstancedComponents, const TArray<FVector>& Locations);
    void NetMulticast_DestroyFoliageAtLocation(class UHierarchicalInstancedStaticMeshComponent* FoliageInstancedComponent, FVector Location);
    void Multicast_RemoveFromPrisonerKillRegistry(FDbIntegerId Target);
    void Multicast_AddToOrUpdatePrisonerKillRegistry(FDbIntegerId Target, FDbIntegerId killer);
    bool IsTournamentInProgress();
    class AConZWaterSplineRegistry* GetWaterSplineRegistry();
    class ATournament* GetTournament();
    class AConZSquad* GetSquadForUserProfileId(const FDbIntegerId ID);
    class AConZSquad* GetSquadForPrisoner(const class APrisoner* Prisoner);
    class AConZSquad* GetSquad(const FDbIntegerId squadId);
    class ACustomMapBorder* GetCustomMapBorder();
    void EndTournament();
    class AConZSquad* CreateSquad(const FDbIntegerId squadId);
    void CleanupSquadsFromDatabase();
    void AddMemberToSquad(const class APrisoner* Prisoner, class AConZSquad* Squad);
}; // Size: 0x8C0

class AConZHUD : public AHUD
{
    FLazyLoadedClassPtr _masterWidgetClassLazy;                                       // 0x0310 (size: 0x30)

}; // Size: 0x348

class AConZNoiseListenerActor : public AActor
{
}; // Size: 0x240

class AConZPlayerController : public APlayerController
{
    TArray<class UPrimitiveComponent*> ComponentsToHide;                              // 0x0580 (size: 0x10)
    bool IsTalkButtonPressed;                                                         // 0x0620 (size: 0x1)
    class UPlayerRpcChannel* _playerRpcChannel;                                       // 0x0678 (size: 0x8)
    class UPlayerQuestComponent* _playerQuestComponent;                               // 0x0680 (size: 0x8)
    class UUserProfile* _userProfile;                                                 // 0x06D0 (size: 0x8)
    FDateTime _lastNameChangeTime;                                                    // 0x06E8 (size: 0x8)
    FString _userFakeName;                                                            // 0x06F0 (size: 0x10)
    int64 _bankAccountNumber;                                                         // 0x0700 (size: 0x8)
    class APawn* _spawnedPawn;                                                        // 0x0708 (size: 0x8)
    class APawn* _possessedPawn;                                                      // 0x0738 (size: 0x8)
    FLazyLoadedClassPtr _prisonerClassLazy;                                           // 0x0740 (size: 0x30)
    float _teleportWorldStreamingLocationChangeDelay;                                 // 0x0788 (size: 0x4)
    float _teleportWorldStreamingTriggerLag;                                          // 0x078C (size: 0x4)
    int32 _repFamePoints;                                                             // 0x07E4 (size: 0x4)
    int64 _moneyBalanceRep;                                                           // 0x07F0 (size: 0x8)
    int64 _goldBalanceRep;                                                            // 0x07F8 (size: 0x8)
    float _weatherHeightUpdatePeriod;                                                 // 0x0890 (size: 0x4)
    class AAchievementsManagerClient* _achievementsManagerClient;                     // 0x0898 (size: 0x8)
    TSubclassOf<class AAchievementsManagerClient> _achievementsManagerClientClass;    // 0x08A0 (size: 0x8)
    float _isReadyForPlayDelay;                                                       // 0x08A8 (size: 0x4)
    float _reportPlayTimeInterval;                                                    // 0x08B8 (size: 0x4)
    FDateTime _replicatedServerUtcNow;                                                // 0x08C8 (size: 0x8)
    class UPathFollowingComponent* _pathFollowingComponent;                           // 0x0930 (size: 0x8)
    bool _forceSpawnAsDrone;                                                          // 0x0938 (size: 0x1)
    bool _mpSpawnDroneAndPrisoner;                                                    // 0x0939 (size: 0x1)
    FLazyLoadedClassPtr _photoModePawnClassLazy;                                      // 0x0948 (size: 0x30)
    float _refreshTimeForPawnLocationOnMap;                                           // 0x098C (size: 0x4)
    class UMaterialParameterCollection* _mainMPC;                                     // 0x0998 (size: 0x8)
    int32 _numTrySpawnsForTimeout;                                                    // 0x09BC (size: 0x4)

    void UpdateUserProfileDeletionMarkStatus();
    void Teleport(const FTeleportRequest& request);
    void ShowWarningMessage(FString Message, float Duration, FLinearColor TextColor);
    void ShowLevelUpMessageFromClass(const TSubclassOf<class USkill> skillClass, ESkillLevel skillLevel);
    void ShowLevelUpMessage(const class USkill* Skill, ESkillLevel skillLevel);
    void ShowKillFeedNotificationOnClient(FString Prefix, FString characterName, FString suffix, bool Ping);
    void ShowKillFeedMessage(FString Prefix, FString characterName, FString suffix, bool Ping);
    void SetTeleportWorldStreamingLocationChangeDelay(float Value);
    void SetRespawnOptionTime(ERespawnOption Option, float Time, bool Force);
    void SetGameEventCooldown(float cooldown);
    void SetFamePoints(float Value);
    void SetCurrencyBalanceRep(ECurrencyType CurrencyType, int64 currencyBalance);
    void SetCommitSuicideOptionTime(float Time);
    void Server_SetRefreshPawnLocationForMap(bool Value);
    void Server_SelfKickFromGameSession(FString reason);
    void Server_RequestSurvivalStats(uint32 ID, FDbIntegerId UserProfileId);
    void Server_RequestSquadMemberInfo(uint32 ID, FDbIntegerId squadId);
    void Server_RequestRespawnWaitTime();
    void Server_RequestPlayerSpawnGrid();
    void Server_RequestGameEventTeamChange(int32 preferredTeam);
    void Server_RequestEventsRankingStats(uint32 ID, FDbIntegerId UserProfileId, const int32 Count, EEventsRankingStatsOrderByField orderByField, ESortOrder SortOrder);
    void Server_ReportStartLeavingGame();
    void Server_ReportPlayPreparationsSucceeded();
    void Server_ReportCancelLeavingGame();
    void Server_ProcessCharacterModificationTransaction(int32 transactionId, FCharacterTemplate CharacterTemplate);
    void Server_MountedActorHasBegunPlay(class AActor* Actor);
    void Server_LeaveGameEvent();
    void Server_JoinGameEvent(class AGameEventBase* gameEvent, int32 preferredTeam);
    void Server_HeartbeatResponse(uint32 code);
    void Server_ExitPhotoMode();
    void Server_EnterPhotoMode();
    void Server_AllowCertainInventoryInteractions();
    void SendHUDMessageToClient(FString Message, class UAkAudioEvent* AudioEvent);
    void SendHUDMessageToAll(FString Message, class UAkAudioEvent* AudioEvent);
    void SaveState();
    void RepossesOriginalPrisoner();
    void RemoveServerFromFavorites();
    void RegisterRespawn(ERespawnOption Option);
    void RegisterCommitSuicide();
    void OnRep_UserFakeName();
    void OnRep_ReplicatedServerUtcNow();
    void OnRep_PossessedPawn();
    void OnRep_MoneyBalance();
    void OnRep_GoldBalance();
    void OnRep_FamePoints();
    void OnPhotoModeTransitionTimerElapsed();
    void OnFadeOutFinished();
    void LoadState();
    void LeaveGameEvent();
    void JoinGameEvent(class AGameEventBase* gameEvent, int32 preferredTeam);
    bool IsUserAdmin();
    bool IsTeleportInProgress();
    bool IsPushToTalkPressed();
    FString GetUserProfileName();
    FDbIntegerId GetUserProfileId();
    class UUserProfile* GetUserProfile();
    FString GetUserName2();
    FString GetUserId();
    float GetTeleportWorldStreamingLocationChangeDelay();
    FDbIntegerId GetServerUserProfileId();
    float GetRespawnWaitTime();
    float GetRespawnOptionTimeLeft(ERespawnOption Option);
    float GetRespawnOptionTime(ERespawnOption Option);
    class APrisoner* GetPrisoner();
    class UPlayerRpcChannel* GetPlayerRpcChannel();
    float GetGameEventCooldown();
    int32 GetFamePointsRounded();
    float GetFamePoints();
    float GetFameMultiplier();
    int32 GetFameLevel();
    FText GetCurrencyBalanceText(ECurrencyType CurrencyType);
    float GetCommitSuicideOptionTimeLeft();
    class AConZCameraManager* GetCameraManager();
    class AAchievementsManagerClient* GetAchievementsManagerClient();
    void Crash();
    int32 ComputeFameLevel(float FamePoints);
    void Client_UpdateRespawnSettings(FRespawnParameters Parameters);
    void Client_TestPingLockStuff(float averageDelta, float averagePing, float Counter);
    void Client_SetRespawnWaitTime(float Seconds);
    void Client_SetRespawnOptionTime(ERespawnOption Option, float Time);
    void Client_SetIsServerSettingsAdmin(bool Value);
    void Client_SetIsAdmin(bool Value);
    void Client_SetGameEventCooldown(float cooldown);
    void Client_SetCommitSuicideOptionTime(float Time);
    void Client_SendPackedPlayerLocationsForMap(const TArray<class AConZPlayerState*>& playerStates, const TArray<uint32>& packedMapLocations);
    void Client_SaveState();
    void Client_ReplicateFavoriteCraftingRecipes(const TArray<uint32>& recipeNetIndices);
    void Client_ReceiveSurvivalStats(uint32 ID, const FSurvivalStats& Stats);
    void Client_ReceiveSquadMemberInfo(uint32 ID, const TArray<FDbIntegerId>& userProfileIds, const TArray<FString>& Names, const TArray<float>& FamePoints);
    void Client_ReceiveEventsRankingStats(uint32 ID, const TArray<FEventsRankingStatsItem>& Stats, int32 playerRank);
    void Client_ReceiveBytesFromStream(int32 streamId, const TArray<uint8>& Bytes);
    void Client_Login(const FPlayerLoginInfo& serverLoginInfo);
    void Client_InitializeCharacterModificationTransaction(int32 transactionId, FTransform roomTransform, ECharacterModificationType Type);
    void Client_HeartbeatRequest(uint32 code);
    void Client_HasMountedActorBegunPlay(class AActor* Actor);
    void Client_EndByteStream(int32 streamId);
    void Client_EnableRespawnOption(ERespawnOption Option);
    void Client_CancelCharacterModificationTransaction();
    void Client_BeginByteStream(int32 streamId, ERawByteStreamType streamType);
    void Client_AllowCertainInventoryInteractions();
    void ClearRespawnOptionTimers();
    void CheckPhotoModeTransitionFailed();
    bool CanAddServerToFavorites();
    void AddServerToFavorites();
}; // Size: 0x9F0

class AConZPlayerState : public APlayerState
{
}; // Size: 0x330

class AConZReverbVolume : public AAkReverbVolume
{
}; // Size: 0x290

class AConZSpectatorPawn : public ASpectatorPawn
{
    float DefaultFOV;                                                                 // 0x02B0 (size: 0x4)

}; // Size: 0x2C0

class AConZSquad : public AActor
{
    FDbIntegerId squadId;                                                             // 0x0220 (size: 0x8)
    FString SquadName;                                                                // 0x0228 (size: 0x10)
    FString SquadMessage;                                                             // 0x0238 (size: 0x10)
    FString SquadInformation;                                                         // 0x0248 (size: 0x10)
    FConZSquadEmblem SquadEmblem;                                                     // 0x0258 (size: 0x8)
    TArray<FConZSquadPendingMember> _pendingMembers;                                  // 0x02B0 (size: 0x10)
    TArray<FConZSquadMember> _members;                                                // 0x02C0 (size: 0x10)
    TArray<FConZSquadMember> _oldMembers;                                             // 0x02D0 (size: 0x10)
    uint64 _repEmblem;                                                                // 0x02E0 (size: 0x8)
    int32 _maxAllowedSquadMembers;                                                    // 0x02E8 (size: 0x4)

    void OnRep_SquadName();
    void OnRep_SquadMessage();
    void OnRep_Members();
    void OnRep_Emblem();
}; // Size: 0x398

class AConZWaterSpline : public AActor
{
    class USceneComponent* SceneComponent;                                            // 0x0220 (size: 0x8)
    class USplineComponent* SplineComponent;                                          // 0x0228 (size: 0x8)
    class UStaticMeshComponent* SurfaceMeshComponent;                                 // 0x0230 (size: 0x8)
    class UStaticMeshComponent* SubsurfaceMeshComponent;                              // 0x0238 (size: 0x8)
    bool DrawDebug;                                                                   // 0x0240 (size: 0x1)
    int32 SelectRangeStart;                                                           // 0x0244 (size: 0x4)
    int32 SelectRangeEnd;                                                             // 0x0248 (size: 0x4)
    bool SelectRange;                                                                 // 0x024C (size: 0x1)
    bool FlattenZ;                                                                    // 0x024D (size: 0x1)
    TArray<FConZWaterSplineControlPoint> ControlPoints;                               // 0x0250 (size: 0x10)
    float MaxDepth;                                                                   // 0x0260 (size: 0x4)
    class UStaticMesh* SurfaceMesh;                                                   // 0x0268 (size: 0x8)
    class UStaticMesh* SubsurfaceMesh;                                                // 0x0270 (size: 0x8)
    class UMaterialInterface* SurfaceMeshMaterialOverride;                            // 0x0278 (size: 0x8)
    class UMaterialInterface* SubsurfaceMeshMaterialOverride;                         // 0x0280 (size: 0x8)
    class UMaterialInterface* UnderwaterPostProcessing;                               // 0x0288 (size: 0x8)
    TArray<class UAssetUserData*> SurfaceMeshUserData;                                // 0x0290 (size: 0x10)
    TArray<FConZGerstnerWavesParameters> GerstnerWavesParameters;                     // 0x02A0 (size: 0x10)

}; // Size: 0x2B8

class AConZWaterSplineIsland : public AConZWaterSpline
{
}; // Size: 0x2B8

class AConZWaterSplineLake : public AConZWaterSpline
{
    float SurfaceMeshCullingDistance;                                                 // 0x02B8 (size: 0x4)

}; // Size: 0x2C0

class AConZWaterSplineOcean : public AConZWaterSpline
{
    bool FollowCamera;                                                                // 0x02B8 (size: 0x1)
    class UTexture2D* OceanOpacityMaskTexture;                                        // 0x02C0 (size: 0x8)

}; // Size: 0x2C8

class AConZWaterSplineRegistry : public AActor
{

    FWaterQueryResult QueryWaterSplines(FVector Location);
    void DrawQueryResult(FWaterQueryResult Result, float Duration);
}; // Size: 0x228

class AConZWaterSplineRiver : public AConZWaterSpline
{
    class UStaticMesh* SplineMesh;                                                    // 0x02B8 (size: 0x8)
    class UMaterialInterface* SplineMeshMaterialOverride;                             // 0x02C0 (size: 0x8)
    float SplineMeshCullingDistance;                                                  // 0x02C8 (size: 0x4)
    bool ClearRoll;                                                                   // 0x02CC (size: 0x1)
    bool AutoCalculateMeshCount;                                                      // 0x02CD (size: 0x1)
    int32 SplineMeshCount;                                                            // 0x02D0 (size: 0x4)
    bool RefreshMesh;                                                                 // 0x02D4 (size: 0x1)
    bool ArmBatchEditWidth;                                                           // 0x02D5 (size: 0x1)
    float BatchEditWidth;                                                             // 0x02D8 (size: 0x4)
    bool ArmBatchEditMaxDepth;                                                        // 0x02DC (size: 0x1)
    float BatchEditMaxDepth;                                                          // 0x02E0 (size: 0x4)
    bool ArmBatchEditSpeed;                                                           // 0x02E4 (size: 0x1)
    float BatchEditSpeed;                                                             // 0x02E8 (size: 0x4)
    bool ArmBatchEditOpacity;                                                         // 0x02EC (size: 0x1)
    float BatchEditOpacity;                                                           // 0x02F0 (size: 0x4)
    bool ArmBatchEdit;                                                                // 0x02F4 (size: 0x1)
    bool BatchEditReplace;                                                            // 0x02F5 (size: 0x1)
    bool BatchEditAdd;                                                                // 0x02F6 (size: 0x1)
    bool BatchEditMultiply;                                                           // 0x02F7 (size: 0x1)
    bool BatchEditFlattenZ;                                                           // 0x02F8 (size: 0x1)
    TArray<class USplineMeshComponent*> _splineMeshComponents;                        // 0x0300 (size: 0x10)

}; // Size: 0x310

class AConZWorldBoundsVolume : public AVolume
{
}; // Size: 0x258

class AConZWorldSettings : public AWorldSettings
{
    class AWeatherController2* WeatherController2;                                    // 0x03A0 (size: 0x8)
    class AWetnessManager* WetnessManager;                                            // 0x03A8 (size: 0x8)
    class AGameEventManager* GameEventManager;                                        // 0x03B0 (size: 0x8)
    class AWorldEventManager* WorldEventManager;                                      // 0x03B8 (size: 0x8)
    class ABuildingManager* BuildingManager;                                          // 0x03C0 (size: 0x8)
    class AItemContainerManager* ItemContainerManager;                                // 0x03C8 (size: 0x8)
    class AConZEconomyManager* EconomyManager;                                        // 0x03D0 (size: 0x8)
    class AGardenManager* FarmingGardenManager;                                       // 0x03D8 (size: 0x8)
    class ARadiationManager* RadiationManager;                                        // 0x03E0 (size: 0x8)
    class AHuntingManager* HuntingManager;                                            // 0x03E8 (size: 0x8)
    class AGlobalEncounterManager* GlobalEncounterManager;                            // 0x03F0 (size: 0x8)
    class AQuestManager* QuestManager;                                                // 0x03F8 (size: 0x8)
    class ACookingManager* CookingManager;                                            // 0x0400 (size: 0x8)
    class AMugshotRoom* MugshotRoom;                                                  // 0x0408 (size: 0x8)
    TArray<class ARadioStation*> RadioStations;                                       // 0x0410 (size: 0x10)
    class UAkAudioEvent* RadioNoiseStartEvent;                                        // 0x0420 (size: 0x8)
    class UAkAudioEvent* RadioNoiseStopEvent;                                         // 0x0428 (size: 0x8)
    class UAkAudioEvent* RadioStopEvent;                                              // 0x0430 (size: 0x8)
    class UAkAudioEvent* RadioStationChangeNoiseEvent;                                // 0x0438 (size: 0x8)
    class UEntitySystemSettings* EntitySystemSettings;                                // 0x0440 (size: 0x8)
    FItemSpawningSettings ItemSpawningSettings;                                       // 0x0448 (size: 0x40)
    class AVolume* IslandBoundsVolume;                                                // 0x0488 (size: 0x8)
    bool UseVirtualizationSystem;                                                     // 0x0490 (size: 0x1)
    FBox2D WorldBounds;                                                               // 0x0494 (size: 0x14)
    FGameplayTag HeightMapGameplayTag;                                                // 0x04A8 (size: 0x8)
    FGameplayTag BiomeMapGameplayTag;                                                 // 0x04B0 (size: 0x8)
    FGameplayTag MapPropertiesGameplayTag;                                            // 0x04B8 (size: 0x8)
    FGameplayTag GerstnerWaveOcclusionPropertiesGameplayTag;                          // 0x04C0 (size: 0x8)
    bool UseOceanOpacityMap;                                                          // 0x04C8 (size: 0x1)
    FGameplayTag OceanOpacityGameplayTag;                                             // 0x04CC (size: 0x8)
    bool SpawnInAir;                                                                  // 0x04D4 (size: 0x1)
    float FirstSpawnAltitude;                                                         // 0x04D8 (size: 0x4)
    float RespawnAltitude;                                                            // 0x04DC (size: 0x4)
    FFloatInterval MapMinMaxElevation;                                                // 0x04E0 (size: 0x8)
    class UAvailabilityGrid* AvailabilityGrid;                                        // 0x04E8 (size: 0x8)
    FMapLimits _mapLimits;                                                            // 0x0520 (size: 0x68)
    TSubclassOf<class UAvailabilityGrid> _availabilityGridClass;                      // 0x05D8 (size: 0x8)
    TArray<FVehicleSpawnPointData> _vehicleSpawnPoints;                               // 0x05E0 (size: 0x10)
    TArray<FConZDeveloperId> _developerIdsHashed;                                     // 0x05F0 (size: 0x10)

}; // Size: 0x600

class AConsumableBuffItem : public AFoodItem
{
}; // Size: 0xA50

class ACookedFoodItem : public AFoodItem
{
    float SpoilageRateCooked;                                                         // 0x0A50 (size: 0x4)
    float TargetGramsPerUse;                                                          // 0x0A54 (size: 0x4)
    TSoftObjectPtr<UTexture2D> _inventoryIcon_Raw;                                    // 0x0A58 (size: 0x28)
    TSoftObjectPtr<UTexture2D> _inventoryIconInHands_Raw;                             // 0x0A80 (size: 0x28)
    TSoftObjectPtr<UTexture2D> _outsideInventoryIcon_Raw;                             // 0x0AA8 (size: 0x28)
    TSoftObjectPtr<UTexture2D> _inventoryIcon_Burnt;                                  // 0x0AD0 (size: 0x28)
    TSoftObjectPtr<UTexture2D> _inventoryIconInHands_Burnt;                           // 0x0AF8 (size: 0x28)
    TSoftObjectPtr<UTexture2D> _outsideInventoryIcon_Burnt;                           // 0x0B20 (size: 0x28)
    float _idealServingTemperatureMin;                                                // 0x0B48 (size: 0x4)
    float _idealServingTemperatureMax;                                                // 0x0B4C (size: 0x4)
    TArray<float> _exhaustionBonusDeltaPerCookQualityLevel;                           // 0x0B50 (size: 0x10)
    class UGameResourceType* _cachedGameResourceType;                                 // 0x0B60 (size: 0x8)

    void NetMulticast_SetupStateFromCooking(uint32 cookState, const TArray<uint8>& ingredientData);
}; // Size: 0xB70

class ACookingManager : public AActor
{
    TMap<UCookingRecipe*, int32> _activeCookingRecipes;                               // 0x0318 (size: 0x50)
    FMainPointSnappedUtilities _mainPointSnappedCookingUtilities;                     // 0x03C0 (size: 0xC8)
    float _netRelevancyRadius;                                                        // 0x0578 (size: 0x4)
    float _newClientCheckTimeInterval;                                                // 0x057C (size: 0x4)
    float _cookingUtilitySlotContainerNetRelevancyRadius;                             // 0x0580 (size: 0x4)
    TSoftClassPtr<ACookingUtilitySlotContainer> _cookingUtilitySlotContainerClass;    // 0x0588 (size: 0x28)
    float _databaseUpdateInterval;                                                    // 0x05B0 (size: 0x4)
    float _utilitySnapDistance;                                                       // 0x05B4 (size: 0x4)
    float _maxMainPointSnapDistance;                                                  // 0x05B8 (size: 0x4)
    float _proxyMeshSpawnRadius;                                                      // 0x05BC (size: 0x4)
    float _proxyMeshReleaseRadius;                                                    // 0x05C0 (size: 0x4)
    TMap<class FDbIntegerId, class FCookingFoodProxyMesh> _proxyMeshMap;              // 0x05E8 (size: 0x50)

    void OnRep_MainPointSnap();
}; // Size: 0x638

class ACookingUtilitySlotContainer : public AActor
{
    class ACookingManager* _cookingManager;                                           // 0x0220 (size: 0x8)
    FCookingUtilitySlotArray _cookingUtilitySlots;                                    // 0x0228 (size: 0x1D0)

}; // Size: 0x3F8

class ACustomMapBorder : public AActor
{
    class UStaticMeshComponent* Mesh;                                                 // 0x0220 (size: 0x8)
    class UStaticMeshComponent* TournamentMesh;                                       // 0x0228 (size: 0x8)
    class UMaterialInstanceDynamic* Material;                                         // 0x0230 (size: 0x8)
    FVector2D _minCustomMapSize;                                                      // 0x0238 (size: 0x8)
    bool _isInTournamentMode;                                                         // 0x0240 (size: 0x1)
    float _tournamentModeCompletionPercentage;                                        // 0x0244 (size: 0x4)
    float _nearingCompletionPercentage;                                               // 0x0248 (size: 0x4)
    FVector2D _minTournamentMapSize;                                                  // 0x0254 (size: 0x8)
    FBox2D _tournamentFinalBorderDimensions;                                          // 0x025C (size: 0x14)
    bool _active;                                                                     // 0x0270 (size: 0x1)
    FBox2D _customMapDimensions;                                                      // 0x0274 (size: 0x14)

    void OnRep_TournamentCompletionPercentage();
    void OnRep_IsInTournamentMode();
    void OnRep_CustomMapDimensions();
    void OnRep_Active();
}; // Size: 0x288

class ADamagingTrapItem : public ATrapItem
{
    float _initialDamageAmount;                                                       // 0x0AE0 (size: 0x4)
    float _damagePerSecond;                                                           // 0x0AE4 (size: 0x4)
    class UAkAudioEvent* _triggerSound;                                               // 0x0AE8 (size: 0x8)

}; // Size: 0xAF0

class ADcxBicycle : public ADcxBike
{
    float _baseStrengthChangeRate;                                                    // 0x1600 (size: 0x4)
    class UCurveFloat* _strengthChangeRateFactorVsVehicleSpeedKmh;                    // 0x1608 (size: 0x8)
    class UCurveFloat* _strengthChangeRateFactorVsGroundSlope;                        // 0x1610 (size: 0x8)
    float _baseConstitutionChangeRate;                                                // 0x1618 (size: 0x4)
    class UCurveFloat* _constitutionChangeRateFactorVsVehicleSpeedKmh;                // 0x1620 (size: 0x8)
    class UCurveFloat* _constitutionChangeRateFactorVsGroundSlope;                    // 0x1628 (size: 0x8)
    class UCurveFloat* _runningSkillExperienceGainRateFactorVsVehicleSpeedKmh;        // 0x1630 (size: 0x8)
    class UCurveFloat* _runningSkillExperienceGainRateFactorVsGroundSlope;            // 0x1638 (size: 0x8)
    float _baseEnduranceSkillExperienceGainRate;                                      // 0x1640 (size: 0x4)
    class UCurveFloat* _enduranceSkillExperienceGainRateFactorVsVehicleSpeedKmh;      // 0x1648 (size: 0x8)
    class UCurveFloat* _enduranceSkillExperienceGainRateFactorVsGroundSlope;          // 0x1650 (size: 0x8)
    float _baseActionDifficulty;                                                      // 0x1658 (size: 0x4)
    class UCurveFloat* _actionDifficultyFactorVsVehicleSpeedKmh;                      // 0x1660 (size: 0x8)
    class UCurveFloat* _actionDifficultyFactorVsGroundSlope;                          // 0x1668 (size: 0x8)
    float _speedThresholdForAINoise;                                                  // 0x1670 (size: 0x4)
    TMap<EPrisonerMovementPace, float> _desiredPaceToAppliedThrottleMapping;          // 0x1678 (size: 0x50)

}; // Size: 0x16D0

class ADcxBike : public ADcxWheeledVehicle4W
{
    bool _shouldApplyStabilization;                                                   // 0x15AC (size: 0x1)
    FVector _centerOfMassOffset;                                                      // 0x15B0 (size: 0xC)
    FVector _centerOfMassOffsetNotMounted;                                            // 0x15BC (size: 0xC)
    float _angVelXDamping;                                                            // 0x15C8 (size: 0x4)
    float _angVelYDamping;                                                            // 0x15CC (size: 0x4)
    float _angVelZDamping;                                                            // 0x15D0 (size: 0x4)
    float _bicycleDriftAmount;                                                        // 0x15D8 (size: 0x4)
    float _bicycleDriftLeanAmount;                                                    // 0x15DC (size: 0x4)
    float _impactSpeedForUnmount;                                                     // 0x15E0 (size: 0x4)
    bool _shouldUnmountWhenNotEnoughWheels;                                           // 0x15E4 (size: 0x1)
    float _maxReverseForce;                                                           // 0x15E8 (size: 0x4)
    float _maxReverseSpeed;                                                           // 0x15EC (size: 0x4)

}; // Size: 0x1600

class ADcxMotorcycle : public ADcxBike
{
}; // Size: 0x1600

class ADcxWheeledVehicle : public AVehicleBase
{
    class UDcxVehicleDriveComponent* _driveComponent;                                 // 0x1318 (size: 0x8)
    class UVehicleDoorsComponent* _doorsComponent;                                    // 0x1320 (size: 0x8)
    class UDcxWheeledVehicleEffectsComponent* _effectsComponent;                      // 0x1328 (size: 0x8)
    FGameplayTag _ignitionStartEventDeviceControlTag;                                 // 0x1370 (size: 0x8)
    FGameplayTag _ignitionEndEventDeviceControlTag;                                   // 0x1378 (size: 0x8)
    FGameplayTag _brakeLightsEnableDeviceControlTag;                                  // 0x1380 (size: 0x8)
    FGameplayTag _brakeLightsDisableDeviceControlTag;                                 // 0x1388 (size: 0x8)
    FGameplayTag _reverseLightsEnableDeviceControlTag;                                // 0x1390 (size: 0x8)
    FGameplayTag _reverseLightsDisableDeviceControlTag;                               // 0x1398 (size: 0x8)
    int32 _minimumNumberOfWheelsToBeDriven;                                           // 0x13A4 (size: 0x4)
    int32 _minimumNumberOfWheelsToBePushed;                                           // 0x13A8 (size: 0x4)
    float _minPushStartVelocity;                                                      // 0x13AC (size: 0x4)
    float _minPushStartVelocityIgnition;                                              // 0x13B0 (size: 0x4)
    float _hornAiLoudness;                                                            // 0x13B8 (size: 0x4)
    class UAkAudioEvent* _hornStartAudioEvent;                                        // 0x13C0 (size: 0x8)
    class UAkAudioEvent* _hornStopAudioEvent;                                         // 0x13C8 (size: 0x8)
    float _maxPushForce;                                                              // 0x13D0 (size: 0x4)
    float _minPushForce;                                                              // 0x13D8 (size: 0x4)
    float _maxPushForcePerPusher;                                                     // 0x13DC (size: 0x4)
    float _minPushStartForce;                                                         // 0x13E0 (size: 0x4)
    class UCurveFloat* _speedToPushForceCurve;                                        // 0x13E8 (size: 0x8)
    float _maxLinearVelocityWhenPushing;                                              // 0x13F0 (size: 0x4)
    float _maxTotalVelocityWhenPushingBeforeUnmount;                                  // 0x13F4 (size: 0x4)
    float _maxAllowedDistanceFromPushStartingPlayer;                                  // 0x13F8 (size: 0x4)
    FRuntimeFloatCurve _pusherActionDifficultyVsSpeed;                                // 0x1400 (size: 0x88)
    FRuntimeFloatCurve _pusherBaseStrengthChangeRateSpeedInfluenceVsSpeed;            // 0x1488 (size: 0x88)
    FRuntimeFloatCurve _pusherBaseConstitutionChangeRateModifierVsSpeed;              // 0x1510 (size: 0x88)
    float _terminalVelocityConstant;                                                  // 0x1598 (size: 0x4)

    void UpdateHandlingParametersOnClient(const float WheelSteeringLerpSpeedMultiplier, const float engineIgnitionDurationMultiplier, const float engineIgnitionFailureChance, const float gearboxGearChangeDelayMultiplier, const float gearboxGearUpRatioMultiplier, const float gearboxGearDownRatioMultiplier);
}; // Size: 0x15A0

class ADcxWheeledVehicle4W : public ADcxWheeledVehicle
{
}; // Size: 0x15B0

class ADeathmatchGameEvent : public AGameEventBase
{
    FDeathmatchParameters _deathmatchParameters;                                      // 0x0588 (size: 0x14)

    void SetDeathmatchParameters(const FDeathmatchParameters& Params);
    void RestrictGameEventArea();
    FDeathmatchParameters GetDeathmatchParameters();
}; // Size: 0x5A8

class ADeathmatchLocationMarker : public AGameEventLocationMarker
{
    FDeathmatchParameters DeathmatchParameters;                                       // 0x0418 (size: 0x14)
    FVector FocusOffset;                                                              // 0x042C (size: 0xC)
    float MinimalRadius;                                                              // 0x0438 (size: 0x4)

}; // Size: 0x440

class ADeer2 : public AComplexAnimal2
{
    float _hartBaseScale;                                                             // 0x0B48 (size: 0x4)
    float _hartScaleVariance;                                                         // 0x0B4C (size: 0x4)
    float _hindBaseScale;                                                             // 0x0B50 (size: 0x4)
    float _hindScaleVariance;                                                         // 0x0B54 (size: 0x4)
    float _maleChance;                                                                // 0x0B58 (size: 0x4)
    bool _isMale;                                                                     // 0x0B5C (size: 0x1)
    class USkeletalMesh* _maleSkeletalMesh;                                           // 0x0B60 (size: 0x8)
    TArray<class UStaticMesh*> _antlerMeshes;                                         // 0x0B68 (size: 0x10)
    class UStaticMeshComponent* _antlers;                                             // 0x0B78 (size: 0x8)
    uint32 _hartHind;                                                                 // 0x0B80 (size: 0x4)
    class UChoppingRecipeDataAsset* _maleChoppingRecipeDataAsset;                     // 0x0B88 (size: 0x8)

    void OnRep_HartHind();
}; // Size: 0xB90

class ADepotItem : public AChestItem
{
    class ATradePost* _assignedTradePost;                                             // 0x0BB0 (size: 0x8)

}; // Size: 0xBC0

class ADialLockMinigame : public ADialLockMinigameBase
{
    class UAkAudioEvent* _incorrectCombinationAudioEvent;                             // 0x03A0 (size: 0x8)
    class UAkAudioEvent* _unlockedAudioEvent;                                         // 0x03A8 (size: 0x8)
    FTransform _protectionParticlesTransform;                                         // 0x03B0 (size: 0x30)
    float _throbberDelay;                                                             // 0x03F0 (size: 0x4)

}; // Size: 0x400

class ADialLockMinigameBase : public AMinigame
{
    class UStaticMeshComponent* _lockBody;                                            // 0x0340 (size: 0x8)
    class UStaticMeshComponent* _lockClamp;                                           // 0x0348 (size: 0x8)
    float _animationLength;                                                           // 0x0350 (size: 0x4)
    TArray<FWheelData> _wheels;                                                       // 0x0358 (size: 0x10)
    class UAkAudioEvent* _wheelTurnedAudioEvent;                                      // 0x0398 (size: 0x8)

}; // Size: 0x3A0

class ADialLockSetCombinationMinigame : public ADialLockMinigameBase
{
}; // Size: 0x3A8

class ADialPadMinigame : public AMinigame
{
    FVector _zoomStartLocation;                                                       // 0x0340 (size: 0xC)
    FVector _zoomEndLocation;                                                         // 0x034C (size: 0xC)
    class UCurveFloat* _zoomCurve;                                                    // 0x0358 (size: 0x8)
    class UCurveFloat* _fadeCurve;                                                    // 0x0360 (size: 0x8)
    FLinearColor _deactivatedColor;                                                   // 0x0368 (size: 0x10)
    FLinearColor _activatedColor;                                                     // 0x0378 (size: 0x10)
    FLinearColor _neutralColor;                                                       // 0x0388 (size: 0x10)
    float _resetTime;                                                                 // 0x0398 (size: 0x4)
    int32 _defaultCombinationLength;                                                  // 0x039C (size: 0x4)
    class UAkAudioEvent* _buttonPressedAudioEvent;                                    // 0x03A0 (size: 0x8)
    class UAkAudioEvent* _correctCodeAudioEvent;                                      // 0x03A8 (size: 0x8)
    class UAkAudioEvent* _incorrectCodeAudioEvent;                                    // 0x03B0 (size: 0x8)

}; // Size: 0x458

class ADistantLevel : public AActor
{
    class UStaticMeshComponent* _previewMeshComponent;                                // 0x0220 (size: 0x8)
    FString _streamingLevelName;                                                      // 0x0228 (size: 0x10)
    EDistantMeshStreamingBehavior _meshStreamingBehavior;                             // 0x0238 (size: 0x1)
    float _maxDrawDistance;                                                           // 0x023C (size: 0x4)
    bool _neverDistanceCull;                                                          // 0x0240 (size: 0x1)
    FBoxSphereBounds _meshBounds;                                                     // 0x0244 (size: 0x1C)
    TSoftObjectPtr<UStaticMesh> _collisionMesh;                                       // 0x0260 (size: 0x28)
    TArray<TSoftObjectPtr<UStaticMesh>> _meshLODs;                                    // 0x0288 (size: 0x10)

}; // Size: 0x298

class ADistantLevelManager : public AActor
{
    class USceneComponent* _rootComponent;                                            // 0x0220 (size: 0x8)
    float _minCameraLocationChangeToUpdateDistantLevels;                              // 0x0228 (size: 0x4)
    float _distantMeshPreloadDistance;                                                // 0x022C (size: 0x4)
    int32 _maxNumSimultaneouslyStreamedDistantMeshLODs;                               // 0x0230 (size: 0x4)
    float _distantCollisionMeshUnloadDistance;                                        // 0x0234 (size: 0x4)
    int32 _maxNumSimultaneouslyStreamedDistantCollisionMeshes;                        // 0x0238 (size: 0x4)
    TArray<FDistantLevelDescription> _distantLevelDescriptions;                       // 0x0240 (size: 0x10)
    float _releaseRecentlyUsedDistantMeshTime;                                        // 0x0250 (size: 0x4)
    TMap<class FString, class FRecentlyUsedDistantLevelStaticMeshLODs> _recentlyUsedMesh; // 0x0258 (size: 0x50)
    int32 _preloadAllNeverCulledDistantLevelLOD;                                      // 0x02A8 (size: 0x4)

    void HandleStreamingLevelsVisibilityChanged();
}; // Size: 0x430

class ADoctor : public ATrader
{
    TArray<TSoftClassPtr<UObject>> _tradeableServicesForInteractions;                 // 0x0A18 (size: 0x10)

}; // Size: 0xA30

class ADogTagItem : public AItem
{
    FDbIntegerId _userProfileId;                                                      // 0x09A8 (size: 0x8)
    FString _userProfileName;                                                         // 0x09B0 (size: 0x10)
    class UExpirableItemComponent* _expirableItemComponent;                           // 0x09C8 (size: 0x8)

    void OnRep_UserProfileName();
}; // Size: 0x9D0

class ADoor : public AActor
{
    FName ControlName;                                                                // 0x0240 (size: 0x8)
    class UMeshComponent* Mesh;                                                       // 0x0248 (size: 0x8)
    FDoorOnOpened OnOpened;                                                           // 0x0250 (size: 0x10)
    void OnOpened();
    EDoorType _doorType;                                                              // 0x02D0 (size: 0x1)
    class USceneComponent* _rootComponent;                                            // 0x02D8 (size: 0x8)
    int32 _maxNumberOfLocks;                                                          // 0x02E4 (size: 0x4)
    int32 _maxNumberOfZappers;                                                        // 0x02E8 (size: 0x4)
    bool _shouldRemoveZappersAfterLocksAreNeutralized;                                // 0x02EC (size: 0x1)
    bool _supportsRemoteSensor;                                                       // 0x02ED (size: 0x1)
    bool CanOpenOnBothSides;                                                          // 0x02EE (size: 0x1)
    bool _canOpen;                                                                    // 0x02EF (size: 0x1)
    float _openingDuration;                                                           // 0x02F0 (size: 0x4)
    float _closingDuration;                                                           // 0x02F4 (size: 0x4)
    bool _canInteractWhileInTransition;                                               // 0x02F8 (size: 0x1)
    bool _shouldSelfClose;                                                            // 0x02F9 (size: 0x1)
    float _openedDurationBeforeSelfClosing;                                           // 0x02FC (size: 0x4)
    float _selfCloseDuration;                                                         // 0x0300 (size: 0x4)
    EOpenStateNavigationControl _openStateNavigationControl;                          // 0x0304 (size: 0x1)
    class UAkAudioEvent* _openingSoundCue;                                            // 0x0308 (size: 0x8)
    class UAkAudioEvent* _violentOpeningSoundCue;                                     // 0x0310 (size: 0x8)
    class UAkAudioEvent* _openedSoundCue;                                             // 0x0318 (size: 0x8)
    class UAkAudioEvent* _closingSoundCue;                                            // 0x0320 (size: 0x8)
    class UAkAudioEvent* _closedSoundCue;                                             // 0x0328 (size: 0x8)
    float _noiseLoudness;                                                             // 0x0330 (size: 0x4)
    TSubclassOf<class UDoorUnlockData> _doorUnlockData;                               // 0x0338 (size: 0x8)
    bool _canEverBeOpened;                                                            // 0x036A (size: 0x1)
    bool _canEverBeClosed;                                                            // 0x036B (size: 0x1)
    float _violentOpeningRateMultiplier;                                              // 0x036C (size: 0x4)
    class UPriceCategory* _priceCategory;                                             // 0x0378 (size: 0x8)
    FTransform _unlockTransformInside;                                                // 0x0380 (size: 0x30)
    FTransform _unlockTransformOutside;                                               // 0x03B0 (size: 0x30)
    float _forceUnlockMovementAcceptanceRadius;                                       // 0x03E0 (size: 0x4)
    TArray<class UClass*> _originalUpgradeItemsClasses;                               // 0x03E8 (size: 0x10)
    class UDoorUpgradeWidget* _upgradeWidget;                                         // 0x0418 (size: 0x8)
    FDoorRepData _doorRepData;                                                        // 0x0420 (size: 0x48)
    FGameplayTagContainer _relevantLockabilityServerSettings;                         // 0x0478 (size: 0x20)
    bool _disableSerialization;                                                       // 0x04A9 (size: 0x1)
    TArray<class AItem*> _attachedItems;                                              // 0x04C8 (size: 0x10)
    FVector _leftNavLinkPoint;                                                        // 0x04F4 (size: 0xC)
    FVector _rightNavLinkPoint;                                                       // 0x0500 (size: 0xC)
    TEnumAsByte<ENavLinkDirection::Type> _navLinkDirection;                           // 0x050C (size: 0x1)
    float _navLinkDistance;                                                           // 0x0510 (size: 0x4)
    float _navLinkRayCastStartUpOffset;                                               // 0x0514 (size: 0x4)
    float _navLinkGroundOffset;                                                       // 0x0518 (size: 0x4)
    FNavAgentSelector _navSupportedAgents;                                            // 0x051C (size: 0x4)
    bool _isYForwardAxis;                                                             // 0x0520 (size: 0x1)
    bool _canEverBeBrokenDown;                                                        // 0x0521 (size: 0x1)
    float _brokenDownTime;                                                            // 0x0524 (size: 0x4)
    TSubclassOf<class UNavArea> _doorNavArea;                                         // 0x0528 (size: 0x8)
    FActorPaintParams _actorPaintParams;                                              // 0x0548 (size: 0x38)

    bool ShouldOpen();
    void OnUnlockFailed__DelegateSignature();
    void OnUnlocked__DelegateSignature(class ADoor* Door);
    void OnRep_OwningUserProfileId();
    void OnOpened__DelegateSignature();
    void OnLockRemoved__DelegateSignature(class ADoor* Door);
    void OnLocked__DelegateSignature(class ADoor* Door);
    void OnAudioStopped();
    void ChangeOpenState(bool ShouldOpen);
}; // Size: 0x580

class ADoubleDoor : public ADoor
{
    class UMeshComponent* Mesh1;                                                      // 0x0580 (size: 0x8)

}; // Size: 0x590

class ADoubleRegularDoorStatic : public ADoubleDoor
{
    FRotator _openRotation0;                                                          // 0x0588 (size: 0xC)
    FRotator _openRotation1;                                                          // 0x0594 (size: 0xC)
    FRotator _closedRotation0;                                                        // 0x05A0 (size: 0xC)
    FRotator _closedRotation1;                                                        // 0x05AC (size: 0xC)

}; // Size: 0x5C0

class ADoubleSlidingDoorStatic : public ADoubleDoor
{
    class USceneComponent* ClosedPositionComponent0;                                  // 0x0588 (size: 0x8)
    class USceneComponent* ClosedPositionComponent1;                                  // 0x0590 (size: 0x8)
    class USceneComponent* OpenPositionComponent0;                                    // 0x0598 (size: 0x8)
    class USceneComponent* OpenPositionComponent1;                                    // 0x05A0 (size: 0x8)

    void AddDoorPartInfo(const FVector& cloasedPosition, const FVector& OpenedPosition, class USceneComponent* moveableComponent);
}; // Size: 0x5C0

class ADrinkItem : public AFoodItem
{
    class UBasicGameResourceContainerComponent* _gameResourceContainer;               // 0x0A50 (size: 0x8)

}; // Size: 0xA60

class ADrone : public AConZCharacter
{
    class UAkAudioEvent* _engineAudioEvent;                                           // 0x0828 (size: 0x8)
    class UAkAudioEvent* _engineStopAudioEvent;                                       // 0x0830 (size: 0x8)
    TArray<float> _speedSteps;                                                        // 0x0838 (size: 0x10)
    float _movementInertiaAI;                                                         // 0x0848 (size: 0x4)
    float _movementRotationSpeedExpFactor;                                            // 0x084C (size: 0x4)
    float _engineParticlesChangeSpeedExpFactor;                                       // 0x0850 (size: 0x4)
    class UCurveFloat* _engineVolumeFromSpeed;                                        // 0x0858 (size: 0x8)
    float _movementBreathingInterval;                                                 // 0x0860 (size: 0x4)
    float _movementBreathingIntensity;                                                // 0x0864 (size: 0x4)
    class UParticleSystem* _selfDestructParticles;                                    // 0x0868 (size: 0x8)
    class UParticleSystem* _smokeParticles;                                           // 0x0870 (size: 0x8)
    class UParticleSystemComponent* _smokeParticleSystemComponent;                    // 0x0878 (size: 0x8)
    class UAkAudioEvent* _selfDestructAudioEvent;                                     // 0x0880 (size: 0x8)
    uint8 _currentSpeedStep;                                                          // 0x08A0 (size: 0x1)
    float _movementInertia;                                                           // 0x08A4 (size: 0x4)
    class UStaticMeshComponent* _cameraMesh;                                          // 0x08B0 (size: 0x8)
    class UParticleSystemComponent* _engineParticlesM;                                // 0x08B8 (size: 0x8)
    class UParticleSystemComponent* _engineParticlesML;                               // 0x08C0 (size: 0x8)
    class UParticleSystemComponent* _engineParticlesMR;                               // 0x08C8 (size: 0x8)
    class UParticleSystemComponent* _engineParticlesLL;                               // 0x08D0 (size: 0x8)
    class UParticleSystemComponent* _engineParticlesLR;                               // 0x08D8 (size: 0x8)
    class USpotLightComponent* _lightComponent;                                       // 0x08E0 (size: 0x8)
    float _speedOfSoundMultiplerForDoppler;                                           // 0x08E8 (size: 0x4)
    float _health;                                                                    // 0x0928 (size: 0x4)

    void Server_SetCurrentSpeedStep(int32 step);
    void SelfDestruct(bool shouldSpawnItem);
    void OnRep_CurrentSpeedStep();
    void OnHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit);
    void NetMulticast_ToggleSmokeParticles(bool shouldPlay);
    void NetMulticast_SpawnDestroyedEffects();
    void NetMulticast_PlaySoundOnClients(EDroneSound SoundToPlay, bool Force);
}; // Size: 0x930

class ADroneAIController : public AConZAIController
{
    float _followingDuration;                                                         // 0x0450 (size: 0x4)
    float _followingTargetSpeedThreshold;                                             // 0x0454 (size: 0x4)
    float _forcedSelfDestructTime;                                                    // 0x0458 (size: 0x4)
    float _followingHeight;                                                           // 0x045C (size: 0x4)
    float _followingDistance;                                                         // 0x0460 (size: 0x4)
    float _resumeFollowingExtraDistance;                                              // 0x0464 (size: 0x4)
    float _resumeFollowingSeconds;                                                    // 0x0468 (size: 0x4)
    float _resumeFollowingExtendedSeconds;                                            // 0x046C (size: 0x4)
    float _followingCirclingMinTime;                                                  // 0x0474 (size: 0x4)
    float _followingCirclingMaxTime;                                                  // 0x0478 (size: 0x4)
    float _followingCirclingNewDirectionMinTime;                                      // 0x047C (size: 0x4)
    float _followingCirclingNewDirectionMaxTime;                                      // 0x0480 (size: 0x4)
    float _switchFollowingTargetsMaxDistance;                                         // 0x0484 (size: 0x4)
    float _flybyHorizontalDistanceFromTarget;                                         // 0x04B8 (size: 0x4)
    float _flybyVerticalDistanceFromTarget;                                           // 0x04BC (size: 0x4)
    float _flybyPathLength;                                                           // 0x04C0 (size: 0x4)
    float _minFlybyAngleDeg;                                                          // 0x04C4 (size: 0x4)
    float _maxFlybyAngleDeg;                                                          // 0x04C8 (size: 0x4)
    float _crashingDistance;                                                          // 0x04E0 (size: 0x4)
    float _leavingForwardDistance;                                                    // 0x04F4 (size: 0x4)
    float _leavingVerticalDistance;                                                   // 0x04F8 (size: 0x4)
    float _minimumNavigationProximityPerState;                                        // 0x04FC (size: 0x1C)
    float _maxPathSegment;                                                            // 0x0518 (size: 0x4)
    float _flyUpwardsDistance;                                                        // 0x051C (size: 0x4)
    int32 _maximumAttemptedHeightGains;                                               // 0x0520 (size: 0x4)
    float _distanceForHighAcceleration;                                               // 0x0528 (size: 0x4)
    float _highAccelerationScaleMultiplier;                                           // 0x052C (size: 0x4)

    void FollowCharacter(class ACharacter* characterToFollow);
}; // Size: 0x568

class ADroneCameraActor : public ACameraActor
{
}; // Size: 0x7B0

class ADropZoneCargo : public ADropZoneDroppable
{
    class UChildActorComponent* Slot;                                                 // 0x0288 (size: 0x8)

}; // Size: 0x290

class ADropZoneCrate : public ADropZoneDroppable
{
    TSubclassOf<class ADropZoneKey> KeyClass;                                         // 0x0280 (size: 0x8)
    bool _hasKey;                                                                     // 0x0288 (size: 0x1)

    void OnRep_HasKey();
}; // Size: 0x290

class ADropZoneDroppable : public AActor
{
    class UStaticMeshComponent* Mesh;                                                 // 0x0220 (size: 0x8)
    class UAkAudioEvent* LandSound;                                                   // 0x0228 (size: 0x8)
    class ADropZoneGameEvent* _gameEvent;                                             // 0x0230 (size: 0x8)
    class UParticleSystemComponent* _flareParticles0;                                 // 0x0240 (size: 0x8)
    class UParticleSystemComponent* _flareParticles1;                                 // 0x0248 (size: 0x8)
    class UParticleSystemComponent* _flareParticles2;                                 // 0x0250 (size: 0x8)
    FVector _endLocation;                                                             // 0x0260 (size: 0xC)
    float _fallingSpeed;                                                              // 0x026C (size: 0x4)
    bool _flareParticlesEnabled;                                                      // 0x0270 (size: 0x1)
    int32 _flareParticlesTeam;                                                        // 0x0274 (size: 0x4)

    void SetGameEvent(class ADropZoneGameEvent* gameEvent);
    void OnRep_FlareParticlesTeam();
    void OnRep_FlareParticlesEnabled();
    class ADropZoneGameEvent* GetGameEvent();
}; // Size: 0x280

class ADropZoneEquipmentTable : public AActor
{
    TArray<class AItem*> _trackedItems;                                               // 0x0220 (size: 0x10)

    void UntrackItem(class AItem* Item);
    void TrackItem(class AItem* Item);
    void PerformItemCleanup();
    void OnTrackedItemDestroyed(class AActor* Actor);
    void BeginCleaningItems();
}; // Size: 0x238

class ADropZoneGameEvent : public AGameEventBase
{
    TSubclassOf<class ADropZoneEquipmentTable> TableAClass;                           // 0x0588 (size: 0x8)
    TSubclassOf<class ADropZoneEquipmentTable> TableBClass;                           // 0x0590 (size: 0x8)
    TSubclassOf<class ADropZoneCrate> CrateClass;                                     // 0x0598 (size: 0x8)
    TSubclassOf<class ADropZoneCargo> CargoClass;                                     // 0x05A0 (size: 0x8)
    class UAkAudioEvent* IntroAnnouncement;                                           // 0x05A8 (size: 0x8)
    class UAkAudioEvent* LocateTheKeyAnnouncement;                                    // 0x05B0 (size: 0x8)
    class UAkAudioEvent* BlueTeamFoundKeyAnnouncement;                                // 0x05B8 (size: 0x8)
    class UAkAudioEvent* BlueTeamUnlockedAnnouncement;                                // 0x05C0 (size: 0x8)
    class UAkAudioEvent* BlueTeamStolenAnnouncement;                                  // 0x05C8 (size: 0x8)
    class UAkAudioEvent* RedTeamFoundKeyAnnouncement;                                 // 0x05D0 (size: 0x8)
    class UAkAudioEvent* RedTeamUnlockedAnnouncement;                                 // 0x05D8 (size: 0x8)
    class UAkAudioEvent* RedTeamStolenAnnouncement;                                   // 0x05E0 (size: 0x8)
    class UAkAudioEvent* CargoDropAnnouncement;                                       // 0x05E8 (size: 0x8)
    class UAkAudioEvent* CargoLandedAnnouncement;                                     // 0x05F0 (size: 0x8)
    class UTexture2D* KeyIcon;                                                        // 0x05F8 (size: 0x8)
    class UTexture2D* CargoIcon;                                                      // 0x0600 (size: 0x8)
    FLinearColor FriendlyColor;                                                       // 0x0608 (size: 0x10)
    FLinearColor EnemyColor;                                                          // 0x0618 (size: 0x10)
    FDropZoneParameters _dropZoneParameters;                                          // 0x0628 (size: 0x2C)
    EDropZoneGameEventPhase _phase;                                                   // 0x0660 (size: 0x1)
    int32 _capturingTeam;                                                             // 0x0664 (size: 0x4)
    float _phaseTimeLeft;                                                             // 0x0668 (size: 0x4)
    float _captureProgress;                                                           // 0x066C (size: 0x4)
    class AGameEventBorder* _barrierA;                                                // 0x0678 (size: 0x8)
    class AGameEventBorder* _barrierB;                                                // 0x0680 (size: 0x8)
    class ADropZoneEquipmentTable* _tableA;                                           // 0x0688 (size: 0x8)
    class ADropZoneEquipmentTable* _tableB;                                           // 0x0690 (size: 0x8)
    class ADropZoneCrate* _crateA;                                                    // 0x0698 (size: 0x8)
    class ADropZoneCrate* _crateB;                                                    // 0x06A0 (size: 0x8)
    class ADropZoneKey* _key;                                                         // 0x06A8 (size: 0x8)
    class APrisoner* _keyCarrier;                                                     // 0x06B0 (size: 0x8)
    class AActor* _topmostKeyOwner;                                                   // 0x06B8 (size: 0x8)
    class ADropZoneCargo* _cargo;                                                     // 0x06C0 (size: 0x8)
    class ADropZoneSlot* _slot;                                                       // 0x06C8 (size: 0x8)

    void SetDropZoneParameters(const FDropZoneParameters& Params);
    void OnRep_CapturingTeam();
    class ADropZoneSlot* GetSlot();
    float GetPhaseTimeLeft();
    EDropZoneGameEventPhase GetPhase();
    class APrisoner* GetKeyCarrier();
    class ADropZoneKey* GetKey();
    FDropZoneParameters GetDropZoneParameters();
    class ADropZoneCrate* GetCrateB();
    class ADropZoneCrate* GetCrateA();
    class ADropZoneCargo* GetCargo();
    int32 GetCapturingTeam();
    float GetCaptureProgress();
}; // Size: 0x6E0

class ADropZoneKey : public AItem
{
    class USphereComponent* SphereComponent;                                          // 0x09A8 (size: 0x8)
    class ADropZoneGameEvent* _gameEvent;                                             // 0x09B0 (size: 0x8)

    void SphereOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
    void SetGameEvent(class ADropZoneGameEvent* gameEvent);
    class ADropZoneGameEvent* GetGameEvent();
}; // Size: 0x9C0

class ADropZoneLocationMarker : public AGameEventLocationMarker
{
    FDropZoneParameters DropZoneParameters;                                           // 0x0418 (size: 0x2C)
    FVector SpawnOffsetA;                                                             // 0x0444 (size: 0xC)
    FVector SpawnOffsetB;                                                             // 0x0450 (size: 0xC)
    float SpawnRadiusA;                                                               // 0x045C (size: 0x4)
    float SpawnRadiusB;                                                               // 0x0460 (size: 0x4)
    FTransform CargoDropOffset;                                                       // 0x0470 (size: 0x30)
    FTransform CrateDropOffsetA;                                                      // 0x04A0 (size: 0x30)
    FTransform CrateDropOffsetB;                                                      // 0x04D0 (size: 0x30)
    class UStaticMeshComponent* CrateAPreviewMesh;                                    // 0x0500 (size: 0x8)
    class UStaticMeshComponent* CrateBPreviewMesh;                                    // 0x0508 (size: 0x8)
    class UStaticMeshComponent* CargoPreviewMesh;                                     // 0x0510 (size: 0x8)

}; // Size: 0x520

class ADropZoneSlot : public AActor
{
    class UStaticMeshComponent* Mesh;                                                 // 0x0228 (size: 0x8)
    float ActivationDuration;                                                         // 0x0230 (size: 0x4)
    class UStaticMesh* UnlockedMesh;                                                  // 0x0238 (size: 0x8)
    class UAkAudioEvent* ActivateSound;                                               // 0x0240 (size: 0x8)
    class ADropZoneGameEvent* _gameEvent;                                             // 0x0248 (size: 0x8)

    void SetGameEvent(class ADropZoneGameEvent* gameEvent);
    void Server_Activate(class APrisoner* Prisoner);
    float GetOpeningDuration();
    class ADropZoneGameEvent* GetGameEvent();
}; // Size: 0x250

class ADropship : public AConZCharacter
{
    float _maxHealth;                                                                 // 0x08A4 (size: 0x4)
    float _corpseDestroyTime;                                                         // 0x08B0 (size: 0x4)
    float _timeAtVelocityZeroAfterDeathToExplode;                                     // 0x08B4 (size: 0x4)
    float _explosionDistanceModifierValue;                                            // 0x08BC (size: 0x4)
    EDropshipStance _dropshipStance;                                                  // 0x08C0 (size: 0x1)
    FDropshipDataPerStance _dataPerStance;                                            // 0x08C4 (size: 0xF0)
    float _breathingOffset;                                                           // 0x09B8 (size: 0x4)
    float _breathingFrequency;                                                        // 0x09BC (size: 0x4)
    float _breathingSpeedMinFrequency;                                                // 0x09C0 (size: 0x4)
    float _muzzleEffectsScaleDistanceStart;                                           // 0x09CC (size: 0x4)
    float _muzzleEffectsScaleDistanceRange;                                           // 0x09D0 (size: 0x4)
    float _muzzleEffectsScaleByDistanceFactor;                                        // 0x09D4 (size: 0x4)
    TSubclassOf<class AProjectile> _projectileClass;                                  // 0x09D8 (size: 0x8)
    TSubclassOf<class AProjectile> _projectileClassClient;                            // 0x09E0 (size: 0x8)
    float _projectileFireAtLocationMaxAngle;                                          // 0x09E8 (size: 0x4)
    float _weaponAimingMaxAngle;                                                      // 0x09EC (size: 0x4)
    float _weaponAimLerpFactor;                                                       // 0x09F0 (size: 0x4)
    float _aimAngleChangePerSecond;                                                   // 0x09F4 (size: 0x4)
    FName _leftMinigunSocketName;                                                     // 0x09F8 (size: 0x8)
    FName _rightMinigunSocketName;                                                    // 0x0A00 (size: 0x8)
    FName _leftMinigunAimSocketName;                                                  // 0x0A08 (size: 0x8)
    FName _rightMinigunAimSocketName;                                                 // 0x0A10 (size: 0x8)
    class UParticleSystem* _projectileMuzzlePS;                                       // 0x0A18 (size: 0x8)
    class UAkAudioEvent* _projectileFiredSound;                                       // 0x0A20 (size: 0x8)
    FVector _baseAimLocationLeft;                                                     // 0x0A28 (size: 0xC)
    FVector _baseAimLocationRight;                                                    // 0x0A34 (size: 0xC)
    class AActor* _aimFoe;                                                            // 0x0AC0 (size: 0x8)
    TArray<TWeakObjectPtr<AActor>> _knownTargets;                                     // 0x0AC8 (size: 0x10)
    FVector _aimLocation;                                                             // 0x0AD8 (size: 0xC)
    TSubclassOf<class AProjectile> _railgunProjectileClass;                           // 0x0B00 (size: 0x8)
    TSubclassOf<class AProjectile> _railgunProjectileClassClient;                     // 0x0B08 (size: 0x8)
    float _railgunChargingTime;                                                       // 0x0B10 (size: 0x4)
    float _railgunRecoilTime;                                                         // 0x0B14 (size: 0x4)
    float _maxRailgunProjectileAngle;                                                 // 0x0B18 (size: 0x4)
    FVector _railgunFirePointOffset;                                                  // 0x0B1C (size: 0xC)
    class UNiagaraSystem* _railgunChargingPS;                                         // 0x0B28 (size: 0x8)
    class UNiagaraComponent* _railgunChargingPSC;                                     // 0x0B30 (size: 0x8)
    FName _railgunChargingSocket;                                                     // 0x0B38 (size: 0x8)
    class UParticleSystem* _railgunMuzzleEffect;                                      // 0x0B40 (size: 0x8)
    FName _railgunMuzzleSocket;                                                       // 0x0B48 (size: 0x8)
    class UAkAudioEvent* _railgunFiredSound;                                          // 0x0B50 (size: 0x8)
    float _railgunShakeEffectRadius;                                                  // 0x0B5C (size: 0x4)
    float _railgunShakeMaxEffectRadius;                                               // 0x0B60 (size: 0x4)
    float _railgunShakeEffectFalloffExponent;                                         // 0x0B64 (size: 0x4)
    TSubclassOf<class UMatineeCameraShake> _railgunCameraShake;                       // 0x0B68 (size: 0x8)
    TSubclassOf<class AItem> _tearGasGrenadeItemClass;                                // 0x0B70 (size: 0x8)
    FName _tearGasGrenadeSpawnSocketName;                                             // 0x0B78 (size: 0x8)
    float _tearGasExtraZVelocity;                                                     // 0x0B80 (size: 0x4)
    class USimulatedShooterFiringStrategy* _simulatedShooterFiringStrategyLongRange;  // 0x0B88 (size: 0x8)
    class USimulatedShooterFiringStrategy* _simulatedShooterFiringStrategyRailgun;    // 0x0B90 (size: 0x8)
    class USimulatedShooterFiringStrategy* _simulatedShooterFiringStrategyLongRangeSP; // 0x0B98 (size: 0x8)
    class USimulatedShooterFiringStrategy* _simulatedShooterFiringStrategyRailgunSP;  // 0x0BA0 (size: 0x8)
    class UParticleSystem* _explosionParticles;                                       // 0x0BB0 (size: 0x8)
    class UAkAudioEvent* _explosionAudioEvent;                                        // 0x0BB8 (size: 0x8)
    TArray<FDropshipDamageEffectData> _damageParticleEffectsPSData;                   // 0x0BC0 (size: 0x10)
    TArray<FName> _damageParticleSockets;                                             // 0x0C20 (size: 0x10)
    class UAkAudioEvent* _onZeroHealthLeaveAudio;                                     // 0x0C38 (size: 0x8)
    FName _cameraBone;                                                                // 0x0C40 (size: 0x8)
    class UStaticMeshComponent* _scannerLight;                                        // 0x0C48 (size: 0x8)
    FTransform _sensorTransform;                                                      // 0x0C50 (size: 0x30)
    bool _canDropSentry;                                                              // 0x0C80 (size: 0x1)
    bool _shouldAddSentryToRogueCharacters;                                           // 0x0C81 (size: 0x1)
    FTransform _droppableSentryInitialTransform;                                      // 0x0C90 (size: 0x30)
    FVector _droppableSentryDropLocation;                                             // 0x0CC0 (size: 0xC)
    FName _droppableSentryBone;                                                       // 0x0CCC (size: 0x8)
    float _timeToStraightenSentry;                                                    // 0x0CD4 (size: 0x4)
    class USkeletalMesh* _sentrySkeletalMesh;                                         // 0x0CE0 (size: 0x8)
    class USkeletalMeshComponent* _droppableSentryMeshComponent;                      // 0x0CE8 (size: 0x8)
    TSubclassOf<class UDropshipDroppableSentryAnimInstance> _droppableSentryAnimationBlueprint; // 0x0CF0 (size: 0x8)
    class UCurveVector* _droppableSentryRelativeLocationCurve;                        // 0x0CF8 (size: 0x8)
    ESentrySpawnFlag _sentrySpawnFlag;                                                // 0x0D00 (size: 0x1)
    TSoftClassPtr<ASentry2> _spawnableSentryClass;                                    // 0x0D08 (size: 0x28)
    class UNiagaraSystem* _engineParticles;                                           // 0x0D98 (size: 0x8)
    FName _engineParticleRAttachPoint;                                                // 0x0DA0 (size: 0x8)
    class UNiagaraComponent* _engineParticleComponentR;                               // 0x0DA8 (size: 0x8)
    FName _engineParticleLAttachPoint;                                                // 0x0DB0 (size: 0x8)
    class UNiagaraComponent* _engineParticleComponentL;                               // 0x0DB8 (size: 0x8)
    class UNiagaraSystem* _sideEnginesParticles;                                      // 0x0DC0 (size: 0x8)
    FName _sideEngineParticleURAttachPoint;                                           // 0x0DC8 (size: 0x8)
    class UNiagaraComponent* _sideEngineParticleComponentUR;                          // 0x0DD0 (size: 0x8)
    FName _sideEngineParticleULAttachPoint;                                           // 0x0DD8 (size: 0x8)
    class UNiagaraComponent* _sideEngineParticleComponentUL;                          // 0x0DE0 (size: 0x8)
    FName _sideEngineParticleDRAttachPoint;                                           // 0x0DE8 (size: 0x8)
    class UNiagaraComponent* _sideEngineParticleComponentDR;                          // 0x0DF0 (size: 0x8)
    FName _sideEngineParticleDLAttachPoint;                                           // 0x0DF8 (size: 0x8)
    class UNiagaraComponent* _sideEngineParticleComponentDL;                          // 0x0E00 (size: 0x8)
    class UNiagaraSystem* _sideRadiatorParticles;                                     // 0x0E08 (size: 0x8)
    FName _sideRadiatorParticleRAttachPoint;                                          // 0x0E10 (size: 0x8)
    class UNiagaraComponent* _sideRadiatorParticleComponentR;                         // 0x0E18 (size: 0x8)
    FName _sideRadiatorParticleLAttachPoint;                                          // 0x0E20 (size: 0x8)
    class UNiagaraComponent* _sideRadiatorParticleComponentL;                         // 0x0E28 (size: 0x8)
    float _engineParticlesMaxAcceleration;                                            // 0x0E30 (size: 0x4)
    float _engineParticleStrengthChangePerSecond;                                     // 0x0E34 (size: 0x4)
    float _engineParticleStrengthBackwardsMovementDotProductValueMultiplier;          // 0x0E38 (size: 0x4)
    float _engineParticleStrengthSideMovementDotProductValueMultiplier;               // 0x0E3C (size: 0x4)
    FString _engineParticleStrengthParameterName;                                     // 0x0E40 (size: 0x10)
    class UAkAudioEvent* _engineAudioEventStart;                                      // 0x0E58 (size: 0x8)
    class UAkAudioEvent* _engineAudioEventEnd;                                        // 0x0E60 (size: 0x8)
    float _maxEngineSoundIntensitySpeed;                                              // 0x0E68 (size: 0x4)
    class UAnimMontage* _dropshipMontages;                                            // 0x0E70 (size: 0x8)
    int32 _initialRandomSeed;                                                         // 0x0E80 (size: 0x4)
    uint16 _repDataPacked;                                                            // 0x0E86 (size: 0x2)

    void OnRep_SentrySpawnFlag();
    void OnRep_RepDataPacked();
    void OnRep_DropshipStance();
    void NetMulticast_RemoveKnownTarget(class AActor* Target);
    void NetMulticast_PlayRailgunFiredEffects();
    void NetMulticast_PlayProjectileFiredEffects();
    void NetMulticast_PlayDropshipMontage(EDropshipMontageType montageType);
    void NetMulticast_OnDropshipDeath();
    void NetMulticast_Explode();
    void NetMulticast_DestroySentryMeshComponent();
    void NetMulticast_CancelRailgunEffects();
    void NetMulticast_AddKnownTarget(class AActor* Target);
}; // Size: 0xE90

class ADropshipAIController : public AConZAIController
{
    float _turningSpeedPerDropshipStance;                                             // 0x045C (size: 0x28)
    float _minimumFlyingNavigationProximityPerDropshipStance;                         // 0x0484 (size: 0x28)
    float _minDetectableHearingStimulusStrength;                                      // 0x04AC (size: 0x4)
    float _threatLevelIncreasePerSecondSight;                                         // 0x04B0 (size: 0x4)
    float _threatLevelIncreasePerSecondHearing;                                       // 0x04B4 (size: 0x4)
    float _onDamageTakenGenerateSightStimulusChance;                                  // 0x04B8 (size: 0x4)
    float _threatLevelIncreasePerDamageValue;                                         // 0x04BC (size: 0x4)
    class UAISenseConfig_Sight* _currentSightSenseConfig;                             // 0x04C0 (size: 0x8)
    class UAISenseConfig_Hearing* _currentHearingSenseConfig;                         // 0x04C8 (size: 0x8)
    class UAISenseConfig_Sight* _sightSenseConfigDefault;                             // 0x04D0 (size: 0x8)
    class UAISenseConfig_Hearing* _hearingSenseConfigDefault;                         // 0x04D8 (size: 0x8)
    class UAISenseConfig_Sight* _sightSearchingGuardCargoSenseConfigDefault;          // 0x04E0 (size: 0x8)
    class UAISenseConfig_Hearing* _hearingSearchingGuardCargoSenseConfigDefault;      // 0x04E8 (size: 0x8)
    float _approachLocationHeight;                                                    // 0x0508 (size: 0x4)
    float _approachLocationXYDistance;                                                // 0x050C (size: 0x4)
    float _approachMovementSegmentMaxSize;                                            // 0x0510 (size: 0x4)
    float _externalMoveToMovementSegmentMaxSize;                                      // 0x0530 (size: 0x4)
    FFloatInterval _attackingFollowDistance2DInterval;                                // 0x0574 (size: 0x8)
    FFloatInterval _attackingFollowMoveToDistance2DInterval;                          // 0x057C (size: 0x8)
    float _attackingFloatHeight;                                                      // 0x0584 (size: 0x4)
    float _attackingAboveBBElementsExtraHeight;                                       // 0x0588 (size: 0x4)
    class UCurveFloat* _foeLocationPredictionStrengthVsDistanceToFoe;                 // 0x0590 (size: 0x8)
    float _outOfSightTimeToStartRelocating;                                           // 0x0598 (size: 0x4)
    FFloatInterval _relocateMoveToDistance;                                           // 0x059C (size: 0x8)
    FFloatInterval _combatRelocationCheckInterval;                                    // 0x05A4 (size: 0x8)
    float _combatRelocationChance;                                                    // 0x05AC (size: 0x4)
    float _attackFrequency;                                                           // 0x05B0 (size: 0x4)
    FFloatInterval _attackFrequencyMultiplier;                                        // 0x05B4 (size: 0x8)
    float _searchingAttackTargetControllerRotationVelocityThreshold;                  // 0x05BC (size: 0x4)
    float _attackModeWeights;                                                         // 0x05C0 (size: 0xC)
    FFloatInterval _attackModeChanceCheckTime;                                        // 0x05CC (size: 0x8)
    float _railgunAttackMinDistanceXY;                                                // 0x05D4 (size: 0x4)
    FFloatInterval _railgunAimTime;                                                   // 0x05D8 (size: 0x8)
    float _tearGasDistanceBetweenDrops;                                               // 0x05E0 (size: 0x4)
    int32 _tearGasMaxDrops;                                                           // 0x05E4 (size: 0x4)
    float _distanceFromTargetInFlyingVehicleToForceKeepStimulus;                      // 0x05E8 (size: 0x4)
    float _vehicleCombatAdaptMaxSpeedDistance;                                        // 0x05EC (size: 0x4)
    float _vehicleCombatCatchUpSpeed;                                                 // 0x05F0 (size: 0x4)
    float _vehicleCombatMinSpeed;                                                     // 0x05F4 (size: 0x4)
    FFloatInterval _attackedBaseElementDistanceInterval;                              // 0x0638 (size: 0x8)
    FFloatInterval _attackedBaseElementMoveToDistance2DInterval;                      // 0x0640 (size: 0x8)
    float _lineOfSightTimeWhileAttackingBBToSwitchToPlayer;                           // 0x0648 (size: 0x4)
    float _attackingBBFrequency;                                                      // 0x064C (size: 0x4)
    class UCurveFloat* _chanceToHitBBElementVsElementBoundsSizeSquared;               // 0x0650 (size: 0x8)
    float _bbDamagePerShot;                                                           // 0x0658 (size: 0x4)
    float _bbFoliageDestructionRadius;                                                // 0x065C (size: 0x4)
    float _sentryDropDistanceFromBaseBounds;                                          // 0x0660 (size: 0x4)
    float _sentryDropHeightAddition;                                                  // 0x0664 (size: 0x4)
    float _sentryDeploymentBaseSightCheckZOffset;                                     // 0x0668 (size: 0x4)
    FFloatInterval _timeUntilNextSearchLocationInterval;                              // 0x069C (size: 0x8)
    FFloatInterval _searchLocationDistanceFromReferenceLocationInterval;              // 0x06A4 (size: 0x8)
    FFloatInterval _timeUntilNextControlRotationChangeInterval;                       // 0x06AC (size: 0x8)
    FFloatInterval _timeInSearchingStateBeforeLeaving;                                // 0x06B4 (size: 0x8)
    float _pauseBetweenOnDamageTakenStimulusGeneration;                               // 0x06BC (size: 0x4)
    FFloatInterval _leaveInitialForwardOffset;                                        // 0x06C4 (size: 0x8)
    FFloatInterval _leaveForwardOffset;                                               // 0x06CC (size: 0x8)
    FFloatInterval _leaveInitialUpwardOffset;                                         // 0x06D4 (size: 0x8)
    FFloatInterval _leaveUpwardOffset;                                                // 0x06DC (size: 0x8)
    float _minDistanceBetweenSingleBBFlag;                                            // 0x0720 (size: 0x4)
    int32 _foliageDestroyedPerShot;                                                   // 0x0724 (size: 0x4)
    FFloatInterval _delayedLeaveTimeAfterDeploymentInterval;                          // 0x0728 (size: 0x8)
    float _sentryDropshipDistanceSquaredToChangeStance;                               // 0x0734 (size: 0x4)
    FFloatInterval _flybyDistance;                                                    // 0x0748 (size: 0x8)
    float _flyByMoveToMovementSegmentMaxSize;                                         // 0x0750 (size: 0x4)
    float _flyByTearGaseDistanceBetweenDrops;                                         // 0x0754 (size: 0x4)
    float _flyByFlyHeight;                                                            // 0x0758 (size: 0x4)
    float _flyByMaxGrenadeDrops;                                                      // 0x075C (size: 0x4)

}; // Size: 0x7A8

class ADynamicNavModifierVolumeActor : public AActor
{
    class UBoxComponent* _volumeBoxComponent;                                         // 0x0220 (size: 0x8)

}; // Size: 0x228

class AEMPGrenadeItem : public AGrenadeItem
{
    float _radius;                                                                    // 0x0A70 (size: 0x4)
    float _expansionSpeed;                                                            // 0x0A74 (size: 0x4)
    class UNiagaraSystem* _empEffect;                                                 // 0x0A78 (size: 0x8)
    class UNiagaraSystem* _electricArcsEffect;                                        // 0x0A80 (size: 0x8)
    FName _onPinPulledMaterialParamName;                                              // 0x0A88 (size: 0x8)
    FFloatInterval _onPinPulledMaterialParamValue;                                    // 0x0A90 (size: 0x8)
    class UAkAudioEvent* _electricArcAudioEvent;                                      // 0x0A98 (size: 0x8)
    float _arcAudioPlayDistance;                                                      // 0x0AA0 (size: 0x4)

}; // Size: 0xAB0

class AEffectOverTimeDealer : public AActor
{
    double _budget;                                                                   // 0x0220 (size: 0x8)
    float _timeDilation;                                                              // 0x0228 (size: 0x4)

}; // Size: 0x2A8

class AElectricityGeneratorItem : public AItem
{
    class UBasicGameResourceContainerComponent* _resourceContainerComponent;          // 0x09B8 (size: 0x8)
    class URangedResourceProviderComponentContinousAmount* _rangedResourceProviderComponent; // 0x09C0 (size: 0x8)
    class UAkAudioEvent* _turnOnAudioEvent;                                           // 0x09C8 (size: 0x8)
    class UAkAudioEvent* _turnOffAudioEvent;                                          // 0x09D0 (size: 0x8)
    bool _isTurnedOn;                                                                 // 0x09D8 (size: 0x1)
    float _power;                                                                     // 0x09DC (size: 0x4)
    float _load;                                                                      // 0x09E0 (size: 0x4)
    float _EMInterferenceDisabledTime;                                                // 0x09E4 (size: 0x4)

    void RangedResourceProvider_ResourceAmountChanged(class URangedResourceProviderComponent* Component, float Value);
    void RangedResourceProvider_AvailableResourceAmountChanged(class URangedResourceProviderComponent* Component, float Value);
    void OnRep_IsTurnedOn();
    void OnComponentDeactivated(class UActorComponent* Component);
    void OnComponentActivated(class UActorComponent* Component, bool wasReset);
}; // Size: 0x9F0

class AEncounterStaticZone : public AActor
{
    class USceneComponent* _root;                                                     // 0x0220 (size: 0x8)
    class UStaticMeshComponent* _visualizationSphere;                                 // 0x0228 (size: 0x8)
    class UStaticMeshComponent* _zoneActivationVisualizationSphere;                   // 0x0230 (size: 0x8)
    class UStaticMeshComponent* _LPCZoneActivationVisualizationSphere;                // 0x0238 (size: 0x8)
    class UTextRenderComponent* _zoneNameTextRenderComponent;                         // 0x0240 (size: 0x8)
    float _semiXAxisSize;                                                             // 0x0248 (size: 0x4)
    float _semiYAxisSize;                                                             // 0x024C (size: 0x4)
    float _zoneActivationRadiusMultiplier;                                            // 0x0250 (size: 0x4)
    float _LPCZoneActivationRadiusMultiplier;                                         // 0x0254 (size: 0x4)
    TArray<FTransform> _flyingSpawnedCharacterApproachLocations;                      // 0x0258 (size: 0x10)
    class UEncounterZoneData* _zoneData;                                              // 0x0268 (size: 0x8)
    class UEncounterZoneData* _lpcZoneData;                                           // 0x0270 (size: 0x8)
    TArray<FEncounterSubZoneEditorData> _subZones;                                    // 0x0278 (size: 0x10)
    class UMaterialInstance* _mainVisualizationMaterial;                              // 0x0288 (size: 0x8)
    class UMaterialInstance* _zoneActivationVisualizationMaterial;                    // 0x0290 (size: 0x8)
    class UMaterialInstance* _LPCZoneActivationVisualizationMaterial;                 // 0x0298 (size: 0x8)

}; // Size: 0x2A0

class AEquipmentItem : public AItem
{
    uint32 MinRange;                                                                  // 0x09A8 (size: 0x4)
    uint32 MaxRange;                                                                  // 0x09AC (size: 0x4)
    uint32 MinDamage;                                                                 // 0x09B0 (size: 0x4)
    uint32 MaxDamage;                                                                 // 0x09B4 (size: 0x4)
    uint32 AP;                                                                        // 0x09B8 (size: 0x4)

}; // Size: 0x9C0

class AExplosiveTrapItem : public ATrapItem
{
    float _detonationDelay;                                                           // 0x0AE0 (size: 0x4)
    FVector _trapForwardVector;                                                       // 0x0AE4 (size: 0xC)
    float _netCullDistanceSquaredMeters;                                              // 0x0AF0 (size: 0x4)
    class UAkAudioEvent* _triggerSound;                                               // 0x0AF8 (size: 0x8)
    class UAkAudioEvent* _detonationSound;                                            // 0x0B00 (size: 0x8)
    class UParticleSystem* _detonationParticles;                                      // 0x0B08 (size: 0x8)
    FTransform _detonationParticlesTransform;                                         // 0x0B10 (size: 0x30)
    bool _hasPrimaryExplosion;                                                        // 0x0B40 (size: 0x1)
    float _primaryBaseDamage;                                                         // 0x0B44 (size: 0x4)
    float _primaryMinimumDamage;                                                      // 0x0B48 (size: 0x4)
    float _primaryDamageInnerRadius;                                                  // 0x0B4C (size: 0x4)
    float _primaryDamageOuterRadius;                                                  // 0x0B50 (size: 0x4)
    float _primaryDamageMinAngleDeg;                                                  // 0x0B54 (size: 0x4)
    float _primaryDamageMaxAngleDeg;                                                  // 0x0B58 (size: 0x4)
    float _primaryDamageChanceMultiplier;                                             // 0x0B5C (size: 0x4)
    float _primaryDamageMinChance;                                                    // 0x0B60 (size: 0x4)
    float _primaryDamageMaxChance;                                                    // 0x0B64 (size: 0x4)
    float _primaryDamageFalloff;                                                      // 0x0B68 (size: 0x4)
    float _primaryDamageAngleFalloff;                                                 // 0x0B6C (size: 0x4)
    FTargetTypeDamageMultiplier _primaryTargetTypeMultiplier;                         // 0x0B70 (size: 0x10)
    bool _hasSecondaryExplosion;                                                      // 0x0B80 (size: 0x1)
    float _secondaryBaseDamage;                                                       // 0x0B84 (size: 0x4)
    float _secondaryMinimumDamage;                                                    // 0x0B88 (size: 0x4)
    float _secondaryDamageInnerRadius;                                                // 0x0B8C (size: 0x4)
    float _secondaryDamageOuterRadius;                                                // 0x0B90 (size: 0x4)
    float _secondaryDamageFalloff;                                                    // 0x0B94 (size: 0x4)
    FTargetTypeDamageMultiplier _secondaryTargetTypeMultiplier;                       // 0x0B98 (size: 0x10)
    bool _instantlyDestroysStructures;                                                // 0x0BA8 (size: 0x1)
    float _structureDestructionRadius;                                                // 0x0BAC (size: 0x4)
    float _minimalElementAreaCovered;                                                 // 0x0BB0 (size: 0x4)
    float _structureDestructionMinAngleDeg;                                           // 0x0BB4 (size: 0x4)
    float _structureDestructionMaxAngleDeg;                                           // 0x0BB8 (size: 0x4)
    float _explosionDamagePositionOffset;                                             // 0x0BBC (size: 0x4)
    float _explosionForce;                                                            // 0x0BC0 (size: 0x4)

    void Detonate();
}; // Size: 0xBE0

class AFakeItem : public AActor
{
    class UStaticMeshComponent* _staticMesh;                                          // 0x0228 (size: 0x8)
    class UNiagaraComponent* _niagaraComponent;                                       // 0x0230 (size: 0x8)
    FVector _spawnLocationOffset;                                                     // 0x0238 (size: 0xC)
    FRotator _spawnRotationOffset;                                                    // 0x0244 (size: 0xC)
    float _spawnRotationRandomization;                                                // 0x0250 (size: 0x4)
    float _lifeTimeAfterInteraction;                                                  // 0x0254 (size: 0x4)
    float _additionalLifetimeForParticles;                                            // 0x0258 (size: 0x4)
    class UAkAudioEvent* _interactionAudioEvent;                                      // 0x0260 (size: 0x8)
    class UMaterialInterface* _niagaraParticleMaterial;                               // 0x0268 (size: 0x8)
    float _niagaraParticleForce;                                                      // 0x0270 (size: 0x4)
    float _niagaraParticleAmount;                                                     // 0x0274 (size: 0x4)
    TArray<class UMaterialInstanceDynamic*> _meshMaterials;                           // 0x0278 (size: 0x10)
    class UMaterialInstanceDynamic* _particleMaterial;                                // 0x0288 (size: 0x8)

}; // Size: 0x298

class AFireItem : public AEquipmentItem
{
    float _touchDamage;                                                               // 0x09C0 (size: 0x4)
    class UHeatSourceItemComponent* _heatSourceItemComponent;                         // 0x09C8 (size: 0x8)

}; // Size: 0x9D0

class AFireplaceItem : public AFireItem
{
    class UStaticMeshComponent* _collisionMesh;                                       // 0x09D0 (size: 0x8)
    float _fireDamageProcessingPeriod;                                                // 0x09D8 (size: 0x4)
    float _fireBaseDamageToItemsPerSecond;                                            // 0x09E0 (size: 0x4)
    float _fireDamageRadius;                                                          // 0x09E4 (size: 0x4)
    int32 _minBurningStageForManualPutOut;                                            // 0x09E8 (size: 0x4)

}; // Size: 0x9F0

class AFireworksItem : public AItem
{
    bool _isFiring;                                                                   // 0x09A8 (size: 0x1)
    int32 _totalShells;                                                               // 0x09B0 (size: 0x4)
    float _secondsBetweenLaunches;                                                    // 0x09C0 (size: 0x4)
    float _noiseLoudnessOnLaunch;                                                     // 0x09C4 (size: 0x4)
    bool _canBePickedUpWhenLit;                                                       // 0x09C8 (size: 0x1)
    bool _hasFuse;                                                                    // 0x09C9 (size: 0x1)

    void OnRep_IsFiring();
    void OnFuseLit();
    void LaunchShell();
    void AutoLaunchShells();
}; // Size: 0x9D0

class AFireworksTrapItem : public ATrapItem
{
    class UAkAudioEvent* _triggerSound;                                               // 0x0AE0 (size: 0x8)
    int32 _numShells;                                                                 // 0x0AE8 (size: 0x4)
    float _shellLaunchPeriod;                                                         // 0x0AEC (size: 0x4)
    float _detonationDelay;                                                           // 0x0AF0 (size: 0x4)
    bool _isFiring;                                                                   // 0x0B01 (size: 0x1)

    void OnRep_IsFiring();
    void LaunchShell();
    void Detonate();
}; // Size: 0xB10

class AFishSchoolActor : public AActor
{
    EFishBehavior _currentState;                                                      // 0x0220 (size: 0x1)
    class UCapsuleComponent* _capsuleComponent;                                       // 0x0250 (size: 0x8)
    class UFishInstancedStaticMeshComponent* _schoolInstancedStaticMeshComponent;     // 0x0258 (size: 0x8)
    float _minDistanceToTarget;                                                       // 0x028C (size: 0x4)
    float _boundsInflation;                                                           // 0x0290 (size: 0x4)
    float _findPathBypassMultiplier;                                                  // 0x0294 (size: 0x4)
    int32 _maxTimesSameDestinationAllowed;                                            // 0x0298 (size: 0x4)
    float _maxTimePerDestinationMultiplier;                                           // 0x029C (size: 0x4)
    float _schoolMovementRecoveryTurningSpeed;                                        // 0x02A4 (size: 0x4)
    float _schoolMovementRecoveryAcceleration;                                        // 0x02A8 (size: 0x4)
    float _schoolMovementRecoveryDeceleration;                                        // 0x02AC (size: 0x4)
    float _schoolCloseToSurfaceTurningSpeed;                                          // 0x02B0 (size: 0x4)
    float _schoolCloseToSurfaceAcceleration;                                          // 0x02B4 (size: 0x4)
    float _schoolCloseToSurfaceDeceleration;                                          // 0x02B8 (size: 0x4)
    float _surfaceOffset;                                                             // 0x02BC (size: 0x4)
    float _upperForbiddenZoneDepthPercentage;                                         // 0x02C4 (size: 0x4)
    float _swimmingDepthPercentage;                                                   // 0x02C8 (size: 0x4)
    float _lowerForbiddenZoneDepthPercentage;                                         // 0x02CC (size: 0x4)
    class UParticleSystem* _waterParticles;                                           // 0x02D0 (size: 0x8)
    float _waterParticlesInterval;                                                    // 0x02D8 (size: 0x4)
    class UParticleSystemComponent* _waterParticlesComponent;                         // 0x02E0 (size: 0x8)
    int32 _forcedNumberOfGroups;                                                      // 0x02EC (size: 0x4)
    float _groupSpeed;                                                                // 0x02F0 (size: 0x4)
    float _groupSeparationSpeed;                                                      // 0x02F4 (size: 0x4)
    float _groupCatchUpSpeed;                                                         // 0x02F8 (size: 0x4)
    float _groupSeparationDistance;                                                   // 0x02FC (size: 0x4)
    float _groupSeparationTime;                                                       // 0x0304 (size: 0x4)
    int32 _minNumberOfFish;                                                           // 0x0308 (size: 0x4)
    int32 _maxNumberOfFish;                                                           // 0x030C (size: 0x4)
    float _maxFishDistance;                                                           // 0x0314 (size: 0x4)
    float _fishSeparationDistance;                                                    // 0x031C (size: 0x4)
    float _fishSeparationTime;                                                        // 0x0320 (size: 0x4)
    float _fishTurnSpeedRangeModifier;                                                // 0x0328 (size: 0x4)
    float _fishMinScale;                                                              // 0x032C (size: 0x4)
    float _fishMaxScale;                                                              // 0x0330 (size: 0x4)
    float _fishNormalSpeed;                                                           // 0x0334 (size: 0x4)
    float _fishSeparationSpeed;                                                       // 0x0338 (size: 0x4)
    float _fishCatchUpSpeed;                                                          // 0x033C (size: 0x4)
    float _fishMaxSpeed;                                                              // 0x0340 (size: 0x4)
    float _fishAcceleration;                                                          // 0x0344 (size: 0x4)
    float _fishDeceleration;                                                          // 0x0348 (size: 0x4)
    FVector _moveToLocationRep;                                                       // 0x0398 (size: 0xC)
    TMap<class EFishBehavior, class FFishStateParameters> _behaviorMap;               // 0x03B0 (size: 0x50)
    FVector _randomMovementExtent;                                                    // 0x0400 (size: 0xC)
    float _fleeingDistanceFromEnemy;                                                  // 0x040C (size: 0x4)
    float _fleeingPathLength;                                                         // 0x0410 (size: 0x4)
    float _returnToNormalBehaviorDistance;                                            // 0x0414 (size: 0x4)
    float _schoolInternalMovementRelevancyDistanceSquared;                            // 0x0418 (size: 0x4)
    float _fadeInTime;                                                                // 0x042C (size: 0x4)
    float _fadeOutTime;                                                               // 0x0434 (size: 0x4)

    void OnRep_MoveToLocationRep();
    void OnRep_CurrentState();
}; // Size: 0x480

class AFishingAttachment : public AItem
{
    class UStaticMesh* _staticMeshWhenAttached;                                       // 0x09A8 (size: 0x8)

    void Unequip();
    class UStaticMesh* GetStaticMeshWhenAttached();
    class USkeletalMesh* GetSkeletalMeshWhenAttached();
    class AFishingRod* GetOwningFishingRod();
    void Equip(class AFishingRod* FishingRod);
}; // Size: 0x9D0

class AFishingAttachmentBait : public AFishingAttachment
{
    TMap<EFishSpecies, float> _baitCatchingChanceMultiplier;                          // 0x09C8 (size: 0x50)

}; // Size: 0xA20

class AFishingAttachmentFloater : public AFishingAttachment
{
    FBuoyancy _buoyancy;                                                              // 0x09C8 (size: 0x70)
    int32 _floaterBreakSegmentIndex;                                                  // 0x0A38 (size: 0x4)
    float _sinkSpeed;                                                                 // 0x0A3C (size: 0x4)
    float _sinkSpeedDuringFastReel;                                                   // 0x0A40 (size: 0x4)
    float _minDistanceForSizeIncrease;                                                // 0x0A44 (size: 0x4)
    float _maxDistanceForSizeIncrease;                                                // 0x0A48 (size: 0x4)
    float _maxScale;                                                                  // 0x0A4C (size: 0x4)
    float _velocityThreshold;                                                         // 0x0A50 (size: 0x4)
    float _shouldCheckVelocityThreshold;                                              // 0x0A54 (size: 0x4)
    float _movingRippleThreshold;                                                     // 0x0A58 (size: 0x4)
    FVector _floaterWaterCheckOffset;                                                 // 0x0A5C (size: 0xC)
    float _sendStateInterval;                                                         // 0x0A68 (size: 0x4)
    class UParticleSystem* _hitWaterParticles;                                        // 0x0AE0 (size: 0x8)
    class UParticleSystemComponent* _rippleParticleSystemComponent;                   // 0x0AE8 (size: 0x8)
    class UParticleSystemComponent* _movingRippleParticleSystemComponent;             // 0x0AF0 (size: 0x8)
    class UParticleSystemComponent* _sinkParticleSystemComponent;                     // 0x0AF8 (size: 0x8)
    class UMaterialInterface* _scaledMaterial;                                        // 0x0B00 (size: 0x8)
    class UMaterialInterface* _storedMaterial;                                        // 0x0B08 (size: 0x8)

    void Server_SendState(float DeltaTime, const FRigidBodyState& State);
}; // Size: 0xB30

class AFishingAttachmentHook : public AFishingAttachment
{
    float _visibilityFactor;                                                          // 0x09C8 (size: 0x4)
    float _maxTension;                                                                // 0x09CC (size: 0x4)
    float _hookedWeight;                                                              // 0x09D0 (size: 0x4)
    FTransform _hookedFishTransform;                                                  // 0x09E0 (size: 0x30)
    class UStaticMeshComponent* _hookedFishMesh;                                      // 0x0A10 (size: 0x8)
    FName _hookedFishHookPositionName;                                                // 0x0A18 (size: 0x8)
    float _checkIfFishIsHookedRate;                                                   // 0x0A20 (size: 0x4)
    float _timeToLooseTheFishWhenHookBitten;                                          // 0x0A24 (size: 0x4)
    class UParticleSystemComponent* _movingRippleParticleSystemComponent;             // 0x0A28 (size: 0x8)
    class UParticleSystemComponent* _splashParticleSystemComponent;                   // 0x0A30 (size: 0x8)

}; // Size: 0xA50

class AFishingAttachmentReel : public AFishingAttachment
{
    class USkeletalMeshComponent* SkeletalMesh;                                       // 0x09C8 (size: 0x8)
    FName ReelHandIK;                                                                 // 0x09D0 (size: 0x8)
    float _reelHandleAcceleration;                                                    // 0x09D8 (size: 0x4)
    float _fastReelHandleAcceleration;                                                // 0x09DC (size: 0x4)
    float _reelFriction;                                                              // 0x09E0 (size: 0x4)
    float _fastReelFriction;                                                          // 0x09E4 (size: 0x4)
    float _reelVelocityThreshold;                                                     // 0x09E8 (size: 0x4)
    float _reelVelocityLimit;                                                         // 0x09EC (size: 0x4)
    float _reelAccelerationModifier;                                                  // 0x09F0 (size: 0x4)
    FTransform _leftHandOffset;                                                       // 0x0A00 (size: 0x30)
    class UAnimMontage* _lockAfterLongCastAnimMontage;                                // 0x0A30 (size: 0x8)
    class UAnimMontage* _lockAfterShortCastAnimMontage;                               // 0x0A38 (size: 0x8)
    class UAnimMontage* _reelCastAnimMontage;                                         // 0x0A40 (size: 0x8)
    class UAnimSequenceBase* _reelingAnimSequence;                                    // 0x0A48 (size: 0x8)
    class UAkAudioEvent* _reelingStartAudioEvent;                                     // 0x0A50 (size: 0x8)
    class UAkAudioEvent* _reelingEndAudioEvent;                                       // 0x0A58 (size: 0x8)
    FVector _leftHandIKLocationCache;                                                 // 0x0A6C (size: 0xC)

}; // Size: 0xA80

class AFishingAttachmentSinker : public AFishingAttachment
{
}; // Size: 0x9D0

class AFishingAttachmentWire : public AFishingAttachment
{
    FName ReelSocketName;                                                             // 0x09C8 (size: 0x8)
    class UFishingWireComponent* _wireComponent;                                      // 0x09D0 (size: 0x8)
    TSubclassOf<class UFishingWireComponent> _wireComponentClass;                     // 0x09D8 (size: 0x8)
    class UParticleSystemComponent* _rippleParticleSystemComponent;                   // 0x09E0 (size: 0x8)
    float _visibilityFactor;                                                          // 0x09E8 (size: 0x4)
    float _wireWeightThreshold;                                                       // 0x09EC (size: 0x4)
    float _wireThickness;                                                             // 0x09F0 (size: 0x4)
    float _minWireLength;                                                             // 0x09F4 (size: 0x4)
    float _maxWireLength;                                                             // 0x09F8 (size: 0x4)
    float _reelInTensionThreshold;                                                    // 0x09FC (size: 0x4)
    float _wireBreakThreshold;                                                        // 0x0A00 (size: 0x4)
    float _instantWireBreakThreshold;                                                 // 0x0A04 (size: 0x4)
    float _wireBreakTimerThreshold;                                                   // 0x0A08 (size: 0x4)
    float _wireStrength;                                                              // 0x0A0C (size: 0x4)
    bool _simulate;                                                                   // 0x0A10 (size: 0x1)

}; // Size: 0xA40

class AFishingRod : public AItem
{
    FFishingRodAttachmentAdded AttachmentAdded;                                       // 0x09A8 (size: 0x10)
    void AttachmentAddedSignature(class AFishingRod* sender, class AFishingAttachment* Attachment);
    FFishingRodAttachmentRemoved AttachmentRemoved;                                   // 0x09B8 (size: 0x10)
    void AttachmentRemovedSignature(class AFishingRod* sender, class AFishingAttachment* Attachment);
    class USkeletalMeshComponent* SkeletalMesh;                                       // 0x09C8 (size: 0x8)
    float FishingAreaRadius;                                                          // 0x09D0 (size: 0x4)
    class APrisoner* _fishingRodOwner;                                                // 0x09D8 (size: 0x8)
    TArray<class AFishingAttachment*> _fishingAttachmentsReplicated;                  // 0x09F8 (size: 0x10)
    float _reelingAmount;                                                             // 0x0A08 (size: 0x4)
    class UFishSpeciesData* _fishSpeciesData;                                         // 0x0A58 (size: 0x8)
    class AItem* _minigameCaughtItem;                                                 // 0x0AD8 (size: 0x8)
    class AFishingTrophyActor* _minigameTrophyActor;                                  // 0x0AE0 (size: 0x8)
    bool _isInTrophyState;                                                            // 0x0AE9 (size: 0x1)
    float _floaterSimulatedWeight;                                                    // 0x0AF0 (size: 0x4)
    float _floaterSimulatedWeightDuringFastReeling;                                   // 0x0AF4 (size: 0x4)
    float _shortCastingPower;                                                         // 0x0AF8 (size: 0x4)
    float _minCastingPower;                                                           // 0x0AFC (size: 0x4)
    float _maxCastingPower;                                                           // 0x0B00 (size: 0x4)
    float _safeAreaRadius;                                                            // 0x0B04 (size: 0x4)
    float _fishNotBitingAreaRadius;                                                   // 0x0B08 (size: 0x4)
    float _minigameSafeAreaRadius;                                                    // 0x0B0C (size: 0x4)
    float _baseReelingSpeed;                                                          // 0x0B10 (size: 0x4)
    float _fastReelingSpeed;                                                          // 0x0B14 (size: 0x4)
    float _defaultWaterVelocityMultiplier;                                            // 0x0B18 (size: 0x4)
    float _shortCastingAngle;                                                         // 0x0B1C (size: 0x4)
    float _longCastingAngle;                                                          // 0x0B20 (size: 0x4)
    float _fishingLineTensionToHookThreshold;                                         // 0x0B24 (size: 0x4)
    FTransform _caughtFishOffsetTransform;                                            // 0x0B30 (size: 0x30)
    TSubclassOf<class AFishingTrophyActor> _trophyActorClass;                         // 0x0B60 (size: 0x8)
    float _sendStateInterval;                                                         // 0x0B68 (size: 0x4)
    float _fishIdleTimeAtStart;                                                       // 0x0BE0 (size: 0x4)
    float _fishStruggleOffsetAmplitude;                                               // 0x0BE4 (size: 0x4)
    float _fishStruggleOffsetPeriod;                                                  // 0x0BE8 (size: 0x4)
    float _minDistanceToApplyStruggleOffset;                                          // 0x0BEC (size: 0x4)
    float _fishToSurfaceRadius;                                                       // 0x0BF0 (size: 0x4)
    float _fishGenericSpeed;                                                          // 0x0BF4 (size: 0x4)
    float _minFishDirectionChangeTime;                                                // 0x0BF8 (size: 0x4)
    float _maxFishDirectionChangeTime;                                                // 0x0BFC (size: 0x4)
    float _fishDrainStaminaModifier;                                                  // 0x0C00 (size: 0x4)
    float _fishRecoveryStaminaModifier;                                               // 0x0C04 (size: 0x4)
    float _lineBreakConstant;                                                         // 0x0C08 (size: 0x4)
    float _reelingTensionModifier;                                                    // 0x0C0C (size: 0x4)
    float _fishRecoveryRadiusBuffer;                                                  // 0x0C10 (size: 0x4)
    float _fishUnderWaterSurfaceOffset;                                               // 0x0C14 (size: 0x4)
    float _fishStrengthModifier;                                                      // 0x0C18 (size: 0x4)
    float _fishingBoundsAngle;                                                        // 0x0C1C (size: 0x4)
    float _fishingBoundsRadius;                                                       // 0x0C20 (size: 0x4)
    float _fishingLineInTensionDamageAmount;                                          // 0x0C24 (size: 0x4)
    float _fishingLineOnBreakDamageAmount;                                            // 0x0C28 (size: 0x4)
    float _fishStuckTimeThreshold;                                                    // 0x0C2C (size: 0x4)
    float _fishNewDirectionAngleStep;                                                 // 0x0C30 (size: 0x4)
    bool _useRodAsRootLocation;                                                       // 0x0C34 (size: 0x1)
    class UAkAudioEvent* _castingObjectDropToWaterAudioEvent;                         // 0x0C38 (size: 0x8)
    class UAkAudioEvent* _fishHookedAudioEvent;                                       // 0x0C40 (size: 0x8)
    class UAkAudioEvent* _wireBreakAudioEvent;                                        // 0x0C48 (size: 0x8)
    class UAkAudioEvent* _wireTensionStartAudioEvent;                                 // 0x0C50 (size: 0x8)
    class UAkAudioEvent* _wireTensionEndAudioEvent;                                   // 0x0C58 (size: 0x8)
    class UAkAudioEvent* _menuButtonClickAudioEvent;                                  // 0x0C60 (size: 0x8)
    float _castPower;                                                                 // 0x0C68 (size: 0x4)
    bool _shouldShortCast;                                                            // 0x0C6C (size: 0x1)
    float _minFishRecoveryTime;                                                       // 0x0C7C (size: 0x4)
    float _maxFishRecoveryTime;                                                       // 0x0C80 (size: 0x4)
    float _minFishStaminaDrainTime;                                                   // 0x0C84 (size: 0x4)
    float _maxFishStaminaDrainTime;                                                   // 0x0C88 (size: 0x4)
    bool _randomFishDrainAndRecovery;                                                 // 0x0C8C (size: 0x1)
    bool _isFastReeling;                                                              // 0x0C94 (size: 0x1)

    void Server_SwapAttachments(class AFishingAttachment* oldAttachment, class AFishingAttachment* newAttachment);
    void Server_SpawnCaughtFish(EFishSpecies fishSpecies, float caughtFishMass, float caughtFishSize);
    void Server_SetShouldShortCast(bool Value);
    void Server_SetFishingState(EFishingState fishingState);
    void Server_SetCastPower(float Value);
    void Server_SendState(float DeltaTime, const FRigidBodyState& State, float reelingAmount, bool isFastReeling);
    void Server_ResetAttachments();
    void Server_RemoveAttachment(class AFishingAttachment* Attachment);
    void Server_ReleaseCastingObject(FVector Location, FVector Direction, float castingPower, EFishingState nextState);
    void Server_OnWireBreak();
    void Server_OnLeaveActiveFishingState();
    void Server_OnEnterActiveFishingState();
    void Server_InitiateCast();
    void Server_HookFish();
    void Server_EnterTrophyState();
    void Server_CleanupTrophyState(bool keptFish);
    void Server_CheckIfFishBitBait(const FVector& Location);
    void Server_AddAttachment(class AFishingAttachment* Attachment);
    void RemoveAttachmentLocal(class AFishingAttachment* Attachment);
    void RemoveAttachment(class AFishingAttachment* Attachment);
    void OnRep_MinigameTrophy();
    void OnRep_MinigameItem();
    void OnRep_FishingAttachmentsReplicated();
    void OnReleaseFishClicked();
    void OnKeepFishClicked();
    void OnFishingActionAnimNotify(EFishingActionNotifyType notifyType);
    void NetMulticast_SetHookBitten(bool Value, class UFishSpeciesData* speciesData);
    void NetMulticast_ResetAttachments();
    void NetMulticast_ReleaseCastingObject(FVector Location, FVector Direction, float castingPower, EFishingState nextState);
    void NetMulticast_OnWireBreak();
    void NetMulticast_OnLeaveActiveFishingState();
    void NetMulticast_OnEnterActiveFishingState();
    void NetMulticast_InitiateCast();
    void NetMulticast_HookFish();
    class APrisoner* GetFishingRodOwner();
    bool CanAddAttachment(const class AFishingAttachment* Attachment);
    void AttachmentRemovedSignature__DelegateSignature(class AFishingRod* sender, class AFishingAttachment* Attachment);
    void AttachmentAddedSignature__DelegateSignature(class AFishingRod* sender, class AFishingAttachment* Attachment);
    void AddAttachmentLocal(class AFishingAttachment* Attachment, bool attach);
    void AddAttachment(class AFishingAttachment* Attachment, bool attach, bool removeExistingOnTheSameMountType);
}; // Size: 0xCC0

class AFishingTrophyActor : public AActor
{
    class USkeletalMeshComponent* _skeletalMeshComponent;                             // 0x0220 (size: 0x8)
    class UStaticMeshComponent* _staticMeshComponent;                                 // 0x0228 (size: 0x8)

}; // Size: 0x230

class AFishingZoneIndicator : public AActor
{
    class USceneComponent* _sceneComponent;                                           // 0x0220 (size: 0x8)
    class UParticleSystemComponent* _fishIconParticles;                               // 0x0228 (size: 0x8)
    class UParticleSystemComponent* _rippleParticles;                                 // 0x0230 (size: 0x8)
    float _radius;                                                                    // 0x0238 (size: 0x4)
    float _catchingChanceMultiplier;                                                  // 0x023C (size: 0x4)

    void OnRep_Radius();
}; // Size: 0x240

class AFlagAreaVisualizer : public AActor
{
    class UStaticMeshComponent* _staticMeshComponent;                                 // 0x0220 (size: 0x8)

    void DestroyVisualizer();
}; // Size: 0x230

class AFlagElementsExpansionItem : public AItem
{
    int32 _numberOfElements;                                                          // 0x09A8 (size: 0x4)

}; // Size: 0x9B0

class AFlagSpecificRaidProtectionManager : public ARaidProtectionManager
{
}; // Size: 0x3E8

class AFlareTrapItem : public ATrapItem
{
    class UAkAudioEvent* _triggerSound;                                               // 0x0AE0 (size: 0x8)
    float _detonationDelay;                                                           // 0x0AE8 (size: 0x4)
    TSubclassOf<class AProjectile> _projectileClass;                                  // 0x0AF0 (size: 0x8)
    FVector _projectileLocation;                                                      // 0x0AF8 (size: 0xC)
    FRotator _projectileRotation;                                                     // 0x0B04 (size: 0xC)
    float _projectileMuzzleVelocity;                                                  // 0x0B10 (size: 0x4)
    float _projectileLifetime;                                                        // 0x0B14 (size: 0x4)

    void Detonate();
}; // Size: 0xB30

class AFlashbangItem : public AGrenadeItem
{
    TSubclassOf<class AFlashbangItemEffects> _flashbangEffectsClass;                  // 0x0A70 (size: 0x8)

}; // Size: 0xA80

class AFlashbangItemEffects : public AActor
{
    class UParticleSystem* _explosionParticles;                                       // 0x0220 (size: 0x8)
    TSubclassOf<class UMatineeCameraShake> _explosionCameraShakeClass;                // 0x0228 (size: 0x8)
    class UAkAudioEvent* _explosionAudioEvent;                                        // 0x0230 (size: 0x8)
    class UAkAudioEvent* _startStunnedSoundEffectsAudioEvent;                         // 0x0238 (size: 0x8)
    class UAkAudioEvent* _stopStunnedSoundEffectsAudioEvent;                          // 0x0240 (size: 0x8)
    float _minFlashbangDurationToStartStunnedSoundEffects;                            // 0x0248 (size: 0x4)
    float _fullFlashDuration;                                                         // 0x024C (size: 0x4)
    float _flashFadeOutDuration;                                                      // 0x0250 (size: 0x4)
    float _flashRadius;                                                               // 0x0254 (size: 0x4)
    float _flashLineTraceDistance;                                                    // 0x0258 (size: 0x4)

}; // Size: 0x270

class AFogSphere : public AActor
{
    bool _shouldExistOnDedicatedServer;                                               // 0x0220 (size: 0x1)
    class UCurveFloat* _densityVersusTimeOfDay;                                       // 0x0228 (size: 0x8)

    void SetFogDensity(float Density);
    void OnTimeOfDayChanged(class AWeatherController2* sender);
}; // Size: 0x230

class AFollowsMouseActor : public AActor
{
    float DistanceFromCamera;                                                         // 0x0220 (size: 0x4)

}; // Size: 0x228

class AFoodItem : public AItem
{
    float AccumulatedFatigueBonus;                                                    // 0x09A8 (size: 0x4)
    float ThermalConductivityFactor;                                                  // 0x09AC (size: 0x4)
    float FreezingTemperature;                                                        // 0x09B0 (size: 0x4)
    float RoomTemperature;                                                            // 0x09B4 (size: 0x4)
    bool Spoilable;                                                                   // 0x09B8 (size: 0x1)
    float ShelfLife;                                                                  // 0x09BC (size: 0x4)
    float SpoilageRateFrozen;                                                         // 0x09C0 (size: 0x4)
    float SpoilageRateModifierWhileSealed;                                            // 0x09C4 (size: 0x4)
    bool IsConsumable;                                                                // 0x09C8 (size: 0x1)
    bool CanCheckTaste;                                                               // 0x09C9 (size: 0x1)
    class UParticleSystemComponent* SteamComponent;                                   // 0x09D0 (size: 0x8)
    class UParticleSystem* SteamParticles;                                            // 0x09D8 (size: 0x8)
    class UParticleSystemComponent* SmokeComponent;                                   // 0x09E0 (size: 0x8)
    class UParticleSystem* SmokeParticles;                                            // 0x09E8 (size: 0x8)
    class UStaticMesh* ItemOpenedMesh;                                                // 0x09F0 (size: 0x8)
    class UStaticMesh* ItemEmptyMesh;                                                 // 0x09F8 (size: 0x8)
    class UAkAudioEvent* StartEatingAudioEvent;                                       // 0x0A00 (size: 0x8)
    class UAkAudioEvent* StopEatingAudioEvent;                                        // 0x0A08 (size: 0x8)
    class UAkAudioEvent* StartCookingAudioEvent;                                      // 0x0A10 (size: 0x8)
    class UAkAudioEvent* StopCookingAudioEvent;                                       // 0x0A18 (size: 0x8)
    TSubclassOf<class UGameResourceType> _resourceTypeForConsumption;                 // 0x0A20 (size: 0x8)
    float _caloriesBonus;                                                             // 0x0A28 (size: 0x4)
    float _catchSicknessModifier;                                                     // 0x0A2C (size: 0x4)
    bool _itemOpened;                                                                 // 0x0A30 (size: 0x1)
    float _repTemperature;                                                            // 0x0A38 (size: 0x4)

    void OnRep_ItemOpened();
    void OnAudioComponentExpired();
}; // Size: 0xA50

class AFragGrenadeItem : public AGrenadeItem
{
}; // Size: 0xA80

class AGameEventBase : public AActor
{
    FText EventName;                                                                  // 0x0220 (size: 0x18)
    TSubclassOf<class UGameEventParticipantStats> ParticipantStatsClass;              // 0x0238 (size: 0x8)
    TSubclassOf<class UGameEventRoundInfoWidget> RoundInfoWidgetClass;                // 0x0240 (size: 0x8)
    TSubclassOf<class UGameEventTeamHeaderWidget> TeamHeaderWidgetClass;              // 0x0248 (size: 0x8)
    TSubclassOf<class UGameEventParticipantStatsWidget> StatWidgetClass;              // 0x0250 (size: 0x8)
    TSubclassOf<class UGameEventParticipantStatsWidget> MiniStatWidgetClass;          // 0x0258 (size: 0x8)
    class UAkAudioEvent* TimesUpAnnouncement;                                         // 0x0260 (size: 0x8)
    class UAkAudioEvent* BlueTeamWonRoundAnnouncement;                                // 0x0268 (size: 0x8)
    class UAkAudioEvent* RedTeamWonRoundAnnouncement;                                 // 0x0270 (size: 0x8)
    class UAkAudioEvent* RoundDrawAnnouncement;                                       // 0x0278 (size: 0x8)
    class UAkAudioEvent* BlueTeamWonEventAnnouncement;                                // 0x0280 (size: 0x8)
    class UAkAudioEvent* RedTeamWonEventAnnouncement;                                 // 0x0288 (size: 0x8)
    class UAkAudioEvent* EventDrawAnnouncement;                                       // 0x0290 (size: 0x8)
    class UAkAudioEvent* Time30sAnnouncement;                                         // 0x0298 (size: 0x8)
    class UAkAudioEvent* Time15sAnnouncement;                                         // 0x02A0 (size: 0x8)
    class UAkAudioEvent* Time10sCountdownAnnouncement;                                // 0x02A8 (size: 0x8)
    class UAkAudioEvent* TensionMusicStart;                                           // 0x02B0 (size: 0x8)
    class UAkAudioEvent* TensionMusicStop;                                            // 0x02B8 (size: 0x8)
    EGameEventState _state;                                                           // 0x02F0 (size: 0x1)
    int32 _activeParticipantCount;                                                    // 0x02F4 (size: 0x4)
    int32 _numberOfTeams;                                                             // 0x02F8 (size: 0x4)
    TArray<int32> _teamMemberCount;                                                   // 0x0300 (size: 0x10)
    TArray<int32> _teamScores;                                                        // 0x0310 (size: 0x10)
    TArray<int32> _roundWinningTeam;                                                  // 0x0320 (size: 0x10)
    int32 _round;                                                                     // 0x0330 (size: 0x4)
    float _roundTimeLeft;                                                             // 0x0334 (size: 0x4)
    float _cancelTimeLeft;                                                            // 0x0338 (size: 0x4)
    class AGameEventLocationMarker* _marker;                                          // 0x0358 (size: 0x8)
    class AGameEventBorder* _border;                                                  // 0x0360 (size: 0x8)
    class AGameEventManager* _manager;                                                // 0x0368 (size: 0x8)
    TArray<FGameEventParticipantInfo> _participantInfo;                               // 0x0370 (size: 0x10)
    class UGameEventCardWidget* _cardWidget;                                          // 0x0510 (size: 0x8)
    class UGameEventScoreboardWidget* _scoreboardWidget;                              // 0x0518 (size: 0x8)
    class UGameEventScoreboardWidget* _miniScoreboardWidget;                          // 0x0520 (size: 0x8)
    TArray<int32> _rankings;                                                          // 0x0528 (size: 0x10)
    class UAkComponent* _lastAnnouncement;                                            // 0x0558 (size: 0x8)
    class UAkComponent* _lastCountdownAnnouncement;                                   // 0x0560 (size: 0x8)

    void UpdateTeamMemberCount();
    void UpdateRanking(int32 Index);
    void SetTeamScore(int32 TeamIndex, float Score);
    void SetParticipantTeam(class APrisoner* Prisoner, int32 TeamIndex);
    void SetParameters(const FGameEventParameters& Parameters);
    void SetNumberOfTeams(int32 Value);
    bool ScheduleEvent();
    void SavePrisonerState(class APrisoner* Prisoner);
    bool SameTeam(const class APrisoner* prisonerA, const class APrisoner* prisonerB);
    void ResetGameEventArea();
    void RegisterParticipant(class APrisoner* Prisoner, int32 preferredTeam);
    void PresentSpawnScreen(class APrisoner* Prisoner);
    void ParticipantEnter(class APrisoner* Prisoner);
    void OnRep_Rankings();
    void OnRep_ParticipantInfo();
    void NetMulticast_UpdateScoreboard(int32 victimIndex, int32 killerIndex, bool IsHeadShot);
    void Multicast_StopMusic(class UAkAudioEvent* StopAudioEvent);
    void Multicast_StopCountdownAnnouncement();
    void Multicast_ShowScoreboardForEveryone();
    void Multicast_ShowEventNotification(EGameEventNotificationType Type, FString auxString);
    void Multicast_PlayMusic(class UAkAudioEvent* StartAudioEvent);
    void Multicast_PlayCountdownAnnouncement(class UAkAudioEvent* Sound);
    void Multicast_PlayAnnouncementToTeam(int32 TeamIndex, class UAkAudioEvent* Sound);
    void Multicast_PlayAnnouncementToParticipant(class APrisoner* Prisoner, class UAkAudioEvent* Sound);
    void Multicast_PlayAnnouncementToAllParticipants(class UAkAudioEvent* Sound);
    void Multicast_HideScoreboardForEveryone();
    void KickParticipant(class APrisoner* Prisoner);
    bool IsTeamFull(int32 TeamIndex);
    bool IsParticipating(const class APrisoner* Prisoner);
    void InitEvent(class AGameEventLocationMarker* marker, class AGameEventManager* manager);
    TArray<int32> GetWinningTeamsPerRound();
    float GetTeamScore(int32 TeamIndex);
    int32 GetTeamMemberCount(int32 TeamIndex);
    float GetStatusTime();
    FRotator GetSpawnRotationForLocation(FVector Location);
    class UGameEventScoreboardWidget* GetScoreboardWidget();
    float GetRoundTimeLeft();
    void GetPossibleLoadout(class APrisoner* Prisoner, TArray<class UItemSelection*>& primaryWeapons, TArray<class UItemSelection*>& secondaryWeapons, TArray<class UItemSelection*>& tertiaryWeapons, TArray<class UItemSelection*>& outfits, TArray<class UItemSelection*>& support, TArray<class UItemSelection*>& Gear);
    int32 GetParticipantTeam(const class APrisoner* Prisoner);
    FVector GetParticipantJoinLocation(class APrisoner* Prisoner);
    TArray<FGameEventParticipantInfo> GetParticipantInfo();
    int32 GetParticipantAtRank(int32 Rank);
    FGameEventParameters GetParameters();
    int32 GetNumberOfTeams();
    int32 GetNumberOfParticipants();
    int32 GetNumberOfActiveParticipants();
    class UGameEventScoreboardWidget* GetMiniScoreboardWidget();
    float GetMaxDurationLeft();
    class AGameEventLocationMarker* GetMarker();
    EGameEventState GetEventState();
    int32 GetCurrentRound();
    class UGameEventCardWidget* GetCardWidget();
    float GetCancelTimeLeft();
    class AGameEventBorder* GetBorder();
    void ForceParticipantStatsRep(int32 Index);
    int32 FindParticipantIndex(const class APrisoner* Prisoner);
    void EquipParticipantLoadout(class APrisoner* Prisoner);
    int32 DeclareWinningTeam();
    void ConvertScoreToFame(class APrisoner* Prisoner);
    void ClearTeamScores();
    FVector ChooseSpawnLocation(class APrisoner* Prisoner);
    void CheckParticipatingPrisoners();
    bool CanStart();
    bool CanSchedule();
    bool CanJoin(const class APrisoner* Prisoner, int32 preferredTeam);
    void CancelEvent(bool Force);
    void CallInParticipant(class APrisoner* Prisoner);
    void AwardParticipant(int32 Index, const FGameEventRewardPoints& reward);
    int32 AssignParticipantTeam(class APrisoner* Prisoner);
}; // Size: 0x588

class AGameEventBorder : public AActor
{
    class UStaticMeshComponent* Mesh;                                                 // 0x0220 (size: 0x8)
    class UMaterialInstanceDynamic* Material;                                         // 0x0228 (size: 0x8)
    class UChildActorComponent* SoundSpline;                                          // 0x0230 (size: 0x8)
    class UAkAudioEvent* AudioEvent;                                                  // 0x0238 (size: 0x8)
    EGameEventBorderState _state;                                                     // 0x0240 (size: 0x1)
    float _desiredRadius;                                                             // 0x0244 (size: 0x4)
    FVector _desiredOffset;                                                           // 0x024C (size: 0xC)
    float _desiredHeat;                                                               // 0x0264 (size: 0x4)
    float _radiusChangeSpeed;                                                         // 0x026C (size: 0x4)
    float _offsetChangeSpeed;                                                         // 0x0270 (size: 0x4)
    float _heatChangeSpeed;                                                           // 0x0274 (size: 0x4)
    bool _collisionEnabled;                                                           // 0x0278 (size: 0x1)
    bool _blockPawns;                                                                 // 0x0279 (size: 0x1)

    void SetEnablePawnCollision(bool Value);
    void OnRep_Collision();
    void Multicast_SetRadius(float Radius);
    void Multicast_SetOffset(FVector Offset);
    bool IsActive();
    void HeatUpAndChangeArea(float Radius, FVector focus, float Duration, float heatUpDuration);
    EGameEventBorderState GetState();
    float GetRadius();
    FVector GetOffset();
    FVector GetBorderCenter();
    void ChangeState(EGameEventBorderState State, float Duration);
    void ChangeArea(float Radius, FVector focus, float Duration);
}; // Size: 0x290

class AGameEventLocationMarker : public AActor
{
    FText LocationName;                                                               // 0x0220 (size: 0x18)
    class UTexture2D* LocationImage;                                                  // 0x0238 (size: 0x8)
    class UTexture2D* LocationImageGrayscale;                                         // 0x0240 (size: 0x8)
    bool EligibleForRandomPick;                                                       // 0x0248 (size: 0x1)
    TSubclassOf<class AGameEventBase> GameEventClass;                                 // 0x0250 (size: 0x8)
    FGameEventParameters GameEventParameters;                                         // 0x0258 (size: 0x188)
    TSubclassOf<class AGameEventBorder> BorderClass;                                  // 0x03E0 (size: 0x8)
    FVector AreaCenterOffset;                                                         // 0x03E8 (size: 0xC)
    float Radius;                                                                     // 0x03F4 (size: 0x4)
    TArray<FSpawnArea> SpawnAreas;                                                    // 0x03F8 (size: 0x10)
    class USphereComponent* Sphere;                                                   // 0x0408 (size: 0x8)
    class UBillboardComponent* Sprite;                                                // 0x0410 (size: 0x8)

    FVector GetAreaCenter();
    class AGameEventBase* CreateGameEvent();
    class AGameEventBorder* CreateBorder();
}; // Size: 0x418

class AGameEventManager : public AActor
{
    int32 EventHistoryLimit;                                                          // 0x0220 (size: 0x4)
    TArray<class AGameEventBase*> _announcedGameEvents;                               // 0x0228 (size: 0x10)
    TArray<class AGameEventBase*> _currentGameEvents;                                 // 0x0238 (size: 0x10)
    TArray<class AGameEventBase*> _endedGameEvents;                                   // 0x0248 (size: 0x10)

    void OnRep_EndedGameEvents();
    void OnRep_CurrentGameEvents();
    void OnRep_AnnouncedGameEvents();
}; // Size: 0x260

class AGameEventTransport : public AActor
{
    class USphereComponent* Sphere;                                                   // 0x0220 (size: 0x8)
    class UStaticMeshComponent* PodMesh;                                              // 0x0228 (size: 0x8)
    class UStaticMeshComponent* TargetMesh;                                           // 0x0230 (size: 0x8)
    float TravelSpeed;                                                                // 0x0238 (size: 0x4)
    float TravelHeight;                                                               // 0x023C (size: 0x4)
    float HoverHeight;                                                                // 0x0240 (size: 0x4)
    float LargerRadius;                                                               // 0x0244 (size: 0x4)
    float SmallerRadius;                                                              // 0x0248 (size: 0x4)
    EGameEventTransportState _state;                                                  // 0x024C (size: 0x1)
    FVector _lastPosition;                                                            // 0x0250 (size: 0xC)
    FVector _targetPosition;                                                          // 0x025C (size: 0xC)
    float _blend;                                                                     // 0x0268 (size: 0x4)

    void TravelToDestination(FVector Destination);
    void SkipToDestination();
    void ReserveForPrisoner(class APrisoner* Prisoner);
    void OnRep_TargetPosition();
    void OnRep_LastPosition();
    void OnOrderComplete();
    void LeaveIsland();
    void LandAtLocation(FVector Destination);
    bool IsInteractable();
    class APrisoner* GetReservedParticipant();
    void CancelOrder();
}; // Size: 0x2A8

class AGarden : public AActor
{
    uint16 _gardenId;                                                                 // 0x0220 (size: 0x2)
    FGardenSlotArray _gardenSlots;                                                    // 0x0228 (size: 0x120)
    float _health;                                                                    // 0x0348 (size: 0x4)
    FIntPoint _numSlots;                                                              // 0x0358 (size: 0x8)
    float _radius;                                                                    // 0x0364 (size: 0x4)

    void OnRep_NumSlots();
}; // Size: 0x470

class AGardenManager : public AActor
{
    TSubclassOf<class AGarden> GardenClass;                                           // 0x0248 (size: 0x8)
    float NearGardenDistance;                                                         // 0x0250 (size: 0x4)
    FPlantGrowthStageData _seedingStageData;                                          // 0x0254 (size: 0x60)
    FPlantGrowthStageData _vegetatingStageData;                                       // 0x02B4 (size: 0x60)
    FPlantGrowthStageData _floweringStageData;                                        // 0x0314 (size: 0x60)
    FPlantGrowthStageData _ripeningStageData;                                         // 0x0374 (size: 0x60)
    FInt32Interval _gardenMinMaxSize;                                                 // 0x03D4 (size: 0x8)
    TArray<class AGarden*> _gardens;                                                  // 0x0440 (size: 0x10)
    float _updateTimestepSeconds;                                                     // 0x0480 (size: 0x4)
    uint32 _minUpdateBatchCount;                                                      // 0x0484 (size: 0x4)
    float _dataSampleFadeSeconds;                                                     // 0x0488 (size: 0x4)
    uint32 _heightDataSampleCount;                                                    // 0x048C (size: 0x4)
    FFloatInterval _pestsDiseasesCheckTimeHours;                                      // 0x0490 (size: 0x8)
    FFloatInterval _weedCheckTimeHours;                                               // 0x0498 (size: 0x8)
    float _pestsDiseasesGrowthTimeHours;                                              // 0x04A0 (size: 0x4)
    float _weedGrowthTimeHours;                                                       // 0x04A4 (size: 0x4)
    float _pestsDiseasesSpreadTimeHours;                                              // 0x04A8 (size: 0x4)
    float _weedSpreadTimeHours;                                                       // 0x04AC (size: 0x4)
    FVector2D _pestsDiseasesSpreadScaleThreshold;                                     // 0x04B0 (size: 0x8)
    FVector2D _weedSpreadScaleThreshold;                                              // 0x04B8 (size: 0x8)
    float _maxWaterLitersPerSlot;                                                     // 0x04C0 (size: 0x4)
    float _maxWaterLitersFromRainPerSlot;                                             // 0x04C4 (size: 0x4)
    class UMaterialParameterCollection* _mainMPC;                                     // 0x04C8 (size: 0x8)
    class UMaterialParameterCollection* _gardenMPC;                                   // 0x04D0 (size: 0x8)
    TArray<FStaticMeshMaterialPair> _gardenEdgeMesh;                                  // 0x04D8 (size: 0x10)
    float _gardenEdgeVerticalOffset;                                                  // 0x04E8 (size: 0x4)
    float _gardenEdgeHorizontalOffset;                                                // 0x04EC (size: 0x4)
    TArray<FStaticMeshMaterialPair> _gardenSoilMesh;                                  // 0x04F0 (size: 0x10)
    float _gardenSoilVerticalOffset;                                                  // 0x0500 (size: 0x4)
    FStaticMeshMaterialPair _cubeCollisionMesh;                                       // 0x0508 (size: 0x18)
    float _maxHealthPerSlot;                                                          // 0x0520 (size: 0x4)
    TArray<FStaticMeshMaterialPair> _weedMesh;                                        // 0x0528 (size: 0x10)
    float _weedsVerticalOffset;                                                       // 0x0538 (size: 0x4)
    TArray<class UPlantSpecies*> _plantSpecies;                                       // 0x0540 (size: 0x10)
    class UFarmingSkill* _farmingSkillDataAsset;                                      // 0x0550 (size: 0x8)
    TMap<class FStaticMeshMaterialPair, class UIndexedHierarchicalInstancedStaticMeshComponent*> _hismcMap; // 0x0558 (size: 0x50)
    TArray<FStaticMeshMaterialPair> _activeIHISMCMeshes;                              // 0x05A8 (size: 0x10)
    bool _showPreplacement;                                                           // 0x05B8 (size: 0x1)
    float _databaseUpdateInterval;                                                    // 0x05BC (size: 0x4)
    class UChoppingRecipeDataAsset* _destroyChoppingRecipeAsset;                      // 0x05C0 (size: 0x8)
    float _prisonerInteractionDistance;                                               // 0x05C8 (size: 0x4)
    float _decayProcessingPeriod;                                                     // 0x05CC (size: 0x4)
    int32 _decayProcessingNumberOfFrames;                                             // 0x05D0 (size: 0x4)
    int32 _decayProcessingMaxDestroyedElementsPerUpdate;                              // 0x05D4 (size: 0x4)
    int32 _numberOfGardensAllowedBeforeDecay;                                         // 0x05D8 (size: 0x4)
    int32 _hoursToDecay;                                                              // 0x05DC (size: 0x4)
    int32 _hoursToDecayOutsideFlagArea;                                               // 0x05E0 (size: 0x4)
    FRepairableParams repairableParameters;                                           // 0x05E8 (size: 0x38)

    void DebugPlantAPlantAtLookedLocation(const class UPlantSpecies* species);
    void DebugGenerateGardensInSquare(FVector Location, FIntPoint countXY, FVector2D distanceXY, FIntPoint MinSize, FIntPoint MaxSize);
    void DebugGenerateGardensInRadius(int32 Count, FVector Location, float Spread, FIntPoint MinSize, FIntPoint MaxSize);
    void DebugAddWaterToPlantAtLookedLocation(float Amount);
    void ClearAllMeshInstances();
}; // Size: 0x6E8

class AGasTankItem : public AItem
{
    class UBasicGameResourceContainerComponent* _resourceContainerComponent;          // 0x09A8 (size: 0x8)
    class URangedResourceProviderComponent* _rangedResourceProviderComponent;         // 0x09B0 (size: 0x8)
    float _explosionDamage;                                                           // 0x09B8 (size: 0x4)
    float _explosionInnerRadius;                                                      // 0x09BC (size: 0x4)
    float _explosionOuterRadius;                                                      // 0x09C0 (size: 0x4)
    float _explosionFalloff;                                                          // 0x09C4 (size: 0x4)
    float _explosionForce;                                                            // 0x09C8 (size: 0x4)
    FTargetTypeDamageMultiplier _explosionTargetTypeMultiplier;                       // 0x09D0 (size: 0x10)
    class UParticleSystem* _explosionParticle;                                        // 0x09E0 (size: 0x8)
    class UAkAudioEvent* _explosionAudioEvent;                                        // 0x09E8 (size: 0x8)
    float _hearingDamageRadius;                                                       // 0x09F0 (size: 0x4)
    TSubclassOf<class UMatineeCameraShake> _explosionCameraShakeClass;                // 0x09F8 (size: 0x8)

    void Multicast_PlayExplosionEffects(FVector zeroBasedLocation);
}; // Size: 0xA00

class AGeigerCounter : public AItemWithSkeletalMesh
{
    class UBasicGameResourceSlotItemComponent* _resourceSlotComponent;                // 0x09B8 (size: 0x8)
    bool _hasVisualIndicator;                                                         // 0x09C0 (size: 0x1)
    float _maxAmountDetectable;                                                       // 0x09C4 (size: 0x4)
    float _maxDetectionRadius;                                                        // 0x09C8 (size: 0x4)
    float _lightIndicatorBaseEmisiveStrength;                                         // 0x09CC (size: 0x4)
    class UAkAudioEvent* _startEvent;                                                 // 0x09D0 (size: 0x8)
    class UAkAudioEvent* _stopEvent;                                                  // 0x09D8 (size: 0x8)

    void OnResourceComponentDeactivated(class UActorComponent* Component);
    void OnResourceComponentActivated(class UActorComponent* Component, bool wasReset);
}; // Size: 0x9F0

class AGib : public AActor
{
    class UStaticMeshComponent* MeshComponent;                                        // 0x0220 (size: 0x8)
    float ShrinkFactor;                                                               // 0x0228 (size: 0x4)
    float ImpulseMultiplier;                                                          // 0x022C (size: 0x4)

}; // Size: 0x230

class AGlobalAquaticLifeManager : public AActor
{
    float _updateRegisteredPrisonersTickTime;                                         // 0x0220 (size: 0x4)
    TMap<int64, FAquaticLifeSpawningVolumeDescription> _fishSpawningVolumes;          // 0x1618 (size: 0x50)
    float _localFishSchoolManagerRelevancyRange;                                      // 0x1688 (size: 0x4)
    float _distanceBetweenLocalFishSchoolManagers;                                    // 0x168C (size: 0x4)
    float _localFishSchoolManagerTickTime;                                            // 0x1690 (size: 0x4)
    float _localFishSchoolManagerDestructionTime;                                     // 0x1694 (size: 0x4)
    float _prisonerWaterImmersionRelevancyThreshold;                                  // 0x1698 (size: 0x4)
    float _waterSplinePitchThresholdForSchools;                                       // 0x169C (size: 0x4)
    int32 _maxSpawnedSchools;                                                         // 0x16A0 (size: 0x4)
    float _localFishingZoneIndicatorManagerRelevancyRange;                            // 0x16C0 (size: 0x4)
    float _localFishingZoneIndicatorManagerTickTime;                                  // 0x16C4 (size: 0x4)
    float _localFishingZoneIndicatorManagerDestructionTime;                           // 0x16C8 (size: 0x4)
    TSubclassOf<class AFishingZoneIndicator> _indicatorClass;                         // 0x16D0 (size: 0x8)
    float _fishingPrecision;                                                          // 0x16D8 (size: 0x4)
    class UCurveFloat* _weatherPercentageCurve;                                       // 0x16E0 (size: 0x8)
    int32 _maxSpawnedIndicators;                                                      // 0x16E8 (size: 0x4)
    int32 _maxLargeAquaticAnimals;                                                    // 0x1710 (size: 0x4)
    TArray<class ULargeAquaticAnimalSpeciesData*> _possibleLargeAquaticAnimals;       // 0x1718 (size: 0x10)
    float _distanceBetweenLargeAquaticAnimals;                                        // 0x1728 (size: 0x4)
    float _largeAquaticAnimalSpawningRangeMin;                                        // 0x172C (size: 0x4)
    float _largeAquaticAnimalSpawningRangeMax;                                        // 0x1730 (size: 0x4)
    float _requiredTimeInWaterToSpawnLargeAquaticAnimal;                              // 0x1734 (size: 0x4)
    float _requiredTimeInWaterWhileBleedingToSpawnLargeAquaticAnimal;                 // 0x1738 (size: 0x4)
    float _timeToReenableLargeAquaticAnimalSpawnZone;                                 // 0x173C (size: 0x4)

}; // Size: 0x1740

class AGlobalBirdSpawner2 : public AActor
{
    int32 MaxSpawnInstances;                                                          // 0x0220 (size: 0x4)
    int32 MaxCoastalBirdSpawnPerPlayer;                                               // 0x0224 (size: 0x4)
    int32 MaxContinentalBirdSpawnPerPlayer;                                           // 0x0228 (size: 0x4)
    TArray<class TSubclassOf<ABird2>> CoastalBirds;                                   // 0x0230 (size: 0x10)
    TArray<class TSubclassOf<ABird2>> ContinentalBirds;                               // 0x0240 (size: 0x10)
    float FlyingBirdSpawnAwayDistanceMin;                                             // 0x0250 (size: 0x4)
    float FlyingBirdSpawnAwayDistanceMax;                                             // 0x0254 (size: 0x4)
    float GroundBirdSpawnAwayDistanceMin;                                             // 0x0258 (size: 0x4)
    float GroundBirdSpawnAwayDistanceMax;                                             // 0x025C (size: 0x4)
    float MinSpawnInfrontDistance;                                                    // 0x0260 (size: 0x4)
    FGameplayTag BirdSpawnerMask;                                                     // 0x0264 (size: 0x8)
    int32 BulkSpawn;                                                                  // 0x026C (size: 0x4)
    TArray<TEnumAsByte<EPhysicalSurface>> AllowedSurfaces;                            // 0x0270 (size: 0x10)
    class UBillboardComponent* Sprite;                                                // 0x0280 (size: 0x8)
    TArray<class ABird2*> _birds;                                                     // 0x0290 (size: 0x10)

}; // Size: 0x2F8

class AGlobalEncounterManager : public AActor
{
    TArray<FEncounterStaticZoneDescription> _staticZoneDescriptions;                  // 0x0220 (size: 0x10)
    TArray<FEncounterGroupedCharacterSpawnPoint> _encounterGroupedCharacterSpawnPoints; // 0x0238 (size: 0x10)
    TArray<FEncounterLegacyCharacterSpawnPoint> _encounterLegacyCharacterSpawnPoints; // 0x0250 (size: 0x10)
    class UEncounterManagerCommonData* _commonData;                                   // 0x0430 (size: 0x8)

}; // Size: 0x680

class AGlobalGuardedZoneManager : public AActor
{
    float _guardedZoneTickTime;                                                       // 0x0270 (size: 0x4)
    float _guardedZoneManagerPlayerLogicTickTime;                                     // 0x0274 (size: 0x4)
    float _timeToDeactivateSentrySpawners;                                            // 0x027C (size: 0x4)
    float _timeToRespawnSentry;                                                       // 0x0280 (size: 0x4)
    float _dropshipSpawnDistanceXY;                                                   // 0x0284 (size: 0x4)
    float _dropshipSpawnDistanceZ;                                                    // 0x0288 (size: 0x4)
    TSoftClassPtr<ADropship> _dropshipSentryRespawnClass;                             // 0x0290 (size: 0x28)
    int32 _maxConsecutiveSentryHitsBeforeDefenderSpawns;                              // 0x02B8 (size: 0x4)
    float _maxConsecutiveSentryHitsResetTime;                                         // 0x02BC (size: 0x4)
    float _abandonedBunkerZoneManagerPlayerLogicTickTime;                             // 0x02C0 (size: 0x4)
    class UAbandonedBunkerZoneCommonData* _abandonedBunkerZoneCommonData;             // 0x02C8 (size: 0x8)
    float _distanceToPlayerToKeepDebugCharacterAlive;                                 // 0x02D4 (size: 0x4)
    float _debugCharacterLifespanAfterDeath;                                          // 0x02D8 (size: 0x4)
    TSoftClassPtr<ARazor> _debugRazorClass;                                           // 0x02E0 (size: 0x28)
    TSoftClassPtr<ABrenner> _debugBrennerClass;                                       // 0x0308 (size: 0x28)
    TSoftClassPtr<ADropship> _dropshipClass;                                          // 0x0330 (size: 0x28)
    TSubclassOf<class UEncounterBase> _defenderHordeEncounterClass;                   // 0x0358 (size: 0x8)

}; // Size: 0x3A0

class AGlobalRaidProtectionManager : public ARaidProtectionManager
{

    void NetMulticast_ShowRaidTimesMessages(const TArray<FGlobalRaidProtectionRaidPeriod>& raidPeriods);
    void NetMulticast_ShowRaidStartAnnouncementMessage(const FGlobalRaidProtectionRaidPeriod& raidPeriod);
    void NetMulticast_ShowRaidEndAnnouncementMessage(int32 timeUntilRaidConcludes);
    void NetMulticast_ShowRaidConcludedMessage();
    void NetMulticast_ShowRaidAllowedMessage();
}; // Size: 0x3F0

class AGrenadeItem : public AItem
{
    float _explosionDamage;                                                           // 0x09A8 (size: 0x4)
    float _explosionOuterRadius;                                                      // 0x09AC (size: 0x4)
    float _explosionInnerRadius;                                                      // 0x09B0 (size: 0x4)
    float _explosionFalloff;                                                          // 0x09B4 (size: 0x4)
    float _explosionDelay;                                                            // 0x09B8 (size: 0x4)
    float _explosionForce;                                                            // 0x09BC (size: 0x4)
    FTargetTypeDamageMultiplier _explosionTargetTypeMultiplier;                       // 0x09C0 (size: 0x10)
    float _explosionImpulse_OBSOLETE;                                                 // 0x09D0 (size: 0x4)
    class UParticleSystem* _explosionParticle;                                        // 0x09E0 (size: 0x8)
    TSubclassOf<class UMatineeCameraShake> _explosionCameraShakeClass;                // 0x09E8 (size: 0x8)
    float _hearingDamageRadius;                                                       // 0x09F0 (size: 0x4)
    class UAkAudioEvent* ExplosionAudioEvent;                                         // 0x09F8 (size: 0x8)
    class UAkAudioEvent* _explosionAudioEvent;                                        // 0x0A00 (size: 0x8)
    class UAkAudioEvent* _pullPinAudioEvent;                                          // 0x0A08 (size: 0x8)
    class USkeletalMeshComponent* _skeletalMesh;                                      // 0x0A10 (size: 0x8)
    class UAnimMontage* _grenadeLongThrowMontage;                                     // 0x0A18 (size: 0x8)
    class UAnimMontage* _grenadeLongThrowLoopMontage;                                 // 0x0A20 (size: 0x8)
    class UAnimMontage* _grenadeShortThrowMontage;                                    // 0x0A28 (size: 0x8)
    class UAnimMontage* _grenadeThrowbackMontage;                                     // 0x0A30 (size: 0x8)
    FName _leverReleasedSocketName;                                                   // 0x0A38 (size: 0x8)
    class UParticleSystem* _leverReleasedPS;                                          // 0x0A40 (size: 0x8)
    float _netCullDistanceSquaredMeters;                                              // 0x0A48 (size: 0x4)
    bool _pinPulled;                                                                  // 0x0A4C (size: 0x1)
    float _pinPullingDurationOnTheGround;                                             // 0x0A50 (size: 0x4)
    class UTakeInHandsAssetData* _takeInHandsWhenPinIsPulledAssetData;                // 0x0A58 (size: 0x8)

    void Multicast_PlayPinPulledAudio();
    void Multicast_PlayEffects(const FVector& zeroBasedLocation, const FRotator& Rotation);
    class UAnimMontage* GetArmingMontage(EThrowingType throwingType);
}; // Size: 0xA70

class AGuardedZoneManager : public AActor
{
    class UBillboardComponent* _sprite;                                               // 0x0220 (size: 0x8)
    TArray<class ASentrySpawner2*> _sentrySpawners;                                   // 0x0228 (size: 0x10)

}; // Size: 0x250

class AHUD_John : public AHUD
{
    class UFont* NormalFont;                                                          // 0x0318 (size: 0x8)

}; // Size: 0x360

class AHalloweenSacrificePit : public AActor
{
    bool _shouldUseDeactivationTime;                                                  // 0x0220 (size: 0x1)
    int64 _deactivationTime;                                                          // 0x0228 (size: 0x8)
    FVector _sacrificePitCenter;                                                      // 0x0230 (size: 0xC)
    float _sacrificePitRadius;                                                        // 0x023C (size: 0x4)
    TArray<FHalloweenSacrificePitRequiredItemVariants> _requiredItemsInSacrificePit;  // 0x0240 (size: 0x10)
    float _giftSpawningTimeWindowDuration;                                            // 0x0250 (size: 0x4)
    TSoftClassPtr<AItem> _giftItem;                                                   // 0x0258 (size: 0x28)
    FTransform _giftItemSpawnTransform;                                               // 0x0280 (size: 0x30)
    float _giftItemAlreadySpawnedCheckRadius;                                         // 0x02B0 (size: 0x4)
    TSoftObjectPtr<UAkAudioEvent> _giftSpawningPreludeAudioEvent;                     // 0x02B8 (size: 0x28)
    TSoftObjectPtr<UParticleSystem> _giftSpawningPreludeParticleSystem;               // 0x02E0 (size: 0x28)
    FTransform _giftSpawningPreludeParticlesTransform;                                // 0x0310 (size: 0x30)
    TSoftObjectPtr<UAkAudioEvent> _giftSpawningFinishedAudioEvent;                    // 0x0340 (size: 0x28)
    TSoftObjectPtr<UParticleSystem> _giftSpawningFinishedParticleSystem;              // 0x0368 (size: 0x28)
    FTransform _giftSpawningFinishedParticlesTransform;                               // 0x0390 (size: 0x30)
    class ADecalActor* _demonicSigilDecal;                                            // 0x03C0 (size: 0x8)
    FName _demonicSigilDecalEmissiveColorParameterName;                               // 0x03C8 (size: 0x8)
    FRuntimeFloatCurve _demonicSigilDecalEmissiveColorMultiplierVsTime;               // 0x03D0 (size: 0x88)
    int32 _numZombiesToSpawn;                                                         // 0x0458 (size: 0x4)
    TArray<TSoftClassPtr<AZombie2>> _possibleZombies;                                 // 0x0460 (size: 0x10)
    TArray<FTransform> _zombieSpawnTransforms;                                        // 0x0470 (size: 0x10)
    float _zombieSpawnAreaSlack;                                                      // 0x0480 (size: 0x4)

    void NetMulticast_StartLoadingAssets(const TArray<FSoftObjectPath>& assetPaths);
    void NetMulticast_SpawnGiftSpawningPreludeEffects(class UAkAudioEvent* AudioEvent, class UParticleSystem* Particles);
    void NetMulticast_SpawnGiftSpawningFinishedEffects(class UAkAudioEvent* AudioEvent, class UParticleSystem* Particles);
}; // Size: 0x4C0

class AHandheldLightItem : public AItem
{
    int32 _currentLightAngleIndex;                                                    // 0x09B0 (size: 0x4)
    TArray<float> _possibleLightAngles;                                               // 0x09B8 (size: 0x10)
    class UBasicGameResourceSlotItemComponent* _resourceSlotComponent;                // 0x09C8 (size: 0x8)
    class UResourcePoweredLightItemComponent* _batteryPoweredLightItemComponent;      // 0x09D0 (size: 0x8)
    class UBasicGameResourceContainerComponent* _resourceContainerComponent;          // 0x09D8 (size: 0x8)

    void OnRep_CurrentLightAngleIndex();
    float GetCurrentLightAngle();
}; // Size: 0x9E0

class AHandheldSkeletalMeshLightItem : public AHandheldLightItem
{
    class USkeletalMeshComponent* SkeletalMesh;                                       // 0x09E0 (size: 0x8)

}; // Size: 0x9F0

class AHandheldSkeletalMeshLightItemWithGameResourceSlot : public AHandheldSkeletalMeshLightItem
{
}; // Size: 0x9F0

class AHeadLamp : public AClothesItem
{
    class USpotLightComponent* _spotLightComponent;                                   // 0x0A50 (size: 0x8)
    class UBasicGameResourceSlotItemComponent* _resourceSlotComponent;                // 0x0A58 (size: 0x8)
    class UResourcePoweredLightItemComponent* _batteryPoweredLightItemComponent;      // 0x0A60 (size: 0x8)

}; // Size: 0xA70

class AHeatSourceManager : public AActor
{
    float MassOfAdditionalOxygenUsedPerGramOfFuelBurned;                              // 0x0220 (size: 0x4)

}; // Size: 0x2E8

class AHeatSourceMarker : public AActor
{
    class USceneComponent* _sceneComponent;                                           // 0x0228 (size: 0x8)
    FHeatSourceParameters _heatSourceParameters;                                      // 0x0230 (size: 0x24)

}; // Size: 0x260

class AHuntingClue : public AActor
{
    class USceneComponent* _rootComponent;                                            // 0x0228 (size: 0x8)
    class UParticleSystemComponent* _focusModeParticles;                              // 0x0230 (size: 0x8)
    class UDecalComponent* _clueDecalComponent;                                       // 0x0238 (size: 0x8)
    class UStaticMeshComponent* _clueStaticMeshComponent;                             // 0x0240 (size: 0x8)
    class UArrowComponent* _debugArrowComponent;                                      // 0x0248 (size: 0x8)
    TArray<FHuntingClueVisuals> _firstClueVisuals;                                    // 0x0250 (size: 0x10)
    TArray<FHuntingClueVisuals> _visuals;                                             // 0x0260 (size: 0x10)
    TArray<TSoftObjectPtr<UAkAudioEvent>> _firstClueSoundVariations;                  // 0x0270 (size: 0x10)
    TArray<TSoftObjectPtr<UAkAudioEvent>> _secondClueSoundVariations;                 // 0x0280 (size: 0x10)
    TArray<TSoftObjectPtr<UAkAudioEvent>> _thirdPlusClueSoundVariations;              // 0x0290 (size: 0x10)
    float _hearingDistance;                                                           // 0x02A0 (size: 0x4)
    float _minApparentDistance;                                                       // 0x02A4 (size: 0x4)
    float _fadeTime;                                                                  // 0x02A8 (size: 0x4)
    float _lifetimeAfterFadeOut;                                                      // 0x02AC (size: 0x4)
    uint8 _packedClueIndexData;                                                       // 0x02B0 (size: 0x1)

}; // Size: 0x2C8

class AHuntingManager : public AActor
{
    float _huntInitTickBudgetInMilliseconds;                                          // 0x0238 (size: 0x4)
    int32 _maxActiveHuntsNum;                                                         // 0x023C (size: 0x4)
    float _daytimeSpawnMultipliers;                                                   // 0x0240 (size: 0x10)
    TMap<class TSoftClassPtr<AAnimal2>, class TSoftClassPtr<AHuntingClue>> _huntingCluesPerAnimal; // 0x0250 (size: 0x50)
    TArray<TEnumAsByte<EPhysicalSurface>> _allowedClueSpawnSurfaces;                  // 0x02A0 (size: 0x10)
    float _huntStartPlayerCheckRadius;                                                // 0x02B0 (size: 0x4)
    float _oldClueRemovalDistance;                                                    // 0x02B4 (size: 0x4)
    float _huntFailureTime;                                                           // 0x02B8 (size: 0x4)
    float _huntFailureAnimalDistance;                                                 // 0x02BC (size: 0x4)
    float _corpseLifetimeMinutes;                                                     // 0x02C0 (size: 0x4)
    float _corpseRemovalDistanceInSight;                                              // 0x02C4 (size: 0x4)
    float _corpseRemovalDistanceOutsideSight;                                         // 0x02C8 (size: 0x4)
    float _corpseRemovalAngle;                                                        // 0x02CC (size: 0x4)
    int32 _maxSpawnPointGenerationFailures;                                           // 0x02D0 (size: 0x4)
    float _timeToPlaySoundAfterClueInteractionMin;                                    // 0x02D4 (size: 0x4)
    float _timeToPlaySoundAfterClueInteractionMax;                                    // 0x02D8 (size: 0x4)
    FGameplayTagContainer _overrideableBiomes;                                        // 0x02E0 (size: 0x20)
    TArray<FHuntingBiomeDescription> _huntingBiomes;                                  // 0x0300 (size: 0x10)

    void OnAnimalKilled(class AConZCharacter* ConZCharacter);
    void OnAnimalActorDestroyed(class AConZCharacter* ConZCharacter);
    void NetMulticast_PlayClueSound(const TSoftObjectPtr<UAkAudioEvent>& clueAudioEvent, FVector clueLocation, float clueHearingDistance, float clueMinApparentDistance);
}; // Size: 0x430

class AInfluenceAreaVisualizer : public AActor
{
    class UStaticMeshComponent* _staticMeshComponent;                                 // 0x0220 (size: 0x8)

    void DestroyVisualizer();
}; // Size: 0x230

class AInstrumentItem : public AItem
{
    int32 _numberOfOctaves;                                                           // 0x09B4 (size: 0x4)
    class UAnimMontage* _playInstrumentStartMontageFP;                                // 0x09B8 (size: 0x8)
    class UAnimMontage* _playInstrumentStartMontageTP;                                // 0x09C0 (size: 0x8)
    class UAnimMontage* _playInstrumentStopMontageFP;                                 // 0x09C8 (size: 0x8)
    class UAnimMontage* _playInstrumentStopMontageTP;                                 // 0x09D0 (size: 0x8)
    class UAnimSequenceBase* _playInstrumentIdleAnimationFP;                          // 0x09D8 (size: 0x8)
    class UAnimSequenceBase* _playInstrumentPlayingAnimationFP;                       // 0x09E0 (size: 0x8)
    class UAnimSequenceBase* _playInstrumentIdleAnimationTP;                          // 0x09E8 (size: 0x8)
    class UAnimSequenceBase* _playInstrumentPlayingAnimationTP;                       // 0x09F0 (size: 0x8)
    float _playingPoseHoldTime;                                                       // 0x09F8 (size: 0x4)
    TArray<class UAkAudioEvent*> _noteCStart;                                         // 0x0A00 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteCStop;                                          // 0x0A10 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteDStart;                                         // 0x0A20 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteDStop;                                          // 0x0A30 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteDbStart;                                        // 0x0A40 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteDbStop;                                         // 0x0A50 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteEStart;                                         // 0x0A60 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteEStop;                                          // 0x0A70 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteEbStart;                                        // 0x0A80 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteEbStop;                                         // 0x0A90 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteFStart;                                         // 0x0AA0 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteFStop;                                          // 0x0AB0 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteGStart;                                         // 0x0AC0 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteGStop;                                          // 0x0AD0 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteGbStart;                                        // 0x0AE0 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteGbStop;                                         // 0x0AF0 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteAStart;                                         // 0x0B00 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteAStop;                                          // 0x0B10 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteAbStart;                                        // 0x0B20 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteAbStop;                                         // 0x0B30 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteBStart;                                         // 0x0B40 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteBStop;                                          // 0x0B50 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteBbStart;                                        // 0x0B60 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteBbStop;                                         // 0x0B70 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteC2Start;                                        // 0x0B80 (size: 0x10)
    TArray<class UAkAudioEvent*> _noteC2Stop;                                         // 0x0B90 (size: 0x10)
    float _aiNoiseLoudness;                                                           // 0x0BA0 (size: 0x4)

}; // Size: 0xBB0

class AInteriorReflEnvCubeSceneCapture : public ASceneCaptureCube
{
    int32 NumRecaptures;                                                              // 0x0238 (size: 0x4)
    float CaputreSaturation;                                                          // 0x023C (size: 0x4)
    float EndSaturation;                                                              // 0x0240 (size: 0x4)
    float CaptureBrightnessCurve;                                                     // 0x0244 (size: 0x4)
    float EndBrightnessCurve;                                                         // 0x0248 (size: 0x4)
    float CaptureBrighntess;                                                          // 0x024C (size: 0x4)
    float EndCaptureBrighntess;                                                       // 0x0250 (size: 0x4)
    TEnumAsByte<TextureMipGenSettings> MipGenSettings;                                // 0x0254 (size: 0x1)
    bool AttemptToGetNameAutomatically;                                               // 0x0255 (size: 0x1)
    FString OutputTexturePrefix;                                                      // 0x0258 (size: 0x10)
    FString OutputTexturePostfix;                                                     // 0x0268 (size: 0x10)
    bool DeleteTemporaryCubemaps;                                                     // 0x0278 (size: 0x1)
    class AStaticMeshActor* OutsideEnvironmentMesh;                                   // 0x0280 (size: 0x8)
    bool HideOutsideEnvironemntMesh;                                                  // 0x0288 (size: 0x1)
    float OutsideEnvironmentBrightness;                                               // 0x028C (size: 0x4)
    FName OutsideEnvironmentBrightnessParamName;                                      // 0x0290 (size: 0x8)
    class AReflectionCapture* EnvironmentReflectionCapture;                           // 0x0298 (size: 0x8)
    TArray<class UTextureCube*> _createdTxCubes;                                      // 0x02A0 (size: 0x10)
    class UTextureCube* _usedTxCube;                                                  // 0x02B0 (size: 0x8)

    void TriggerCapture();
}; // Size: 0x2D8

class AIntroVideoGameMode : public AGameMode
{
}; // Size: 0x308

class AItem : public AActor
{
    FItemDebugTextChanged DebugTextChanged;                                           // 0x02B8 (size: 0x10)
    void DebugTextChangedDelegate(class AItem* Item);
    FItemPickedUpState PickedUpState;                                                 // 0x02C8 (size: 0x10)
    void PickedUpStateDelegate(class AItem* Item, bool pickedUp);
    FItemOnStaticMeshChanged OnStaticMeshChanged;                                     // 0x02D8 (size: 0x10)
    void StaticMeshChangedDelegate(class AItem* Item);
    class UStaticMeshComponent* Mesh;                                                 // 0x0310 (size: 0x8)
    FGenericTeamId _genericTeamId;                                                    // 0x0428 (size: 0x10)
    class UThrowingComponent* ThrowingComponent;                                      // 0x0438 (size: 0x8)
    FText _caption;                                                                   // 0x0440 (size: 0x18)
    FText _description;                                                               // 0x0458 (size: 0x18)
    int32 _uses;                                                                      // 0x0470 (size: 0x4)
    float _health;                                                                    // 0x0474 (size: 0x4)
    float _maxHealth;                                                                 // 0x0478 (size: 0x4)
    float _maxHealthPercentageAfterReachingBadQuality;                                // 0x047C (size: 0x4)
    float _weight;                                                                    // 0x0480 (size: 0x4)
    float _initialWeightUsed;                                                         // 0x0484 (size: 0x4)
    float _maxWaterWeightAsRatioOfWeight;                                             // 0x0488 (size: 0x4)
    float _radiationDecreaseRate;                                                     // 0x048C (size: 0x4)
    float _maxRadiationAmountPerWeight;                                               // 0x0490 (size: 0x4)
    float _baseRadiationPropagationFactor;                                            // 0x0494 (size: 0x4)
    bool _canEverDecontaminate;                                                       // 0x0498 (size: 0x1)
    class UChoppingRecipeDataAsset* _choppingRecipeDataAsset;                         // 0x04A0 (size: 0x8)
    bool _shouldBeMaintained;                                                         // 0x04A8 (size: 0x1)
    bool _canBeDropped;                                                               // 0x04A9 (size: 0x1)
    bool _canTakeInHands;                                                             // 0x04AA (size: 0x1)
    bool _canBeVisibleInVicinity;                                                     // 0x04AB (size: 0x1)
    bool _canPlaceItemsOn;                                                            // 0x04AC (size: 0x1)
    EItemBlueprintPlacementBlockingType _blueprintPlacementBlockingType;              // 0x04AD (size: 0x1)
    TArray<TSoftClassPtr<AItem>> _blacklistedPlacementItems;                          // 0x04B0 (size: 0x10)
    bool _canPlaceBlueprintsOn;                                                       // 0x04C0 (size: 0x1)
    class USkeletalMesh* _overrideSkeletalMesh;                                       // 0x04C8 (size: 0x8)
    FTransform _overrideSkeletalMeshRelativeTransform;                                // 0x04D0 (size: 0x30)
    EItemExhausted _ifExhausted;                                                      // 0x0500 (size: 0x1)
    float _resourceAmountUsedPerWash;                                                 // 0x0504 (size: 0x4)
    bool _shouldDoServerCheckBeforeDropping;                                          // 0x0508 (size: 0x1)
    bool _shouldBlockVisibilityForAISight;                                            // 0x0509 (size: 0x1)
    EDeluxeVersion _requiredDLC;                                                      // 0x050A (size: 0x1)
    TSoftObjectPtr<UTexture2D> _inventoryIcon;                                        // 0x0510 (size: 0x28)
    TSoftObjectPtr<UTexture2D> _inventoryIconInHands;                                 // 0x0538 (size: 0x28)
    TSoftObjectPtr<UTexture2D> _outsideInventoryIcon;                                 // 0x0560 (size: 0x28)
    uint32 _sizeX;                                                                    // 0x0588 (size: 0x4)
    uint32 _sizeY;                                                                    // 0x058C (size: 0x4)
    TArray<class UBaseItemTag*> _inventoryWhiteList;                                  // 0x0590 (size: 0x10)
    TArray<class UBaseItemTag*> _inventoryBlackList;                                  // 0x05A0 (size: 0x10)
    float _maxContainedWeight;                                                        // 0x05B0 (size: 0x4)
    bool _canContainNonEmptyItems;                                                    // 0x05B4 (size: 0x1)
    bool _canBeContainedIfNonEmpty;                                                   // 0x05B5 (size: 0x1)
    class UUIRepresentationSubobject* _uiRepresentationSubobject;                     // 0x05B8 (size: 0x8)
    class UUIContainerSubobject* _uiContainerSubobject;                               // 0x05C0 (size: 0x8)
    bool _isIgnoredBySpawners;                                                        // 0x05C8 (size: 0x1)
    FFloatInterval _spawnTimeoutPerPlayer;                                            // 0x05CC (size: 0x8)
    FItemLocation _itemLocation;                                                      // 0x05D4 (size: 0xF)
    EItemRarity _rarity;                                                              // 0x05E3 (size: 0x1)
    FGameplayTagContainer _itemSpawnTypes;                                            // 0x05E8 (size: 0x20)
    FGameplayTag _itemSpawnGroup;                                                     // 0x0608 (size: 0x8)
    FVector _spawnLocationOffset;                                                     // 0x0610 (size: 0xC)
    FRotator _spawnRotationOffset;                                                    // 0x061C (size: 0xC)
    float _spawnRotationRandomization;                                                // 0x0628 (size: 0x4)
    float _placementCollisionUpOffset;                                                // 0x062C (size: 0x4)
    bool _shouldOverrideUsageWhenSpawnedBySpawners;                                   // 0x0630 (size: 0x1)
    float _initialUsageWhenSpawnedBySpawners;                                         // 0x0634 (size: 0x4)
    float _randomizeUsageWhenSpawnedBySpawners;                                       // 0x0638 (size: 0x4)
    TArray<class UBaseItemTag*> _itemTags;                                            // 0x0640 (size: 0x10)
    TArray<class UBaseItemTag*> _ownedItemTags;                                       // 0x0650 (size: 0x10)
    ENoiseLevel _noiseLevel;                                                          // 0x0660 (size: 0x1)
    FItemMotionNoise _motionNoise;                                                    // 0x0668 (size: 0x8)
    class UAkAudioEvent* _inventoryHandlingSound;                                     // 0x0670 (size: 0x8)
    class UAkAudioEvent* _destroyedSound;                                             // 0x0678 (size: 0x8)
    TArray<FCraftingPart> _defaultCraftingParts;                                      // 0x0680 (size: 0x10)
    float _damageOnUse;                                                               // 0x0690 (size: 0x4)
    float _damageOverTime;                                                            // 0x0694 (size: 0x4)
    float _autoDestructTime;                                                          // 0x0698 (size: 0x4)
    bool _allowContainedItemsDecay;                                                   // 0x069C (size: 0x1)
    bool _shouldDestroyContainedItemsOnDestroyEvent;                                  // 0x06A4 (size: 0x1)
    float _minTemperatureForHeatDamage;                                               // 0x06A8 (size: 0x4)
    float _containedDamageStartPercentage;                                            // 0x06AC (size: 0x4)
    float _damageResponseFactor;                                                      // 0x06B0 (size: 0x4)
    TSubclassOf<class UAttachmentSocketMountType> _attachmentSocketMountType;         // 0x06B8 (size: 0x8)
    TArray<FAttachmentSocket> _attachmentSockets;                                     // 0x06C0 (size: 0x10)
    TSubclassOf<class UAttachmentSocketMountType> _holsterAttachmentSocketMountType;  // 0x06D0 (size: 0x8)
    TMap<class TSubclassOf<UAttachmentSocketMountType>, class FAttachmentSocketOffset> _attachmentSocketsOffset; // 0x06D8 (size: 0x50)
    bool _enableGlowOnBeginPlay;                                                      // 0x0728 (size: 0x1)
    bool _enableAwarenessGlow;                                                        // 0x0729 (size: 0x1)
    bool _enableHoverGlow;                                                            // 0x072A (size: 0x1)
    class UStaticMesh* _placementMeshOverride;                                        // 0x0730 (size: 0x8)
    class UStaticMesh* _staticMeshHolsterOverride;                                    // 0x0738 (size: 0x8)
    class USkeletalMesh* _skeletalMeshHolsterOverride;                                // 0x0740 (size: 0x8)
    bool _hasHighLoadPriorityInVirtualization;                                        // 0x0748 (size: 0x1)
    float _virtualizationDistanceOffset;                                              // 0x074C (size: 0x4)
    bool _canEverBeVirtualized;                                                       // 0x0750 (size: 0x1)
    bool _shouldBeRemovedFromVirtualizationOnOwnerSet;                                // 0x0751 (size: 0x1)
    float _resultHealthMultiplierWhenCraftingIngredient;                              // 0x0754 (size: 0x4)
    float _preferredDamagePerUpdate;                                                  // 0x0758 (size: 0x4)
    bool _useHandCorrections;                                                         // 0x075C (size: 0x1)
    float _vicinityCheckDistance;                                                     // 0x0760 (size: 0x4)
    float _reachabilityTestZOffset;                                                   // 0x0764 (size: 0x4)
    TArray<class UClass*> _stackableClasses;                                          // 0x0768 (size: 0x10)
    int32 _maxNumOfStacks;                                                            // 0x0778 (size: 0x4)
    float _bloodDryingSpeed;                                                          // 0x077C (size: 0x4)
    TArray<FCraftingIngredientInstance> _craftingIngredientInstances;                 // 0x0780 (size: 0x10)
    class USkeletalMeshComponent* _skeletalMeshComponent;                             // 0x0790 (size: 0x8)
    float _weightUsed;                                                                // 0x079C (size: 0x4)
    FPackedEntitySetupAndId _repServerEntitySetupAndId;                               // 0x07B8 (size: 0x8)
    TArray<class UItemComponent*> _itemComponents;                                    // 0x07C0 (size: 0x10)
    class AActor* _attachParentObject;                                                // 0x07D0 (size: 0x8)
    FVisibilityReplication _visibilityReplication;                                    // 0x07D8 (size: 0x8)
    float _radiationAmount;                                                           // 0x0828 (size: 0x4)
    float _uncraftTime;                                                               // 0x082C (size: 0x4)
    uint64 _replicatedState;                                                          // 0x0830 (size: 0x8)
    uint8 _flagsReplicated;                                                           // 0x0839 (size: 0x1)
    class UItemRootComponent* _rootComponent;                                         // 0x0860 (size: 0x8)
    int64 _expirationTime;                                                            // 0x0870 (size: 0x8)
    TArray<FInventoryStackData> _stacks;                                              // 0x0878 (size: 0x10)
    class AItem* _stackExhaustedSuccessorItem;                                        // 0x0888 (size: 0x8)
    TScriptInterface<class IInventoryContainer> _parentContainer;                     // 0x0890 (size: 0x10)
    TScriptInterface<class IInventoryNode> _parentInventoryNode;                      // 0x08A0 (size: 0x10)
    TArray<FCraftingPart> _craftingParts;                                             // 0x0920 (size: 0x10)
    FName _survivalTipToShowOnPickup;                                                 // 0x096C (size: 0x8)
    FName _survivalTipToShowOnEquip;                                                  // 0x0974 (size: 0x8)

    void UpdateVisuals(bool shouldHandleAging);
    void StopBlinking();
    void StaticMeshChangedDelegate__DelegateSignature(class AItem* Item);
    void StateChangedDelegate__DelegateSignature(class AItem* Item);
    void SetInventoryIconInHands(TSoftObjectPtr<UTexture2D> Value);
    void SetInventoryIcon(TSoftObjectPtr<UTexture2D> Value);
    void SetHealth(float health);
    void Server_Throw(const FVector& ZeroBasedStartPosition, const FRotator& StartRotation, const FVector& StartVelocity);
    void PickedUpStateDelegate__DelegateSignature(class AItem* Item, bool pickedUp);
    void OnRightClicked();
    void OnRep_WeightUsed();
    void OnRep_Visibility();
    void OnRep_Stacks();
    void OnRep_ServerEntitySetupAndId();
    void OnRep_ReplicatedState();
    void OnRep_Health();
    void OnRep_FlagsReplicated();
    void OnDetachedFromItem(class AItem* Item);
    void OnDestroyedEvent(class AActor* Self);
    void OnContainedItemDestroyed(class AActor* containedItem);
    void OnAttachedToItem(class AItem* Item);
    void NetMulticast_SpawnDestroyedEffects();
    void NetMulticast_SpawnAndInteractOnOwningClient(class APrisoner* User, EInteractionType interactionType, const FInteractionData& InteractionData);
    void NetMulticast_EnsureSpawned();
    void NetMulticast_Drop(const class APawn* dropper, bool wasThrown, bool dropDown, bool resetRotation);
    void Multicast_Throw(const FVector& ZeroBasedStartPosition, const FRotator& StartRotation, const FVector& StartVelocity);
    bool HasPriorityForContainerItem(const class AItem* containerItem);
    FWidgetDisplayInfo GetWidgetDisplayInfo();
    float GetWaterWeight();
    float GetTotalWeight();
    FVector GetSupportingHandIKLocation();
    EPrisonerAnimationSet GetPrisonerAnimationSet();
    TSoftObjectPtr<UTexture2D> GetOutsideInventoryIcon();
    class UMeshComponent* GetMeshComponent();
    float GetMaxHealth();
    TSoftObjectPtr<UTexture2D> GetInventoryIconInHands();
    TSoftObjectPtr<UTexture2D> GetInventoryIcon();
    bool GetIgnoreSupportingHandIK();
    float GetHealth();
    FText GetDescription();
    FCharacterAndItemAnimation FindCharacterAndItemAnimation(const class UObject* Context, EPrisonerMontage prisonerMontageType);
    class UAnimMontage* FindAnimationMontage(const class UObject* Context, EPrisonerMontage prisonerMontageType);
    bool DropAround(const class AActor* Actor, const class APawn* dropper, float zOffset);
    void DestroyInternal();
    void DebugTextChangedDelegate__DelegateSignature(class AItem* Item);
    bool CanBeMeleeWeapon();
    bool CanBeCraftedByCharactrer(const class ACharacter* Character);
    bool CanAutoAddItem(const class AItem* Item, uint8& column, uint8& row);
    bool AutoAddItemToInventoryNode(TScriptInterface<class IInventoryNode> Item);
}; // Size: 0x9B0

class AItemContainer : public AActor
{
    class USceneComponent* _rootComponent;                                            // 0x0230 (size: 0x8)
    bool _canBeForceUnlocked;                                                         // 0x0238 (size: 0x1)
    float _forceUnlockTime;                                                           // 0x023C (size: 0x4)
    float _forceUnlockMovementAcceptanceRadius;                                       // 0x0240 (size: 0x4)
    FUnlockLocation _unlockPositionMarker;                                            // 0x0250 (size: 0x30)
    TArray<class UClass*> _upgradeItemsClasses;                                       // 0x0288 (size: 0x10)
    TArray<class ULockData*> _lockData;                                               // 0x0298 (size: 0x10)
    TArray<class UClass*> _originalUpgradeItemClasses;                                // 0x02B8 (size: 0x10)
    TArray<class ULockData*> _originalLockData;                                       // 0x02C8 (size: 0x10)
    bool _ignoreServerSettings;                                                       // 0x02D8 (size: 0x1)
    bool _disableSerialization;                                                       // 0x0301 (size: 0x1)
    FGameplayTag _famePointAwardTag;                                                  // 0x0304 (size: 0x8)

}; // Size: 0x330

class AItemContainerManager : public AActor
{
    TMap<class AItemContainer*, class FBox2D> _itemContainers;                        // 0x0268 (size: 0x50)
    TMap<class FDbIntegerId, class FItemContainersArray> _itemContainersOwned;        // 0x02B8 (size: 0x50)
    FItemContainersReplicationHelper _itemContainersDataRepHelper;                    // 0x0310 (size: 0x70)

    void NetMulticast_UpdateItemContainerData(int32 dataVersion, FString runtimeId, const FItemContainerRepData& ItemContainerData);
}; // Size: 0x380

class AItemDropPlaceholder : public AActor
{
    class USceneComponent* _rootComponent;                                            // 0x0220 (size: 0x8)
    class UBoxComponent* _boxCollisionComponent;                                      // 0x0228 (size: 0x8)
    class UStaticMeshComponent* _staticMeshComponent;                                 // 0x0230 (size: 0x8)
    class USkeletalMeshComponent* _skeletalMeshComponent;                             // 0x0238 (size: 0x8)

}; // Size: 0x288

class AItemSpawnerGroup : public AActor
{
    class UItemSpawnerComponent* SpawnerComponent;                                    // 0x0220 (size: 0x8)

}; // Size: 0x228

class AItemSpawnerVolume : public AVolume
{
    FItemLocation zone;                                                               // 0x0258 (size: 0xF)
    float ItemHealthMultiplier;                                                       // 0x0268 (size: 0x4)
    float ProbabilityMultiplier;                                                      // 0x026C (size: 0x4)
    float ExamineProbabilityMultiplier;                                               // 0x0270 (size: 0x4)

}; // Size: 0x278

class AItemSpawningManager : public AActor
{
    class UItemSpawningDataRegistry* _dataRegistry;                                   // 0x0238 (size: 0x8)

}; // Size: 0x1818

class AItemVirtualizationManager : public AActor
{
}; // Size: 0x578

class AItemWithSkeletalMesh : public AItem
{
    class USkeletalMeshComponent* SkeletalMesh;                                       // 0x09A8 (size: 0x8)

}; // Size: 0x9B0

class AItemWithText : public AItem
{
    int32 MaxTextCharactersPerRow;                                                    // 0x09B0 (size: 0x4)
    int32 MaxTextRows;                                                                // 0x09B4 (size: 0x4)
    class UWidgetComponent* _textWidgetComponent;                                     // 0x09B8 (size: 0x8)
    FString _text;                                                                    // 0x09C0 (size: 0x10)
    FDbIntegerId _owningUserProfileId;                                                // 0x09D0 (size: 0x8)

    void OnTextAccepted(class APrisoner* User, const FText& Text);
    void OnRep_Text();
}; // Size: 0x9F0

class AKillBoxC4SpawnPoint : public AActor
{
    FItemSpawnerPresetWithOverrides SpawnerPreset;                                    // 0x0220 (size: 0xB8)

}; // Size: 0x2D8

class AKillBoxDetectionField : public APlaceableActorBlocker
{
}; // Size: 0x230

class AKillBoxSpawnPoint : public AActor
{
    float _openDelay;                                                                 // 0x0220 (size: 0x4)
    float _closeDelay;                                                                // 0x0224 (size: 0x4)
    TArray<class TSubclassOf<AZombie2>> _zombieList;                                  // 0x0228 (size: 0x10)
    class ADoor* _door;                                                               // 0x0238 (size: 0x8)
    float _stableZombieProbability;                                                   // 0x0258 (size: 0x4)

}; // Size: 0x260

class ALadderMarkersRegistry : public AActor
{
}; // Size: 0x280

class ALargeAquaticAnimal : public AConZCharacter
{
    float _maxHealth;                                                                 // 0x0840 (size: 0x4)
    float _health;                                                                    // 0x0844 (size: 0x4)
    float _maxTimeWithoutRelevantPrisoners;                                           // 0x0858 (size: 0x4)
    EFishBehavior _behavior;                                                          // 0x0860 (size: 0x1)
    class UAnimMontage* _deathAnimation;                                              // 0x0868 (size: 0x8)
    float _deathSinkingSpeed;                                                         // 0x0870 (size: 0x4)
    float _capsuleRadiusAndHalfHeightOnDeath;                                         // 0x0874 (size: 0x4)

    void OnRep_Health(float oldValue);
    void OnRep_Behavior(EFishBehavior oldValue);
}; // Size: 0x890

class ALevelMarkers : public AActor
{
    TArray<FLadderMarker> LadderMarkers;                                              // 0x0220 (size: 0x10)
    TArray<FWindowMarker> WindowMarkers;                                              // 0x0230 (size: 0x10)

}; // Size: 0x2A0

class ALevelRadiationSource : public AActor
{
    class USceneComponent* _root;                                                     // 0x0220 (size: 0x8)
    class UStaticMeshComponent* _epicenter;                                           // 0x0228 (size: 0x8)
    class UStaticMeshComponent* _extents;                                             // 0x0230 (size: 0x8)
    class UStaticMeshComponent* _falloff;                                             // 0x0238 (size: 0x8)
    FVector _epicenterLocation;                                                       // 0x0240 (size: 0xC)
    float _epicenterRadius;                                                           // 0x024C (size: 0x4)
    float _maxRadiationAmountIncreaseRate;                                            // 0x0250 (size: 0x4)
    float _radiationAmountIncreaseRateFalloffExponent;                                // 0x0254 (size: 0x4)
    float _radiationNoiseAmountScale;                                                 // 0x0258 (size: 0x4)
    float _radiationNoiseLocationScale;                                               // 0x025C (size: 0x4)
    bool _shouldDrawEpicenter;                                                        // 0x0260 (size: 0x1)
    bool _shouldDrawExtents;                                                          // 0x0261 (size: 0x1)
    bool _shouldDrawRadiationFalloffVisualization;                                    // 0x0262 (size: 0x1)
    float _radiationFalloffVisualizationZBias;                                        // 0x0264 (size: 0x4)
    class UMaterialInterface* _radiationFalloffVisualizationMaterial;                 // 0x0268 (size: 0x8)
    bool _shouldDrawExtentBounds;                                                     // 0x0270 (size: 0x1)
    class UTextureRenderTarget2D* _radiationLookupRenderTarget;                       // 0x0278 (size: 0x8)
    class UMaterialInterface* _radiationLookupRenderMaterial;                         // 0x0280 (size: 0x8)
    class UMaterialParameterCollection* _radiationMaterialParamCollection;            // 0x0288 (size: 0x8)

    void RenderRadiationIntensityToLookupTexture();
}; // Size: 0x290

class ALockBombDefusalMinigame : public ABombDefusalMinigameBase
{
    TSubclassOf<class ATrapItem> _bombClass;                                          // 0x0540 (size: 0x8)

}; // Size: 0x550

class ALockProtectionItem : public AEquipmentItem
{
    class UBasicGameResourceSlotItemComponent* _resourceSlot;                         // 0x09C8 (size: 0x8)

}; // Size: 0x9D0

class ALockpickingMinigame : public AMinigame
{
    class UStaticMeshComponent* _outerRing;                                           // 0x0340 (size: 0x8)
    class UStaticMeshComponent* _movableRing;                                         // 0x0348 (size: 0x8)
    class USceneComponent* _lockpickingSetAnchor;                                     // 0x0350 (size: 0x8)
    class USceneComponent* _lockpickManipulator;                                      // 0x0358 (size: 0x8)
    class USceneComponent* _lockpickAnchor;                                           // 0x0360 (size: 0x8)
    class UStaticMeshComponent* _lockpick;                                            // 0x0368 (size: 0x8)
    class USceneComponent* _tensionToolManipulator;                                   // 0x0370 (size: 0x8)
    class USceneComponent* _tensionToolAnchor;                                        // 0x0378 (size: 0x8)
    class UStaticMeshComponent* _tensionTool;                                         // 0x0380 (size: 0x8)
    FVector _zoomStartLocation;                                                       // 0x0388 (size: 0xC)
    FVector _zoomEndLocation;                                                         // 0x0394 (size: 0xC)
    FTransform _protectionParticlesTransform;                                         // 0x03A0 (size: 0x30)
    class UCurveFloat* _zoomCurve;                                                    // 0x03D0 (size: 0x8)
    class UCurveFloat* _fadeCurve;                                                    // 0x03D8 (size: 0x8)
    float _pickBreakingMultiplierForMediumDifficulty;                                 // 0x03E0 (size: 0x4)
    float _pickBreakingMultiplierForHardDifficulty;                                   // 0x03E4 (size: 0x4)
    class UAkAudioEvent* _lockpickingLockpickMovementStartAudioEvent;                 // 0x0410 (size: 0x8)
    class UAkAudioEvent* _lockpickingLockpickMovementStopAudioEvent;                  // 0x0418 (size: 0x8)
    class UAkAudioEvent* _lockpickingLockTensionStartAudioEvent;                      // 0x0420 (size: 0x8)
    class UAkAudioEvent* _lockpickingLockTensionStopAudioEvent;                       // 0x0428 (size: 0x8)
    class UAkAudioEvent* _lockpickingLockTurningStartAudioEvent;                      // 0x0430 (size: 0x8)
    class UAkAudioEvent* _lockpickingLockTurningStopAudioEvent;                       // 0x0438 (size: 0x8)
    class UAkAudioEvent* _lockpickingSuccessAudioEvent;                               // 0x0440 (size: 0x8)
    class UAkAudioEvent* _lockpickingFailedAudioEvent;                                // 0x0448 (size: 0x8)
    class UAkAudioEvent* _lockpickingResetAudioEvent;                                 // 0x0450 (size: 0x8)
    float _rotatingStartAngle;                                                        // 0x045C (size: 0x4)
    float _duration;                                                                  // 0x0460 (size: 0x4)
    float _angleTolerance;                                                            // 0x0464 (size: 0x4)

    void OnTensionToolDestroyed(class AActor* tensionTool);
    void OnLockpickDestroyed(class AActor* lockpick);
}; // Size: 0x4E0

class AMainMenuGameMode : public AGameMode
{
}; // Size: 0x358

class AMainMenuHUD : public AConZHUD
{
    EConZMenu BaseGameModeMenu;                                                       // 0x0348 (size: 0x1)
    class UPrisonerCreationUIController* _prisonerCreationUIController;               // 0x0350 (size: 0x8)
    TSubclassOf<class UPrisonerCreationUIController> _prisonerCreationUIControllerClass; // 0x0358 (size: 0x8)

}; // Size: 0x360

class AMainMenuPlayerController : public AMenuPlayerController
{
    class UMaterialInstance* _droneVisionMaterialInstance;                            // 0x0570 (size: 0x8)

}; // Size: 0x590

class AMechanic : public ATrader
{
    class UMechanicCommonData* _commonData;                                           // 0x09C8 (size: 0x8)
    float _clientUpdatePeriod;                                                        // 0x09D0 (size: 0x4)
    int32 _clientUpdateMaxSize;                                                       // 0x09D4 (size: 0x4)

}; // Size: 0xA60

class AMechanoidsManager : public AActor
{
    TSubclassOf<class ADrone> _droneSpawnClass;                                       // 0x0240 (size: 0x8)
    float _droneSpawnDistance;                                                        // 0x0248 (size: 0x4)
    float _droneSpawnHeight;                                                          // 0x024C (size: 0x4)
    float _droneCheckForNearbyPlayerDistance;                                         // 0x0250 (size: 0x4)
    FDroneVisitTimeData _droneInitialVisitTime;                                       // 0x0254 (size: 0x8)
    float _droneVisitClusterRadius;                                                   // 0x025C (size: 0x4)
    float _weightPerSightingMode;                                                     // 0x0260 (size: 0xC)
    FDroneVisitTimeData _droneVisitTimeDataPerSightingMode;                           // 0x026C (size: 0x18)

    void Drone_OnDestroyed(class AActor* sender);
}; // Size: 0x290

class AMedicationItem : public AItem
{
    EMedicationUsage Usage;                                                           // 0x09A8 (size: 0x1)
    EMedicationType Type;                                                             // 0x09A9 (size: 0x1)
    float DailyDoses;                                                                 // 0x09AC (size: 0x4)
    float TimeToAbsorbSeconds;                                                        // 0x09B0 (size: 0x4)
    float EffectTimeMultiplier;                                                       // 0x09B4 (size: 0x4)
    float ReuseEffectTimeIncrease;                                                    // 0x09B8 (size: 0x4)
    float MaxEffectTime;                                                              // 0x09BC (size: 0x4)
    EMedicationRepeatedAbuseReaction RepeatedAbuseReaction;                           // 0x09C0 (size: 0x1)

}; // Size: 0x9D0

class AMenuCameraController : public AActor
{
    class ACineCameraActor* _camera;                                                  // 0x0220 (size: 0x8)
    class USplineComponent* _positionSpline;                                          // 0x0228 (size: 0x8)
    class USplineComponent* _viewTargetSpline;                                        // 0x0230 (size: 0x8)
    FVector2D _mouseBasedRotationIntensity;                                           // 0x0238 (size: 0x8)
    FRuntimeFloatCurve _positionWeightCurve;                                          // 0x0240 (size: 0x88)
    FRuntimeFloatCurve _viewTargetWeightCurve;                                        // 0x02C8 (size: 0x88)
    float _interpolationSpeed;                                                        // 0x0350 (size: 0x4)
    float _mouseTrackingSpeed;                                                        // 0x0354 (size: 0x4)

}; // Size: 0x368

class AMenuPlayerController : public APlayerController
{
}; // Size: 0x570

class AMeshSurfaceParticlesEffectActor : public ASceneComponentEffectsActor
{
}; // Size: 0x298

class AMetalDetector : public AItem
{
    class UBasicGameResourceSlotItemComponent* _resourceSlotComponent;                // 0x09B0 (size: 0x8)
    float _minDetectionRadius;                                                        // 0x09B8 (size: 0x4)
    float _maxDetectionRadius;                                                        // 0x09BC (size: 0x4)
    float _updatePeriod;                                                              // 0x09C0 (size: 0x4)
    float _detectionFactor;                                                           // 0x09C4 (size: 0x4)
    class UAkAudioEvent* _startEvent;                                                 // 0x09C8 (size: 0x8)
    class UAkAudioEvent* _stopEvent;                                                  // 0x09D0 (size: 0x8)
    FName _RTPCName;                                                                  // 0x09D8 (size: 0x8)
    int32 _soundInterpolationTimeMs;                                                  // 0x09E0 (size: 0x4)
    FName _detectionSourceSocketName;                                                 // 0x09F0 (size: 0x8)

    void SetDetectionFactor_OnRep();
    void Server_ToggleTurnedOn();
    void Server_SetDetectionFactor(float newDetectionFactor);
    void OnResourceComponentDeactivated(class UActorComponent* Component);
    void OnResourceComponentActivated(class UActorComponent* Component, bool wasReset);
}; // Size: 0xA00

class AMiniatureZombie : public AZombie2
{
}; // Size: 0xB40

class AMinigame : public AActor
{
    int32 _testingMode;                                                               // 0x0250 (size: 0x4)
    class USceneComponent* _rootComponent;                                            // 0x0258 (size: 0x8)
    class USceneCaptureComponent2D* _captureCam;                                      // 0x0260 (size: 0x8)
    class USceneCaptureComponent2D* _captureMaskCam;                                  // 0x0268 (size: 0x8)
    class UMinigameWidget* _minigameWidget;                                           // 0x0278 (size: 0x8)
    TSubclassOf<class UMinigameWidget> _minigameWidgetClass;                          // 0x0280 (size: 0x8)
    float _introDuration;                                                             // 0x02B0 (size: 0x4)
    float _outroDurationOnFail;                                                       // 0x02B4 (size: 0x4)
    float _outroDurationOnSuccess;                                                    // 0x02B8 (size: 0x4)
    TArray<class TSubclassOf<UBaseMinigameAnimator>> _introAnimatorClasses;           // 0x02C0 (size: 0x10)
    TArray<class TSubclassOf<UBaseMinigameAnimator>> _outroAnimatorClasses;           // 0x02D0 (size: 0x10)
    bool _canBeCanceled;                                                              // 0x02E0 (size: 0x1)
    EPrisonerMontage _simulatedMontage;                                               // 0x02E1 (size: 0x1)
    class UAkAudioEvent* _simulatedAudioStart;                                        // 0x02E8 (size: 0x8)
    class UAkAudioEvent* _simulatedAudioStop;                                         // 0x02F0 (size: 0x8)
    TArray<class TSubclassOf<UBaseItemTag>> _takeInHandsItemTagClasses;               // 0x02F8 (size: 0x10)
    TArray<TWeakObjectPtr<AItem>> _currentlyUsedTools;                                // 0x0310 (size: 0x10)
    TArray<class UBaseMinigameAnimator*> _introAnimators;                             // 0x0320 (size: 0x10)
    TArray<class UBaseMinigameAnimator*> _outroAnimators;                             // 0x0330 (size: 0x10)

}; // Size: 0x340

class AMobilePhone : public AItem
{
    class UBasicGameResourceSlotItemComponent* _resourceSlotComponent;                // 0x09C0 (size: 0x8)
    class UAkAudioEvent* _startEvent;                                                 // 0x09C8 (size: 0x8)
    class UAkAudioEvent* _stopEvent;                                                  // 0x09D0 (size: 0x8)

    void OnResourceComponentDeactivated(class UActorComponent* Component);
    void OnResourceComponentActivated(class UActorComponent* Component, bool wasReset);
}; // Size: 0x9E0

class AMobilePhoneMinigame : public AMinigame
{
    class UMobilePhoneUIController* _uiController;                                    // 0x0340 (size: 0x8)
    class UStaticMeshComponent* _mobilePhoneMeshComponent;                            // 0x0348 (size: 0x8)
    class UWidgetComponent* _mobilePhoneWidgetComponent;                              // 0x0350 (size: 0x8)
    FVector _zoomStartLocation;                                                       // 0x0358 (size: 0xC)
    FVector _zoomEndLocation;                                                         // 0x0364 (size: 0xC)
    class UCurveFloat* _zoomCurve;                                                    // 0x0370 (size: 0x8)
    float _virtualMouseMinSensitivityModifier;                                        // 0x0378 (size: 0x4)
    float _virtualMouseMaxSensitivityModifier;                                        // 0x037C (size: 0x4)
    class UStaticMesh* _mobilePhoneMesh;                                              // 0x0388 (size: 0x8)

}; // Size: 0x390

class AMugshotRoom : public AActor
{
    class APrisoner* _prisoner;                                                       // 0x0220 (size: 0x8)
    TSoftClassPtr<APrisoner> _prisonerClass;                                          // 0x0228 (size: 0x28)
    FTransform _prisonerTransform;                                                    // 0x0250 (size: 0x30)
    class USceneComponent* _sceneRoot;                                                // 0x0280 (size: 0x8)
    class USceneCaptureComponent2D* _mugshotCapture;                                  // 0x0288 (size: 0x8)
    class UChildActorComponent* _inmateShirt;                                         // 0x0290 (size: 0x8)

}; // Size: 0x2A0

class ANPCDrifter : public AArmedNPCBase
{
}; // Size: 0xA10

class ANPCDrifterAIController : public AArmedNPCBaseAIController
{
    class UNPCControllerStateArmedNPCBase* _statesByEnum;                             // 0x0598 (size: 0x48)

}; // Size: 0x5E0

class ANPCGuard : public AArmedNPCBase
{
}; // Size: 0xA20

class ANPCGuardAIController : public AArmedNPCBaseAIController
{
    class UNPCControllerStateArmedNPCBase* _statesByEnum;                             // 0x0598 (size: 0x48)

}; // Size: 0x5E0

class ANightVisionGogglesItem : public AClothesItem
{
    class UAkAudioEvent* ActivatedSound;                                              // 0x0A50 (size: 0x8)
    class UAkAudioEvent* DeactivatedSound;                                            // 0x0A58 (size: 0x8)
    FNightVisionGogglesItemActivatedChanged ActivatedChanged;                         // 0x0A60 (size: 0x10)
    void ActivatedChangedEvent(const class ANightVisionGogglesItem* sender);
    class UBasicGameResourceSlotItemComponent* _resourceSlotComponent;                // 0x0A78 (size: 0x8)
    FGameplayTag _nightVisionGogglesOnTag;                                            // 0x0A80 (size: 0x8)
    FRuntimeFloatCurve _batteryPercentageToGlitchStrengthCurve;                       // 0x0A88 (size: 0x88)

    void OnComponentDeactivated(class UActorComponent* Component);
    void OnComponentActivated(class UActorComponent* Component, bool wasReset);
    void ActivatedChangedEvent__DelegateSignature(const class ANightVisionGogglesItem* sender);
}; // Size: 0xB10

class ANoticeBoard : public AActor
{
    class UStaticMeshComponent* _meshComponent;                                       // 0x0228 (size: 0x8)
    TArray<class UMaterialInterface*> _paperMaterials;                                // 0x0230 (size: 0x10)
    TSubclassOf<class ANoticeBoardMinigame> _minigameClass;                           // 0x0240 (size: 0x8)
    TSubclassOf<class UNoticeBoardMinigameConfiguration> _minigameConfigurationClass; // 0x0248 (size: 0x8)

}; // Size: 0x270

class ANoticeBoardMinigame : public AMinigame
{
    class UNoticeBoardUIController* _uiController;                                    // 0x0340 (size: 0x8)
    class UStaticMeshComponent* _noticeBoardMeshComponent;                            // 0x0348 (size: 0x8)
    FVector _zoomStartLocation;                                                       // 0x0350 (size: 0xC)
    FVector _zoomEndLocation;                                                         // 0x035C (size: 0xC)
    class UCurveFloat* _zoomCurve;                                                    // 0x0368 (size: 0x8)
    class UStaticMesh* _noticeBoardMesh;                                              // 0x0370 (size: 0x8)

}; // Size: 0x380

class ANotificationsManager : public AActor
{
    TMap<class FDbIntegerId, class UNotificationDescription*> _queuedNotifications;   // 0x0220 (size: 0x50)
    TArray<class UNotificationChain*> _queuedNotificationChains;                      // 0x0270 (size: 0x10)
    int64 _notificationTimeout;                                                       // 0x02D0 (size: 0x8)

    void OnPlayerReadyToPlay(class AConZPlayerController* PlayerController);
    void NetMulticast_RequestNotification(const FNotificationDescriptionReplicationHelper& Description);
}; // Size: 0x2D8

class AOfflineRaidProtectionManager : public ARaidProtectionManager
{
}; // Size: 0x450

class APersistentCollisionManager : public AActor
{
    TArray<class UPersistentLandscapeHeightfieldComponent*> _landscapeCollisionComponents; // 0x0220 (size: 0x10)
    TArray<class UPersistentStaticMeshComponent*> _staticMeshCollisionComponents;     // 0x0230 (size: 0x10)
    TArray<class UPersistentPhysicalMaterial*> _physicalMaterials;                    // 0x0240 (size: 0x10)
    TArray<class UBodySetup*> _bodySetups;                                            // 0x0250 (size: 0x10)

}; // Size: 0x260

class APesticideItem : public AItem
{
    class USkeletalMeshComponent* SkeletalMesh;                                       // 0x09A8 (size: 0x8)
    EPesticideType _type;                                                             // 0x09B0 (size: 0x1)
    class UAnimMontage* _applyPesticidePrisonerMontage;                               // 0x09B8 (size: 0x8)
    class UAnimMontage* _applyPesticideItemMontage;                                   // 0x09C0 (size: 0x8)

}; // Size: 0x9D0

class APhotoModePawn : public APawn
{
    TSubclassOf<class UPhotoModeMainPanel> HudWidgetClass;                            // 0x0288 (size: 0x8)
    TSubclassOf<class UPrisonerPhotoModeAnimInstance> AnimInstanceClass;              // 0x0290 (size: 0x8)
    class UCineCameraComponent* _camera;                                              // 0x02A8 (size: 0x8)
    class USpotLightComponent* _light;                                                // 0x02B0 (size: 0x8)
    class UVisionEffectsComponent* _visionEffects;                                    // 0x02B8 (size: 0x8)
    class UAkAudioEvent* _shutterSound;                                               // 0x02C0 (size: 0x8)
    float _maxFocusDistance;                                                          // 0x02C8 (size: 0x4)
    float _collisionSphereRadius;                                                     // 0x02CC (size: 0x4)
    float _minOrbitingDistance;                                                       // 0x02D0 (size: 0x4)
    float _maxDistanceFromTarget;                                                     // 0x02D4 (size: 0x4)
    float _desiredOrbitDistance;                                                      // 0x02D8 (size: 0x4)
    float _maxMultiplayerCameraHeightDifference;                                      // 0x02DC (size: 0x4)
    float _maxMultiplayerExposureValue;                                               // 0x02E0 (size: 0x4)
    float _maxMultiplayerCameraFOV;                                                   // 0x02E4 (size: 0x4)
    float _keyInputCameraSpeed;                                                       // 0x02E8 (size: 0x4)
    float _timeDilationInterpSpeed;                                                   // 0x02EC (size: 0x4)

    void SetGameAudioPaused(bool paused);
    void OnFadeOutFinished();
    void Client_Initialize(class AActor* Target);
}; // Size: 0x3E0

class APlaceableActorBase : public AActor
{
    FDbIntegerId _id;                                                                 // 0x0228 (size: 0x8)
    class UBoxComponent* _boxCollisionComponent;                                      // 0x0230 (size: 0x8)
    class UPlaceableCraftingRecipe* _craftingRecipe;                                  // 0x0240 (size: 0x8)
    UClass* _productClass;                                                            // 0x0248 (size: 0x8)
    FCraftingProcess _craftingProcess;                                                // 0x0250 (size: 0x20)
    class USceneComponent* _rootComponent;                                            // 0x0270 (size: 0x8)
    class UStaticMeshComponent* _staticMeshComponent_Main;                            // 0x0278 (size: 0x8)
    class UStaticMeshComponent* _staticMeshComponent_Outline;                         // 0x0280 (size: 0x8)
    class UStaticMeshComponent* _staticMeshComponent_Depth;                           // 0x0288 (size: 0x8)
    class UStaticMeshComponent* _queryStaticMeshComponent;                            // 0x0290 (size: 0x8)
    class UStaticMeshComponent* _directionIndicatorStaticMeshComponent;               // 0x0298 (size: 0x8)
    class UMaterialInstanceDynamic* _primaryMaterialAllowed;                          // 0x02A0 (size: 0x8)
    class UMaterialInstanceDynamic* _primaryMaterialDisallowed;                       // 0x02A8 (size: 0x8)
    class UMaterialInstanceDynamic* _outlineMaterial;                                 // 0x02B0 (size: 0x8)
    class UMaterialInstanceDynamic* _depthMaterial;                                   // 0x02B8 (size: 0x8)
    EPlaceableStatusFlags _statusFlags;                                               // 0x02F8 (size: 0x1)
    EPlacementBaseState _placementState;                                              // 0x0318 (size: 0x1)
    int32 _numTracesX;                                                                // 0x03AC (size: 0x4)
    int32 _numTracesY;                                                                // 0x03B0 (size: 0x4)
    float _traceHeightFactor;                                                         // 0x03B4 (size: 0x4)
    float _maxPlacementAngle;                                                         // 0x03B8 (size: 0x4)
    float _widgetHidingDistance;                                                      // 0x03C0 (size: 0x4)
    float _fullWidgetHidingDistance;                                                  // 0x03C4 (size: 0x4)
    float _widgetSwitchPeriod;                                                        // 0x03C8 (size: 0x4)
    float _minDistanceToShowWidget;                                                   // 0x03CC (size: 0x4)
    float _syncPeriod;                                                                // 0x03D0 (size: 0x4)
    float _reachabilityMaxDifference;                                                 // 0x03D4 (size: 0x4)
    float _directionIndicatorOffset;                                                  // 0x03D8 (size: 0x4)
    FText _destroyInteractionText;                                                    // 0x03E0 (size: 0x18)
    FVector _replicatedLocation;                                                      // 0x03F8 (size: 0xC)
    FVector _replicatedPlacedLocation;                                                // 0x0404 (size: 0xC)
    FRotator _replicatedRotation;                                                     // 0x0410 (size: 0xC)

    void Server_UpdateState(const FPlaceableActorStateReplicationHelper& State);
    void Server_Place(const FVector& Location, const FRotator Rotation);
    void OnRep_ReplicatedRotation();
    void OnRep_ReplicatedPlacedLocation();
    void OnRep_ReplicatedLocation();
    void OnRep_PlacementState();
    void OnRep_Id();
    void OnRep_CraftingRecipe();
    void OnRep_CraftingProcess();
}; // Size: 0x4F0

class APlaceableActorBaseBuilding : public APlaceableActorBase
{
    int32 _maxNumberOfTiles;                                                          // 0x04F0 (size: 0x4)
    float _maxHeightDifferenceForTiling;                                              // 0x04F4 (size: 0x4)
    float _maxTileHeightAdjustionUp;                                                  // 0x04F8 (size: 0x4)
    float _maxTileHeightAdjustionDown;                                                // 0x04FC (size: 0x4)
    float _tileSnappingAngle;                                                         // 0x0500 (size: 0x4)
    float _sizeVariatedTilesMaxHeightDifference;                                      // 0x0504 (size: 0x4)
    float _maxGroundPointDistance;                                                    // 0x0508 (size: 0x4)
    float _groundPointsTraceHeight;                                                   // 0x050C (size: 0x4)
    float _groundPointsTraceDepth;                                                    // 0x0510 (size: 0x4)
    float _maxPlacementLengthForSizeVariatedTiles;                                    // 0x0514 (size: 0x4)
    FTilesData _tilesData;                                                            // 0x0550 (size: 0x18)
    class UStaticMeshComponent* _flagAreaMeshComponent;                               // 0x0568 (size: 0x8)
    class UMaterialInstanceDynamic* _primaryMaterialFriendlyFlag;                     // 0x0570 (size: 0x8)
    FVector _replicatedFirstPointLocation;                                            // 0x0578 (size: 0xC)
    FRotator _replicatedFirstPointRotation;                                           // 0x0584 (size: 0xC)
    EPlacementBaseBuildingState _placementSubState;                                   // 0x0590 (size: 0x1)
    EStateFlags _stateFlags;                                                          // 0x0591 (size: 0x1)
    TArray<FSizeVariatedTilesData> _sizeVariationData;                                // 0x05C8 (size: 0x10)

    void OnRep_ReplicatedFirstPointRotation();
    void OnRep_ReplicatedFirstPointLocation();
    void OnRep_PlacementSubState();
}; // Size: 0x5F0

class APlaceableActorBaseUpgrade : public APlaceableActorBase
{
    FConZBaseElementIdentifier _elementToBeUpgraded;                                  // 0x04F0 (size: 0x20)

    void OnRep_ElementToBeUpgraded();
}; // Size: 0x558

class APlaceableActorBlocker : public AActor
{
}; // Size: 0x220

class APlaceableActorFortifications : public APlaceableActorBase
{
}; // Size: 0x538

class APlaceableActorGarden : public APlaceableActorBase
{
    EGardenPlacementState _gardenPlacementState;                                      // 0x04F0 (size: 0x1)
    TArray<class UStaticMeshComponent*> _staticMeshComponents_Main;                   // 0x0528 (size: 0x10)
    TArray<class UStaticMeshComponent*> _staticMeshComponents_Outline;                // 0x0538 (size: 0x10)
    TArray<class UStaticMeshComponent*> _staticMeshComponents_Depth;                  // 0x0548 (size: 0x10)
    TArray<class UStaticMeshComponent*> _directionIndicatorStaticMeshComponents;      // 0x0558 (size: 0x10)
    FBox2D _replicatedGardenSize;                                                     // 0x0568 (size: 0x14)
    FGameplayTag _maxInstancesServerSettingTag;                                       // 0x05B0 (size: 0x8)

    void OnRep_GardenSize();
    void OnRep_GardenPlacementState();
}; // Size: 0x5C0

class APlaceableActorItems : public APlaceableActorBase
{
}; // Size: 0x4F8

class APlaceableActorModularBaseBuilding : public APlaceableActorBaseBuilding
{
}; // Size: 0x680

class APlaceableActorModularBaseBuildingFoundation : public APlaceableActorModularBaseBuilding
{
    TArray<FLineTraceSocketPair> _lineTraceSockets;                                   // 0x0680 (size: 0x10)
    bool _shouldCheckBaseBuildingElementsInFirstBoxOverlap;                           // 0x0690 (size: 0x1)

}; // Size: 0x6B0

class APlaceableActorTurret : public APlaceableActorBaseBuilding
{
}; // Size: 0x5F8

class APlantGrowthDisplay : public AActor
{
    class UPlantSpecies* _plantSpecies;                                               // 0x0220 (size: 0x8)
    bool _animateGrowth;                                                              // 0x0228 (size: 0x1)
    float _growthSpeed;                                                               // 0x022C (size: 0x4)
    float _growthPercentage;                                                          // 0x0230 (size: 0x4)
    float _dehydration;                                                               // 0x0234 (size: 0x4)
    float _pestsIntensity;                                                            // 0x0238 (size: 0x4)
    float _diseasesIntensity;                                                         // 0x023C (size: 0x4)
    FString _stageText;                                                               // 0x0240 (size: 0x10)
    class UNiagaraSystem* _pestsParticleSystem;                                       // 0x0250 (size: 0x8)
    class UNiagaraComponent* _pestsParticleComponent;                                 // 0x0258 (size: 0x8)

    FString GetPlantGrowthStageString(float growth, class UPlantSpecies* species);
    float GetPlantGrowthStagePercentage(float growth, class UPlantSpecies* species);
    float GetGrowthPercentage();
}; // Size: 0x278

class APlayerDrone : public ADrone
{
    float _movementInertiaPlayer;                                                     // 0x0940 (size: 0x4)
    class UCameraComponent* _firstPersonCameraComponent;                              // 0x0948 (size: 0x8)
    class UCameraComponent* _thirdPersonCameraComponent;                              // 0x0950 (size: 0x8)
    class USpringArmComponent* _springArmComponent;                                   // 0x0958 (size: 0x8)
    class UCharacterItemDragComponent* _itemDragComponent;                            // 0x0960 (size: 0x8)
    class UMaterialInterface* _nightVisionMaterial;                                   // 0x0968 (size: 0x8)
    float _interactionDistance;                                                       // 0x0970 (size: 0x4)
    class UMaterialInstance* _itemPlacingMaterialAllowed;                             // 0x0978 (size: 0x8)
    class UMaterialInstance* _itemPlacingMaterialDisallowed;                          // 0x0980 (size: 0x8)
    FLinearColor _colorTintWhenInvisible;                                             // 0x0988 (size: 0x10)
    FLinearColor _colorTintWhenHidden;                                                // 0x0998 (size: 0x10)
    class UActionProgressWidget* _progressWidget;                                     // 0x0B08 (size: 0x8)
    TWeakObjectPtr<class UObject> _currentlyDroppingItem;                             // 0x0B14 (size: 0x8)
    class UDoorUpgradeWidget* _doorUpgradeWidget;                                     // 0x0B40 (size: 0x8)
    EDroneVisibility _droneVisibility;                                                // 0x0B48 (size: 0x1)

    void TryInteractDefault();
    void Server_TeleportToNextOrPreviousPlayer(bool Next);
    void Server_SpawnAndDropItemAt(class UContainerItemDescriptor* Item, FVector Location, FRotator Rotation);
    void Server_SetDroneVisibility(EDroneVisibility Value);
    void Server_ReportUnauthorizedInteractionAttempt();
    void Server_OpenDoor(class ADoor* Door);
    void Server_InitializeItemVirtualizedInventory(class UObject* Item);
    void Server_DropItemAt(class AItem* Item, FVector Location, FRotator Rotation);
    void Server_DestroyItem(class AItem* Item);
    void Server_DestroyGarden(const FVector& Location, const uint16 GardenId);
    void Server_DestroyFortification(class UFortificationComponent* FortificationComponent);
    void Server_DestroyBaseElement(int64 BaseId, int64 ElementID, const FVector& Location);
    void Server_CloseDoor(class ADoor* Door);
    void Server_AddInventoryNode(class UObject* Item, class UObject* container, const FInventoryPositionDataRepHelper& position, class UObject* Target);
    void OnRepDroneVisibility(EDroneVisibility oldValue);
    void OnProgressWidgetFinished();
    void Client_OnExitPhotoMode();
    void Client_OnEnterPhotoMode();
    void Client_DropItem(class AItem* Item);
    void CancelInteractableDragging();
}; // Size: 0xBF0

class APortableVehicleServiceStation : public AVehicleServiceStation
{
    FGameplayTag _serviceModeRep;                                                     // 0x02D8 (size: 0x8)
    TMap<class FGameplayTag, class UAnimSequenceBase*> _poseVsSericeModeMap;          // 0x02E0 (size: 0x50)
    TSubclassOf<class AItem> _originalItemClass;                                      // 0x0330 (size: 0x8)

    void OnRep_ServiceMode();
}; // Size: 0x340

class APowerNode : public AActor
{
    class USceneComponent* _root;                                                     // 0x0220 (size: 0x8)
    class UStaticMeshComponent* _mesh;                                                // 0x0228 (size: 0x8)
    class UPowerCableMeshSet* _cableMeshSet;                                          // 0x0230 (size: 0x8)
    float _maxCablesDrawDistance;                                                     // 0x0238 (size: 0x4)
    bool _useAsOccluder;                                                              // 0x023C (size: 0x1)
    bool _cablesCastShadow;                                                           // 0x023D (size: 0x1)
    TArray<FPowerNodeConnector> _connectors;                                          // 0x0240 (size: 0x10)
    class APowerNode* _connectionTarget;                                              // 0x0250 (size: 0x8)

}; // Size: 0x258

class APracticeLockpickingItem : public AItem
{
    TArray<class ULockData*> _possibleLocks;                                          // 0x09B0 (size: 0x10)

}; // Size: 0x9D0

class APracticeTrapItem : public ATrapItem
{
}; // Size: 0xAE0

class APrisoner : public AConZCharacter
{
    class UPrisonerSkillComponent* SkillComponent;                                    // 0x0880 (size: 0x8)
    class UPrisonerInventoryComponent* InventoryComponent;                            // 0x0888 (size: 0x8)
    class UPrisonerAppearanceComponent* AppearanceComponent;                          // 0x0890 (size: 0x8)
    class UMeleeCombatComponent* MeleeCombatComponent;                                // 0x0898 (size: 0x8)
    class UHitReactComponent* HitReactComponent;                                      // 0x08A0 (size: 0x8)
    class UPhysicalAnimationComponent* PhysicalAnimationComponent;                    // 0x08A8 (size: 0x8)
    class UInteractionComponent* InteractionComponent;                                // 0x08B0 (size: 0x8)
    class UPawnSensingComponent* SensingComponent;                                    // 0x08B8 (size: 0x8)
    class UBaseInteractionComponent* BaseInteractionComponent;                        // 0x08C0 (size: 0x8)
    bool OverrideAimOffset;                                                           // 0x08C8 (size: 0x1)
    FRotator AimOffsetOverride;                                                       // 0x08CC (size: 0xC)
    class AActor* EyesLookAtTargetOverride;                                           // 0x08D8 (size: 0x8)
    bool IsFriendly;                                                                  // 0x08E0 (size: 0x1)
    bool CanEverBeKnockedOutByMeleeAttack;                                            // 0x08E1 (size: 0x1)
    bool ShouldOverrideCharacterTemplate;                                             // 0x08E2 (size: 0x1)
    FCharacterTemplate CharacterTemplateOverride;                                     // 0x08E8 (size: 0xE8)
    FAttachmentSocket LeftHandAttachmentSocket;                                       // 0x09D0 (size: 0x10)
    FAttachmentSocket RightHandAttachmentSocket;                                      // 0x09E0 (size: 0x10)
    FAttachmentSocket LeftShoulderHolsterSocket;                                      // 0x09F0 (size: 0x10)
    FAttachmentSocket RightShoulderHolsterSocket;                                     // 0x0A00 (size: 0x10)
    FPrisonerHoveredActorChanged HoveredActorChanged;                                 // 0x0BD8 (size: 0x10)
    void HoveredActorChanged(class AActor* hoveredActor);
    bool RespawnOnKill;                                                               // 0x0C40 (size: 0x1)
    float IKOffsetLeftFoot;                                                           // 0x0C44 (size: 0x4)
    float IKOffsetRightFoot;                                                          // 0x0C48 (size: 0x4)
    EPrisonerBorderCrossingPenalty BorderCrossingPenalty;                             // 0x0C4C (size: 0x1)
    FPrisonerBorderCrossingPenaltyChange BorderCrossingPenaltyChange;                 // 0x0C50 (size: 0x10)
    void BorderCrossingPenaltyChange(class APrisoner* sender, EPrisonerBorderCrossingPenalty newPenalty);
    class UPrisonerBodySimulationComponent* _bodySimulationComponent;                 // 0x0E68 (size: 0x8)
    class UThermalSensorComponent* _skinThermalSensingComponent;                      // 0x0E70 (size: 0x8)
    class UPrisonerMeshManager* _prisonerMeshManager;                                 // 0x0E78 (size: 0x8)
    class UUserProfile* _userProfile;                                                 // 0x0E80 (size: 0x8)
    FString _userId;                                                                  // 0x0E88 (size: 0x10)
    FDbIntegerId _serverUserProfileId;                                                // 0x0E98 (size: 0x8)
    FString _userProfileName;                                                         // 0x0EA0 (size: 0x10)
    FString _userFakeName;                                                            // 0x0EB0 (size: 0x10)
    class UParticleSystemComponent* _waterParticlesComponentWhenIdle;                 // 0x0F28 (size: 0x8)
    class UParticleSystemComponent* _waterParticlesComponentWhenMoving;               // 0x0F30 (size: 0x8)
    class UParticleSystemComponent* _waterParticlesComponentWhenDiving;               // 0x0F38 (size: 0x8)
    EPrisonerGroundStance _groundStance;                                              // 0x0F59 (size: 0x1)
    EPrisonerAquaticMode _aquaticMode;                                                // 0x0F5A (size: 0x1)
    EPrisonerAerialPose _aerialPose;                                                  // 0x0F5B (size: 0x1)
    EPrisonerMovementPace _desiredMovementPace;                                       // 0x0F5C (size: 0x1)
    float _targetCrouchStage;                                                         // 0x0F6C (size: 0x4)
    EPrisonerMontage _currentMontage;                                                 // 0x0F70 (size: 0x1)
    bool _freeLookEnabled;                                                            // 0x0F74 (size: 0x1)
    bool _postFreeLookControllerRotationBlendActive;                                  // 0x0F9C (size: 0x1)
    FRotator _repAimOffset;                                                           // 0x0FAC (size: 0xC)
    class APrisonerCorpse* _lastCorpse;                                               // 0x0FF8 (size: 0x8)
    class APrisonerCorpse* _lastEventCorpse;                                          // 0x1000 (size: 0x8)
    float _targetLeanAmount;                                                          // 0x102C (size: 0x4)
    class AActor* _meleeTarget;                                                       // 0x1808 (size: 0x8)
    class UMeleeSkill* _activeMeleeSkill;                                             // 0x1818 (size: 0x8)
    class AActor* _rotationTarget;                                                    // 0x1830 (size: 0x8)
    class UUnarmedCombatInputRedirector* _unarmedCombatInputRedirector;               // 0x1838 (size: 0x8)
    class USkillEventHandler* _skillEventHandler;                                     // 0x1840 (size: 0x8)
    class AItem* _itemInHands;                                                        // 0x1858 (size: 0x8)
    EScopingWithItemInHandsState _scopingWithItemInHandsState;                        // 0x18D5 (size: 0x1)
    uint8 _itemInHandsVisualObstructionDepthRep;                                      // 0x1920 (size: 0x1)
    EPrisonerCombatMode _combatMode;                                                  // 0x1A30 (size: 0x1)
    class AItem* _leftShoulderHolsteredItemReplicated;                                // 0x1A88 (size: 0x8)
    class AItem* _rightShoulderHolsteredItemReplicated;                               // 0x1A98 (size: 0x8)
    FTimerHandle _interactDefaultContextMenuTimerHandle;                              // 0x1AD0 (size: 0x8)
    TArray<class APrisoner*> _examinedBy;                                             // 0x1AE0 (size: 0x10)
    class UMaterialInstanceDynamic* _tacticsBlobMaterial;                             // 0x1AF0 (size: 0x8)
    TArray<class UParticleSystemComponent*> _bodyPartEffects;                         // 0x1AF8 (size: 0x10)
    class UBondageComponent* _handsBondage;                                           // 0x1B08 (size: 0x8)
    class UPrisonerPrisonWalletComponent* _prisonWalletComponent;                     // 0x1B10 (size: 0x8)
    class UPrisonerFishingComponent* _fishingComponent;                               // 0x1B18 (size: 0x8)
    class UPrisonerMusicPlayerComponent* _musicPlayerComponent;                       // 0x1B20 (size: 0x8)
    class UPrisonerTradingComponent* _tradingComponent;                               // 0x1B28 (size: 0x8)
    class UPrisonerThrowComponent* _throwingComponent;                                // 0x1B30 (size: 0x8)
    class UCharacterItemDragComponent* _itemDragComponent;                            // 0x1B38 (size: 0x8)
    uint32 _packedWaterWeight;                                                        // 0x1B58 (size: 0x4)
    class AGameEventBase* _gameEvent;                                                 // 0x1B88 (size: 0x8)
    class UPrisonerLoadout* _gameEventLoadout;                                        // 0x1B90 (size: 0x8)
    TArray<class AActor*> _instancedFoliageActors;                                    // 0x1C38 (size: 0x10)
    TArray<class AActor*> _landscapeProxyActors;                                      // 0x1C50 (size: 0x10)
    class UWidgetComponent* _nameWidgetComponent;                                     // 0x1C80 (size: 0x8)
    class UBaseItemTag* SaveSpawnLocationTag;                                         // 0x1C88 (size: 0x8)
    FDeluxeVersion _deluxeVersion;                                                    // 0x1CB8 (size: 0xC)
    TWeakObjectPtr<class APrisoner> _examinedPrisoner;                                // 0x1CC8 (size: 0x8)
    bool _killClaimed;                                                                // 0x1CD0 (size: 0x1)
    EPlayingInstrumentState _playingInstrumentState;                                  // 0x1CF0 (size: 0x1)
    ECarryingItemState _carryingItemState;                                            // 0x1CF2 (size: 0x1)
    bool _shouldShowGenitalsOverride;                                                 // 0x1D20 (size: 0x1)
    FPrisonerMountReplication _repMount;                                              // 0x1D60 (size: 0x10)
    class UMIDIDeviceController* _midiDeviceController;                               // 0x1D78 (size: 0x8)
    bool _hasInfiniteAmmo;                                                            // 0x1DC0 (size: 0x1)
    bool _isInGodMode;                                                                // 0x1DC1 (size: 0x1)
    bool _isImmortal;                                                                 // 0x1DC2 (size: 0x1)
    bool _isSuperJumpEnabled;                                                         // 0x1DC3 (size: 0x1)
    bool _enablePerComponentReplicationFrequency;                                     // 0x1DE8 (size: 0x1)
    float _componentsReplicationFrequency;                                            // 0x1DEC (size: 0x14)
    class UNavigationInvokerComponent* _navigationInvokerComponent;                   // 0x1E60 (size: 0x8)
    uint8 _packedShade;                                                               // 0x1EE4 (size: 0x1)
    FGameplayTag LegsInjuryTag;                                                       // 0x1F0C (size: 0x8)
    EVehicleWeaponAimingStance _vehicleWeaponAimingStance;                            // 0x1FA4 (size: 0x1)
    float _vehicleAimingYawReplicated;                                                // 0x1FD0 (size: 0x4)
    TWeakObjectPtr<class AClothesItem> _activeParachute;                              // 0x20CC (size: 0x8)
    uint8 _replicatedBooleans;                                                        // 0x20E0 (size: 0x1)
    class USurvivalTipEventListener* _survivalTipEventListener;                       // 0x21F0 (size: 0x8)
    class UPrisonerCommonData* _commonData;                                           // 0x21F8 (size: 0x8)
    int32 _meshForcedLodIfNotPlayerControlled;                                        // 0x2200 (size: 0x4)

    void UpdateZoomEffect(float Fraction);
    void UpdateWristwatchVisibility();
    void UpdateSquadPanel();
    void UpdateDeluxePlayerStatus();
    void Teleport(const FPrisonerTeleportRequest& request);
    void TakeItemInHandsOnServer(class AItem* Item);
    void TakeItemInHands(class AItem* Item);
    void StartPrimaryMeleeAttack();
    void StartMeleeDodge(EDodgeDirectionType Direction);
    void StartMeleeAttack(const FGameplayTag& meleeAttackType);
    void ShowSpawnScreen(bool loadoutMenu);
    bool ShouldLookatMeleeTarget();
    void SetWristwatchBrightness(float Value);
    void SetTargetOnServer(class AActor* Target);
    void SetShouldIgnoreHeadTurningAndLeaning(bool Value);
    void SetRotationTarget(class AActor* rotationTarget);
    void SetPlayerSoundLevel(float Value);
    void SetPartWaterWeight(EPrisonerWettablePart part, float Value);
    void SetNightVisionEnabled(bool Value);
    bool SetMidiDeviceByName(FString Name);
    bool SetMidiDeviceByIndex(int32 Index);
    void SetMeleeTargetSelectionMode(EPrisonerMeleeTargetSelectionMode Value);
    void SetMeleeTarget(class AActor* Value);
    void SetItemInHandsOnClient(class AItem* Item);
    void SetGameEvent(class AGameEventBase* gameEvent);
    void SetFreeLookEnabled(bool Value);
    void SetDesiredLeanAmount(float Value);
    void Server_UnloadAmmoFromMagazine(class AWeaponAttachmentMagazine* magazine);
    void Server_TurnPrisonerInPlace(float targetRotationYaw);
    void Server_ThrowRequested();
    void Server_SyncWeaponState(class AWeapon* Weapon, const FWeaponStateSyncData& Data);
    void Server_SwapWeaponAttachments(class AWeapon* Weapon, class AWeaponAttachment* oldAttachment, class AWeaponAttachment* newAttachment);
    void Server_StoreAmmoInAmmoBox(class AAmmunitionItem* ammo, class AAmmunitionBoxItem* Box);
    void Server_SplitCurrencyItem(class AItem* currencyItem, int32 newAmount);
    void Server_SplitAmmo(class AAmmunitionItem* ammoItem);
    void Server_SpawnScreenWakeUp();
    void Server_SpawnAmmunitionArrow(const FAmmunitionArrowSpawningParamsHelper& AmmunitionArrowSpawningParamsHelper, class USceneComponent* AttachComponent, FName attachBoneName, const FTransform& relativeAttachTransform);
    void Server_SetVehicleWeaponAimingStance(EVehicleWeaponAimingStance stance);
    void Server_SetVehicleAimingYaw(float angle);
    void Server_SetTargetLeanAmount(float Value);
    void Server_SetTargetCrouchStage(float Value);
    void Server_SetShouldIgnoreHeadTurning(bool Value);
    void Server_SetScopingWithItemInHandsState(EScopingWithItemInHandsState Value);
    void Server_SetRotationTarget(class AActor* rotationTarget);
    void Server_SetPlayingInstrumentState(EPlayingInstrumentState Value);
    void Server_SetPackedShade(uint8 Value);
    void Server_SetMeleeTarget(class AActor* Value);
    void Server_SetItemInHandsVisualObstructionDepth(float Value);
    void Server_SetItemInHandsActualObstructionDepth(float Value);
    void Server_SetHoldBreathState(EHoldBreathState Value);
    void Server_SetGameEventLoadout(TSubclassOf<class AItem> primary, const TArray<class TSubclassOf<AItem>>& primaryAttachments, TSubclassOf<class AItem> secondary, const TArray<class TSubclassOf<AItem>>& secondaryAttachments, TSubclassOf<class AItem> tertiary, const TArray<class TSubclassOf<AItem>>& tertiaryAttachments, const TArray<class TSubclassOf<AItem>>& outfit, const TArray<class TSubclassOf<AItem>>& support);
    void Server_SetFreeLookEnabled(bool Value);
    void Server_SetExaminedPrisoner(class APrisoner* Prisoner);
    void Server_SetDesiredMovementPace(uint8 Value);
    void Server_SetDangerCooldown(float cooldown, class APrisoner* Prisoner);
    void Server_SetCombatMode(EPrisonerCombatMode Value);
    void Server_SetCarryingItemState(ECarryingItemState State);
    void Server_SetActiveParachute(class AClothesItem* Parachute);
    void Server_RespawnAtCommonSpawnLocation(EPrisonerCommonSpawnLocation commonSpawnLocation, FSectorId SectorId);
    void Server_ReportVote(bool Vote);
    void Server_RemoveInventoryNode(class UObject* Item, class UObject* container, const FInventoryPositionDataRepHelper& position, class UObject* Target);
    void Server_PropagateFootstepEnhancerSound();
    void Server_PrisonWalletHandleItemSpawning(FVector Location);
    void Server_OnLockpickingProtectionTriggered(class UObject* Lockpickable);
    void Server_MinigameEnded(TSubclassOf<class AMinigame> minigameClass, bool isPractice, bool Succeeded, const TArray<TWeakObjectPtr<AItem>>& tools, const FMiniGameEndParams& endParams);
    void Server_lockpickingEnded(class UObject* Lockpickable, bool Succeeded, const FConZBaseElementIdentifier& lockpickableBaseElement);
    void Server_LoadAmmoIntoMagazine(class AAmmunitionItem* AmmunitionItem, class AWeaponAttachmentMagazine* magazine, int32 Count);
    void Server_LeaveSquad();
    void Server_JumpOffLadder();
    void Server_JoinCurrencyItem(class AItem* finalItem, class AItem* initiatingItem);
    void Server_JoinAmmo(class AAmmunitionItem* finalItem, class AAmmunitionItem* initiatingItem);
    void Server_InteractWithLadder(const FVector& traceOrigin, const FVector& traceDirection);
    void Server_InstrumentStopTone(EPlayableInstrumentTone tone, float timeOffset, int32 octave);
    void Server_InstrumentPlayTone(EPlayableInstrumentTone tone, float timeOffset, int32 octave);
    void Server_InstrumentOctaveUp();
    void Server_InstrumentOctaveDown();
    void Server_InitiateCraftedUpgradePlacement(const FConZBaseElementIdentifier& elementToBeUpgraded, const class UPlaceableCraftingRecipe* upgradeRecipe, const FTransform& Transform);
    void Server_InitiateCraftedPlacement(const class UPlaceableCraftingRecipe* CraftingRecipe, FVector Location);
    void Server_HandleGearMotion(EMotionIntensity motionIntensity, bool shouldMakeNoise);
    void Server_HandleFootstep(EMotionIntensity motionIntensity, bool shouldMakeNoise);
    void Server_ForceUnmount();
    void Server_DestroyPlaceable(FDbIntegerId ID);
    void Server_DamageLockpickingTools(class AItem* lockpick, class AItem* tensionTool);
    void Server_CommitSuicide();
    void Server_ClimbWindow();
    void Server_Climb();
    void Server_ClearDangerCooldown();
    void Server_ApplyPointDamage(float Damage, const FHitResult& HitResult, EDamageChannel damageChannel);
    void Server_AIMovementFinished(bool wasSuccessful);
    void Server_AddInventoryNode(class UObject* Item, class UObject* container, const FInventoryPositionDataRepHelper& position, class UObject* Target);
    void SendSquadInvitationOnServer(class APrisoner* invited);
    void SendSquadInvitationOnClient(class APrisoner* invitor, FString invitorName);
    void SendMessageToClient(FString Message, class UAkAudioEvent* AudioEvent);
    void RightShoulderHolsterInteract();
    void Revive();
    void RespawnAtCommonSpawnLocation(EPrisonerCommonSpawnLocation commonSpawnLocation, FSectorId SectorId);
    void RequestRespawn(const FPrisonerTeleportRequest& request);
    void RemoveWeaponAttachment(class AWeapon* Weapon, class AWeaponAttachment* Attachment);
    void RemoveItemFromHands(EHandsHolstersType preferedHolsterType);
    void RemoveFromSquadOnServer(const FDbIntegerId UserProfileId);
    void RemoveBondage();
    void PromoteSquadMemberOnServer(const FDbIntegerId UserProfileId);
    void PlaceItemInInventoryOrHolster(class AItem* Item, bool tryToJoinItems);
    void OverrideIsLimping(bool Value);
    void OpenInteractDefaultContextMenu();
    void OnRep_VehicleWeaponAimingStance();
    void OnRep_UserProfileName();
    void OnRep_UserFakeName();
    void OnRep_ThrowingComponent();
    void OnRep_ScopingWithItemInHandsState();
    void OnRep_RotationTarget();
    void OnRep_RightShoulderHolsteredItem();
    void OnRep_PlayingInstrumentState();
    void OnRep_PackedWetness(uint32 oldWetness);
    void OnRep_PackedBooleans();
    void OnRep_Mount();
    void OnRep_MeleeTarget();
    void OnRep_LeftShoulderHolsteredItem();
    void OnRep_ItemInHandsVisualObstructionDepth(uint8 oldValue);
    void OnRep_HandBondage();
    void OnRep_GroundStance(EPrisonerGroundStance oldValue);
    void OnRep_GameEvent(class AGameEventBase* oldValue);
    void OnRep_FreeLookEnabled();
    void OnRep_FishingComponent();
    void OnRep_DeluxeVersion();
    void OnRep_CurrentMontage(EPrisonerMontage oldGesture);
    void OnRep_CombatMode(EPrisonerCombatMode oldValue);
    void OnRep_CarryingItemState();
    void OnRep_AquaticMode(EPrisonerAquaticMode oldValue);
    void OnRep_AimOffset();
    void OnRep_AerialPose(EPrisonerAerialPose oldValue);
    void OnPlaceableDestroyed(class AActor* Actor);
    void OnMovementUpdated(float DeltaSeconds, FVector OldLocation, FVector OldVelocity);
    void OnMidiEvent(class UMIDIDeviceController* MIDIDeviceController, int32 Timestamp, EMIDIEventType EventType, int32 Channel, int32 ControlID, int32 Velocity, int32 RawEventType);
    void OnHearNoise(class APawn* instigatorPawn, const FVector& Location, float Volume);
    void OnExaminedPrisonerUnequippedItem(class UPrisonerInventoryComponent* inventory, class AItem* Item);
    void OnExaminedPrisonerEquippedItem(class UPrisonerInventoryComponent* inventory, class AItem* Item);
    void OnBorderCrossingPenaltyChange(class APrisoner* Prisoner, EPrisonerBorderCrossingPenalty newPenalty);
    void NetMulticast_UpdateAdminStates(uint8 states);
    void NetMulticast_TurnPrisonerInPlace(float targetRotationYaw);
    void NetMulticast_SpawnVomitingEffects(bool isForced);
    void NetMulticast_SpawnUrinationEffects(bool isForced);
    void NetMulticast_SpawnDefecationEffects(bool shouldBeDiarrhea, bool isForced);
    void NetMulticast_SetUserFakeName(FString fakeName);
    void NetMulticast_SetupInitialHandBondage();
    void NetMulticast_SetActiveParachute(class AClothesItem* Parachute);
    void NetMulticast_PostAudioEventOnPrisoner(class UAkAudioEvent* akEvent, bool multiCastToClients);
    void NetMulticast_PlayLockpickingProtectionEffects(class UObject* Lockpickable);
    void NetMulticast_PlayFootstepEnhancerSound();
    void NetMulticast_InstrumentStopTone(EPlayableInstrumentTone tone, float timeOffset, int32 octave);
    void NetMulticast_InstrumentPlayTone(EPlayableInstrumentTone tone, float timeOffset, int32 octave);
    void NetMulticast_InstrumentOctaveUp();
    void NetMulticast_InstrumentOctaveDown();
    void NetMulticast_HandleLanded(const FVector& impactVelocity, const FHitResult& HitResult);
    void NetMulticast_ForceDeluxePlayer(EDeluxeVersion DeluxeVersion);
    void NetMulticast_DespawnUrinationEffects();
    void NetMulticast_ApplyPlasticSurgery(FCharacterTemplate CharacterTemplate);
    void NetMulticast_ApplyHaircutAndMakeup(FCharacterTemplate CharacterTemplate);
    void NetMulticast_AIMovementFinished(bool wasSuccessful);
    void LeftShoulderHolsterInteract();
    bool IsThrowing();
    bool IsThrowAiming();
    bool IsTeleportInProgress();
    bool IsSquadInvitationReceived();
    bool IsPostFreeLookControllerRotationBlendActive();
    bool IsNightVisionEnabled();
    bool IsMemberOfMySquad(const class APrisoner* Prisoner);
    bool IsMemberOf(class AConZSquad* Squad);
    bool IsLimping();
    bool IsInFishingMinigame();
    bool IsInCombatMode();
    bool IsGameEventRoundStarted();
    bool IsFreeLookEnabled();
    bool IsFishing();
    bool IsAliveInGameEvent();
    bool IsActorMeleeTargetCandidate(const class AActor* Actor);
    bool IsActivelyParticipatingInGameEvent();
    bool IsActivelyFishing();
    void InventoryComponent_ItemUnequipped(class UPrisonerInventoryComponent* sender, class AItem* Item);
    void InventoryComponent_ItemEquipped(class UPrisonerInventoryComponent* sender, class AItem* Item);
    void InteractWithObjectOnServer(class UObject* interactable, EInteractionType interactionType, const FInteractionData& InteractionData);
    void InputComponent_TryInteractDefault();
    void InitFromCharacterTemplate(const FCharacterTemplate& CharacterTemplate);
    void HoveredActorChanged__DelegateSignature(class AActor* hoveredActor);
    void HolsterItemOnServer(class AItem* Item, int32 attachmentSocketHelper);
    void HitReactComponent_StateChanged();
    void HideSpawnScreen();
    bool HasItemOfClass(const UClass* ItemClass);
    bool HasItem(const class AItem* Item);
    bool HasHandsUp();
    bool HasHandBondage();
    void HandleIntroCinematicFinished(class AConZCameraManager* cameraManager);
    float GetWetness();
    float GetWeightLoad();
    class UPrisonerThrowComponent* GetThrowingComponent();
    class UMaterialInstanceDynamic* GetTacticsBlobMaterial();
    class AConZSquad* GetSquad();
    bool GetShouldIgnoreHeadTurningAndLeaning();
    FRotator GetSavedSpawnRotation();
    bool GetSavedSpawnLocationActive();
    FVector GetSavedSpawnLocation();
    class AActor* GetRotationTarget();
    class UPrisonerPrisonWalletComponent* GetPrisonWalletComponent();
    class UPrisonerAnimInstance* GetPrisonerAnimInstance();
    class USkeletalMeshComponent* GetPenisSkeletalMeshComponent();
    float GetPartWetness(EPrisonerWettablePart part);
    float GetPartWaterWeight(EPrisonerWettablePart part);
    class UPrisonerMusicPlayerComponent* GetMusicPlayerComponent();
    EMotionIntensity GetMotionIntensity();
    EPrisonerMeleeTargetSelectionMode GetMeleeTargetSelectionMode();
    class AActor* GetMeleeTarget();
    float GetMaxPartWaterWeight(EPrisonerWettablePart part);
    FRotator GetLookatMeleeTargetAimOffset();
    float GetLeanAmount();
    class AItem* GetItemOfClass(const UClass* ItemClass);
    class AItem* GetItemInHands();
    bool GetIsInFirstPersonView();
    class UBondageComponent* GetHandBondage();
    EPrisonerGroundStance GetGroundStance();
    class AGameEventBase* GetGameEvent();
    class UPrisonerFishingComponent* GetFishingComponent();
    float GetDesiredLeanAmount();
    FGameplayTag GetCurrentHitReactType();
    float GetAngularVelocity();
    FRotator GetAimOffset();
    bool GameEventFriendlyFireCheck(class APrisoner* Other);
    class AActor* FindNextOrPreviousMeleeTarget(const class AActor* Target, bool Next);
    void ExamineItem(class AItem* Item);
    void EquippedNightVisionGoggles_ActivatedChanged(const class ANightVisionGogglesItem* Item);
    void DropItemFromHands();
    void DetonateHead(bool shouldDestroyHeadgear);
    void DestroyThrowingComponent();
    void DestroyPrisonWalletComponent();
    void DestroyPlaceable(FDbIntegerId ID);
    void DestroyFishingComponent();
    void DemoteSquadMemberOnServer(const FDbIntegerId UserProfileId);
    class UPrisonerThrowComponent* CreateThrowingComponent(class AItem* itemToThrow, EThrowingAnimationType animationType);
    void CreateSquadOnServer();
    class UPrisonerPrisonWalletComponent* CreatePrisonWalletComponent();
    class UPrisonerMusicPlayerComponent* CreateMusicPlayerComponent();
    class UPrisonerFishingComponent* CreateFishingComponent();
    void ConstructWristwatchChildActor();
    void CommitSuicide();
    void Client_TriggerMeleeHitEffect();
    void Client_TriggerBulletHitEffectWithOverride(const class UProjectileImpactEffects* overrideProjectileImpactEffects, const FHitResult& overrideHitResult);
    void Client_TriggerBulletHitEffect();
    void Client_SpawnScreenAllowWakeUp();
    void Client_ShowSurvivalTip(FName tipName);
    void Client_ShowSpawnScreen(bool loadoutMenu);
    void Client_SetSavedSpawnLocation(bool Active, FVector Location, FVector Velocity, FRotator Rotation);
    void Client_SetIsEligibleForFreePlasticSurgeryChanged(bool Value);
    void Client_OpenParachute(class AClothesItem* Parachute);
    void Client_OnTakeDamage(float Damage, const FDamageEvent& DamageEvent, class AController* eventInstigator, class AActor* damageObject);
    void Client_OnPhoenixTearsInjection();
    void Client_OnNoiseInstigated(float noiseLevel);
    void Client_OnExitPhotoMode();
    void Client_OnEnterPhotoMode();
    void Client_OnAIDetectionTimerChanged(float detectionTimer);
    void Client_LoadAmmoIntoMagazine(class AWeaponAttachmentMagazine* magazine, const TArray<FAmmunitionData>& ammoData);
    void Client_Interact(class UObject* interactable, EInteractionType interactionType, const FInteractionData& InteractionData);
    void Client_HighlightKeyboardOnDamage();
    void Client_HideSpawnScreen();
    void Client_FadeInVision(float Duration);
    void Client_DeSyncReportPositionData(FDateTime Time, FVector position);
    void Client_DeSyncReportInitialTime(FDateTime initialTime);
    void Client_ActivateIntroCinematic(float initialAltitude);
    void ClearMalfunction(EWeaponMalfunction malfunction);
    void ClearIsLimpingOverride();
    void ClearGameEventLoadout();
    void ClearEquipment();
    class AActor* ChooseFirstMeleeTarget();
    void ChangeSquadData(FString Name, FString Message, FString information, FConZSquadEmblem emblem);
    void CarryItem(class AItem* Item);
    void CarriedItemsVisibilityChanged__DelegateSignature(bool Visible);
    void CapsuleComponent_PhysicsVolumeChanged(class APhysicsVolume* Volume);
    bool CanTakeItemInHands(const class AItem* Item);
    void CancelSquadInvitationOnServer();
    void CancelSquadInvitationOnClient();
    void CancelInteractableDragging();
    int32 CalculateRespawnPriceBasedOnSquadSize(const int32 defaultPrice, EPrisonerCommonSpawnLocation spawnLocation);
    float CalculateAIPerceptionPercentage();
    void BorderCrossingPenaltyChange__DelegateSignature(class APrisoner* sender, EPrisonerBorderCrossingPenalty newPenalty);
    void BaseInteractionComponent_OnBaseInteractionEvent(class UBaseInteractionComponent* Component, const FBaseInteractionEvent& BaseInteractionEvent);
    bool AreGenitalsExposed();
    bool AreBreastsExposed();
    void AddWeaponAttachment(class AWeapon* Weapon, class AWeaponAttachment* Attachment);
    void AddToSquadOnServer(const FDbIntegerId squadId);
    void AddHandBondage(class AItem* bondageItem);
    void AcceptSquadInvitationOnServer(class APrisoner* invitor, bool accepted);
}; // Size: 0x2210

class APrisonerCorpse : public AActor
{
    class USkeletalMeshComponent* RagdollMeshComponent;                               // 0x0240 (size: 0x8)
    FName MainBoneName;                                                               // 0x0248 (size: 0x8)
    FCorpseSkeletalMeshRepData RagdollMeshData;                                       // 0x0250 (size: 0x70)
    TArray<FCorpseStaticMeshRepData> StaticMeshData;                                  // 0x02C0 (size: 0x10)
    TArray<FCorpseSkeletalMeshRepData> SkeletalMeshData;                              // 0x02D0 (size: 0x10)
    float SearchTime;                                                                 // 0x02E0 (size: 0x4)
    float PhysicsPauseDistance;                                                       // 0x02E4 (size: 0x4)
    float AutoDestructTime;                                                           // 0x02E8 (size: 0x4)
    float AutoDestructRadius;                                                         // 0x02EC (size: 0x4)
    TArray<class AActor*> Attachements;                                               // 0x02F0 (size: 0x10)
    TArray<FName> AttachementSockets;                                                 // 0x0300 (size: 0x10)
    TArray<FCorpseStaticMeshRepData> StrippedStaticMeshData;                          // 0x0310 (size: 0x10)
    TArray<FCorpseSkeletalMeshRepData> StrippedSkeletalMeshData;                      // 0x0320 (size: 0x10)
    class UStaticMesh* CensorMesh;                                                    // 0x0330 (size: 0x8)
    class UMaterialInstance* CensorMaterial;                                          // 0x0338 (size: 0x8)
    class UStaticMeshComponent* GenitalsCensorComponent;                              // 0x0340 (size: 0x8)
    class UStaticMeshComponent* LeftBreastCensorComponent;                            // 0x0348 (size: 0x8)
    class UStaticMeshComponent* RightBreastCensorComponent;                           // 0x0350 (size: 0x8)
    float _mass;                                                                      // 0x0358 (size: 0x4)
    float _fatness;                                                                   // 0x035C (size: 0x4)
    float _muscliness;                                                                // 0x0360 (size: 0x4)
    float _skinniness;                                                                // 0x0364 (size: 0x4)
    float _breastSize;                                                                // 0x0368 (size: 0x4)
    float _penisSize;                                                                 // 0x036C (size: 0x4)
    bool _penisShowing;                                                               // 0x0370 (size: 0x1)
    bool _breastsShowing;                                                             // 0x0371 (size: 0x1)
    FBuoyancy _serverBuoyancy;                                                        // 0x03A8 (size: 0x70)
    FBuoyancy _buoyancy;                                                              // 0x0418 (size: 0x70)
    TSubclassOf<class UCharacterMesh> _censorClass;                                   // 0x0488 (size: 0x8)
    FCorpsePoseData PoseData;                                                         // 0x06D0 (size: 0x40)
    TArray<class AItem*> inventory;                                                   // 0x0710 (size: 0x10)
    bool _atRest;                                                                     // 0x0720 (size: 0x1)
    class UChoppingRecipeDataAsset* _choppingRecipeDataAsset;                         // 0x0740 (size: 0x8)

    void OnRep_PoseData();
    void OnRep_PenisShowing();
    void OnRep_Inventory();
    void OnRep_BreastsShowing();
    void OnRep_AtRest();
    void Multicast_ClonePoseLocally(class AConZCharacter* sourceCharacter);
    class USkeletalMeshComponent* GetHairMeshComponent();
    class USkeletalMeshComponent* GetFacialHairMeshComponent();
}; // Size: 0x750

class APrisonerHUD : public AConZHUD
{
    class UHudWidget* HudWidget;                                                      // 0x0370 (size: 0x8)
    class UDamageDirectionIndicator* DamageDirectionIndicator;                        // 0x0378 (size: 0x8)
    bool ShouldDrawCrosshair;                                                         // 0x0380 (size: 0x1)
    bool ShouldDrawScreenCenterDot;                                                   // 0x0381 (size: 0x1)
    class UMaterialInterface* TacticsMaterial;                                        // 0x0388 (size: 0x8)
    class ULoadingIconWidget* LoadingIconWidget;                                      // 0x0390 (size: 0x8)
    class USpawnScreen* SpawnScreenWidget;                                            // 0x0398 (size: 0x8)
    class UWaypointScreenWidget* WaypointScreenWidget;                                // 0x03A0 (size: 0x8)
    FPrisonerHUDOnShouldShowExtendedWidgetTooltipChanged OnShouldShowExtendedWidgetTooltipChanged; // 0x03A8 (size: 0x10)
    void ShouldShowExtendedWidgetTooltipChanged(bool ShouldShowExtendedWidgetTooltip);
    class UFont* _HUDFont;                                                            // 0x03B8 (size: 0x8)
    class UFont* _HUDFontScope;                                                       // 0x03C0 (size: 0x8)
    class UTexture* _mapPropertiesTexture;                                            // 0x03F0 (size: 0x8)
    float _customMapBorderWidth;                                                      // 0x03F8 (size: 0x4)
    FLinearColor _customMapBorderColor;                                               // 0x03FC (size: 0x10)
    TSubclassOf<class UPlantingPanel> _plantingPanelWidgetClass;                      // 0x0410 (size: 0x8)
    TSubclassOf<class UAdminPlantPanel> _adminPlantPanelWidgetClass;                  // 0x0418 (size: 0x8)
    TSubclassOf<class UPlantStatusIndicatorWidget> _plantStatusIndicatorWidgetClass;  // 0x0420 (size: 0x8)
    FGameplayTagContainer _traderCategories;                                          // 0x0428 (size: 0x20)
    TSubclassOf<class UPauseMenuUIController> _pauseMenuUIControllerClass;            // 0x0448 (size: 0x8)
    TSubclassOf<class UItemsCraftingUIController> _itemsCraftingUIControllerClass;    // 0x0450 (size: 0x8)
    TSubclassOf<class UBaseBuildingUIController> _baseBuildingUIControllerClass;      // 0x0458 (size: 0x8)
    TSubclassOf<class UCookingUIController> _cookingUIControllerClass;                // 0x0460 (size: 0x8)
    TSubclassOf<class UChatUIController> _chatUIControllerClass;                      // 0x0468 (size: 0x8)
    UClass* _activeUIContextType;                                                     // 0x0538 (size: 0x8)
    class UConZUniqueObjectCacher* _existingUIContexts;                               // 0x0540 (size: 0x8)
    class UUserWidget* _scoreboardWidget;                                             // 0x0598 (size: 0x8)
    bool _shouldDrawOtherPlayerInfo;                                                  // 0x05B2 (size: 0x1)
    bool _isLeftMouseButtonPressed;                                                   // 0x05B3 (size: 0x1)
    FMapHUDPrisonerObject _prisonerMapHUDObject;                                      // 0x05E8 (size: 0x40)
    FMapHUDHomeLocationObject _homeLocationMapHUDObject;                              // 0x0628 (size: 0x48)
    FMapHUDWorldEventsObject _worldEventsMapHUDObject;                                // 0x0670 (size: 0x18)
    FMapHUDOtherPlayersObject _otherPlayersMapHUDObjects;                             // 0x0688 (size: 0xC0)
    FMapHUDDroneObject _droneMapHUDObject;                                            // 0x0748 (size: 0x38)
    FMapHUDVehiclesObject _vehicleMapHUDObjects;                                      // 0x0780 (size: 0xC0)
    FMapHUDFlagsObject _flagMapHUDObjects;                                            // 0x0860 (size: 0xC0)
    FMapHUDQuestObject _questMapHUDObject;                                            // 0x0940 (size: 0x80)
    class UItemSplitWidget* _itemSplitWidget;                                         // 0x09D0 (size: 0x8)
    class URaidProtectionSelectionWidget* _raidProtectionSelectionWidget;             // 0x09D8 (size: 0x8)
    class UAkAudioEvent* _onMapOpened;                                                // 0x09F0 (size: 0x8)
    class UAkAudioEvent* _onMapClosed;                                                // 0x09F8 (size: 0x8)

    void ShouldShowExtendedWidgetTooltipChanged__DelegateSignature(bool ShouldShowExtendedWidgetTooltip);
    bool ShouldShowExtendedWidgetTooltip();
    void SetHUDMode(EPrisonerHUDMode newMode);
    void SendVehicleMarkerDataDataRequest();
    void ReceiveVehicleMarkerData(class UVehicleMarkersData* Data);
    bool IsShowingSpawnScreen();
    bool IsShowingLoading();
    class UWaypointScreenWidget* GetWaypointScreenWidget();
    class UCanvasPanel* GetHudWidgetCanvasPanel();
    EPrisonerHUDMode GetHUDMode();
}; // Size: 0xA00

class APrisonerHallucinationIllusion : public AActor
{
}; // Size: 0x220

class APrisonerHallucinationIllusion_SeeFirearmsAsSticksAndBananas : public APrisonerHallucinationIllusion
{
    class UStaticMesh* _bananaMesh;                                                   // 0x0220 (size: 0x8)
    class UStaticMesh* _mediumStickMesh;                                              // 0x0228 (size: 0x8)

}; // Size: 0x240

class APrisonerHallucinationIllusion_SeeOtherPlayersExtremelyFatOrSkinny : public APrisonerHallucinationIllusion
{
}; // Size: 0x270

class APrisonerHallucinationIllusion_SeeOtherPlayersWithWeirdMasks : public APrisonerHallucinationIllusion
{
    TArray<class UStaticMesh*> _maskMeshes;                                           // 0x0220 (size: 0x10)
    TArray<class UCharacterMesh*> _maskCharacterMeshes;                               // 0x0230 (size: 0x10)

}; // Size: 0x250

class APrisonerHallucinationIllusion_SpawnCompanionCrow : public APrisonerHallucinationIllusion
{
    TSubclassOf<class ACompanionCrow> _crowClass;                                     // 0x0220 (size: 0x8)
    FName _crowAttachSocketName;                                                      // 0x0228 (size: 0x8)
    FTransform _attachedCrowRelativeTransform;                                        // 0x0230 (size: 0x30)
    FFloatInterval _responseIdleInitialInterval;                                      // 0x0260 (size: 0x8)
    FFloatInterval _responseIdleInterval;                                             // 0x0268 (size: 0x8)
    TArray<class UAnimMontage*> _responseIdleMontages;                                // 0x0270 (size: 0x10)
    FVector _flyoffDirection;                                                         // 0x0280 (size: 0xC)
    FRuntimeFloatCurve _flyoffSpeedVsTime;                                            // 0x0290 (size: 0x88)
    class UAkAudioEvent* _flyoffAudioEvent;                                           // 0x0318 (size: 0x8)
    FRuntimeFloatCurve _cruisingSpeedVsTime;                                          // 0x0320 (size: 0x88)
    FRuntimeFloatCurve _cruisingRotationRateVsTime;                                   // 0x03A8 (size: 0x88)
    FRuntimeFloatCurve _rollVsSteerRate;                                              // 0x0430 (size: 0x88)
    float _landingDuration;                                                           // 0x04B8 (size: 0x4)
    class UAkAudioEvent* _landingAudioEvent;                                          // 0x04C0 (size: 0x8)
    class UAkAudioEvent* _landedAudioEvent;                                           // 0x04C8 (size: 0x8)
    class UAnimMontage* _landedMontage;                                               // 0x04D0 (size: 0x8)

}; // Size: 0x520

class APrisonerHallucinationIllusion_SpawnFakeItemsThatDisappearOnPickup : public APrisonerHallucinationIllusion
{
    TArray<class TSubclassOf<AFakeItem>> _fakeItemClasses;                            // 0x0220 (size: 0x10)
    float _fakeItemSpawnChance;                                                       // 0x0230 (size: 0x4)

}; // Size: 0x288

class APrisonerHallucinationIllusion_SpawnMiniatureZombies : public APrisonerHallucinationIllusion
{
    TArray<class TSubclassOf<AZombie2>> _zombieClasses;                               // 0x0220 (size: 0x10)
    TSubclassOf<class AZombieAIController2> _aiControllerClass;                       // 0x0230 (size: 0x8)
    int32 _zombieGroupSize;                                                           // 0x0238 (size: 0x4)
    int32 _maxZombiesToSpawnPerTick;                                                  // 0x023C (size: 0x4)
    int32 _maxZombiesToDestroyPerTick;                                                // 0x0240 (size: 0x4)
    FFloatInterval _zombieGroupSpawnInterval;                                         // 0x0244 (size: 0x8)
    FFloatInterval _zombieSpawnDistance;                                              // 0x024C (size: 0x8)
    float _maxZombieDistance;                                                         // 0x0254 (size: 0x4)
    float _maxTimeWithoutZombieLineOfSight;                                           // 0x0258 (size: 0x4)
    float _zombieSoundAttenuationScalingFactor;                                       // 0x025C (size: 0x4)
    TArray<class AController*> _zombieControllers;                                    // 0x0278 (size: 0x10)

}; // Size: 0x288

class AProjectile : public AActor
{
    class UStaticMeshComponent* StaticMesh;                                           // 0x0220 (size: 0x8)
    bool RotationFollowsVelocity;                                                     // 0x0228 (size: 0x1)
    bool AddImpulseOnHit;                                                             // 0x0229 (size: 0x1)
    float ImpulseMultiplier;                                                          // 0x022C (size: 0x4)
    float MaxImpulse;                                                                 // 0x0230 (size: 0x4)
    class UProjectileImpactEffects* ImpactEffects;                                    // 0x0238 (size: 0x8)
    FProjectileData ProjectileData;                                                   // 0x0240 (size: 0x60)
    float MeshScaleStartLocal;                                                        // 0x02A0 (size: 0x4)
    float MeshScaleRangeLocal;                                                        // 0x02A4 (size: 0x4)
    float MeshScaleMinLocal;                                                          // 0x02A8 (size: 0x4)
    float MeshScaleMaxLocal;                                                          // 0x02AC (size: 0x4)
    float MeshScaleStart;                                                             // 0x02B0 (size: 0x4)
    float MeshScaleRange;                                                             // 0x02B4 (size: 0x4)
    float MeshScaleMin;                                                               // 0x02B8 (size: 0x4)
    float MeshScaleMax;                                                               // 0x02BC (size: 0x4)
    float TraceScaleMultiplier;                                                       // 0x02C0 (size: 0x4)
    float GravityScale;                                                               // 0x02C4 (size: 0x4)
    float Sharpness;                                                                  // 0x02C8 (size: 0x4)
    class UAkAudioEvent* FlyByAudioEvent;                                             // 0x02D0 (size: 0x8)
    FName ColorMaterialParameterName;                                                 // 0x02D8 (size: 0x8)
    FLinearColor InitialColor;                                                        // 0x02E0 (size: 0x10)
    FLinearColor FinalColor;                                                          // 0x02F0 (size: 0x10)
    int32 MaxHitCount;                                                                // 0x0300 (size: 0x4)
    float NoiseLoudnessOnHit;                                                         // 0x0304 (size: 0x4)
    bool IgnoreCallingWeaponsFiringEffects;                                           // 0x0308 (size: 0x1)
    float ExperienceMultiplier;                                                       // 0x030C (size: 0x4)
    bool ShouldForceStopWhenNoVelocity;                                               // 0x0310 (size: 0x1)
    bool CanEverCollide;                                                              // 0x0311 (size: 0x1)
    class UNiagaraSystem* TrailNiagaraSystem;                                         // 0x0318 (size: 0x8)
    class UParticleSystem* WaterSplashParticleSystem;                                 // 0x0320 (size: 0x8)
    class AActor* _directlyHitActor;                                                  // 0x0330 (size: 0x8)
    class UPrimitiveComponent* _directlyHitComponent;                                 // 0x0338 (size: 0x8)
    float _lifeSpanAfterStopping;                                                     // 0x0340 (size: 0x4)
    bool _useFixedTimestep;                                                           // 0x0344 (size: 0x1)
    float _fixedTimestep;                                                             // 0x0348 (size: 0x4)
    int32 _zeroRange;                                                                 // 0x036C (size: 0x4)
    float _windage;                                                                   // 0x0370 (size: 0x4)
    float _distanceTraveled;                                                          // 0x0374 (size: 0x4)
    float _meshScaleFactor;                                                           // 0x0378 (size: 0x4)
    float _offsetFromBarrel;                                                          // 0x039C (size: 0x4)
    int32 _randomSeed;                                                                // 0x03A4 (size: 0x4)
    class UNiagaraComponent* _trailNiagaraComponent;                                  // 0x0408 (size: 0x8)
    bool _doNotForceInitialReplication;                                               // 0x0410 (size: 0x1)
    float _muzzleVelocity;                                                            // 0x0414 (size: 0x4)
    float _initialDamageMultiplier;                                                   // 0x0418 (size: 0x4)
    EProjectileFlags _flags;                                                          // 0x041C (size: 0x1)
    float _halfAngle;                                                                 // 0x0420 (size: 0x4)
    TArray<class UPrimitiveComponent*> _ignoreComponentsArray;                        // 0x0428 (size: 0x10)
    class UMaterialInstanceDynamic* _materialInstance;                                // 0x0438 (size: 0x8)
    EWeaponFiringMode _weaponFiringModeWhenShot;                                      // 0x0448 (size: 0x1)
    FFiredShotDescriptionRep _firedShotDescriptionRep;                                // 0x0450 (size: 0x4)

    void OnStop(const FHitResult& HitResult);
}; // Size: 0x468

class AProjectileArrow : public AProjectile
{
    class USceneComponent* _tempSceneComponent;                                       // 0x0468 (size: 0x8)
    class USceneComponent* _relativeRotationSceneComponent;                           // 0x0470 (size: 0x8)
    FProjectileArrowData _projectileArrowData;                                        // 0x0478 (size: 0x20)

    void UpdateParameters();
}; // Size: 0x4A8

class AProjectileExplosive : public AProjectile
{
    float _selfDestructTime;                                                          // 0x0468 (size: 0x4)
    float _explosionDamage;                                                           // 0x046C (size: 0x4)
    float _explosionInnerRadius;                                                      // 0x0470 (size: 0x4)
    float _explosionOuterRadius;                                                      // 0x0474 (size: 0x4)
    float _explosionFalloff;                                                          // 0x0478 (size: 0x4)
    float _explosionForce;                                                            // 0x047C (size: 0x4)
    float _hearingDamageRadius;                                                       // 0x0480 (size: 0x4)
    class UParticleSystem* _explosionParticle;                                        // 0x0488 (size: 0x8)
    class UAkAudioEvent* _explosionAudioEvent;                                        // 0x0490 (size: 0x8)
    TSubclassOf<class UMatineeCameraShake> _explosionCameraShakeClass;                // 0x0498 (size: 0x8)

}; // Size: 0x4A8

class AProjectileExplosiveArrow : public AProjectileArrow
{
}; // Size: 0x4A8

class AProjectileFlare : public AProjectile
{
    class UParticleSystemComponent* _particleSystemComponent;                         // 0x0468 (size: 0x8)
    class UPointLightComponent* _pointLightComponent;                                 // 0x0470 (size: 0x8)
    class UAkComponent* _akFlareComponent;                                            // 0x0478 (size: 0x8)
    bool _hasParachute;                                                               // 0x0480 (size: 0x1)
    float _parachuteGravityScale;                                                     // 0x0484 (size: 0x4)
    float _parachuteEffectiveBallisticCoefficient;                                    // 0x0488 (size: 0x4)
    FVector _parachuteParticlesScale;                                                 // 0x048C (size: 0xC)
    float _parachuteParticlesScaleSpeed;                                              // 0x0498 (size: 0x4)
    class UAkAudioEvent* _burnStart;                                                  // 0x04A0 (size: 0x8)
    class UAkAudioEvent* _burnEnd;                                                    // 0x04A8 (size: 0x8)
    float _burnTime;                                                                  // 0x04B0 (size: 0x4)
    FName _burningNoiseTag;                                                           // 0x04B4 (size: 0x8)
    float _noiseLoudnessWhileIgnited;                                                 // 0x04BC (size: 0x4)
    float _noiseLoudnessUpdateFrequencyPerHour;                                       // 0x04C0 (size: 0x4)

}; // Size: 0x4E0

class AProjectileGrenade : public AProjectileExplosive
{
}; // Size: 0x4A8

class AProjectileRocket : public AProjectileExplosive
{
    float _alternateMashDelay;                                                        // 0x04A8 (size: 0x4)
    class UStaticMesh* _alternateMash;                                                // 0x04B0 (size: 0x8)
    float _propulsionDelay;                                                           // 0x04B8 (size: 0x4)
    class UParticleSystem* _propulsionParticleSystem;                                 // 0x04C0 (size: 0x8)

}; // Size: 0x4D8

class AProjectileShotgun : public AProjectile
{
    TSubclassOf<class AProjectile> projectileClass;                                   // 0x0468 (size: 0x8)
    int32 ShotsCount;                                                                 // 0x0470 (size: 0x4)

}; // Size: 0x478

class AQuestBook : public AActor
{
    class UStaticMeshComponent* _meshComponent;                                       // 0x0228 (size: 0x8)
    TSubclassOf<class AQuestBookMinigame> _questBookMinigameClass;                    // 0x0258 (size: 0x8)

}; // Size: 0x260

class AQuestBookMinigame : public AMinigame
{
    class UWidgetComponent* _questPagesWidgetComponent;                               // 0x0340 (size: 0x8)
    class USkeletalMeshComponent* _questBookMeshComponent;                            // 0x0348 (size: 0x8)
    class UAnimationAsset* _openBookIdleAnimation;                                    // 0x0350 (size: 0x8)
    class UAnimationAsset* _closedBookIdleAnimation;                                  // 0x0358 (size: 0x8)
    class UAnimationAsset* _openBookAnimation;                                        // 0x0360 (size: 0x8)
    class UAnimationAsset* _closeBookAnimation;                                       // 0x0368 (size: 0x8)
    class UAnimationAsset* _forwardsPageFlipAnimation;                                // 0x0370 (size: 0x8)
    class UAnimationAsset* _backwardsPageFlipAnimation;                               // 0x0378 (size: 0x8)
    class UMaterialInterface* _questBookMaterial;                                     // 0x0380 (size: 0x8)
    float _acceptHoldTime;                                                            // 0x0388 (size: 0x4)
    float _stampFadeTime;                                                             // 0x038C (size: 0x4)
    float _timeAfterAcceptBeforeClose;                                                // 0x0390 (size: 0x4)

}; // Size: 0x3E0

class AQuestDrivingWaypoint : public AActor
{
}; // Size: 0x258

class AQuestInteractable : public AActor
{
    class UQuestInteractableComponent* _component;                                    // 0x0230 (size: 0x8)
    FText _interactionPrompt;                                                         // 0x0238 (size: 0x18)
    bool _shouldShowWorldQuestMarker;                                                 // 0x0268 (size: 0x1)
    float _maxWorldMarkerDistanceToShow;                                              // 0x026C (size: 0x4)
    FGameplayTagContainer _allowOnlyTags;                                             // 0x0270 (size: 0x20)

}; // Size: 0x2C0

class AQuestManager : public AActor
{
    class UQuestManagerData* _data;                                                   // 0x0298 (size: 0x8)
    TMap<class TSoftClassPtr<AActor>, class EQuestGiverType> _actorQuestGiverTypeMapping; // 0x02A0 (size: 0x50)
    TMap<class FName, class FVector> _outpostLocations;                               // 0x02F0 (size: 0x50)
    TMap<int32, UQuestSetup*> _questSetups;                                           // 0x0340 (size: 0x50)
    TMap<FPrimaryAssetId, int32> _questAssetIdToNetIndexMap;                          // 0x0390 (size: 0x50)
    TMap<class FName, class FCircularAreaGroup> _circularAreaGroups;                  // 0x04D8 (size: 0x50)
    TMap<class FGameplayTag, class FComponentReferenceCollection> _interactableComponentsMap; // 0x0528 (size: 0x50)
    TMap<uint64, int32> _questGiverUniqueIdToNetIndexMap;                             // 0x0580 (size: 0x50)
    TMap<int32, uint64> _questGiverNetIndexToUniqueIdMap;                             // 0x05D0 (size: 0x50)

}; // Size: 0x688

class AQuiver : public AClothesItem
{
    FName ArrowsBoneName;                                                             // 0x0A48 (size: 0x8)
    TArray<class UStaticMeshComponent*> _arrowMeshComponentsArray2;                   // 0x0A50 (size: 0x10)
    float _containerDepth;                                                            // 0x0A64 (size: 0x4)

}; // Size: 0x1E00

class ARabbit2 : public AAnimal2
{
}; // Size: 0x9D0

class ARabbit2AIController : public ASimpleAnimalAIController
{
    float MoveSegment;                                                                // 0x04F8 (size: 0x4)
    float MovementPauseMinTime;                                                       // 0x04FC (size: 0x4)
    float MovementPauseMaxTime;                                                       // 0x0500 (size: 0x4)
    float AngleOffset;                                                                // 0x0504 (size: 0x4)

    void Wander();
}; // Size: 0x508

class ARackItem : public AChestItem
{
    class UStaticMesh* _lockStaticMesh;                                               // 0x0B90 (size: 0x8)

}; // Size: 0xBB0

class ARadiationManager : public AActor
{
    TArray<FRadiationSourceDescription> _levelRadiationSources;                       // 0x0238 (size: 0x10)
    float _radiationDispersionRate;                                                   // 0x024C (size: 0x4)

}; // Size: 0x2F8

class ARadioItem : public AItem
{
    class URadioComponent* _radioComponent;                                           // 0x09B0 (size: 0x8)
    class UBasicGameResourceSlotItemComponent* _resourceSlotComponent;                // 0x09B8 (size: 0x8)
    float _EMInterferenceDisabledTime;                                                // 0x09C0 (size: 0x4)

    void OnComponentDeactivated(class UActorComponent* Component);
    void OnComponentActivated(class UActorComponent* Component, bool wasReset);
}; // Size: 0x9D0

class ARadioStation : public AActor
{
    FName _stationName;                                                               // 0x0250 (size: 0x8)
    TArray<FRadioProgramData> _programsData;                                          // 0x0258 (size: 0x10)
    int32 _maxTracksToQueue;                                                          // 0x0268 (size: 0x4)
    int32 _currentIndex;                                                              // 0x026C (size: 0x4)
    TArray<class URadioTrack*> _playlist;                                             // 0x0270 (size: 0x10)
    float _elapsedTime;                                                               // 0x0280 (size: 0x4)

    void StartTrack();
    void OnTrackEnded();
    void OnRep_Playlist();
    void Multicast_SendNextTrack(class URadioTrack* Track);
}; // Size: 0x298

class ARagItem : public AEquipmentItem
{
    TSoftObjectPtr<UTexture2D> _inventoryIcon_Dirty;                                  // 0x09C0 (size: 0x28)
    TSoftObjectPtr<UTexture2D> _inventoryIconInHands_Dirty;                           // 0x09E8 (size: 0x28)
    TSoftObjectPtr<UTexture2D> _outsideInventoryIcon_Dirty;                           // 0x0A10 (size: 0x28)
    TSoftObjectPtr<UTexture2D> _inventoryIcon_Aseptic;                                // 0x0A38 (size: 0x28)
    TSoftObjectPtr<UTexture2D> _inventoryIconInHands_Aseptic;                         // 0x0A60 (size: 0x28)
    TSoftObjectPtr<UTexture2D> _outsideInventoryIcon_Aseptic;                         // 0x0A88 (size: 0x28)
    int32 _washing_ItemUsage;                                                         // 0x0AB0 (size: 0x4)
    float _washing_ExperienceGain;                                                    // 0x0AB4 (size: 0x4)
    float _disinfection_RequiredDisinfectantAmount;                                   // 0x0AB8 (size: 0x4)
    float _disinfection_ActionDuration;                                               // 0x0ABC (size: 0x4)
    class UStaticMesh* _dirtyMesh;                                                    // 0x0AC0 (size: 0x8)
    class UStaticMesh* _cleanMesh;                                                    // 0x0AC8 (size: 0x8)
    class UStaticMesh* _asepticMesh;                                                  // 0x0AD0 (size: 0x8)
    class UMaterialInstance* _dirtyMaterial;                                          // 0x0AD8 (size: 0x8)
    class UMaterialInstance* _cleanMaterial;                                          // 0x0AE0 (size: 0x8)
    class UMaterialInstance* _asepticMaterial;                                        // 0x0AE8 (size: 0x8)
    float _dirtinessRep;                                                              // 0x0AF0 (size: 0x4)

    void OnRep_Dirtiness();
}; // Size: 0xB00

class ARaidProtectionManager : public AActor
{
    FRaidProtectionArray _activeRaidProtections;                                      // 0x0220 (size: 0x188)
    uint16 _currentServerRealTimeInSyncs;                                             // 0x03A8 (size: 0x2)
    uint32 _serverUtcDayTimeAtServerStartup;                                          // 0x03B0 (size: 0x4)

    void OnRep_ServerTimeZone();
    void OnRep_ServerTime();
}; // Size: 0x3D0

class ARazor : public AConZCharacter
{
    class USphereComponent* _razorWeakSpotComponent;                                  // 0x0860 (size: 0x8)
    class UNavigationInvokerComponent* _navigationInvokerComponent;                   // 0x0868 (size: 0x8)
    class UHitReactComponent* _hitReactComponent;                                     // 0x0870 (size: 0x8)
    class URazorCommonData* _razorCommonData;                                         // 0x0878 (size: 0x8)
    bool _isAlive;                                                                    // 0x0899 (size: 0x1)
    bool _isSearched;                                                                 // 0x08A0 (size: 0x1)
    TWeakObjectPtr<class APawn> _targetPawn;                                          // 0x08A4 (size: 0x8)
    bool _shouldAdjustUpperBodyPitchToTargetPawn;                                     // 0x08AC (size: 0x1)
    bool _isVentilationAnimationFallingSimulationActive;                              // 0x08B4 (size: 0x1)
    ERazorStance _razorStance;                                                        // 0x08F4 (size: 0x1)
    ERazorSleepingStage _razorSleepingStage;                                          // 0x08F5 (size: 0x1)

    void OnRep_RazorStance(ERazorStance oldStance);
    void OnRep_IsVentilationAnimationFallingSimulationActive();
    void NetMulticast_StopOpenDoorAnimation();
    void NetMulticast_PlayTurnMontage(ERazorTurnMontage turnMontage, float angle);
    void NetMulticast_PlayMontage(ERazorMontageType montageType, int32 Index);
    void NetMulticast_PlayGroupAttackMontage(int32 attackMontageIndex);
    void NetMulticast_PlayDoorDestructionMontage(int32 Index);
    void NetMulticast_PlayBasicAttackMontage(int32 attackMontageIndex);
    void NetMulticast_OnRazorKilled(ERazorDeathType deathType, EHitDirectionType directionType);
}; // Size: 0x930

class ARazorAIController : public AConZAIController
{
    class UAISenseConfig_Sight* _currentSightSenseConfig;                             // 0x0468 (size: 0x8)
    class UAISenseConfig_Hearing* _currentHearingSenseConfig;                         // 0x0470 (size: 0x8)
    class UAISenseConfig_Sight* _sightSenseConfigSleeping;                            // 0x0478 (size: 0x8)
    class UAISenseConfig_Hearing* _hearingSenseConfigSleeping;                        // 0x0480 (size: 0x8)
    class UAISenseConfig_Sight* _sightSenseConfigAlerted;                             // 0x0488 (size: 0x8)
    class UAISenseConfig_Hearing* _hearingSenseConfigAlerted;                         // 0x0490 (size: 0x8)
    class UAISenseConfig_Sight* _sightSenseConfigCombat;                              // 0x0498 (size: 0x8)
    class UAISenseConfig_Hearing* _hearingSenseConfigCombat;                          // 0x04A0 (size: 0x8)
    float _timeToForgetKnownCharacter;                                                // 0x04A8 (size: 0x4)
    bool _shouldConsiderSightStimuli;                                                 // 0x04AC (size: 0x1)
    bool _shouldConsiderHearingStimuli;                                               // 0x04AD (size: 0x1)
    TMap<FName, float> _noiseAccumulationMultiplierPerNoiseTag;                       // 0x04B0 (size: 0x50)
    float _stimulusImmunityTime;                                                      // 0x0500 (size: 0x4)
    class UGrappleActionParameters* _grappleActionParameters;                         // 0x0508 (size: 0x8)
    float _cooldownBetweenSwitchingTargets;                                           // 0x0548 (size: 0x4)
    float _timeUntilRecentDamageDrop;                                                 // 0x0550 (size: 0x4)
    float _recentDamageDropRatePerSecond;                                             // 0x0554 (size: 0x4)
    float _recentDamageThresholdToConsider;                                           // 0x0558 (size: 0x4)
    float _wakeUpNoiseThreshold;                                                      // 0x0570 (size: 0x10)
    float _sleepingAccumulatedNoiseDropRate;                                          // 0x0580 (size: 0x4)
    float _playerDistanceForInstantWakeUp;                                            // 0x0588 (size: 0x4)
    float _sleepingStateRecentWakingResetTimer;                                       // 0x0598 (size: 0x4)
    FFloatRange _alertedStateDurationRange;                                           // 0x05A4 (size: 0x10)
    float _alertedNoiseThresholdToBecomeAggressive;                                   // 0x05BC (size: 0x4)
    float _alertedStateAccumulatedNoiseDropRate;                                      // 0x05C0 (size: 0x4)
    float _alertedRandomPointSearchRadius;                                            // 0x05C8 (size: 0x4)
    FFloatRange _alertedAggressiveStateTimeOnInterestPoint;                           // 0x05D0 (size: 0x10)
    FFloatInterval _alertedAggressiveStateDurationRange;                              // 0x05E0 (size: 0x8)
    float _targetFocusDistance;                                                       // 0x05EC (size: 0x4)
    float _distanceToTargetToConsiderForGroupAttack;                                  // 0x05F0 (size: 0x4)
    float _chanceToChangeActiveTargetDuringGroupAttack;                               // 0x05F4 (size: 0x4)
    float _combatAcceptanceRadius;                                                    // 0x0608 (size: 0x4)
    FFloatRange _combatPauseBetweenAttacksRange;                                      // 0x060C (size: 0x10)
    FFloatRange _combatPauseBetweenMovementsRange;                                    // 0x061C (size: 0x10)
    float _combatStandingStillTimeToTriggerMovementDelay;                             // 0x062C (size: 0x4)
    int32 _minRequiredConsecutiveAttackToTriggerIntimidation;                         // 0x0644 (size: 0x4)
    float _resetIntimidationAttackCounterTime;                                        // 0x064C (size: 0x4)
    float _chanceToTriggerIntimidation;                                               // 0x0650 (size: 0x4)
    float _mountAttackInitiateDistance;                                               // 0x0654 (size: 0x4)
    float _mountAttackMinDistance;                                                    // 0x0658 (size: 0x4)
    float _mountAttackAttemptDistance;                                                // 0x065C (size: 0x4)
    float _mountAttackAttemptForceTime;                                               // 0x0660 (size: 0x4)
    float _mountAttackOverrideForwardSpeed;                                           // 0x0668 (size: 0x4)
    float _mountAttackJumpApexHeight;                                                 // 0x066C (size: 0x4)
    float _mountAttackCooldown;                                                       // 0x0678 (size: 0x4)
    float _distanceFromPlayerForMountAttackToBeValid;                                 // 0x0680 (size: 0x4)
    float _heightDifferenceFromPlayerForMountAttackToBeValid;                         // 0x0684 (size: 0x4)
    float _mountAttackDamageInterval;                                                 // 0x0688 (size: 0x4)
    TArray<FName> _mountAttackTargetDamageBoneNames;                                  // 0x0690 (size: 0x10)
    float _damagePerMountAttack;                                                      // 0x06A0 (size: 0x4)
    float _mountAttackDamageTakenLimit;                                               // 0x06A8 (size: 0x4)
    float _minDistanceFromPlayerToIntimidateAfterFailedMountAttack;                   // 0x06B0 (size: 0x4)
    FFloatRange _ventilationDespawnMovementDelayRange;                                // 0x06CC (size: 0x10)
    float _timeNotSeenByPlayersToDespawn;                                             // 0x06E0 (size: 0x4)
    float _noiseLoudnessToInterruptVentilationDespawn;                                // 0x06E8 (size: 0x4)
    float _minAngleCosRequiredToTurn;                                                 // 0x06EC (size: 0x4)
    float _genericAcceptanceRadius;                                                   // 0x06F0 (size: 0x4)
    float _timeToBeConsideredStuck;                                                   // 0x06F4 (size: 0x4)
    float _costOfJumpingInPathLength;                                                 // 0x06F8 (size: 0x4)
    float _distanceForDestinationToBeConsideredChanged;                               // 0x06FC (size: 0x4)
    float _razorTargetDistanceXYToGiveUpBangingOnDoors;                               // 0x0730 (size: 0x4)
    float _razorTargetDistanceZToGiveUpBangingOnDoors;                                // 0x0734 (size: 0x4)

    void SensingComponent_OnActorSensed(const TArray<class AActor*>& actorsPercepted);
    void OnDoorBreakdownInterrupted();
}; // Size: 0x7B0

class ARazorSpawnPoint : public AActor
{
    class UStaticMeshComponent* _staticMeshComponent;                                 // 0x0220 (size: 0x8)
    class UStaticMeshComponent* _grateStaticMeshComponent;                            // 0x0228 (size: 0x8)
    class UMovableAudioSpline* _movableAudioSpline;                                   // 0x0230 (size: 0x8)
    FTransform _exitTransform;                                                        // 0x0240 (size: 0x30)
    FVector _grateLaunchPosition;                                                     // 0x0270 (size: 0xC)
    FVector _grateLaunchDirectionVectorRelative;                                      // 0x027C (size: 0xC)
    float _grateLaunchMinVelocity;                                                    // 0x0288 (size: 0x4)
    float _grateLaunchMaxVelocity;                                                    // 0x028C (size: 0x4)
    float _grateLaunchvelocityHalfAnglePitch;                                         // 0x0290 (size: 0x4)
    float _grateLaunchvelocityHalfAngleYaw;                                           // 0x0294 (size: 0x4)
    class UNiagaraSystem* _burstOpenParticles;                                        // 0x0298 (size: 0x8)
    FName _particleAttachPointName;                                                   // 0x02A0 (size: 0x8)
    class UAkAudioEvent* _beginPlayAudioEvent;                                        // 0x02A8 (size: 0x8)
    class UAkAudioEvent* _stopAudioEvent;                                             // 0x02B0 (size: 0x8)
    class UAkAudioEvent* _commotionAudioEvent;                                        // 0x02B8 (size: 0x8)
    class UAkAudioEvent* _burstOpenAudioEvent;                                        // 0x02C0 (size: 0x8)
    bool _isOpened;                                                                   // 0x02C8 (size: 0x1)

    void NetMulticast_PlaySoundNearLocation(FVector Location, FVector destinationLocation);
    void NetMulticast_PlaySoundFromRandomPoint();
    void NetMulticast_PlaySoundFromNearestEnd(FVector Location, FVector destinationLocation);
    void NetMulticast_PlayCommotionAudioEvent();
    void NetMulticast_PlayBurstOpenEffects();
}; // Size: 0x2D0

class ARecastNavMesh_Brenner : public ARecastNavMesh
{
}; // Size: 0x578

class ARecastNavMesh_Humanoids : public ARecastNavMesh
{
}; // Size: 0x578

class ARecastNavMesh_LargeAnimals : public ARecastNavMesh
{
}; // Size: 0x578

class ARecastNavMesh_Sentries : public ARecastNavMesh
{
}; // Size: 0x578

class ARecastNavMesh_SmallAnimals : public ARecastNavMesh
{
}; // Size: 0x578

class ARefrigeratorItem : public AChestItem
{
    class URangedResourceConsumerComponentMultipleProviders* _rangedResourceConsumerComponent; // 0x0B90 (size: 0x8)

}; // Size: 0xBA0

class ARegularDoorStatic : public ADoor
{
    FRotator _openRotation;                                                           // 0x0580 (size: 0xC)
    FRotator _closedRotation;                                                         // 0x058C (size: 0xC)

}; // Size: 0x5A0

class ARemoteKeyItem : public AItem
{
    class UBasicGameResourceSlotItemComponent* _resourceSlotComponent;                // 0x09A8 (size: 0x8)
    float _triggerRadius;                                                             // 0x09B0 (size: 0x4)
    class UAkAudioEvent* _triggerAudioEvent;                                          // 0x09B8 (size: 0x8)
    bool _isPaired;                                                                   // 0x09D0 (size: 0x1)

}; // Size: 0x9E0

class ARemoteSensorItem : public AItem
{
    class UBasicGameResourceSlotItemComponent* _resourceSlotComponent;                // 0x09C8 (size: 0x8)
    int32 _maxPairedDevices;                                                          // 0x09D0 (size: 0x4)
    bool _hasAvailableSlots;                                                          // 0x09D4 (size: 0x1)

}; // Size: 0x9F0

class AReplicatedEffectsActor : public AActor
{
    float _lifeSpan;                                                                  // 0x0220 (size: 0x4)

}; // Size: 0x228

class AReplicatedExplosionEffectsActor : public AReplicatedEffectsActor
{
    FTransform _explosionParticlesTransform;                                          // 0x0230 (size: 0x30)
    class UParticleSystem* _defaultParticleSystem;                                    // 0x0260 (size: 0x8)
    TMap<TEnumAsByte<EPhysicalSurface>, UParticleSystem*> _onImpactExplosionEffectsOverrides; // 0x0268 (size: 0x50)
    class UAkAudioEvent* _explosionSound;                                             // 0x02B8 (size: 0x8)

}; // Size: 0x2D0

class AReportingManager : public AActor
{
    FReportingManagerPrisonerWhistled PrisonerWhistled;                               // 0x0388 (size: 0x10)
    void PrisonerWhistled(class APrisoner* Prisoner);

}; // Size: 0x7D0

class ASceneComponentEffectsActor : public AActor
{
    TArray<class USceneComponent*> _registeredComponents;                             // 0x0220 (size: 0x10)

}; // Size: 0x248

class ASedentaryNPC : public AConZCharacter
{
    class USkeletalMeshComponent* _headMesh;                                          // 0x0828 (size: 0x8)
    FVector _originalLocation;                                                        // 0x0830 (size: 0xC)
    class ATradeOutpostBuilding* _tradeOutpostBuilding;                               // 0x0840 (size: 0x8)
    FVector _animationHeadScale;                                                      // 0x0880 (size: 0xC)
    class UAnimSequenceBase* _faceIdleAnimation;                                      // 0x0890 (size: 0x8)
    FFloatRange _headYawClampValues;                                                  // 0x0898 (size: 0x10)
    FFloatRange _headPitchClampValues;                                                // 0x08A8 (size: 0x10)
    float _headPitchClampCorrectionValueLower;                                        // 0x08B8 (size: 0x4)
    float _headPitchClampCorrectionValueUpper;                                        // 0x08BC (size: 0x4)
    float _headRotationSpeedLerpFactor;                                               // 0x08C0 (size: 0x4)
    FFloatRange _eyesYawAngleRange;                                                   // 0x08C4 (size: 0x10)
    FFloatRange _eyesPitchAngleRange;                                                 // 0x08D4 (size: 0x10)
    float _eyesPitchClampCorrectionValueLower;                                        // 0x08E4 (size: 0x4)
    float _eyesPitchClampCorrectionValueUpper;                                        // 0x08E8 (size: 0x4)
    float _eyesRotationSpeedLerpFactor;                                               // 0x08EC (size: 0x4)
    FFloatRange _blinkingPeriodRange;                                                 // 0x08F0 (size: 0x10)
    float _timeToBlinkInSeconds;                                                      // 0x0900 (size: 0x4)
    TArray<class TSubclassOf<USedentaryNPCBackgroundInteraction>> _backgroundInteractions; // 0x0908 (size: 0x10)
    class USedentaryNPCBackgroundInteraction* _activeBackgroundInteraction;           // 0x0918 (size: 0x8)
    float _interactionDistance;                                                       // 0x0920 (size: 0x4)
    float _timeWithoutFocusPawnToClearBackgroundInteractions;                         // 0x0924 (size: 0x4)
    float _backgroundInteractionCooldownTime;                                         // 0x0980 (size: 0x4)

    void OnRep_TradeOutpostBuilding();
}; // Size: 0x9A0

class ASentry2 : public AConZCharacter
{
    FName _pelvisBoneName;                                                            // 0x08B0 (size: 0x8)
    FName _eyesViewPointSocketName;                                                   // 0x08B8 (size: 0x8)
    FName _longRangeWeaponSocketName;                                                 // 0x08C0 (size: 0x8)
    TArray<FName> _longRangeWeaponMuzzleFlashBoneNames;                               // 0x08C8 (size: 0x10)
    FName _longRangeWeaponBoneName;                                                   // 0x08D8 (size: 0x8)
    FName _mediumRangeWeaponSocketName;                                               // 0x08E0 (size: 0x8)
    TArray<FName> _mediumRangeWeaponMuzzleFlashBoneNames;                             // 0x08E8 (size: 0x10)
    FName _mediumRangeWeaponBoneName;                                                 // 0x08F8 (size: 0x8)
    FName _highPrecisionWeaponSocketName;                                             // 0x0900 (size: 0x8)
    FName _highPrecisionWeaponBoneName;                                               // 0x0908 (size: 0x8)
    TArray<FName> _grenadeLauncherSocketNames;                                        // 0x0910 (size: 0x10)
    FName _highPrecisionWeaponChargingSocket;                                         // 0x0920 (size: 0x8)
    FName _meleeAttackFailureGrenadeDropSocket;                                       // 0x0928 (size: 0x8)
    float _sensorHeightOffset;                                                        // 0x0930 (size: 0x4)
    TArray<FName> _damageParticlesSockets;                                            // 0x0938 (size: 0x10)
    class UAkAudioEvent* _fireBulletAudioEvent;                                       // 0x0948 (size: 0x8)
    class UAkAudioEvent* _startHighFireRateAttack;                                    // 0x0950 (size: 0x8)
    class UAkAudioEvent* _endHighFireRateAttack;                                      // 0x0958 (size: 0x8)
    class UAkAudioEvent* _reloadAudioEvent;                                           // 0x0960 (size: 0x8)
    class UAkAudioEvent* _highPrecisionWeaponFireShotAudioEvent;                      // 0x0968 (size: 0x8)
    class UAkAudioEvent* _grenadeLaunchAudioEffect;                                   // 0x0970 (size: 0x8)
    class UAkAudioEvent* _tearGasGrenadeLaunchAudioEffect;                            // 0x0978 (size: 0x8)
    class UAkAudioEvent* _stunGrenadeLaunchAudioEffect;                               // 0x0980 (size: 0x8)
    class UAkAudioEvent* _deathAudioEvent;                                            // 0x0988 (size: 0x8)
    class UAkAudioEvent* _freezeWarningAudioEvent;                                    // 0x0990 (size: 0x8)
    class UAkAudioEvent* _dropWeaponsRaiseHandsAudioEvent;                            // 0x0998 (size: 0x8)
    class UAkAudioEvent* _walkAwayAudioEvent;                                         // 0x09A0 (size: 0x8)
    class UAkAudioEvent* _beginCombatAudioEvent;                                      // 0x09A8 (size: 0x8)
    class UAkAudioEvent* _startSearchCorpseAudioEvent;                                // 0x09B0 (size: 0x8)
    class UAkAudioEvent* _stopSearchCorpseAudioEvent;                                 // 0x09B8 (size: 0x8)
    class UAkAudioEvent* _upperBodyRotationAudioEvent;                                // 0x09C0 (size: 0x8)
    class UAnimMontage* _normalAttackMontage;                                         // 0x09C8 (size: 0x8)
    class UAnimMontage* _mediumRangeAttackMontage;                                    // 0x09D0 (size: 0x8)
    class UAnimMontage* _reloadMontageLongRangeWeapon;                                // 0x09D8 (size: 0x8)
    class UAnimMontage* _reloadMontageMediumRangeWeapon;                              // 0x09E0 (size: 0x8)
    class UAnimMontage* _deathMontage;                                                // 0x09E8 (size: 0x8)
    TArray<FSentryMeleeAttackDescription> _meleeMontageDescriptions;                  // 0x09F0 (size: 0x10)
    class UAnimMontage* _highprecisionAttackMontage;                                  // 0x0A00 (size: 0x8)
    class UAnimMontage* _enemySpottedMontage;                                         // 0x0A08 (size: 0x8)
    bool _hasUpperBodyRotation;                                                       // 0x0A10 (size: 0x1)
    float _upperBodyRotationMaxYawDegrees;                                            // 0x0A14 (size: 0x4)
    float _upperBodyRotationHighPrecisionAttackMaxYawDegrees;                         // 0x0A18 (size: 0x4)
    float _upperBodyRotationFactor;                                                   // 0x0A1C (size: 0x4)
    float _upperBodyNetSmoothUpdateRotationTime;                                      // 0x0A20 (size: 0x4)
    float _upperBodyRotationAngularVelocitySoundThreshold;                            // 0x0A24 (size: 0x4)
    FVector _upperBodyFocusLocation;                                                  // 0x0A2C (size: 0xC)
    bool _hasHighFireRateAttackAnimation;                                             // 0x0A41 (size: 0x1)
    class USimulatedShooterFiringStrategy* _simulatedShooterFiringStrategyLongRange;  // 0x0A48 (size: 0x8)
    class USimulatedShooterFiringStrategy* _simulatedShooterFiringStrategyHighFireRate; // 0x0A50 (size: 0x8)
    class USimulatedShooterFiringStrategy* _simulatedShooterFiringStrategyHighPrecision; // 0x0A58 (size: 0x8)
    class USimulatedShooterFiringStrategy* _simulatedShooterFiringStrategyMediumRange; // 0x0A60 (size: 0x8)
    class USimulatedShooterFiringStrategy* _simulatedShooterFiringStrategyLongRangeSP; // 0x0A68 (size: 0x8)
    class USimulatedShooterFiringStrategy* _simulatedShooterFiringStrategyHighFireRateSP; // 0x0A70 (size: 0x8)
    class USimulatedShooterFiringStrategy* _simulatedShooterFiringStrategyHighPrecisionSP; // 0x0A78 (size: 0x8)
    class USimulatedShooterFiringStrategy* _simulatedShooterFiringStrategyMediumRangeSP; // 0x0A80 (size: 0x8)
    float _gunsLerpFactor;                                                            // 0x0A90 (size: 0x4)
    TSubclassOf<class AProjectile> _projectileClass;                                  // 0x0A98 (size: 0x8)
    TSubclassOf<class AProjectile> _projectileClassClient;                            // 0x0AA0 (size: 0x8)
    float _maxLongRangeWeaponHalfAngle;                                               // 0x0AA8 (size: 0x4)
    float _mediumGunsLerpFactor;                                                      // 0x0AB8 (size: 0x4)
    TSubclassOf<class AProjectile> _mediumRangeProjectileClass;                       // 0x0AC0 (size: 0x8)
    TSubclassOf<class AProjectile> _mediumRangeProjectileClassClient;                 // 0x0AC8 (size: 0x8)
    float _maxMediumRangeWeaponHalfAngle;                                             // 0x0AD0 (size: 0x4)
    TSubclassOf<class AProjectile> _highPrecisonWeaponProjectileClass;                // 0x0AE8 (size: 0x8)
    TSubclassOf<class AProjectile> _highPrecisonWeaponProjectileClassClient;          // 0x0AF0 (size: 0x8)
    float _maxHighPrecisionWeaponHalfAngle;                                           // 0x0AF8 (size: 0x4)
    TSubclassOf<class AProjectile> _grenadeProjectileClass;                           // 0x0B08 (size: 0x8)
    TSubclassOf<class AItem> _tearGasGrenadeItemClass;                                // 0x0B10 (size: 0x8)
    TSubclassOf<class AItem> _stunGrenadeItemClass;                                   // 0x0B18 (size: 0x8)
    float _stunGreandeExplosionDelayAfterReachingGround;                              // 0x0B20 (size: 0x4)
    float _itemGreandeDirectionRandomizationAngle;                                    // 0x0B24 (size: 0x4)
    class USentryMovementComponent* _sentryMovementComponent;                         // 0x0B38 (size: 0x8)
    class UHitReactComponent* _hitReactComponent;                                     // 0x0B40 (size: 0x8)
    FGameplayTag _hitReactTag;                                                        // 0x0B48 (size: 0x8)
    bool _isAlive;                                                                    // 0x0B50 (size: 0x1)
    float _maxHealth;                                                                 // 0x0B54 (size: 0x4)
    float _health;                                                                    // 0x0B58 (size: 0x4)
    float _healthStateThresholds;                                                     // 0x0B60 (size: 0x18)
    float _deactivatedTime;                                                           // 0x0B78 (size: 0x4)
    float _armorDamageReductionExplosion;                                             // 0x0B80 (size: 0x4)
    float _armorDamageReductionCollision;                                             // 0x0B84 (size: 0x4)
    float _exlosionDamageHitReactThreshold;                                           // 0x0B88 (size: 0x4)
    bool _isStunnedDuringHitReact;                                                    // 0x0B8C (size: 0x1)
    float _longRangeWeaponFireRate;                                                   // 0x0B90 (size: 0x4)
    float _longRangeWeaponFireRateVariation;                                          // 0x0B94 (size: 0x4)
    float _longRangeWeaponHalfAngleDegrees;                                           // 0x0B98 (size: 0x4)
    int32 _maxAmmunitionLongRangeWeapon;                                              // 0x0B9C (size: 0x4)
    int32 _maxAmmunitionMediumRangeWeapon;                                            // 0x0BA4 (size: 0x4)
    float _longRangeWeaponSpreadHalfAngle;                                            // 0x0BAC (size: 0x4)
    float _mediumRangeWeaponFireRate;                                                 // 0x0BB0 (size: 0x4)
    float _mediumRangeWeaponHalfAngleDegrees;                                         // 0x0BB4 (size: 0x4)
    float _meleeAttackRate;                                                           // 0x0BB8 (size: 0x4)
    FVector _weaponOverrideAimLocationRep;                                            // 0x0BD0 (size: 0xC)
    TArray<FSentryPatrolPoint> _patrolPoints;                                         // 0x0C10 (size: 0x10)
    class UParticleSystem* _muzzlePS;                                                 // 0x0C20 (size: 0x8)
    TArray<class UParticleSystemComponent*> _muzzlePSCs;                              // 0x0C28 (size: 0x10)
    class UParticleSystem* _highPrecisionWeaponMuzzlePS;                              // 0x0C38 (size: 0x8)
    class UParticleSystemComponent* _highPrecisionWeaponMuzzlePSC;                    // 0x0C40 (size: 0x8)
    float _muzzleEffectsScaleDistanceStart;                                           // 0x0C48 (size: 0x4)
    float _muzzleEffectsScaleDistanceRange;                                           // 0x0C4C (size: 0x4)
    float _muzzleEffectsScaleByDistanceFactor;                                        // 0x0C50 (size: 0x4)
    class UNiagaraSystem* _highPrecisionWeaponChargingPS;                             // 0x0C58 (size: 0x8)
    class UNiagaraComponent* _highPrecisionWeaponChargingPSC;                         // 0x0C60 (size: 0x8)
    class UNiagaraSystem* _mediumRangeWeaponPS;                                       // 0x0C68 (size: 0x8)
    class UNiagaraComponent* _mediumRangeWeaponPSC;                                   // 0x0C70 (size: 0x8)
    FName _lightMaterialSlotName;                                                     // 0x0CB0 (size: 0x8)
    TArray<FName> _additionalLightsMaterialSlotNames;                                 // 0x0CB8 (size: 0x10)
    FColor _normalLightColor;                                                         // 0x0CC8 (size: 0x4)
    FColor _alertedLightColor;                                                        // 0x0CCC (size: 0x4)
    FColor _combatLightColor;                                                         // 0x0CD0 (size: 0x4)
    FName _emissionColorParameterName;                                                // 0x0CD8 (size: 0x8)
    float _spottingPercentage;                                                        // 0x0CE0 (size: 0x4)
    FInt32Range _damageEffectsNumPerHealthStateData;                                  // 0x0CE4 (size: 0x60)
    TArray<FSentryDamageEffectData> _damageParticleEffectsPSData;                     // 0x0D48 (size: 0x10)
    float _damageParticleIntensityPerHealthState;                                     // 0x0DA8 (size: 0x18)
    float _stompShakeEffectRadius;                                                    // 0x0DC0 (size: 0x4)
    float _stompShakeMaxEffectRadius;                                                 // 0x0DC4 (size: 0x4)
    float _stompShakeEffectFalloffExponent;                                           // 0x0DC8 (size: 0x4)
    TSubclassOf<class UMatineeCameraShake> _stompCameraShake;                         // 0x0DD0 (size: 0x8)
    class UStaticMeshComponent* _laserMeshComponent;                                  // 0x0DD8 (size: 0x8)
    bool _canEverDrawLaser;                                                           // 0x0DE0 (size: 0x1)
    float _walkSpeedMultiplier;                                                       // 0x0DE4 (size: 0x4)
    float _walkSpeedMultiplierMin;                                                    // 0x0DE8 (size: 0x4)
    float _walkSpeedMultiplierMax;                                                    // 0x0DEC (size: 0x4)
    float _corpseSearchDuration;                                                      // 0x0DF4 (size: 0x4)
    uint8 _packedGeneralData;                                                         // 0x0DF9 (size: 0x1)
    uint32 _packedCombatData;                                                         // 0x0DFC (size: 0x4)
    FHeatSourceParameters _transientHeatSourceParameters;                             // 0x0E00 (size: 0x24)
    FVector _transientHeatSourceOffset;                                               // 0x0E24 (size: 0xC)
    float _autoSaveInterval;                                                          // 0x0E40 (size: 0x4)
    bool _shouldSaveAndLoadSentry;                                                    // 0x0E48 (size: 0x1)
    TWeakObjectPtr<class AActor> _foe;                                                // 0x0E68 (size: 0x8)
    TArray<TWeakObjectPtr<AActor>> _knownTargets;                                     // 0x0E70 (size: 0x10)
    FName _healthServerSettingName;                                                   // 0x0EA0 (size: 0x8)
    FName _projectileDamageMultiplierServerSettingName;                               // 0x0EA8 (size: 0x8)
    FName _railgunProjectileDamageMultiplierServerSettingName;                        // 0x0EB0 (size: 0x8)
    FName _grenadeProjectileDamageMultiplierServerSettingName;                        // 0x0EB8 (size: 0x8)
    TSoftClassPtr<ADropship> _spawnableDropshipClass;                                 // 0x0EC0 (size: 0x28)
    int32 _initialRandomSeed;                                                         // 0x0F08 (size: 0x4)

    void OnRep_SpottingPercentage();
    void OnRep_PackedGeneralData();
    void OnRep_PackedCombatData();
    void OnRep_IsAlive();
    void NetMulticast_StartHighSpreadAttackEffects();
    void NetMulticast_RemoveKnownTarget(class AActor* Actor);
    void NetMulticast_ReloadMediumRangeWeapon();
    void NetMulticast_ReloadLongRangeWeapon();
    void NetMulticast_PlayWalkAwaySound();
    void NetMulticast_PlayTearGasGrenadeLaunchEffects();
    void NetMulticast_PlayStunGrenadeLaunchEffects();
    void NetMulticast_PlayMeleeAttackMontage(int32 kickIndex);
    void NetMulticast_PlayHighPrecisionAttackMontage();
    void NetMulticast_PlayGrenadeLaunchEffects();
    void NetMulticast_PlayFreezeWarningSound();
    void NetMulticast_PlayEnemySpottedMontage();
    void NetMulticast_PlayDropWeaponsRaiseHandsSound();
    void NetMulticast_PlayBeginCombatSound();
    void NetMulticast_OnSentryDeath();
    void NetMulticast_OnSentryDeactivated();
    void NetMulticast_OnSentryActivating();
    void NetMulticast_OnSentryActivated();
    void NetMulticast_HandleHit(EHitDirectionType hitDirectionType);
    void NetMulticast_FireShotEffectsMediumRangeWeapon();
    void NetMulticast_FireShotEffectsLongRangeWeapon();
    void NetMulticast_FireShotEffectsHighSpread();
    void NetMulticast_EndHighSpreadAttackEffects();
    void NetMulticast_AddKnownTarget(class AActor* Actor);
    class UFlamethrowerComponent* GetFlamethrowerComponent();
}; // Size: 0xF10

class ASentryAIController2 : public AConZAIController
{
    bool _canHear;                                                                    // 0x0520 (size: 0x1)
    bool _canSee;                                                                     // 0x0521 (size: 0x1)
    class UAISenseConfig_Sight* _currentSightSenseConfig;                             // 0x0528 (size: 0x8)
    class UAISenseConfig_Hearing* _currentHearingSenseConfig;                         // 0x0530 (size: 0x8)
    class UAISenseConfig_Sight* _sightSenseConfigPatrolling;                          // 0x0538 (size: 0x8)
    class UAISenseConfig_Sight* _sightSenseConfigAlerted;                             // 0x0540 (size: 0x8)
    class UAISenseConfig_Sight* _sightSenseConfigCombat;                              // 0x0548 (size: 0x8)
    class UAISenseConfig_Hearing* _hearingSenseConfigPatrolling;                      // 0x0550 (size: 0x8)
    class UAISenseConfig_Hearing* _hearingSenseConfigAlerted;                         // 0x0558 (size: 0x8)
    class UAISenseConfig_Hearing* _hearingSenseConfigCombat;                          // 0x0560 (size: 0x8)
    float _spottingTimeDecayMultiplier;                                               // 0x0568 (size: 0x4)
    float _forgetKnownEnemyTime;                                                      // 0x056C (size: 0x4)
    int32 _noiseStimuliBeforeInstantlyLocatingCharacter;                              // 0x0570 (size: 0x4)
    TArray<FName> _specialNoiseTags;                                                  // 0x0578 (size: 0x10)
    float _timeUntilNoiseStimuliCounterReset;                                         // 0x0588 (size: 0x4)
    float _threatLevelAccumulationMultiplier;                                         // 0x0598 (size: 0x4)
    float _onHearNoiseThreatLevelIncrease;                                            // 0x059C (size: 0x4)
    float _onDamageTakeThreatLevelIncrease;                                           // 0x05A0 (size: 0x4)
    float _switchTargetCharacterTime;                                                 // 0x05A8 (size: 0x4)
    FDetectionDelayTimerData _detectionDelayTimerData;                                // 0x05AC (size: 0x10)
    float _distanceWhenConsideredCharacterEnteredHotZone;                             // 0x05BC (size: 0x4)
    float _maxDistanceWhenTemporaryPointIsConsideredTooClose;                         // 0x05C0 (size: 0x4)
    int32 _temporaryPatrolPointVisitsUntilDeleted;                                    // 0x05C4 (size: 0x4)
    float _checkSurroundingsTime;                                                     // 0x05CC (size: 0x4)
    bool _shouldRotateDuringCheck;                                                    // 0x05D4 (size: 0x1)
    float _checkSurroundingsAngle;                                                    // 0x05D8 (size: 0x4)
    float _investigatingLocationOverallTime;                                          // 0x05E8 (size: 0x4)
    float _investigatingLocationTime;                                                 // 0x05F0 (size: 0x4)
    float _investigatingBuildingTime;                                                 // 0x05F8 (size: 0x4)
    float _guardLocationTime;                                                         // 0x0620 (size: 0x4)
    float _guardLocationSwitchFocusTime;                                              // 0x0628 (size: 0x4)
    float _enemySpottedWarningTime;                                                   // 0x0650 (size: 0x4)
    float _maxTolerance;                                                              // 0x0658 (size: 0x4)
    float _enemySpottedOutOfSightTimeLimit;                                           // 0x0660 (size: 0x4)
    float _distanceWhenConsideredCharacterLeavingHotZone;                             // 0x066C (size: 0x4)
    float _freezeCheckTime;                                                           // 0x0670 (size: 0x4)
    float _freezeCheckToleranceDrainMultiplier;                                       // 0x0674 (size: 0x4)
    int32 _numberOfWarningShots;                                                      // 0x0678 (size: 0x4)
    float _raiseHandsCheckTime;                                                       // 0x0680 (size: 0x4)
    float _raiseHandsCheckToleranceDrainMultiplier;                                   // 0x0684 (size: 0x4)
    float _walkAwayCheckToleranceDrainMultiplier;                                     // 0x0688 (size: 0x4)
    float _movingToHotZoneToleranceDrainMultiplier;                                   // 0x068C (size: 0x4)
    float _minMovingToHotZoneRange;                                                   // 0x0690 (size: 0x4)
    float _otherToleranceDrainMultiplier;                                             // 0x0694 (size: 0x4)
    float _minimumAlertedTime;                                                        // 0x0698 (size: 0x4)
    float _observeEnemyMovementTime;                                                  // 0x06A0 (size: 0x4)
    float _observeEnemyMovementThreatLevelIncreasePerStateEntry;                      // 0x06A8 (size: 0x4)
    float _observeEnemyMovementOpenFireThreshold;                                     // 0x06AC (size: 0x4)
    float _beginShootingTime;                                                         // 0x06BC (size: 0x4)
    TArray<FSentryCombatBehaviorMode> _sentryCombatBehaviorModes;                     // 0x06C8 (size: 0x10)
    float _combatBehaviorModeIncreaseTime;                                            // 0x06DC (size: 0x4)
    float _combatBehaviorModeTimeIncreasePerDamageTaken;                              // 0x06E4 (size: 0x4)
    float _combatBehaviorModeDecreaseTime;                                            // 0x06E8 (size: 0x4)
    float _combatSwitchVariationTimeMin;                                              // 0x06F0 (size: 0x4)
    float _combatSwitchVariationTimeMax;                                              // 0x06F4 (size: 0x4)
    float _combatModeOnEnterCombatSwitchVariationTimeElapsedTimePercentage;           // 0x0700 (size: 0x4)
    float _meleeFireRateTime;                                                         // 0x0704 (size: 0x4)
    float _highFireRateSpreadMultiplier;                                              // 0x070C (size: 0x4)
    float _highFireRateInitialAttackDelay;                                            // 0x0710 (size: 0x4)
    float _highFireRateAttackDuration;                                                // 0x0718 (size: 0x4)
    float _highPrecisionShotAimTime;                                                  // 0x0720 (size: 0x4)
    float _highPrecisionShotCooldownTime;                                             // 0x0724 (size: 0x4)
    float _highPrecisionBlockCheckDistance;                                           // 0x0728 (size: 0x4)
    float _grenadeLaunchMinDistance;                                                  // 0x072C (size: 0x4)
    float _grenadeLaunchPredictionVariationMin;                                       // 0x0730 (size: 0x4)
    float _grenadeLaunchPredictionVariationMax;                                       // 0x0734 (size: 0x4)
    float _grenadeLaunchAimTime;                                                      // 0x0738 (size: 0x4)
    int32 _grenadeLaunchAmountMax;                                                    // 0x073C (size: 0x4)
    float _grenadeLaunchPauseBetweenShotsTime;                                        // 0x0744 (size: 0x4)
    float _grenadeLaunchCooldownTime;                                                 // 0x074C (size: 0x4)
    FFloatRange _attackModeExitRanges;                                                // 0x0754 (size: 0x30)
    float _attackModeEntryRanges;                                                     // 0x0784 (size: 0xC)
    float _combatMoveCloserDistance;                                                  // 0x0790 (size: 0x4)
    float _combatDistance;                                                            // 0x0794 (size: 0x4)
    int32 _consecutiveMeleeAttacksNeededToDropGrenade;                                // 0x07A4 (size: 0x4)
    float _combatNoSightTime;                                                         // 0x07AC (size: 0x4)
    float _timeSpentStandingToStartAimingForTheHead;                                  // 0x07B0 (size: 0x4)
    float _chanceToHitOverrideTargetActor;                                            // 0x07B8 (size: 0x4)
    float _damageToDealHitOverrideTargetActorPerShot;                                 // 0x07BC (size: 0x4)
    float _searchForEnemyAfterLostStimulusTime;                                       // 0x07C0 (size: 0x4)
    float _combatLostSightInvestigateLocationTime;                                    // 0x07C4 (size: 0x4)
    float _distanceFromActorWhenInvestigationLocationIsChanged;                       // 0x07CC (size: 0x4)
    float _relocatingAngle;                                                           // 0x07D0 (size: 0x4)
    float _relocatingRadius;                                                          // 0x07D4 (size: 0x4)
    FFloatInterval _pauseBetweenBaseElementsToDestroy;                                // 0x07D8 (size: 0x8)
    float _baseElementChanceToHit;                                                    // 0x07E4 (size: 0x4)
    float _damageToBBElement;                                                         // 0x07E8 (size: 0x4)
    FFloatInterval _extractionCooldownTimeInterval;                                   // 0x081C (size: 0x8)
    float _maximumOperatingRadius;                                                    // 0x0844 (size: 0x4)
    float _movingAwayHalfAngleDegrees;                                                // 0x0854 (size: 0x4)
    float _movingTowardsHalfAngleDegrees;                                             // 0x0858 (size: 0x4)
    float _acceptanceRadius;                                                          // 0x085C (size: 0x4)
    float _timeToBeConsideredStuck;                                                   // 0x0870 (size: 0x4)
    float _rotationAngleCosToStartWalking;                                            // 0x087C (size: 0x4)

    void SensingComponent_OnSensePawn(const TArray<class AActor*>& actorsPercepted);
}; // Size: 0x910

class ASentryGuardVolume2 : public AVolume
{
    TArray<FVector> _hotZonesLocalLocations;                                          // 0x0278 (size: 0x10)
    TArray<class ABuilding*> _hotZonesBuildings;                                      // 0x0298 (size: 0x10)
    TArray<FSentryHotZoneVolumeData> _hotZonesVolumes;                                // 0x02A8 (size: 0x10)

}; // Size: 0x2B8

class ASentrySpawner2 : public AActor
{
    float ActivationDistance;                                                         // 0x0220 (size: 0x4)
    TSoftClassPtr<ASentry2> SentryClass;                                              // 0x0228 (size: 0x28)
    TArray<FSentryPatrolPoint> PatrolPoints;                                          // 0x0250 (size: 0x10)
    class UBillboardComponent* Sprite;                                                // 0x0260 (size: 0x8)
    float SentryOperatingRange;                                                       // 0x0268 (size: 0x4)
    bool ForceUndergroundSentry;                                                      // 0x026C (size: 0x1)
    bool _shouldSaveAndLoadSentry;                                                    // 0x0294 (size: 0x1)
    float _autosaveTime;                                                              // 0x0298 (size: 0x4)
    bool _canEverRespawnSentry;                                                       // 0x02A0 (size: 0x1)

}; // Size: 0x2B8

class AShark : public ALargeAquaticAnimal
{
    class UParticleSystem* _sharkBiteBloodPS;                                         // 0x0888 (size: 0x8)
    class UParticleSystemComponent* _sharkBiteBloodPSC;                               // 0x0890 (size: 0x8)
    float _biteParticlesScale;                                                        // 0x0898 (size: 0x4)
    FName _spawnBiteAttackParticlesSocketName;                                        // 0x089C (size: 0x8)
    class UParticleSystem* _onDeathPS;                                                // 0x08A8 (size: 0x8)
    class UParticleSystemComponent* _onDeathPSC;                                      // 0x08B0 (size: 0x8)
    FName _onDeathParticlesSocketName;                                                // 0x08B8 (size: 0x8)

}; // Size: 0x8C0

class ASharkAIController : public AConZAIController
{
    float _minDistanceToMovementTarget;                                               // 0x0450 (size: 0x4)
    int32 _maxMovementAttemptsAllowed;                                                // 0x0454 (size: 0x4)
    float _surfaceOffset;                                                             // 0x0460 (size: 0x4)
    float _movementRecoveryAcceleration;                                              // 0x0464 (size: 0x4)
    float _aboveWaterRecoveryTurningSpeed;                                            // 0x0468 (size: 0x4)
    float _moveToTargetUpdatePeriod;                                                  // 0x046C (size: 0x4)
    float _minVictimDepth;                                                            // 0x0474 (size: 0x4)
    float _beginPursuitTimeMin;                                                       // 0x0478 (size: 0x4)
    float _beginPursuitTimeMax;                                                       // 0x047C (size: 0x4)
    float _aggressiveBehaviorChance;                                                  // 0x0484 (size: 0x4)
    float _aggressiveBehaviorChanceWhenTargetBleeding;                                // 0x0488 (size: 0x4)
    float _distanceToAdjustAttackAngle;                                               // 0x048C (size: 0x4)
    float _desiredAttackAngleDegrees;                                                 // 0x0490 (size: 0x4)
    float _desiredAttackAngleTime;                                                    // 0x0498 (size: 0x4)
    float _returnToWanderingTime;                                                     // 0x049C (size: 0x4)
    float _dealDamageTime;                                                            // 0x04A4 (size: 0x4)
    float _damagePerInterval;                                                         // 0x04AC (size: 0x4)
    int32 _numOfIntervals;                                                            // 0x04B4 (size: 0x4)
    float _startMovingAfterBiteTime;                                                  // 0x04BC (size: 0x4)
    float _changeDirectionChance;                                                     // 0x04CC (size: 0x4)
    float _circlingAngleDegrees;                                                      // 0x04D0 (size: 0x4)
    float _circlingDistanceMin;                                                       // 0x04D4 (size: 0x4)
    float _circlingDistanceMax;                                                       // 0x04D8 (size: 0x4)
    float _circlingAggressionCheckInterval;                                           // 0x04DC (size: 0x4)
    float _minDamageToReact;                                                          // 0x04E4 (size: 0x4)
    float _fleeingDuration;                                                           // 0x04E8 (size: 0x4)
    float _maxTimeAboveWater;                                                         // 0x04F4 (size: 0x4)
    float _minDistanceToNextPrimaryTarget;                                            // 0x04FC (size: 0x4)
    float _changePrimaryTargetTime;                                                   // 0x0500 (size: 0x4)
    TMap<class ESharkState, class FFishStateParameters> _behaviorMap;                 // 0x0510 (size: 0x50)
    class UGrappleActionParameters* _grappleActionParameter;                          // 0x0590 (size: 0x8)

    void SetReadyForNextPrimaryTarget();
}; // Size: 0x598

class AShelterItem : public AItem
{
    bool _canBeAddedToInventory;                                                      // 0x09A8 (size: 0x1)

}; // Size: 0x9C0

class ASilentAlarmTrapItem : public ATrapItem
{
    class UAkAudioEvent* _triggerSound;                                               // 0x0AE0 (size: 0x8)
    float _detonationDelay;                                                           // 0x0AE8 (size: 0x4)
    class UNameableItemComponent* _nameableItemComponent;                             // 0x0AF0 (size: 0x8)

    void Detonate();
}; // Size: 0xB10

class ASimpleAnimalAIController : public AConZAIController
{
    float WanderRadius;                                                               // 0x0450 (size: 0x4)
    float RunAwayTime;                                                                // 0x0454 (size: 0x4)
    float MinActionTime;                                                              // 0x0458 (size: 0x4)
    float MaxActionTime;                                                              // 0x045C (size: 0x4)
    float WalkSpeed;                                                                  // 0x0460 (size: 0x4)
    float RunSpeed;                                                                   // 0x0464 (size: 0x4)
    float FleeSegmentDistance;                                                        // 0x0468 (size: 0x4)
    float AlertStartupTime;                                                           // 0x046C (size: 0x4)
    float MinMoveDistance;                                                            // 0x0470 (size: 0x4)
    float DoNotDespawnTime;                                                           // 0x0474 (size: 0x4)

    void UpdatePerception(const TArray<class AActor*>& actorsPercepted);
    void StartAlert();
    void OnTakeDamageHandler(class AActor* damageActor, float Damage, FVector HitLocation, class APawn* eventInstigator);
}; // Size: 0x4F8

class ASkeletalWeaponAttachment : public AWeaponAttachment
{
    class USkeletalMeshComponent* _skeletalMesh;                                      // 0x09D8 (size: 0x8)

}; // Size: 0x9E0

class ASlidingDoorStatic : public ADoor
{
    class USceneComponent* ClosedPositionComponent;                                   // 0x0580 (size: 0x8)
    class USceneComponent* OpenPositionComponent;                                     // 0x0588 (size: 0x8)
    bool _shouldAllowRotation;                                                        // 0x0590 (size: 0x1)
    bool _shouldAllowScaling;                                                         // 0x0591 (size: 0x1)

}; // Size: 0x5A0

class ASmokeGrenadeItem : public AGrenadeItem
{
    class UParticleSystem* _smokeParticle;                                            // 0x0A70 (size: 0x8)
    class UAkAudioEvent* _smokeStartedAudioEvent;                                     // 0x0A78 (size: 0x8)
    class UAkAudioEvent* _smokeStoppedAudioEvent;                                     // 0x0A80 (size: 0x8)
    float _smokeSoundDuration;                                                        // 0x0A88 (size: 0x4)
    class UAkComponent* _smokeAudioComponent;                                         // 0x0A90 (size: 0x8)

}; // Size: 0xAA0

class ASoundEmitter : public AActor
{
    class UAkAudioEvent* AudioEvent;                                                  // 0x0220 (size: 0x8)

}; // Size: 0x228

class ASoundSpline : public ASpline
{
    float MinCameraLocationDeltaForUpdate;                                            // 0x0230 (size: 0x4)
    float WorldStreamedCheckInterval;                                                 // 0x0234 (size: 0x4)
    float MaxCameraDistance;                                                          // 0x0238 (size: 0x4)
    class UAkAudioEvent* AudioEvent;                                                  // 0x0240 (size: 0x8)
    class UAkAudioEvent* InsideSplineAudioEvent;                                      // 0x0248 (size: 0x8)
    class UAkAudioEvent* OutsideSplineAudioEvent;                                     // 0x0250 (size: 0x8)

}; // Size: 0x288

class ASpline : public AActor
{
    class USceneComponent* SceneComponent;                                            // 0x0220 (size: 0x8)
    class USplineComponent* SplineComponent;                                          // 0x0228 (size: 0x8)

}; // Size: 0x230

class ASplineSnagGeneratedActor : public AActor
{
}; // Size: 0x220

class ASplineZone : public ASpline
{
    class UZoneConfigurationDataAsset* configuration;                                 // 0x0230 (size: 0x8)

}; // Size: 0x238

class AStartLocation : public APlayerStart
{
    uint8 TypeFlags;                                                                  // 0x0250 (size: 0x1)
    bool IsDisabled;                                                                  // 0x0251 (size: 0x1)

}; // Size: 0x258

class AStartLocationManager : public AActor
{
    TArray<FStartLocationDescription> _startLocationDescriptions;                     // 0x0220 (size: 0x10)

}; // Size: 0x230

class AStaticRadioItem : public ARadioItem
{
}; // Size: 0x9D0

class ASurgeryRoom : public ACharacterModificationRoom
{
}; // Size: 0x2D0

class ASurvivalStatsHandler : public AActor
{
}; // Size: 0x298

class ASwitch : public AActor
{
    class UStaticMeshComponent* Mesh;                                                 // 0x0248 (size: 0x8)
    FText _interactionText;                                                           // 0x0250 (size: 0x18)

}; // Size: 0x268

class ASwitchboardMinigame : public AMinigame
{
    class USwitchboardComponent* _switchboardComponent;                               // 0x0340 (size: 0x8)
    class UGaugeClusterComponent* _gaugeClusterComponent;                             // 0x0348 (size: 0x8)
    FComponentReference _schematicMeshRef;                                            // 0x0350 (size: 0x28)
    float _safetyDuration;                                                            // 0x0378 (size: 0x4)
    float _switchUseTimeRestriction;                                                  // 0x037C (size: 0x4)
    FVector _zoomStartLocation;                                                       // 0x0380 (size: 0xC)
    FVector _zoomEndLocation;                                                         // 0x038C (size: 0xC)
    class UCurveFloat* _zoomCurve;                                                    // 0x0398 (size: 0x8)
    class UCurveFloat* _fadeCurve;                                                    // 0x03A0 (size: 0x8)
    FComponentReference _fuseBurnedParticlesRef;                                      // 0x03A8 (size: 0x28)
    float _durationToShutOff;                                                         // 0x03D0 (size: 0x4)
    class UStaticMeshComponent* _fuseMeshComponent;                                   // 0x03D8 (size: 0x8)

}; // Size: 0x400

class ATeamDeathmatchGameEvent : public AGameEventBase
{
    FTeamDeathmatchParameters _teamDeathmatchParameters;                              // 0x0588 (size: 0x14)

    void SetTeamDeathmatchParameters(const FTeamDeathmatchParameters& Params);
    void RestrictGameEventArea();
    FTeamDeathmatchParameters GetTeamDeathmatchParameters();
}; // Size: 0x5A8

class ATeamDeathmatchLocationMarker : public AGameEventLocationMarker
{
    FTeamDeathmatchParameters TeamDeathmatchParameters;                               // 0x0418 (size: 0x14)
    FVector FocusOffset;                                                              // 0x042C (size: 0xC)
    float MinimalRadius;                                                              // 0x0438 (size: 0x4)

}; // Size: 0x440

class ATearGasGrenadeItem : public ASmokeGrenadeItem
{
    float _gasInfluenceMaxRadius;                                                     // 0x0AA0 (size: 0x4)
    float _gasInfluenceFullRadiusTime;                                                // 0x0AA4 (size: 0x4)
    float _gasInfluenceDurationTime;                                                  // 0x0AA8 (size: 0x4)

}; // Size: 0xAD0

class ATempPlayerStart : public APlayerStart
{
}; // Size: 0x250

class AThermometer : public AItem
{
    class UThermalSensorComponent* _thermalSensorComponent;                           // 0x09A8 (size: 0x8)
    int32 _thermometerFluidMaterialId;                                                // 0x09B0 (size: 0x4)

}; // Size: 0x9C0

class ATimeControllableLight : public ALight
{
    bool _shouldExistOnDedicatedServer;                                               // 0x0230 (size: 0x1)
    class UCurveFloat* _intensityVsTimeOfDayCurve;                                    // 0x0238 (size: 0x8)
    class UPointLightComponent* _pointLightComponent;                                 // 0x0240 (size: 0x8)

    void OnTimeOfDayChanged(class AWeatherController2* sender);
}; // Size: 0x248

class ATimeControllableSpotLight : public ALight
{
    bool _shouldExistOnDedicatedServer;                                               // 0x0230 (size: 0x1)
    class UCurveFloat* _intensityVsTimeOfDayCurve;                                    // 0x0238 (size: 0x8)
    class USpotLightComponent* _pointLightComponent;                                  // 0x0240 (size: 0x8)

    void OnTimeOfDayChanged(class AWeatherController2* sender);
}; // Size: 0x248

class ATimedGiftSpawner : public AActor
{
    int64 _giftSpawnTime;                                                             // 0x0220 (size: 0x8)
    TArray<TSoftClassPtr<AItem>> _possibleGifts;                                      // 0x0228 (size: 0x10)
    TSoftClassPtr<AItem> _referenceItem;                                              // 0x0238 (size: 0x28)
    float _giftOffsetFromReferenceItem;                                               // 0x0260 (size: 0x4)

}; // Size: 0x288

class ATournament : public AActor
{
    class UAkAudioEvent* StartAnnouncement;                                           // 0x0230 (size: 0x8)
    class UAkAudioEvent* SuddenDeathAnnouncement;                                     // 0x0238 (size: 0x8)
    class UAkAudioEvent* EndAnnouncement;                                             // 0x0240 (size: 0x8)
    bool _inProgress;                                                                 // 0x0248 (size: 0x1)
    bool _inSuddenDeath;                                                              // 0x0249 (size: 0x1)
    bool _hasEnded;                                                                   // 0x024A (size: 0x1)
    TArray<FTournamentStats> _stats;                                                  // 0x0250 (size: 0x10)
    class UTournamentScoreboardWidget* _scoreboardWidget;                             // 0x0260 (size: 0x8)

    void OnRep_Stats();
    void Multicast_PlayAnnouncement(class UAkAudioEvent* AudioEvent);
    bool IsInSuddenDeath();
    bool IsInProgress();
    bool HasEnded();
    void GetStatsOrderedByDeath(TArray<FTournamentStats>& Stats);
    TArray<FTournamentStats> GetStats();
    class UTournamentScoreboardWidget* GetScoreboardWidget();
}; // Size: 0x270

class ATrackingMarker2 : public AActor
{
    class USceneComponent* SceneComponent;                                            // 0x0228 (size: 0x8)
    class UArrowComponent* DirectionArrow;                                            // 0x0230 (size: 0x8)
    class UDecalComponent* ConeDecal;                                                 // 0x0238 (size: 0x8)
    class UParticleSystemComponent* Particles;                                        // 0x0240 (size: 0x8)
    float TickFrequency;                                                              // 0x0248 (size: 0x4)
    TSubclassOf<class AAnimal2> AnimalClass;                                          // 0x0250 (size: 0x8)
    float Duration;                                                                   // 0x0258 (size: 0x4)
    FVector Direction;                                                                // 0x025C (size: 0xC)
    float health;                                                                     // 0x0268 (size: 0x4)
    EBleedingSeverity BleedingSeverity;                                               // 0x026C (size: 0x1)
    bool ShowBleedingInfo;                                                            // 0x026D (size: 0x1)
    bool ShowWoundInfo;                                                               // 0x026E (size: 0x1)
    bool ShowBasicWoundInfo;                                                          // 0x026F (size: 0x1)
    float MaxSevereBleedTime;                                                         // 0x0270 (size: 0x4)
    float MaxHeavyBleedTime;                                                          // 0x0274 (size: 0x4)
    float MaxModerateBleedTime;                                                       // 0x0278 (size: 0x4)
    float MaxLightBleedTime;                                                          // 0x027C (size: 0x4)

}; // Size: 0x288

class ATradeOutpostBuilding : public ABuilding
{
    float _sedentaryNPCRelevancyDistance;                                             // 0x04F8 (size: 0x4)
    TArray<FSedentaryNPCMarker> _sedentaryNPCMarkers;                                 // 0x0500 (size: 0x10)
    TArray<class ASedentaryNPC*> _spawnedSedentaryNPCs;                               // 0x0510 (size: 0x10)
    class AQuestBook* _questBook;                                                     // 0x0538 (size: 0x8)
    class UQuestGiverComponent* _questGiverComponent;                                 // 0x0540 (size: 0x8)

}; // Size: 0x548

class ATradeOutpostManager : public AActor
{
    class UBillboardComponent* _sprite;                                               // 0x0220 (size: 0x8)
    class UTradingOutpostDescriptionDataAsset* _outpostDescription;                   // 0x0228 (size: 0x8)
    ETradeOutpostProsperityLevel _startingProsperityLevel;                            // 0x0230 (size: 0x1)
    TArray<class ATradePost*> _assignedTradePosts;                                    // 0x0238 (size: 0x10)
    TArray<class ATradeOutpostBuilding*> _otherAssignedTradeOutpostBuildings;         // 0x0248 (size: 0x10)

}; // Size: 0x260

class ATradePost : public ATradeOutpostBuilding
{
    TArray<FTraderMarker> _traderMarkers;                                             // 0x0560 (size: 0x10)
    TArray<FTraderLocationMarker> _locationMarkers;                                   // 0x0570 (size: 0x10)
    TArray<class ATrader*> _spawnedTraders;                                           // 0x0580 (size: 0x10)
    TMap<class FDbIntegerId, class FSpawnedDepotsHelperStruct> _spawnedDepots;        // 0x05A0 (size: 0x50)

}; // Size: 0x610

class ATrader : public ASedentaryNPC
{
    TWeakObjectPtr<class UTraderPersonalityDataAsset> _traderPersonalityDataAsset;    // 0x09B8 (size: 0x8)

}; // Size: 0x9D0

class ATrapItem : public AItem
{
    class UBuriableTrapItemComponent* _buriableTrapItemComponent;                     // 0x09E0 (size: 0x8)
    ETrapType _trapType;                                                              // 0x09E8 (size: 0x1)
    float _autoDestroyTimeWhenArmed;                                                  // 0x09EC (size: 0x4)
    float _autoDestroyTimeWhenOwnerless;                                              // 0x09F0 (size: 0x4)
    bool _destroyAfterTriggered;                                                      // 0x09F4 (size: 0x1)
    float _destroyDelay;                                                              // 0x09F8 (size: 0x4)
    bool _canEverBeRefueled;                                                          // 0x09FC (size: 0x1)
    class UTrapRefuelItemTag* _refuelItemTag;                                         // 0x0A00 (size: 0x8)
    FVector _triggerForwardVector;                                                    // 0x0A08 (size: 0xC)
    float _ragdollDuration;                                                           // 0x0A14 (size: 0x4)
    bool _isArmedByDefault;                                                           // 0x0A18 (size: 0x1)
    bool _shouldApplyPhysicalDamage;                                                  // 0x0A19 (size: 0x1)
    FBox _physicalDamageBoundsBox;                                                    // 0x0A1C (size: 0x1C)
    float _actorDestructionDelay;                                                     // 0x0A38 (size: 0x4)
    int32 _numRemainingDefuseAttempts;                                                // 0x0A3C (size: 0x4)
    bool _numRemainingDefuseAttemptsDependsOnSkill;                                   // 0x0A40 (size: 0x1)
    bool _logTrapTriggered;                                                           // 0x0A41 (size: 0x1)
    bool _hasFixedTrigger;                                                            // 0x0A42 (size: 0x1)
    float _minDamageForTrigger;                                                       // 0x0A44 (size: 0x4)
    bool _triggeredByRadialDamage;                                                    // 0x0A48 (size: 0x1)
    bool _triggerableWhenBuried;                                                      // 0x0A49 (size: 0x1)
    float _maxTriggerAngle;                                                           // 0x0A4C (size: 0x4)
    bool _canEverShowTriggerVisuals;                                                  // 0x0A50 (size: 0x1)
    FTransform _triggerVisualTransform;                                               // 0x0A60 (size: 0x30)
    TSubclassOf<class AMinigame> _minigameClass;                                      // 0x0A90 (size: 0x8)
    TSubclassOf<class UBaseItemTag> _minigameToolTag;                                 // 0x0A98 (size: 0x8)
    bool _isDestroyed;                                                                // 0x0AA1 (size: 0x1)
    bool _isArmed;                                                                    // 0x0AC0 (size: 0x1)
    bool _wasTriggered;                                                               // 0x0AC1 (size: 0x1)
    bool _canBeTriggered;                                                             // 0x0AC2 (size: 0x1)
    ETrapTriggerType _currentTrigger;                                                 // 0x0AC4 (size: 0x1)
    FDbIntegerId _lastTriggerOwner;                                                   // 0x0AC8 (size: 0x8)
    float _quality;                                                                   // 0x0AD0 (size: 0x4)

    void OnTriggerEvent(const FTriggeredEventData& eventData);
    void OnTrapDestroyTimer();
    void OnRep_WasTriggered();
    void OnRep_LastTriggerOwner();
    void OnRep_IsDestroyed();
    void OnRep_IsArmed();
    void OnRep_CurrentTrigger();
    void OnActorDestroyTimer();
    void NetMulticast_TriggerTrap(const FTrapTriggerParams& Params);
    void Multicast_SetOnlyManualTrigger(bool onlyManualTrigger);
    bool IsBuried();
    bool IsArmed();
    void BP_OnTriggered();
    void BP_OnRefueled();
    void BP_OnDisarmed();
    void BP_OnArmed();
}; // Size: 0xAE0

class ATurretInfluenceAreaVisualizer : public AInfluenceAreaVisualizer
{
}; // Size: 0x238

class ATurretItem : public AItem
{
    class USkeletalMeshComponent* _turretMeshComponent;                               // 0x09B0 (size: 0x8)
    class UParticleSystemComponent* _muzzlePSC;                                       // 0x09B8 (size: 0x8)
    class UParticleSystemComponent* _smokeAfterShotFiredPSC;                          // 0x09C0 (size: 0x8)
    class UAIPerceptionComponent* _perceptionComponent;                               // 0x09C8 (size: 0x8)
    class URangedResourceConsumerComponentMultipleProviders* _rangedResourceConsumerComponent; // 0x09D0 (size: 0x8)
    class UTurretPaintjobItemComponent* _paintjobComponent;                           // 0x09D8 (size: 0x8)
    EDayPeriod _spotlightTurnOnTime;                                                  // 0x09E8 (size: 0x1)
    EDayPeriod _spotlightTurnOffTime;                                                 // 0x09E9 (size: 0x1)
    float _perceptionTickInterval;                                                    // 0x09EC (size: 0x4)
    float _replicationTickInterval;                                                   // 0x09F4 (size: 0x4)
    float _clientSynchronizationTickInterval;                                         // 0x09FC (size: 0x4)
    TSoftClassPtr<ATurretInfluenceAreaVisualizer> _influenceAreaVisualizerClass;      // 0x0A08 (size: 0x28)
    float _firingRadius;                                                              // 0x0A40 (size: 0x4)
    int16 _ammoCapacity;                                                              // 0x0A44 (size: 0x2)
    FGameplayTagContainer _compatibleAmmoTypes;                                       // 0x0A50 (size: 0x20)
    TSoftClassPtr<AAmmunitionItem> _defaultFillAmmo;                                  // 0x0A70 (size: 0x28)
    TArray<FCountedAmmunitionData> _ammoRep;                                          // 0x0A98 (size: 0x10)
    bool _isBaseBuildingTurret;                                                       // 0x0AAE (size: 0x1)
    float _explosionResistance;                                                       // 0x0B08 (size: 0x4)
    FName _lightsEmissionParameterName;                                               // 0x0B0C (size: 0x8)
    float _lightsEmissionParameterValue;                                              // 0x0B14 (size: 0x4)
    float _minTickRateForNormalFiringStrategy;                                        // 0x0B18 (size: 0x4)
    class USimulatedShooterFiringStrategy* _simulatedShooterFiringStrategyAuthorityNormal; // 0x0B20 (size: 0x8)
    class USimulatedShooterFiringStrategy* _simulatedShooterFiringStrategyAuthorityOptimized; // 0x0B28 (size: 0x8)
    class USimulatedShooterFiringStrategy* _simulatedShooterFiringStrategySimulated;  // 0x0B30 (size: 0x8)
    float _horizontalAngleLimit;                                                      // 0x0B40 (size: 0x4)
    float _verticalAngleLimit;                                                        // 0x0B44 (size: 0x4)
    float _maxAngleToFireAtTarget;                                                    // 0x0B48 (size: 0x4)
    float _continueFiringTimeAfterTargetLost;                                         // 0x0B4C (size: 0x4)
    float _targetLostWaitTimeWhenOutOfLimits;                                         // 0x0B54 (size: 0x4)
    float _spinUpTime;                                                                // 0x0B5C (size: 0x4)
    bool _predictTargetPosition;                                                      // 0x0B65 (size: 0x1)
    bool _calculateBulletDrop;                                                        // 0x0B66 (size: 0x1)
    float _horizontalRotationSpeed;                                                   // 0x0B68 (size: 0x4)
    float _verticalRotationSpeed;                                                     // 0x0B6C (size: 0x4)
    FName _barrelBoneName;                                                            // 0x0B70 (size: 0x8)
    FName _muzzleSocketName;                                                          // 0x0B78 (size: 0x8)
    FVector _barrelOffset;                                                            // 0x0B80 (size: 0xC)
    float _barrelLength;                                                              // 0x0B8C (size: 0x4)
    float _activationTime;                                                            // 0x0B90 (size: 0x4)
    float _deactivationTime;                                                          // 0x0B94 (size: 0x4)
    class UAkAudioEvent* _turnOnAudioEvent;                                           // 0x0B98 (size: 0x8)
    class UAkAudioEvent* _turnOffAudioEvent;                                          // 0x0BA0 (size: 0x8)
    class UAkAudioEvent* _loadAmmoAudioEvent;                                         // 0x0BA8 (size: 0x8)
    class UAkAudioEvent* _unloadAmmoAudioEvent;                                       // 0x0BB0 (size: 0x8)
    class UAkAudioEvent* _startSpinUpAudioEvent;                                      // 0x0BB8 (size: 0x8)
    class UAkAudioEvent* _stopSpinUpAudioEvent;                                       // 0x0BC0 (size: 0x8)
    class UAkAudioEvent* _fireSingleShotAudioEvent;                                   // 0x0BC8 (size: 0x8)
    class UAkAudioEvent* _startAutoFireAudioEvent;                                    // 0x0BD0 (size: 0x8)
    class UAkAudioEvent* _stopAutoFireAudioEvent;                                     // 0x0BD8 (size: 0x8)
    class UAkAudioEvent* _destroyedAudioEvent;                                        // 0x0BE0 (size: 0x8)
    class UAkAudioEvent* _startRotationAudioEvent;                                    // 0x0BE8 (size: 0x8)
    class UAkAudioEvent* _stopRotationAudioEvent;                                     // 0x0BF0 (size: 0x8)
    class UAkAudioEvent* _startActivatedAudioEvent;                                   // 0x0BF8 (size: 0x8)
    class UAkAudioEvent* _stopActivatedAudioEvent;                                    // 0x0C00 (size: 0x8)
    bool _shouldUseContinuousFiringSound;                                             // 0x0C08 (size: 0x1)
    FPackedState _packedState;                                                        // 0x0C60 (size: 0x10)

    void OnRep_PackedState();
    void OnRep_AmmoRep();
    void OnRangedResourceConsumerComponentResourceAmountChanged(class URangedResourceConsumerComponent* Component, float Amount);
    void OnRangedResourceConsumerComponentActivated(class UActorComponent* containerComponent, bool Reset);
    TArray<FName> GetSocketNames();
    TArray<FName> GetBoneNames();
}; // Size: 0xC80

class AUnderwaterPostProcessVolume : public APostProcessVolume
{
}; // Size: 0x7D0

class AVehicleAttachmentItem : public AItem
{
    class UVehiclePaintjobItemComponent* _paintjobComponent;                          // 0x09A8 (size: 0x8)

}; // Size: 0x9B0

class AVehicleBase : public APawn
{
    class UVehicleMeshComponent* _vehicleMeshComponent;                               // 0x0478 (size: 0x8)
    bool _shouldApplyWaterDrag;                                                       // 0x049C (size: 0x1)
    float _waterDragForceCoefficient;                                                 // 0x04A0 (size: 0x4)
    FFloatInterval _submergedInWaterDamagePerSecond;                                  // 0x04A4 (size: 0x8)
    class AVehicleItemContainer* _itemContainer;                                      // 0x0500 (size: 0x8)
    TArray<class UVehicleAttachment*> _vehicleAttachments;                            // 0x0508 (size: 0x10)
    TArray<class UVehicleAttachment*> _repVehicleAttachments;                         // 0x0518 (size: 0x10)
    FVehicleAttachmentSlot _chassisSlot;                                              // 0x0538 (size: 0x58)
    FGameplayTagContainer _lockInfluencingAttachmentSlotTags;                         // 0x0598 (size: 0x20)
    FGameplayTagContainer _lockingAttachmentSlotTags;                                 // 0x05B8 (size: 0x20)
    TArray<class UVehicleSystem*> _vehicleSystems;                                    // 0x05D8 (size: 0x10)
    FPackedEntitySetupAndId _repServerEntitySetupAndId;                               // 0x0600 (size: 0x8)
    class UVehicleForcePushComponent* _forcePushComponent;                            // 0x0AC8 (size: 0x8)
    TMap<class UVehicleAttachment*, class UWidgetComponent*> _attachmentHealthWidgets; // 0x0AD0 (size: 0x50)
    TSubclassOf<class UVehicleAttachmentHealthWidget> _attachmentHealthWidget;        // 0x0B20 (size: 0x8)
    class UEntityOverlapDetectionComponent* _entityOverlapDetection;                  // 0x0B28 (size: 0x8)
    class UNetworkPredictionComponent* _networkPrediction;                            // 0x0B30 (size: 0x8)
    FCollisionProfileName _serverCollisionProfileName;                                // 0x0B38 (size: 0x8)
    float _netUpdateFrequencyWhenStationary;                                          // 0x0B58 (size: 0x4)
    FGameplayTag SpawnGroup;                                                          // 0x0B5C (size: 0x8)
    float _linearSpeedThresholdSqr;                                                   // 0x0B64 (size: 0x4)
    float _angularSpeedThresholdSqr;                                                  // 0x0B68 (size: 0x4)
    TSubclassOf<class AVehicleItemContainer> _itemContainerClass;                     // 0x0B78 (size: 0x8)
    FRepairableParams _repairableParams;                                              // 0x0B90 (size: 0x38)
    bool _repIsSimulatingPhysics;                                                     // 0x0BC9 (size: 0x1)
    FVector _repLocationWhenNotSimulatingPhysics;                                     // 0x0BCC (size: 0xC)
    FRotator _repRotationWhenNotSimulatingPhysics;                                    // 0x0BD8 (size: 0xC)
    float _physicsDormancyTimeout;                                                    // 0x0BE8 (size: 0x4)
    bool _shouldPeriodicallyWakeOtherVehicles;                                        // 0x0C3C (size: 0x1)
    float _wakePingInterval;                                                          // 0x0C40 (size: 0x4)
    class UVehicleServiceComponent* _serviceComponent;                                // 0x0C68 (size: 0x8)
    bool _isInQuickService;                                                           // 0x0C71 (size: 0x1)
    class UVehicleCameraStabilizerComponent* _cameraStabilizer;                       // 0x0D48 (size: 0x8)
    uint32 _previewMeshTimePerMesh;                                                   // 0x0D54 (size: 0x4)
    FText _healthBarCaption;                                                          // 0x0D60 (size: 0x18)
    FVehicleImpactEffects _impactEffects;                                             // 0x0D78 (size: 0x118)
    class UParticleSystem* _instantDestructionExplosionEffect;                        // 0x0E90 (size: 0x8)
    class UAkAudioEvent* _instantDestructionExplosionAudioEvent;                      // 0x0E98 (size: 0x8)
    float _maxSpeedForInteraction;                                                    // 0x0F00 (size: 0x4)
    float _maxSpeedForForceUnmount;                                                   // 0x0F04 (size: 0x4)
    bool _shouldUnmountWhenTilted;                                                    // 0x0F08 (size: 0x1)
    float _maxAngleForForceUnmount;                                                   // 0x0F0C (size: 0x4)
    bool _shouldDisableClimbingDependingOnVelocity;                                   // 0x0F10 (size: 0x1)
    float _maxSpeedForClimbingKmH;                                                    // 0x0F14 (size: 0x4)
    int32 _climbingPermissions;                                                       // 0x0F18 (size: 0x4)
    float _maxSubmergedTime;                                                          // 0x0F28 (size: 0x4)
    float _maxSubmersionFactor;                                                       // 0x0F2C (size: 0x4)
    TSubclassOf<class UUserWidget> _mountSlotIndicatorsWidget;                        // 0x0F38 (size: 0x8)
    float _inWaterDestructionTimeInSeconds;                                           // 0x0F48 (size: 0x4)
    float _outOfWaterDestructionTimeInSeconds;                                        // 0x0F4C (size: 0x4)
    TSubclassOf<class UVehicleHandlingSkill> _vehicleHandlingSkill;                   // 0x0F50 (size: 0x8)
    bool _isInWater;                                                                  // 0x0F58 (size: 0x1)
    float _navigationRelevancyVelocitySquared;                                        // 0x0F5C (size: 0x4)
    bool _disableAIClimbingWhenMounteesExist;                                         // 0x0F60 (size: 0x1)
    float _aiNoiseFrequencyPerHour;                                                   // 0x0F64 (size: 0x4)
    ENoiseLevel _aiNoiseLevel;                                                        // 0x0F68 (size: 0x1)
    FVector _aiNoiseOffset;                                                           // 0x0F74 (size: 0xC)
    FNavAgentSelector _supportedNavAgents;                                            // 0x0F88 (size: 0x4)
    class UParticleSystem* _smokeParticlesLow;                                        // 0x0FA8 (size: 0x8)
    class UParticleSystem* _smokeParticlesMedium;                                     // 0x0FB0 (size: 0x8)
    class UParticleSystem* _smokeParticlesHigh;                                       // 0x0FB8 (size: 0x8)
    class UParticleSystemComponent* _smokeParticleSystemComponent;                    // 0x0FC8 (size: 0x8)
    FVector _smokeParticlesOffset;                                                    // 0x0FD0 (size: 0xC)
    bool _shouldVehicleBurnWhenDestroyed;                                             // 0x0FDC (size: 0x1)
    FHeatSourceParameters _transientHeatSourceParameters;                             // 0x0FE0 (size: 0x24)
    FVector _transientHeatSourceOffset;                                               // 0x1004 (size: 0xC)
    EConZPxDominanceGroup _physicsDominanceGroup;                                     // 0x1018 (size: 0x1)
    TArray<FGameplayTag> _mountSlotsBySwitchSeatIndex;                                // 0x1020 (size: 0x10)
    TArray<class UBaseMountPathBlocker*> _mountPathBlockers;                          // 0x1030 (size: 0x10)
    FGameplayTag _toggleMainLightsDeviceControlTag;                                   // 0x1040 (size: 0x8)
    FGameplayTag _toggleRadioDeviceControlTag;                                        // 0x1048 (size: 0x8)
    FGameplayTag _changeRadioStationDeviceControlTag;                                 // 0x1050 (size: 0x8)
    FGameplayTag _increaseRadioVolumeDeviceControlTag;                                // 0x1058 (size: 0x8)
    FGameplayTag _decreaseRadioVolumeDeviceControlTag;                                // 0x1060 (size: 0x8)
    FTransform _unlockTransform;                                                      // 0x1070 (size: 0x30)
    float _forceUnlockMovementAcceptanceRadius;                                       // 0x10A0 (size: 0x4)
    float _absoluteSpeedLimitKmh;                                                     // 0x10A4 (size: 0x4)
    EAITeam _aiTeam;                                                                  // 0x10A8 (size: 0x1)
    FVehicleDamageHandlerParams _damageHandlerParams;                                 // 0x1110 (size: 0x10)
    TMap<ECollisionDamageType, float> _damageRatios;                                  // 0x1120 (size: 0x50)
    float _explosionDamageRatio;                                                      // 0x1170 (size: 0x4)
    float _minCollisionDamageThatCausesKnockout;                                      // 0x1174 (size: 0x4)
    FRuntimeFloatCurve _passengerDamageVsCollisionDamage;                             // 0x1178 (size: 0x88)
    float _collisionDamageKnockoutDuration;                                           // 0x1200 (size: 0x4)
    float _spawnGracePeriod;                                                          // 0x1204 (size: 0x4)
    float _postServiceGracePeriod;                                                    // 0x1208 (size: 0x4)
    TArray<uint8> _damageHandlerSerializedData;                                       // 0x1220 (size: 0x10)
    class APrisoner* _driver;                                                         // 0x1258 (size: 0x8)
    class APrisoner* _driverRep;                                                      // 0x1260 (size: 0x8)
    float _additionalMassPhysicsMultiplier;                                           // 0x1278 (size: 0x4)
    bool _canFlyingViolationChecksBeMade;                                             // 0x129D (size: 0x1)

    void Server_CollideWithVehicle(FGameplayTag myRegion, class AVehicleBase* otherVehicle, FGameplayTag otherRegion, float impactSpeed);
    void Server_ApplyDamageToRegion(FGameplayTag region, float Damage, float armorPenetration, ECollisionDamageType collisionDamageType);
    void Server_ApplyDamageToAttachment(class UVehicleAttachment* Attachment, float Damage, float armorPenetration, ECollisionDamageType collisionDamageType);
    void OnRep_VehicleAttachments();
    void OnRep_ServiceComponent();
    void OnRep_ServerEntitySetupAndId();
    void OnRep_ItemContainer();
    void OnRep_Driver();
    void NetMulticast_PlayInstantDestructionEffectsAtLocation(FVector Location);
}; // Size: 0x12F0

class AVehicleCorpse : public AActor
{
    class UStaticMeshComponent* _mesh;                                                // 0x0228 (size: 0x8)
    class UParticleSystem* _explosionParticles;                                       // 0x0230 (size: 0x8)
    FTransform _explosionParticlesTransform;                                          // 0x0240 (size: 0x30)
    class UAkAudioEvent* _explosionAudioEvent;                                        // 0x0270 (size: 0x8)
    float _explosionForceMagnitude;                                                   // 0x0278 (size: 0x4)
    TArray<FVehicleCorpseBurningParticles> _burningParticles;                         // 0x0280 (size: 0x10)
    class UAkAudioEvent* _burningAudioEvent;                                          // 0x0290 (size: 0x8)
    float _endOfLifeFadingTime;                                                       // 0x0298 (size: 0x4)

    class UStaticMeshComponent* GetMesh();
}; // Size: 0x2C0

class AVehicleCraftedItem : public AItem
{
    FPrimaryAssetId _vehiclePrimaryAssetId;                                           // 0x09A8 (size: 0x10)

}; // Size: 0x9C0

class AVehicleItemContainer : public AChestItem
{
    TWeakObjectPtr<class UVehicleAttachment> _owningVehicleAttachment;                // 0x0BC4 (size: 0x8)

}; // Size: 0xBD0

class AVehicleManager : public AActor
{
    float _maxAllowedTimeInForbiddenZones;                                            // 0x0220 (size: 0x4)
    float _forbiddenZoneCheckInterval;                                                // 0x0224 (size: 0x4)
    float _relevantSpawnerGroupsUpdateTimeElapsed;                                    // 0x022C (size: 0x4)
    float _minPlayerLocationDeltaToUpdateRelevantSpawners;                            // 0x0234 (size: 0x4)
    float _relevantSpawnerGroupsUpdateTimeBudget;                                     // 0x0238 (size: 0x4)
    float _defaultSpawnerNetCullDistance;                                             // 0x023C (size: 0x4)
    bool _alwaysUseDefaultSpawnerNetCullDistance;                                     // 0x0240 (size: 0x1)
    float _numDaysToKeepSpawnerAliveIfVehicleIsInactive;                              // 0x0244 (size: 0x4)
    float _spawnerTasksProcessingTimeElapsed;                                         // 0x0248 (size: 0x4)
    float _spawnerTasksProcessingTimeBudget;                                          // 0x0250 (size: 0x4)
    float _addSpawnerUpdateInterval;                                                  // 0x0254 (size: 0x4)
    float _relevantSpawnersUpdateInterval;                                            // 0x025C (size: 0x4)
    float _autoSaveCheckIntervalForMovingVehicles;                                    // 0x0264 (size: 0x4)
    float _autoSaveIntervalForMovingVehicles;                                         // 0x026C (size: 0x4)
    float _autoSaveCheckIntervalForStationaryVehicles;                                // 0x0270 (size: 0x4)
    float _autoSaveIntervalForStationaryVehicles;                                     // 0x0278 (size: 0x4)
    TMap<class FPrimaryAssetId, class FVehicleManualSpawnPresetArray> _manualSpawnPresetsMap; // 0x0280 (size: 0x50)
    TMap<class FPrimaryAssetId, class UVehiclePreset*> _purchaseSpawnPresetsMap;      // 0x02D0 (size: 0x50)
    FGameplayTag _spawnGroupParentTag;                                                // 0x0370 (size: 0x8)
    TMap<class FGameplayTag, class FGameplayTagContainer> _spawnGroupsIgnoringPreferredDistanceBetweenSpawners; // 0x0378 (size: 0x50)
    int32 _defaultMaxNumSpawnersPerSpawnGroup;                                        // 0x03C8 (size: 0x4)
    float _minDistanceBetweenVisitorAndSpawnLocation;                                 // 0x04C0 (size: 0x4)
    float _preferredDistanceBetweenSpawners;                                          // 0x04C4 (size: 0x4)
    float _preferredDistanceBetweenSpawnersOfSameType;                                // 0x04C8 (size: 0x4)
    TArray<FVehicleSpawnPointData> _vehicleSpawnPoints;                               // 0x04D0 (size: 0x10)

    void OnVehicleActorDestroyed(class AActor* vehicleActor);
}; // Size: 0x680

class AVehicleServiceStation : public AActor
{
    FGameplayTag _serviceMode;                                                        // 0x0220 (size: 0x8)
    class USkeletalMeshComponent* _mesh;                                              // 0x0228 (size: 0x8)
    FText _displayName;                                                               // 0x0230 (size: 0x18)
    FName _vehicleAttachSocketName;                                                   // 0x0248 (size: 0x8)
    FTransform _vehicleAttachTransformServerOnly;                                     // 0x0250 (size: 0x30)
    float _maxServiceDistanceSquared;                                                 // 0x0280 (size: 0x4)
    float _minUpAlignmentAngleDeg;                                                    // 0x0284 (size: 0x4)
    float _minForwardAbsAlignmentAngleDeg;                                            // 0x0288 (size: 0x4)
    FVector _blockCheckBoxExtent;                                                     // 0x028C (size: 0xC)
    class UAkAudioEvent* _movingStartAudioEvent;                                      // 0x0298 (size: 0x8)
    class UAkAudioEvent* _movingStopAudioEvent;                                       // 0x02A0 (size: 0x8)
    class ATradePost* _assignedTradePost;                                             // 0x02A8 (size: 0x8)
    class AVehicleBase* _servicedVehicle;                                             // 0x02B8 (size: 0x8)
    int64 _staticId;                                                                  // 0x02C0 (size: 0x8)

    void OnRep_ServicedVehicle();
    void OnAttachedVehicleDestroyed(class AActor* DestroyedActor);
    void NetMulticast_StartLowering();
}; // Size: 0x2E0

class AVehicleSpawner : public AActor
{
    class UVehicleSpawnerComponent* SpawnerComponent;                                 // 0x0220 (size: 0x8)

}; // Size: 0x228

class AVehicleTrajectoryVisualizer : public AActor
{
    class USplineComponent* _splineComponent;                                         // 0x0220 (size: 0x8)
    class USkeletalMeshComponent* _meshComponent;                                     // 0x0228 (size: 0x8)

}; // Size: 0x250

class AVoltageMatchingMinigame : public AMinigame
{
    class USwitchboardComponent* _switchboardComponent;                               // 0x0360 (size: 0x8)
    class UStaticMeshComponent* _bodyMesh;                                            // 0x0368 (size: 0x8)
    class UStaticMeshComponent* _leftDoor;                                            // 0x0370 (size: 0x8)
    class UStaticMeshComponent* _rightDoor;                                           // 0x0378 (size: 0x8)
    class UStaticMeshComponent* _screens;                                             // 0x0380 (size: 0x8)
    class UWidgetComponent* _screenWidget;                                            // 0x0388 (size: 0x8)
    class UMaterialInstance* _screenMaterialInstance;                                 // 0x0390 (size: 0x8)
    FName _baseColorMaterialParameterName;                                            // 0x0398 (size: 0x8)
    FGameplayTag _masterSwitchTag;                                                    // 0x03A0 (size: 0x8)
    int32 _masterSwitchLightMaterialIndex;                                            // 0x03A8 (size: 0x4)
    FName _masterSwitchLightColorPropertyName;                                        // 0x03AC (size: 0x8)
    FLinearColor _masterSwitchLightOffColor;                                          // 0x03B4 (size: 0x10)
    FLinearColor _masterSwitchLightOnColor;                                           // 0x03C4 (size: 0x10)
    float _masterSwitchLightBlinkingFrequency;                                        // 0x03D4 (size: 0x4)
    class UStaticMesh* _neutralMesh;                                                  // 0x03D8 (size: 0x8)
    class UStaticMesh* _plusMesh;                                                     // 0x03E0 (size: 0x8)
    class UStaticMesh* _minusMesh;                                                    // 0x03E8 (size: 0x8)
    class UStaticMesh* _multiplicationMesh;                                           // 0x03F0 (size: 0x8)
    class UStaticMesh* _divisionMesh;                                                 // 0x03F8 (size: 0x8)
    TArray<FVoltageMatchingSwitchElementsPairing> _switchPairings;                    // 0x0400 (size: 0x10)
    TArray<class UStaticMeshComponent*> _electricalElementsMeshComponents;            // 0x0410 (size: 0x10)
    TArray<FVoltageMatchingElementRow> _elementRows;                                  // 0x0420 (size: 0x10)
    float _timeLimit;                                                                 // 0x0430 (size: 0x4)
    float _waitingForPlayerTimeLimit;                                                 // 0x0434 (size: 0x4)
    class UAkAudioEvent* _switchFlipAudioEvent;                                       // 0x0438 (size: 0x8)
    class UAkAudioEvent* _failAudioEvent;                                             // 0x0440 (size: 0x8)
    class UAkAudioEvent* _successAudioEvent;                                          // 0x0448 (size: 0x8)
    TArray<uint32> _additionValues;                                                   // 0x0450 (size: 0x10)
    TArray<uint32> _subtractionValues;                                                // 0x0460 (size: 0x10)
    TArray<uint32> _multiplicationValues;                                             // 0x0470 (size: 0x10)
    TArray<uint32> _divisionValues;                                                   // 0x0480 (size: 0x10)
    TArray<uint32> _inputValues;                                                      // 0x0490 (size: 0x10)
    int32 _maximumNumberOfElementsPerType;                                            // 0x04A0 (size: 0x4)
    int32 _minActiveSwitches;                                                         // 0x04A4 (size: 0x4)
    int32 _maxActiveSwitches;                                                         // 0x04A8 (size: 0x4)

}; // Size: 0x4E8

class AVolumeZone : public AVolume
{
    class UZoneConfigurationDataAsset* configuration;                                 // 0x0258 (size: 0x8)

}; // Size: 0x260

class AVoteSystemManager : public AActor
{
    TArray<class TSubclassOf<UVoteTopic>> VoteTopics;                                 // 0x0220 (size: 0x10)
    class UUpdateableNotificationDescription* _activeTopicDesc;                       // 0x0230 (size: 0x8)
    class UVoteTopic* _activeTopic;                                                   // 0x0238 (size: 0x8)

}; // Size: 0x2C8

class AWeapon : public AWeaponItem
{
    FWeaponAttachmentAdded AttachmentAdded;                                           // 0x09B0 (size: 0x10)
    void AttachmentAddedSignature(class AWeapon* sender, class AWeaponAttachment* Attachment);
    FWeaponAttachmentRemoved AttachmentRemoved;                                       // 0x09C0 (size: 0x10)
    void AttachmentRemovedSignature(class AWeapon* sender, class AWeaponAttachment* Attachment);
    class USkeletalMeshComponent* SkeletalMesh;                                       // 0x0A18 (size: 0x8)
    EWeaponFiringStateType WeaponFiringStateType;                                     // 0x0A20 (size: 0x1)
    class UWeaponStateFiring* TempWeaponStateFiringAutomatic;                         // 0x0A28 (size: 0x8)
    class UWeaponStateFiring* TempWeaponStateFiringSemiAutomatic;                     // 0x0A30 (size: 0x8)
    class UWeaponStateFiring* TempWeaponStateFiringManual;                            // 0x0A38 (size: 0x8)
    class UWeaponStateFiring* TempWeaponStateFiringBurst;                             // 0x0A40 (size: 0x8)
    class UWeaponStateActiveManualFiring* TempWeaponStateActiveManualFiring;          // 0x0A48 (size: 0x8)
    class UWeaponStateFiring* FiringState;                                            // 0x0A50 (size: 0x8)
    TArray<EWeaponFiringMode> SupportedFiringModes;                                   // 0x0A58 (size: 0x10)
    TArray<class UStaticMeshComponent*> CartridgeMeshComponents;                      // 0x0A68 (size: 0x10)
    TArray<class TSubclassOf<UWeaponActionReloadSequence>> ReloadActionSequenceClasses; // 0x0A78 (size: 0x10)
    TArray<class TSubclassOf<UWeaponActionUnloadAmmoSequence>> UnloadAmmoActionSequenceClasses; // 0x0A88 (size: 0x10)
    TArray<class TSubclassOf<UWeaponActionCheckAmmoSequence>> CheckAmmoActionSequenceClasses; // 0x0A98 (size: 0x10)
    TArray<class UWeaponActionReloadSequence*> ReloadActionSequences;                 // 0x0AA8 (size: 0x10)
    TArray<class UWeaponActionClearMalfunctionSequence*> ClearMalfunctionActionSequences; // 0x0AB8 (size: 0x10)
    TArray<class UWeaponActionUnloadAmmoSequence*> UnloadAmmoActionSequences;         // 0x0AC8 (size: 0x10)
    TArray<class UWeaponActionCheckAmmoSequence*> CheckAmmoActionSequences;           // 0x0AD8 (size: 0x10)
    FGameplayTagContainer AmmunitionTags;                                             // 0x0AE8 (size: 0x20)
    TSubclassOf<class AAmmunitionItem> DefaultAmmunitionItemClass;                    // 0x0B08 (size: 0x8)
    int32 RequiredAmmoForShot;                                                        // 0x0B10 (size: 0x4)
    int32 MaxLoadedAmmo;                                                              // 0x0B14 (size: 0x4)
    int32 EventMaxAmmo;                                                               // 0x0B18 (size: 0x4)
    int32 InitialAmmo;                                                                // 0x0B1C (size: 0x4)
    int32 InternalMagazineCapacity;                                                   // 0x0B20 (size: 0x4)
    bool UseChamberAsInternalMagazine;                                                // 0x0B24 (size: 0x1)
    int32 BurstShotsCount;                                                            // 0x0B28 (size: 0x4)
    bool IgnoreProceduralDownTheSightFiringAnimation;                                 // 0x0B2C (size: 0x1)
    class UAnimMontage* FireAnimation;                                                // 0x0B30 (size: 0x8)
    class UAnimMontage* FireAnimationLastRound;                                       // 0x0B38 (size: 0x8)
    class UAnimMontage* FireAnimationBody;                                            // 0x0B40 (size: 0x8)
    class UAnimMontage* FirstPersonFireAnimationBody;                                 // 0x0B48 (size: 0x8)
    class UAnimMontage* FireAutomaticAnimationBody;                                   // 0x0B50 (size: 0x8)
    FBodyWeaponAnimation BodyWeaponAnimationChamber;                                  // 0x0B58 (size: 0x10)
    class UAnimMontage* CheckFiringModeAnimationBody;                                 // 0x0B68 (size: 0x8)
    class UAnimMontage* ChangeFiringModeAnimationBody;                                // 0x0B70 (size: 0x8)
    TMap<class TSubclassOf<AWeaponAttachment>, class FWeaponAttachmentAnimations> AttachmentsAnimations; // 0x0B78 (size: 0x50)
    FName MuzzleSocketName;                                                           // 0x0BC8 (size: 0x8)
    FName GripCorrectionSocketName;                                                   // 0x0BD0 (size: 0x8)
    FName AimingDownTheSightsCenterSocketName;                                        // 0x0BD8 (size: 0x8)
    FName EjectCasingSocketName;                                                      // 0x0BE0 (size: 0x8)
    bool IgnoreSupportingHandIK;                                                      // 0x0BE8 (size: 0x1)
    FName SupportingHandIKSocketName;                                                 // 0x0BEC (size: 0x8)
    FVector SupportingHandIKLocation;                                                 // 0x0BF4 (size: 0xC)
    FVector AimingDownTheSightsLocationOffset;                                        // 0x0C00 (size: 0xC)
    FTransform HolsteredOnPrisonerLeftOffset;                                         // 0x0C10 (size: 0x30)
    FTransform HolsteredOnPrisonerRightOffset;                                        // 0x0C40 (size: 0x30)
    bool UseWeaponFOVWhileScoping;                                                    // 0x0C70 (size: 0x1)
    float WeaponFOVWhileScoping;                                                      // 0x0C74 (size: 0x4)
    FVector WeaponCameraOffsetWhileScoping;                                           // 0x0C78 (size: 0xC)
    FRuntimeFloatCurve OffsetPerAspectRatioWhileScoping;                              // 0x0C88 (size: 0x88)
    bool IgnoreZeroRangeChange;                                                       // 0x0D10 (size: 0x1)
    int32 ZeroRange;                                                                  // 0x0D14 (size: 0x4)
    int32 ZeroRangeStep;                                                              // 0x0D18 (size: 0x4)
    int32 ZeroRangeMax;                                                               // 0x0D1C (size: 0x4)
    class UProjectileImpactEffects* InstantHitImpactEffects;                          // 0x0D20 (size: 0x8)
    float FieldOfView;                                                                // 0x0D28 (size: 0x4)
    float DepthOfFieldFocalDistance;                                                  // 0x0D2C (size: 0x4)
    float DepthOfFieldFstop;                                                          // 0x0D30 (size: 0x4)
    float ObstaclesDetectionOffset;                                                   // 0x0D34 (size: 0x4)
    bool UseFiringModeBoneRotation;                                                   // 0x0D38 (size: 0x1)
    FRotator FiringModeBoneRotations;                                                 // 0x0D3C (size: 0x24)
    FPostProcessSettings PostProcessSettings;                                         // 0x0D60 (size: 0x560)
    class UAnimSequenceBase* RelaxedGripCorrectionAnimationPose;                      // 0x12C0 (size: 0x18)
    class UAnimSequenceBase* AimingHipAnimationPose;                                  // 0x12D8 (size: 0x18)
    class UAnimSequenceBase* AimingDownTheSightsAnimationPose;                        // 0x12F0 (size: 0x18)
    class UAnimSequenceBase* AimingDownTheSightsStillAnimationPose;                   // 0x1308 (size: 0x18)
    class UAnimSequenceBase* AimingDownTheSightsWalkingAnimationPose;                 // 0x1320 (size: 0x18)
    class UAnimSequenceBase* AimingDownTheSightsLimpingWalkingAnimationPose;          // 0x1338 (size: 0x18)
    class UBlendSpace* WeaponAimOffsets;                                              // 0x1350 (size: 0x38)
    class UBlendSpace1D* AimingDownTheSightsZeroRangeBlendSpace;                      // 0x1388 (size: 0x8)
    EWeaponCategory WeaponCategory;                                                   // 0x1390 (size: 0x1)
    bool IgnoreAimingSpread;                                                          // 0x1391 (size: 0x1)
    bool UseCustomWeaponSpreadData;                                                   // 0x1392 (size: 0x1)
    FWeaponSpreadData WeaponSpreadData;                                               // 0x1394 (size: 0x34)
    bool UseCustomWeaponViewKickData;                                                 // 0x13C8 (size: 0x1)
    FWeaponViewKickData WeaponViewKickData;                                           // 0x13CC (size: 0x18)
    float ViewKickMultiplier;                                                         // 0x13E4 (size: 0x4)
    float MaxRecoilOffset;                                                            // 0x13E8 (size: 0x4)
    float RecoilRecoverySpeed;                                                        // 0x13EC (size: 0x4)
    float MuzzleEffectsScaleDistanceStart;                                            // 0x13F0 (size: 0x4)
    float MuzzleEffectsScaleDistanceRange;                                            // 0x13F4 (size: 0x4)
    float MuzzleEffectsScaleByDistanceFactor;                                         // 0x13F8 (size: 0x4)
    float ChamberBulletDelay;                                                         // 0x13FC (size: 0x4)
    bool ChamberBulletAutomatically;                                                  // 0x1400 (size: 0x1)
    bool ChamberBulletWhenMagazineIsAttached;                                         // 0x1401 (size: 0x1)
    float DamagePerShot;                                                              // 0x1404 (size: 0x4)
    bool TestWeapon;                                                                  // 0x1408 (size: 0x1)
    TArray<FFireAnimationData> WornOutFiringAnimations;                               // 0x1410 (size: 0x10)
    bool CanBeInspectedWhenMalfunctioned;                                             // 0x1420 (size: 0x1)
    class UAnimMontage* InspectModeAnimation;                                         // 0x1428 (size: 0x8)
    bool UseCustomMalfunctionChances;                                                 // 0x1430 (size: 0x1)
    FWeaponMalfunctionChances MalfunctionChances;                                     // 0x1434 (size: 0x38)
    FName StovePipeSocketName;                                                        // 0x146C (size: 0x8)
    class UStaticMesh* StovePipeMesh;                                                 // 0x1478 (size: 0x8)
    FName DoubleFeedSocketName;                                                       // 0x1480 (size: 0x8)
    class UStaticMesh* DoubleFeedMesh;                                                // 0x1488 (size: 0x8)
    bool ShouldClearInspectModeWhenClearingMalfunction;                               // 0x1490 (size: 0x1)
    TArray<class TSubclassOf<UWeaponActionClearMalfunctionSequence>> ClearMalfunctionSequenceClasses; // 0x1498 (size: 0x10)
    TMap<class EWeaponMalfunction, class FWeaponMalfunctionData> MalfunctionsData;    // 0x14A8 (size: 0x50)
    float DTSModeLerpDurationIn;                                                      // 0x14F8 (size: 0x4)
    float DTSModeLerpDurationOut;                                                     // 0x14FC (size: 0x4)
    class UCurveFloat* DownTheSightsModeLerpCurveOverride;                            // 0x1500 (size: 0x8)
    class UWeaponState* _currentState;                                                // 0x1508 (size: 0x8)
    class UWeaponState* _activeState;                                                 // 0x1510 (size: 0x8)
    class UWeaponStateEquipping* _equippingState;                                     // 0x1518 (size: 0x8)
    class UWeaponState* _unequippingStateDefault;                                     // 0x1520 (size: 0x8)
    class UWeaponState* _unequippingState;                                            // 0x1528 (size: 0x8)
    class UWeaponState* _inactiveState;                                               // 0x1530 (size: 0x8)
    class UWeaponState* _chamberBulletState;                                          // 0x1538 (size: 0x8)
    class UWeaponStateReload* _reloadState2;                                          // 0x1540 (size: 0x8)
    class UWeaponStateClearMalfunction* _clearMalfunctionState;                       // 0x1548 (size: 0x8)
    class UWeaponStateUnloadAmmo* _unloadAmmoState;                                   // 0x1550 (size: 0x8)
    class UWeaponStateCheckAmmo* _checkAmmoState;                                     // 0x1558 (size: 0x8)
    EWeaponMuzzleEffectsSpawType _muzzleEffectsSpawnType;                             // 0x1560 (size: 0x1)
    class UParticleSystem* _muzzlePS;                                                 // 0x1568 (size: 0x8)
    class UParticleSystem* _suppressorMuzzlePS;                                       // 0x1570 (size: 0x8)
    class UParticleSystemComponent* _muzzlePSC;                                       // 0x1578 (size: 0x8)
    class UParticleSystem* _smokeAfterShotFiredPS;                                    // 0x1580 (size: 0x8)
    class UParticleSystemComponent* _smokeAfterShotFiredPSC;                          // 0x1588 (size: 0x8)
    class UParticleSystem* _ejectCasingPS;                                            // 0x1590 (size: 0x8)
    class UParticleSystem* _ejectLiveRoundPS;                                         // 0x1598 (size: 0x8)
    class UWeaponPaintjobItemComponent* _paintjobComponent;                           // 0x15A0 (size: 0x8)
    class AActor* _weaponOwner;                                                       // 0x15A8 (size: 0x8)
    TArray<FAmmunitionData> _loadedAmmoData;                                          // 0x15C0 (size: 0x10)
    bool _shouldOverrideUseMuzzleDirectionForShooting;                                // 0x15D2 (size: 0x1)
    bool _useMuzzleDirectionForShootingOverride;                                      // 0x15D3 (size: 0x1)
    TWeakObjectPtr<class AActor> _projectileTargetLocationOverride;                   // 0x15D4 (size: 0x8)
    EWeaponFiringMode _firingMode;                                                    // 0x165C (size: 0x1)
    TArray<class AWeaponAttachment*> _weaponAttachmentsReplicated;                    // 0x1670 (size: 0x10)
    TArray<FAmmunitionData> _internalMagazineAmmoData;                                // 0x16A8 (size: 0x10)
    int32 _usedAmmoCount;                                                             // 0x16B8 (size: 0x4)
    bool _shouldPlayChamberOpenedIdle;                                                // 0x16BD (size: 0x1)
    class UAkAudioEvent* _fireSingleShotAudioEvent;                                   // 0x16D0 (size: 0x8)
    class UAkAudioEvent* _startAutoFireAudioEvent;                                    // 0x16D8 (size: 0x8)
    class UAkAudioEvent* _stopAutoFireAudioEvent;                                     // 0x16E0 (size: 0x8)
    class UAkAudioEvent* _suppressorFireSingleShotAudioEvent;                         // 0x16E8 (size: 0x8)
    class UAkAudioEvent* _suppressorStartAutoFireAudioEvent;                          // 0x16F0 (size: 0x8)
    class UAkAudioEvent* _suppressorStopAutoFireAudioEvent;                           // 0x16F8 (size: 0x8)
    class UAkAudioEvent* _improvisedSuppressorFireSingleShotAudioEvent;               // 0x1700 (size: 0x8)
    class UAkAudioEvent* _improvisedSuppressorStartAutoFireAudioEvent;                // 0x1708 (size: 0x8)
    class UAkAudioEvent* _improvisedSuppressorStopAutoFireAudioEvent;                 // 0x1710 (size: 0x8)
    class UAkAudioEvent* _noAmmoAudioEvent;                                           // 0x1718 (size: 0x8)
    class UAkAudioEvent* _dryFireUncockedAudioEvent;                                  // 0x1720 (size: 0x8)
    class UAkAudioEvent* _zeroRangeClickAudioEvent;                                   // 0x1728 (size: 0x8)
    class UAkAudioEvent* _changeFiringModeAudioEvent;                                 // 0x1730 (size: 0x8)
    class UAkAudioEvent* _onMalfunctionAudioEvent;                                    // 0x1738 (size: 0x8)
    class UAkAudioEvent* _switchADSStateAudioEvent;                                   // 0x1740 (size: 0x8)
    class UAkAudioEvent* _indoorSmallHearingDamageAudioEvent;                         // 0x1748 (size: 0x8)
    class UAkAudioEvent* _indoorMediumHearingDamageAudioEvent;                        // 0x1750 (size: 0x8)
    class UAkAudioEvent* _indoorLargeHearingDamageAudioEvent;                         // 0x1758 (size: 0x8)
    class UAkAudioEvent* _outdoorLargeHearingDamageAudioEvent;                        // 0x1760 (size: 0x8)
    float _makeNoiseLoudness;                                                         // 0x1768 (size: 0x4)
    float _staminaDrainMultiplier;                                                    // 0x177C (size: 0x4)
    EWeaponMalfunction _malfunction;                                                  // 0x178C (size: 0x1)
    EWeaponBehaviourMode _behaviourMode;                                              // 0x178D (size: 0x1)
    UClass* _loadedAmmunitionItemClass;                                               // 0x17B0 (size: 0x8)
    TSubclassOf<class AProjectile> _loadedProjectileClass;                            // 0x17C0 (size: 0x8)
    TSubclassOf<class AProjectile> _defaultProjectileClass;                           // 0x17C8 (size: 0x8)
    float _totalControllerPitchAmountToAdd;                                           // 0x17DC (size: 0x4)
    float _controllerPitchAddTimeFrame;                                               // 0x17E0 (size: 0x4)
    FWeaponStateSyncData _ownerWeaponStateSyncData;                                   // 0x2F68 (size: 0x48)
    TSubclassOf<class UArmedNPCWeaponManual> _armedNPCWeaponManualClass;              // 0x3000 (size: 0x8)

    void UpdateReloadData(FWeaponReloadData& reloadDataIn, FWeaponReloadData& reloadDataOut);
    void UpdateAmmunitionMeshes(const TArray<int32>& ammoIndices, bool showReversed);
    void UpdateActiveSightAndScopeComponents();
    void Unequip();
    void StopFiringEffects();
    void StopFire();
    void StartFire();
    bool ShouldPlayChamberOpenedIdle();
    bool ShouldPlayCasingEjectedSound();
    bool ShouldClearMalfunctionOnEvent(EWeaponMalfunction malfunction, EWeaponMalfunctionEvent malfunctionEvent);
    void SetZeroRangeOnServer(int32 ZeroRange);
    void SetUseWeaponAnimationPose(bool Value);
    void SetUseMuzzleDirectionForShooting(bool Value);
    void SetShouldPlayChamberOpenedIdle(bool Value);
    void SetOverrideUseWeaponAnimationPose(bool Value);
    void SetMalfunction(EWeaponMalfunction Type);
    void SetMakeNoiseLoudness(bool Value);
    void SetLoadedProjectileClass(TSubclassOf<class AProjectile> projectileClass);
    void SetIsScopingAllowed(bool Value);
    void SetIsChambering(bool Value);
    void SetFiringModeOnServer(EWeaponFiringMode Value);
    void SetFiringMode(EWeaponFiringMode Value);
    void Server_SwapAttachments(class AWeaponAttachment* oldAttachment, class AWeaponAttachment* newAttachment);
    void Server_StopFiringEffects();
    void Server_StopChamberEffects();
    void Server_SetMalfunction(EWeaponMalfunction Type);
    void Server_SetBehaviourMode(EWeaponBehaviourMode mode);
    void Server_RemoveCartridgeFromWeapon();
    void Server_PlayFiringEffects(bool isLastShot);
    void Server_PlayDryFireSound();
    void Server_PlayChamberEffects();
    void Server_OnChamberOpenedClosed();
    void Server_OnChamberOpened();
    void Server_OnChamberClosed();
    void Server_InsertCartridgeIntoWeapon(class AAmmunitionItem* ammo, FAmmunitionData AmmunitionData);
    void Server_FireShotProjectile(const FFireShotProjectileData& Data, const FFireShotDescription& desc);
    void Server_DropAttachment(class AWeaponAttachment* Attachment);
    void Server_CancelFiringEffects();
    void ResetZeroRange();
    void RequestClearMalfunction(EWeaponMalfunction malfunction);
    void RemoveAttachmentOnServer(class AWeaponAttachment* Attachment);
    void RemoveAttachmentLocal(class AWeaponAttachment* Attachment);
    void RemoveAttachment(class AWeaponAttachment* Attachment);
    void RemoveAmmo(const int32 Amount);
    void PlayFiringEffects(bool isLastShot);
    void OnWeaponActionAnimNotify(EWeaponActionNotifyType notifyType);
    void OnStaminaDrained();
    void OnShotFired(bool isLastShot);
    void OnRep_WeaponAttachmentsReplicated();
    void OnRep_OwnerWeaponStateSyncData();
    void OnRep_Malfunction();
    void OnRep_FireShotCounterEffectsSync();
    void OnRep_BehaviourMode();
    void OnChamberOpened();
    void OnChamberClosed();
    void OnAttachmentRemoved(class AWeaponAttachment* Attachment);
    void OnAttachmentAdded(class AWeaponAttachment* Attachment);
    void NotifyMissOnServer(FVector_NetQuantizeNormal shootDirection, int32 randomSeed, float reticleSpread);
    void NotifyHitOnServer(const FHitResult& HitResult, FVector_NetQuantizeNormal shootDirection, int32 randomSeed, float reticleSpread);
    void NetMulticast_StopFiringEffects();
    void NetMulticast_StopChamberEffects();
    void NetMulticast_PlayFiringEffects(bool isLastShot);
    void NetMulticast_PlayDryFireSound();
    void NetMulticast_PlayChamberEffects();
    void NetMulticast_CancelFiringEffects();
    bool IsMalfunctionSupported(EWeaponMalfunction malfunction);
    bool IsInGameEvent();
    bool IsFiring();
    bool IsChamberOpened();
    bool IsAmmoInMagazineCompatible(const class AWeaponAttachmentMagazine* magazine);
    bool IsAmmoCompatible(const FGameplayTag& AmmunitionTag);
    void IncrementZeroRange();
    bool HasEnoughAmmo();
    bool HasAmmoToUnload();
    int32 GetZeroRange();
    class APrisoner* GetWeaponOwningPrisoner();
    class AConZCharacter* GetWeaponOwningCharacter();
    class AActor* GetWeaponOwner();
    bool GetUseWeaponAnimationPose();
    bool GetUseMuzzleDirectionForShooting();
    int32 GetUsedAmmoCount();
    EWeaponType GetType();
    float GetSpread();
    float GetShakiness();
    class UWeaponActionReloadSequence* GetReloadActionSequenceForData(const FWeaponReloadData& reloadData);
    class URangedWeaponsSkill* GetRangedWeaponsSkill();
    float GetProbabilityForMalfunction(EWeaponMalfunction malfunction, float normalizedHealth);
    bool GetOverrideUseWeaponAnimationPose();
    FVector GetMuzzleLocation();
    FVector GetMuzzleDirection();
    int32 GetMaxAmmoCount();
    void GetMalfunctionsForEvent(EWeaponMalfunctionEvent malfunctionEvent, const FWeaponMalfunctionEventDescription& desc, TArray<FWeaponMalfunctionProbability>& malfunctionsIn, TArray<FWeaponMalfunctionProbability>& malfunctionsOut);
    float GetMakeNoiseLoudness();
    class AWeaponAttachmentMagazine* GetMagazine();
    TSubclassOf<class AProjectile> GetLoadedProjectileClass();
    int32 GetLoadedAmmoCount();
    int32 GetLiveAmmoCount();
    bool GetIsScopingAllowed();
    bool GetIsChambering();
    int32 GetInternalMagazineSpace();
    int32 GetInternalMagazineAmmoCount();
    class UAnimMontage* GetFiringMontage(bool isLastShot);
    EWeaponFiringMode GetFiringMode();
    FBodyWeaponAnimation GetFiringBodyWeaponAnimation();
    FAmmunitionData GetDefaultAmmunitionData();
    UClass* GetAmmunitionItemClass();
    FString GetAmmoTypeString();
    int32 GetAmmoReloadCapacity(const class AAmmunitionItem* ammo);
    int32 GetAmmoCount();
    void FireShot();
    bool FindReloadData(const TArray<class AItem*>& Items, FWeaponReloadData& reloadData);
    void FillUpWithDefaultAmmo();
    void Equip();
    void DestroyAmmunitionMeshes();
    void DecrementZeroRange();
    void CreateAmmunitionMeshes();
    void Client_SetupForEvent();
    bool CanSwitchFiringMode();
    bool CanReloadUsingData(const FWeaponReloadData& Data);
    bool CanFireAgain();
    void CancelFire();
    bool CanBeginFiringSequenceWithMalfunction(EWeaponMalfunction malfunction);
    bool CanAddAttachment(const class AWeaponAttachment* Attachment);
    void AttachmentRemovedSignature__DelegateSignature(class AWeapon* sender, class AWeaponAttachment* Attachment);
    void AttachmentAddedSignature__DelegateSignature(class AWeapon* sender, class AWeaponAttachment* Attachment);
    void AddAttachmentOnServer(class AWeaponAttachment* Attachment);
    void AddAttachmentLocal(class AWeaponAttachment* Attachment, bool attach);
    void AddAttachment(class AWeaponAttachment* Attachment, bool attach, bool removeExistingOnTheSameMountType);
    void AddAmmoSingleAtLocation(const FAmmunitionData& ammoData, bool backLocation);
    void AddAmmoSingle(const FAmmunitionData& ammoData);
    void AddAmmo(const TArray<FAmmunitionData>& ammoData);
}; // Size: 0x3010

class AWeaponAttachment : public AItem
{
    FName LowestMiddleSocketName;                                                     // 0x09A8 (size: 0x8)
    FName HighestMiddleSocketName;                                                    // 0x09B0 (size: 0x8)
    class UStaticMesh* _staticMeshWhenAttached;                                       // 0x09C0 (size: 0x8)

    void Unequip();
    FWeaponMalfunctionProbability GetWeaponMalfunctionProbabilityForMalfunctionEvent(const class AWeapon* Weapon, EWeaponMalfunctionEvent malfunctionEvent);
    class UStaticMesh* GetStaticMeshWhenAttached();
    class USkeletalMesh* GetSkeletalMeshWhenAttached();
    float GetShakinessModifier();
    class AWeapon* GetOwningWeapon();
    void Equip(class AWeapon* Weapon);
    bool CanBeRemovedIfAttachedToWeapon();
}; // Size: 0x9E0

class AWeaponAttachmentAutoCrossbowMagazine : public AWeaponAttachmentMagazine
{

    float GetFollowerBoneLocationOffset();
}; // Size: 0xAA0

class AWeaponAttachmentBayonet : public AWeaponAttachment
{
}; // Size: 0x9E0

class AWeaponAttachmentCharm : public ASkeletalWeaponAttachment
{
    float _decayMultiplierForNonDLCPlayer;                                            // 0x09E0 (size: 0x4)

}; // Size: 0x9F0

class AWeaponAttachmentFlashlight : public AWeaponAttachment
{
    FName _lightSocketName;                                                           // 0x09E0 (size: 0x8)
    class UBasicGameResourceSlotItemComponent* _batterySlot;                          // 0x09E8 (size: 0x8)
    class UResourcePoweredLightItemComponent* _batteryPoweredLightItemComponent;      // 0x09F0 (size: 0x8)

}; // Size: 0xA10

class AWeaponAttachmentGhillie : public AWeaponAttachment
{
    class USkeletalMeshComponent* EquippedSkeletalMeshComponent;                      // 0x09D8 (size: 0x8)
    TMap<class TSubclassOf<AWeapon>, class FMeshMaterialPair> WeaponToSkeletalMeshMapping; // 0x09E0 (size: 0x50)

}; // Size: 0xA30

class AWeaponAttachmentMagazine : public ASkeletalWeaponAttachment
{
    FGameplayTagContainer AmmunitionTags;                                             // 0x09E0 (size: 0x20)
    bool RequiresFullCapacityOnLoad;                                                  // 0x0A00 (size: 0x1)
    TSubclassOf<class AAmmunitionItem> DefaultFillAmmo;                               // 0x0A08 (size: 0x8)
    int32 InitialAmmo;                                                                // 0x0A10 (size: 0x4)
    TArray<FAmmunitionData> _ammoData;                                                // 0x0A18 (size: 0x10)
    TArray<FAmmunitionData> _ammoOwnerHelper;                                         // 0x0A28 (size: 0x10)
    int32 _capacity;                                                                  // 0x0A3C (size: 0x4)
    TArray<class UStaticMeshComponent*> _cartridgeMeshComponents;                     // 0x0A48 (size: 0x10)
    TArray<class TSubclassOf<UItemActionSequenceLoadMagazine>> _loadAmmoSequences;    // 0x0A58 (size: 0x10)
    TSubclassOf<class URangedWeaponsSkill> _rangedWeaponsSkillClass;                  // 0x0A68 (size: 0x8)
    float _loadMagazineActionSpeedMultiplier;                                         // 0x0A70 (size: 0x4)
    TSoftObjectPtr<UTexture2D> _inventoryIconFull;                                    // 0x0A78 (size: 0x28)

    void UpdateAmmunitionMeshes(const TArray<int32>& ammoIndices, bool showReversed);
    void SetAmmo(const TArray<FAmmunitionData>& ammo);
    void Server_InsertCartridgeIntoMagazine(class AAmmunitionItem* ammo);
    void Server_InsertAmmoSingle(class AAmmunitionItem* ammoItem);
    void Server_EmptyAmmo();
    FAmmunitionData RemoveAmmo();
    void OnRep_AmmoOwnerHelper();
    void OnRep_AmmoData();
    void OnAmmoChangedEvent();
    void Multicast_SetLoadedVariables(const TArray<FAmmunitionData>& ammo);
    bool IsAmmoSupported(const class AAmmunitionItem* ammo);
    TSubclassOf<class AProjectile> GetTopmostProjectileClass();
    bool GetTopmostAmmunitionData(FAmmunitionData& Data);
    int32 GetCapacity();
    int32 GetAmmoCount();
    void GetAmmo(TArray<FAmmunitionData>& ammo);
    void FillWithDefaultAmmo(int32 Count);
    void EmptyAmmo();
    void DestroyAmmunitionMeshes();
    void CreateAmmunitionMeshes();
    void AddAmmoSingle(const FAmmunitionData& ammo);
    void AddAmmo(const TArray<FAmmunitionData>& ammo);
}; // Size: 0xAA0

class AWeaponAttachmentNightVisionScope : public AWeaponAttachmentScope
{
    class UBasicGameResourceSlotItemComponent* _batterySlot;                          // 0x09F0 (size: 0x8)

    void Server_ToggleActivity();
}; // Size: 0xA00

class AWeaponAttachmentScope : public AWeaponAttachmentSight
{
    class UWeaponScopeItemComponent* _weaponScopeItemComponent;                       // 0x09E0 (size: 0x8)

}; // Size: 0x9F0

class AWeaponAttachmentScopeRail : public AWeaponAttachment
{
    FName ScopeSocketName;                                                            // 0x09D8 (size: 0x8)

}; // Size: 0x9E0

class AWeaponAttachmentSight : public AWeaponAttachment
{
    class UWeaponSightItemComponent* _weaponSightItemComponent;                       // 0x09D8 (size: 0x8)

}; // Size: 0x9E0

class AWeaponAttachmentSuppressor : public AWeaponAttachment
{
    FName MuzzleSocketName;                                                           // 0x09D8 (size: 0x8)
    float NoiseMultiplier;                                                            // 0x09E0 (size: 0x4)
    bool IsImprovised;                                                                // 0x09E4 (size: 0x1)

    void OnAttachedWeaponShot();
}; // Size: 0x9F0

class AWeaponAttachmentUniversalFlashlight : public AWeaponAttachmentFlashlight
{
    TMap<class TSoftClassPtr<AWeapon>, class UStaticMesh*> WeaponToStaticMeshMapping; // 0x0A08 (size: 0x50)

}; // Size: 0xA60

class AWeaponAutoCrossbow : public AWeapon
{
    class UWeaponStateFiring* FireState;                                              // 0x3010 (size: 0x8)
    float _muzzleVelocity;                                                            // 0x3018 (size: 0x4)
    float _probabilityForLaughingSoundEffect;                                         // 0x301C (size: 0x4)
    FCharacterAndItemAnimation _autoCrossbowFireAnimation;                            // 0x3020 (size: 0x10)
    class UAkAudioEvent* _autoCrossbowLaughingAudioEvent;                             // 0x3030 (size: 0x8)
    class UWeaponState* _autoCrossbowActiveState;                                     // 0x3038 (size: 0x8)
    TSubclassOf<class UGameResourceType> _fuelType;                                   // 0x43E0 (size: 0x8)
    FGameplayTagContainer _inFuelingSocketTypes;                                      // 0x43E8 (size: 0x20)
    float _maxFuelAmount;                                                             // 0x4408 (size: 0x4)
    float _fuelUsagePerHour;                                                          // 0x440C (size: 0x4)
    float _fuelUsagePerHourWhenDamaged;                                               // 0x4410 (size: 0x4)
    float _fuelFillingDurationPerAmountFilled;                                        // 0x4414 (size: 0x4)
    float _fuelFillingDurationPerAmountFilledWhenDamaged;                             // 0x4418 (size: 0x4)
    float _fuelFillingExperiencePerAmount;                                            // 0x441C (size: 0x4)
    float _currentFuelAmount;                                                         // 0x4420 (size: 0x4)

    void SetFollowerBoneLocationOffset(float LocationOffset);
    void Server_PlayLaughingSoundEffect();
    void Server_HandleFiringEffects(bool Active);
    void Multicast_PlayLaughingSoundEffect();
    void Multicast_HandleFiringEffects(bool Active);
}; // Size: 0x4430

class AWeaponBow : public AWeapon
{
    FBodyWeaponAnimation InsertArrowAnimations;                                       // 0x3008 (size: 0x10)
    FBodyWeaponAnimation RemoveArrowAnimations;                                       // 0x3018 (size: 0x10)
    FBodyWeaponAnimation UnableToDrawAnimations;                                      // 0x3028 (size: 0x10)
    FBodyWeaponAnimation DrawAnimations2;                                             // 0x3038 (size: 0x30)
    FBodyWeaponAnimation DrawWhileAnticipatingDrawAnimations2;                        // 0x3068 (size: 0x30)
    FBodyWeaponAnimation CancelDrawAnimations2;                                       // 0x3098 (size: 0x30)
    FBodyWeaponAnimation LooseAnimations2;                                            // 0x30C8 (size: 0x30)
    FBodyWeaponAnimation LooseLastShotAnimations2;                                    // 0x30F8 (size: 0x30)
    FWeaponBowAimOffsets AimOffsets;                                                  // 0x3128 (size: 0xA8)
    FWeaponBowArmsShake ArmsShakeAnimamtion;                                          // 0x31D0 (size: 0x90)
    FBodyWeaponAnimation DrawAnimations;                                              // 0x3260 (size: 0x10)
    FBodyWeaponAnimation DrawWhileAnticipatingDrawAnimations;                         // 0x3270 (size: 0x10)
    FBodyWeaponAnimation CancelDrawAnimations;                                        // 0x3280 (size: 0x10)
    FBodyWeaponAnimation LooseAnimations;                                             // 0x3290 (size: 0x10)
    FBodyWeaponAnimation LooseLastShotAnimations;                                     // 0x32A0 (size: 0x10)
    class UAnimSequenceBase* WeaponAimingDownTheSightsAnimationPose;                  // 0x32B0 (size: 0x8)
    class UAnimSequenceBase* WeaponAimingDownTheSightsStillAnimationPose;             // 0x32B8 (size: 0x8)
    class UWeaponState* AnticipateDrawState2;                                         // 0x32C0 (size: 0x8)
    class UWeaponState* DrawState3;                                                   // 0x32C8 (size: 0x8)
    class UWeaponState* CancelFiringState;                                            // 0x32D0 (size: 0x8)
    class UWeaponState* AnticipateFiringState;                                        // 0x32D8 (size: 0x8)
    class UWeaponState* FireState;                                                    // 0x32E0 (size: 0x8)
    class UWeaponState* FireAndInsertArrowState;                                      // 0x32E8 (size: 0x8)
    class UAkAudioEvent* _fireNoArrowAudioEvent;                                      // 0x3308 (size: 0x8)
    FName _arrowSocketName;                                                           // 0x3310 (size: 0x8)
    float _muzzleVelocity;                                                            // 0x3318 (size: 0x4)
    float _drawWeight;                                                                // 0x331C (size: 0x4)
    float _compoundBowFullDrawHoldTime;                                               // 0x3320 (size: 0x4)
    float _armShakeTimerDecreaseRate;                                                 // 0x3324 (size: 0x4)
    float _damageOnUsage;                                                             // 0x3328 (size: 0x4)
    class UWeaponState* _bowActiveState2;                                             // 0x3330 (size: 0x8)
    class UWeaponState* _bowInsertArrowState;                                         // 0x3338 (size: 0x8)
    class UWeaponState* _bowRemoveArrowState;                                         // 0x3340 (size: 0x8)
    class UWeaponStateFiring* _bowFiringState2;                                       // 0x3348 (size: 0x8)
    FWeaponBowStateDataReplicated _weaponBowStateDataReplicated;                      // 0x337C (size: 0xC)
    class UStaticMeshComponent* _arrowMeshComponent;                                  // 0x3388 (size: 0x8)
    FProjectileArrowData _projectileArrowData;                                        // 0x3390 (size: 0x20)
    bool _isCompound;                                                                 // 0x3400 (size: 0x1)
    class UStaticMeshComponent* _handTriggerMeshComponent;                            // 0x3408 (size: 0x8)
    bool _ignoreArrowStiffness;                                                       // 0x3410 (size: 0x1)
    float _letOff;                                                                    // 0x3414 (size: 0x4)
    FName _handTriggerBoneName;                                                       // 0x3418 (size: 0x8)

    void SetDrawWeight(float drawWeight);
    void Server_SetPendingArrow(class AAmmunitionArrow* arrow);
    void Server_SetDrawAmount(float drawAmount);
    void Server_SetBowStateData(const FWeaponBowStateDataReplicated& State);
    void Server_RemoveArrow();
    void Server_InsertArrow(class AAmmunitionArrow* arrow);
    void ReloadArrow();
    void OnRep_BowStateData();
    void OnRep_Arrow();
    void GotoInsertArrowState();
    class AAmmunitionArrow* GetPendingArrow();
    float GetOwnersTotalDrawWeight();
    float GetOwnersDrawWeightByStrength();
    float GetOwnersDrawWeightBySkill();
    float GetDrawWeightDefaultsByStrength(float Strength);
    float GetDrawWeight();
    float GetDrawPercentageDefaultsForParameters(float characterDrawWeight, float bowDrawWeight);
    void EquipArrowByClass(UClass* arrowClass);
    void EquipArrow(class AAmmunitionArrow* arrow);
    bool CanInsertArrow(const class AAmmunitionArrow* arrowItem);
}; // Size: 0x3450

class AWeaponCrossbow : public AWeapon
{
    class UWeaponStateFiring* FireState;                                              // 0x3008 (size: 0x8)
    class UWeaponState* FireAndInsertArrowState;                                      // 0x3010 (size: 0x8)
    float _muzzleVelocity;                                                            // 0x3018 (size: 0x4)
    FCharacterAndItemAnimation _crossbowFireAnimation;                                // 0x3020 (size: 0x10)
    class UAkAudioEvent* _crossbowFireAudioEvent;                                     // 0x3030 (size: 0x8)
    class UAkAudioEvent* _crossbowDryFireAudioEvent;                                  // 0x3038 (size: 0x8)
    class UWeaponState* _crossbowActiveState;                                         // 0x3040 (size: 0x8)
    bool _isCocked;                                                                   // 0x3048 (size: 0x1)

    void SetIsCocked(bool Value);
    void Server_HandleFiringEffects(bool shotFired);
    void NetMulticast_SetLoadedVariablesForCrossbow(bool isCocked);
    void Multicast_HandleFiringEffects(bool shotFired);
    bool GetIsCocked();
    EWeaponCrossbowDrawCategory GetDrawCategory();
    void EquipArrowByClass(UClass* arrowClass);
}; // Size: 0x3060

class AWeaponFlamethrower : public AWeapon
{
    class UFlamethrowerComponent* _flamethrowerComponent;                             // 0x3010 (size: 0x8)
    float _turnOffDelay;                                                              // 0x3018 (size: 0x4)
    float _sendDataRPCInterval;                                                       // 0x3028 (size: 0x4)
    float _dataToSendRetainTime;                                                      // 0x3080 (size: 0x4)
    TSubclassOf<class UGameResourceType> _fuelType;                                   // 0x3088 (size: 0x8)
    float _fuelDensity;                                                               // 0x3090 (size: 0x4)
    float _maxFuelAmount;                                                             // 0x3094 (size: 0x4)
    float _initialFuelAmount;                                                         // 0x3098 (size: 0x4)
    float _fuelUsagePerHour;                                                          // 0x309C (size: 0x4)
    class UAnimMontage* _fuelFillingMontage;                                          // 0x30A0 (size: 0x8)
    FGameplayTagContainer _inFuelingSocketTypes;                                      // 0x30A8 (size: 0x20)
    float _fuelFillingDurationPerAmountFilled;                                        // 0x30C8 (size: 0x4)
    float _fuelFillingExperiencePerAmount;                                            // 0x30CC (size: 0x4)
    class UAkAudioEvent* _fuelStartFillingAudioEvent;                                 // 0x30D0 (size: 0x8)
    class UAkAudioEvent* _fuelStopFillingAudioEvent;                                  // 0x30D8 (size: 0x8)
    FCharacterAndItemAnimation _checkFuelStatus;                                      // 0x30E0 (size: 0x10)
    float _currentFuelAmount;                                                         // 0x30F0 (size: 0x4)

    void NetMulticast_SetFlamethrowerActive(bool Active);
}; // Size: 0x3100

class AWeaponHolsterItem : public AClothesItem
{
    class AItem* _holsteredWeaponRep;                                                 // 0x0A50 (size: 0x8)
    FName _maxLocationSocketName;                                                     // 0x0A58 (size: 0x8)
    FName _minLocationSocketName;                                                     // 0x0A60 (size: 0x8)
    FName _fatLocationSocketName;                                                     // 0x0A68 (size: 0x8)
    FName _muscleLocationSocketName;                                                  // 0x0A70 (size: 0x8)
    FName _leanLocationSocketName;                                                    // 0x0A78 (size: 0x8)
    FName _staticMeshSocketName;                                                      // 0x0A80 (size: 0x8)

    void OnRep_HolsteredWeapon();
    bool HolsterWeapon(class AItem* Weapon);
}; // Size: 0xA90

class AWeaponItem : public AItem
{
    uint32 MaxRange;                                                                  // 0x09A8 (size: 0x4)
    uint32 ROF;                                                                       // 0x09AC (size: 0x4)

}; // Size: 0x9B0

class AWeaponRevolver : public AWeapon
{
    class UWeaponStateFiring* FireState;                                              // 0x3008 (size: 0x8)
    class UWeaponState* _revolverActiveState;                                         // 0x3010 (size: 0x8)
    FCharacterAndItemAnimation _fireAnimation;                                        // 0x3018 (size: 0x10)
    FCharacterAndItemAnimation _dryFireAnimation;                                     // 0x3028 (size: 0x10)
    FCharacterAndItemAnimation _rollDrumAnimation;                                    // 0x3038 (size: 0x10)
    class UAnimMontage* _russianRouletteMontage;                                      // 0x3048 (size: 0x8)
    float _drumRotationOffset;                                                        // 0x3050 (size: 0x4)
    int32 _firingIndex;                                                               // 0x3054 (size: 0x4)
    float _drumRotationInterpolatorSpeed;                                             // 0x3068 (size: 0x4)
    ERotationDirection _drumRotationDirection;                                        // 0x306C (size: 0x1)

    void Server_UseAmmoAtIndex(int32 Index);
    void Server_RollDrum(int32 Index);
    void Server_PlayFiringAnimation(int32 ammoIndex, bool dryFire);
    void NetMulticast_SetLoadedVariablesForRevolver(int32 ammoIndex);
    void NetMulticast_PlayFiringAnimation(int32 ammoIndex, bool dryFire);
}; // Size: 0x3070

class AWeaponRocketLauncher : public AWeapon
{
    class UWeaponState* ArmState;                                                     // 0x3008 (size: 0x8)
    class UWeaponState* UnarmState;                                                   // 0x3010 (size: 0x8)
    class UWeaponState* ArmedState;                                                   // 0x3018 (size: 0x8)
    TSubclassOf<class UWeaponActionRocketLauncherArmSequence> _armActionSequenceClass; // 0x3020 (size: 0x8)
    TSubclassOf<class UWeaponActionRocketLauncherUnarmSequence> _unarmActionSequenceClass; // 0x3028 (size: 0x8)
    bool _needsToBeArmedToFire;                                                       // 0x3030 (size: 0x1)
    bool _spawnWithLoadedProjectile;                                                  // 0x3031 (size: 0x1)
    FName _backMuzzlerSocketName;                                                     // 0x3034 (size: 0x8)
    class UParticleSystem* _baskMuzzlePS;                                             // 0x3040 (size: 0x8)
    class UWeaponActionRocketLauncherArmSequence* _armActionSequence;                 // 0x3048 (size: 0x8)
    class UWeaponActionRocketLauncherUnarmSequence* _unarmActionSequence;             // 0x3050 (size: 0x8)
    class UWeaponState* _unarmedState;                                                // 0x3058 (size: 0x8)
    bool _isArmed;                                                                    // 0x3060 (size: 0x1)

    void Server_Unarm();
    void Server_Arm();
    void OnRep_IsArmed();
    void OnRep_ActiveState();
    void NetMulticast_Unarm();
    void NetMulticast_Arm();
    bool IsArmed();
}; // Size: 0x3070

class AWeatherAmbientSounds : public AActor
{
    float WeatherRTPCsUpdateInterval;                                                 // 0x0220 (size: 0x4)
    float TimeOfDayRTPCUpdateInterval;                                                // 0x0224 (size: 0x4)
    float TimeOfDayRTPCInterpolationSpeed;                                            // 0x0228 (size: 0x4)
    class UAkAudioEvent* RainAudioEvent;                                              // 0x0230 (size: 0x8)
    class UAkAudioEvent* WindAudioEvent;                                              // 0x0238 (size: 0x8)

}; // Size: 0x258

class AWeatherController2 : public AActor
{
    float _maxHeightAboveSeaLevel;                                                    // 0x0280 (size: 0x4)
    class UDirectionalLightComponent* _sun;                                           // 0x0288 (size: 0x8)
    float _timeOfDay;                                                                 // 0x0290 (size: 0x4)
    bool _canStartTimeOfDayBeOverridenByConfig;                                       // 0x0294 (size: 0x1)
    float _timeOfDaySpeed;                                                            // 0x0298 (size: 0x4)
    bool _canTimeOfDaySpeedBeOverridenByConfig;                                       // 0x029C (size: 0x1)
    float _sunIntensity;                                                              // 0x02A0 (size: 0x4)
    float _sunFullEclipseMult;                                                        // 0x02A4 (size: 0x4)
    float _sunAzimuthDegrees;                                                         // 0x02A8 (size: 0x4)
    float _sunLightSourceAngle;                                                       // 0x02AC (size: 0x4)
    float _sunTurnOffAngle;                                                           // 0x02B0 (size: 0x4)
    float _sunriseTime;                                                               // 0x02B8 (size: 0x4)
    bool _canSunriseTimeBeOverridenByConfig;                                          // 0x02BC (size: 0x1)
    float _sunsetTime;                                                                // 0x02C0 (size: 0x4)
    bool _canSunsetTimeBeOverridenByConfig;                                           // 0x02C4 (size: 0x1)
    float _dawnDuskTresholdAngle;                                                     // 0x02C8 (size: 0x4)
    float _maxSolarIrradiance;                                                        // 0x02D0 (size: 0x4)
    bool _useQuantizedSunMovement;                                                    // 0x02D4 (size: 0x1)
    FFloatInterval _quantizedSunMovementLevelsPerSunHeight;                           // 0x02D8 (size: 0x8)
    class UDirectionalLightComponent* _moon;                                          // 0x02E0 (size: 0x8)
    float _moonRotation;                                                              // 0x02E8 (size: 0x4)
    float _moonIntensityMult;                                                         // 0x02EC (size: 0x4)
    FLinearColor _moonLightTint;                                                      // 0x02F0 (size: 0x10)
    float _shadowTurnOffAngle;                                                        // 0x0300 (size: 0x4)
    float _shadowResoultionHalfScaleAngle;                                            // 0x0308 (size: 0x4)
    float _shadowCascadeLimitAngle;                                                   // 0x0310 (size: 0x4)
    int32 _shadowCascadeLimitValue;                                                   // 0x0318 (size: 0x4)
    class UMaterialInterface* _moonStarsMaterial;                                     // 0x0338 (size: 0x8)
    class UMaterialInstanceDynamic* _moonStarsMaterialDynamic;                        // 0x0340 (size: 0x8)
    class UStaticMeshComponent* _starsSphere;                                         // 0x0348 (size: 0x8)
    float _starsSphereDistance;                                                       // 0x0350 (size: 0x4)
    FRotator _starsSphereRotation;                                                    // 0x0354 (size: 0xC)
    bool _useNightDirectionalLightComponent;                                          // 0x0360 (size: 0x1)
    class UDirectionalLightComponent* _nightLight;                                    // 0x0368 (size: 0x8)
    float _nightLightIntensity;                                                       // 0x0370 (size: 0x4)
    FFloatInterval _nightLightIntensityRange;                                         // 0x0374 (size: 0x8)
    FLinearColor _nightLightColor;                                                    // 0x037C (size: 0x10)
    class USkyLightComponent* _skyAmbientReflEnv;                                     // 0x0390 (size: 0x8)
    class USkyAtmosphereComponent* _skyAtmosphere;                                    // 0x0398 (size: 0x8)
    float _skyAmbientIntensity;                                                       // 0x03A0 (size: 0x4)
    FRuntimeFloatCurve _skyAmbientOcclusionTint;                                      // 0x03A8 (size: 0x88)
    FLinearColor _skyAmbientReflEnvLowerHemisphereColor;                              // 0x0430 (size: 0x10)
    FRuntimeFloatCurve _skyAmbientReflEnvLowerHemisphereIntensitySun;                 // 0x0440 (size: 0x88)
    FRuntimeFloatCurve _skyAmbientReflEnvLowerHemisphereIntensityMoon;                // 0x04C8 (size: 0x88)
    FRuntimeFloatCurve _skyAmbientReflEnvLowerHemisphereIntensityCloudCoverage;       // 0x0550 (size: 0x88)
    FRuntimeFloatCurve _skyAmbientReflEnvUpperHemisphereAdditiveIntensityCloudCoverage; // 0x05D8 (size: 0x88)
    FLinearColor _skyAmbientReflEnvUpperHemisphereAdditiveColor;                      // 0x0660 (size: 0x10)
    bool _applyAdditiveAmbientCubemapIntensity;                                       // 0x0670 (size: 0x1)
    FRuntimeFloatCurve _additiveAmbientCubemapIntensity;                              // 0x0678 (size: 0x88)
    FLinearColor _skyRayleighScattering;                                              // 0x0700 (size: 0x10)
    float _skyRayleightScatteringScale;                                               // 0x0710 (size: 0x4)
    float _mieScatteringBaseScale;                                                    // 0x0714 (size: 0x4)
    float _mieScatteringScaleByHumidity;                                              // 0x0718 (size: 0x4)
    FFloatInterval _mieExponentialDistribution;                                       // 0x071C (size: 0x8)
    float _skyLuminanceIntensity;                                                     // 0x0724 (size: 0x4)
    class UVolumetricCloudComponent* _volumetricClouds;                               // 0x0728 (size: 0x8)
    class UMaterialInterface* _volumetricCloudsMaterialLQ;                            // 0x0730 (size: 0x8)
    class UMaterialInterface* _volumetricCloudsMaterialHQ;                            // 0x0738 (size: 0x8)
    TMap<class UMaterialInterface*, class UMaterialInstanceDynamic*> _volumetricCloudsMaterialDynamic; // 0x0740 (size: 0x50)
    int32 _volumetricCloudsQuality;                                                   // 0x0790 (size: 0x4)
    float _cirrostratusCoverage;                                                      // 0x0794 (size: 0x4)
    float _cirrostratusSunlightThroughput;                                            // 0x0798 (size: 0x4)
    FRuntimeFloatCurve _cirrostratusCoverageMaterialParamRemap;                       // 0x07A0 (size: 0x88)
    float _cumulonimbusCoverage;                                                      // 0x0828 (size: 0x4)
    float _cumulonimbusSunlightThroughput;                                            // 0x082C (size: 0x4)
    FRuntimeFloatCurve _cumulonimbusCoverageMaterialParamRemap;                       // 0x0830 (size: 0x88)
    float _nimbostratusCoverage;                                                      // 0x08B8 (size: 0x4)
    float _nimbostratusSunlightThroughput;                                            // 0x08BC (size: 0x4)
    FRuntimeFloatCurve _nimbostratusCoverageMaterialParamRemap;                       // 0x08C0 (size: 0x88)
    float _cloudsBaseSpeed;                                                           // 0x0948 (size: 0x4)
    float _cloudsWindSpeed;                                                           // 0x094C (size: 0x4)
    FFloatInterval _volumetricCloudsViewSampleCount;                                  // 0x0958 (size: 0x8)
    FFloatInterval _volumetricCloudsReflectionSampleCount;                            // 0x0960 (size: 0x8)
    FFloatInterval _volumetricCloudsShadowViewSampleCount;                            // 0x0968 (size: 0x8)
    FFloatInterval _volumetricCloudsShadowReflectionSampleCount;                      // 0x0970 (size: 0x8)
    FFloatInterval _sunCloudShadowRaySampleCount;                                     // 0x0978 (size: 0x8)
    FFloatInterval _moonCloudShadowRaySampleCount;                                    // 0x0980 (size: 0x8)
    class UParticleSystem* _lightningParticleSystem;                                  // 0x0988 (size: 0x8)
    FFloatInterval _lightningParticleLifetime;                                        // 0x0990 (size: 0x8)
    class UAkAudioEvent* _thunderSoundEmitter;                                        // 0x0998 (size: 0x8)
    FFloatInterval _thunderSoundDuration;                                             // 0x09A0 (size: 0x8)
    float _lightningRate;                                                             // 0x09A8 (size: 0x4)
    float _lightningMaxDistance;                                                      // 0x09AC (size: 0x4)
    float _lightningAltitudeOffsetFromPlayer;                                         // 0x09B0 (size: 0x4)
    float _lightningAltitudeBandThickness;                                            // 0x09B4 (size: 0x4)
    class USceneComponent* _precipitationEmittersRoot;                                // 0x09D8 (size: 0x8)
    class UChildActorComponent* _precipitationMaskCapture;                            // 0x09E0 (size: 0x8)
    float _precipitationMaskUpdateInterval;                                           // 0x09E8 (size: 0x4)
    float _precipitationEmittersUpOffset;                                             // 0x09F0 (size: 0x4)
    float _precipitationEmittersForwardOffset;                                        // 0x09F4 (size: 0x4)
    float _precipitationEmittersVelocityOffset;                                       // 0x09F8 (size: 0x4)
    class UNiagaraSystem* _rainParticleSystem;                                        // 0x0A00 (size: 0x8)
    class UNiagaraComponent* _rainEmitter;                                            // 0x0A08 (size: 0x8)
    int32 _maxParticleCount;                                                          // 0x0A10 (size: 0x4)
    FVector4 _rainSpriteSizeAtLowRain;                                                // 0x0A20 (size: 0x10)
    FVector4 _rainSpriteSizeAtHighRain;                                               // 0x0A30 (size: 0x10)
    FVector4 _rainSpriteSplashSizeAtLowRain;                                          // 0x0A40 (size: 0x10)
    FVector4 _rainSpriteSplashSizeAtHighRain;                                         // 0x0A50 (size: 0x10)
    float _rainMinSpeed;                                                              // 0x0A60 (size: 0x4)
    float _rainMaxSpeed;                                                              // 0x0A64 (size: 0x4)
    float _rainMaxAngleAtHighWind;                                                    // 0x0A68 (size: 0x4)
    float _rainDirectionOffsetAtLowWind;                                              // 0x0A6C (size: 0x4)
    float _rainDirectionOffsetAtHighWind;                                             // 0x0A70 (size: 0x4)
    class UStaticMesh* _rainCylinderMesh;                                             // 0x0A78 (size: 0x8)
    FVector2D _rainCylinderScaleWidthHeight;                                          // 0x0A80 (size: 0x8)
    float _rainCylinderUpOffset;                                                      // 0x0A88 (size: 0x4)
    class UStaticMeshComponent* _rainCylinder;                                        // 0x0A90 (size: 0x8)
    float _rainIntensity;                                                             // 0x0A98 (size: 0x4)
    float _maxRainMilimeterPerHour;                                                   // 0x0A9C (size: 0x4)
    float _surfaceWetnessAccumulationSpeed;                                           // 0x0AA0 (size: 0x4)
    FRuntimeFloatCurve _surfaceWetnessEvaporationSpeedVsSunHeigth;                    // 0x0AA8 (size: 0x88)
    FRuntimeFloatCurve _surfaceWetnessEvaporationSpeedVsCloudCoverageMult;            // 0x0B30 (size: 0x88)
    float _surfaceWetnessEvaporationDiffExponent;                                     // 0x0BB8 (size: 0x4)
    class UMaterialInterface* _surfaceRaindropsPostProcess;                           // 0x0BC0 (size: 0x8)
    class UMaterialInstanceDynamic* _surfaceRaindropsPostProcessDynamicInstance;      // 0x0BC8 (size: 0x8)
    TArray<class UParticleSystem*> _snowParticleSystems;                              // 0x0BD0 (size: 0x10)
    TArray<class UParticleSystemComponent*> _snowEmitters;                            // 0x0BE0 (size: 0x10)
    float _snowIntensity;                                                             // 0x0BF0 (size: 0x4)
    class UMaterialParameterCollection* _mainMPC;                                     // 0x0C00 (size: 0x8)
    class UMaterialParameterCollection* _foliageMPC;                                  // 0x0C08 (size: 0x8)
    FRuntimeFloatCurve _foliageMPCSubsurfaceColorIntensityCurve;                      // 0x0C10 (size: 0x88)
    class UMaterialParameterCollection* _wetnessMPC;                                  // 0x0C98 (size: 0x8)
    FRuntimeFloatCurve _wetnessMPCEmissiveIntensityCurve;                             // 0x0CA0 (size: 0x88)
    class UMaterialParameterCollection* _particlesMPC;                                // 0x0D28 (size: 0x8)
    FRuntimeCurveLinearColor _particlesMPCGlobalParticlesColorCurve;                  // 0x0D30 (size: 0x208)
    float _baseAirTemperature;                                                        // 0x0F38 (size: 0x4)
    FFloatInterval _baseAirTemperatureRange;                                          // 0x0F3C (size: 0x8)
    float _airTemperatureHeightModifier;                                              // 0x0F44 (size: 0x4)
    float _waterTemperature;                                                          // 0x0F48 (size: 0x4)
    FFloatInterval _waterTemperatureRange;                                            // 0x0F4C (size: 0x8)
    float _waterTemperatureInterpSpeed;                                               // 0x0F54 (size: 0x4)
    float _waterTemperatureHeightModifier;                                            // 0x0F58 (size: 0x4)
    float _temperatureDifferenceBetweenShadeAndOnSun;                                 // 0x0F5C (size: 0x4)
    FRuntimeFloatCurve _waterEvaporationRate;                                         // 0x0F60 (size: 0x88)
    float _airRelativeHumidity;                                                       // 0x0FE8 (size: 0x4)
    class UWindDirectionalSourceComponent* _windSourceComponent;                      // 0x0FF0 (size: 0x8)
    float _windAzimuth;                                                               // 0x0FF8 (size: 0x4)
    float _windIntensity;                                                             // 0x0FFC (size: 0x4)
    float _windAzimuthForWaves;                                                       // 0x1000 (size: 0x4)
    float _windIntensityForWaves;                                                     // 0x1004 (size: 0x4)
    float _maxWindSpeedKph;                                                           // 0x1008 (size: 0x4)
    class UExponentialHeightFogComponent* _heightFog;                                 // 0x1010 (size: 0x8)
    float _fogDensity;                                                                // 0x1018 (size: 0x4)
    float _fogFalloff;                                                                // 0x101C (size: 0x4)
    float _fogHeightOffset;                                                           // 0x1020 (size: 0x4)
    FLinearColor _fogBaseInscatteringColor;                                           // 0x1024 (size: 0x10)
    FLinearColor _fogBaseDirectionalInscatteringColor;                                // 0x1034 (size: 0x10)
    class UChildActorComponent* _postProcessVolume;                                   // 0x1048 (size: 0x8)
    FRuntimeFloatCurve _exposureMinBrightness;                                        // 0x1050 (size: 0x88)
    FRuntimeFloatCurve _exposureMaxBrightness;                                        // 0x10D8 (size: 0x88)
    FRuntimeFloatCurve _exposureSpeedUp;                                              // 0x1160 (size: 0x88)
    FRuntimeFloatCurve _exposureSpeedDown;                                            // 0x11E8 (size: 0x88)
    bool _applyAmbientOcclusionSettings;                                              // 0x1270 (size: 0x1)
    FAmbientOcclusionPostProcessSettings _ambientOcclusionPostProcessSettings;        // 0x1274 (size: 0x38)
    FMultistageRandomRoll _windAzimuthRandom;                                         // 0x12B0 (size: 0x68)
    FMultistageRandomRoll _windIntensityRandom;                                       // 0x1318 (size: 0x68)
    FMultistageRandomRoll _cirrostratusCoverageRandom;                                // 0x1380 (size: 0x68)
    FMultistageRandomRoll _cumulonimbusCoverageRandom;                                // 0x13E8 (size: 0x68)
    FMultistageRandomRoll _nimbostratusCoverageRandom;                                // 0x1450 (size: 0x68)
    FRuntimeFloatCurve _baseAirTemperatureVsTimeOfDay;                                // 0x14B8 (size: 0x88)
    FRuntimeFloatCurve _fogDensityVsSunIntensity;                                     // 0x1540 (size: 0x88)
    float _fogDensityMultiplierWhenRaining;                                           // 0x15C8 (size: 0x4)
    float _fogDensityInterpSpeed;                                                     // 0x15CC (size: 0x4)
    float _autoSaveInterval;                                                          // 0x15D0 (size: 0x4)
    bool _shouldSerializeState;                                                       // 0x15D8 (size: 0x1)
    float _sendReplicatedStateSnapshotInterval;                                       // 0x15DC (size: 0x4)
    float _nighttimeDarkness;                                                         // 0x1604 (size: 0x4)

    void UnregisterWeatherMask(class UPrimitiveComponent* WeatherMaskComponent);
    void RegisterWeatherMask(class UPrimitiveComponent* WeatherMaskComponent);
    void OnRep_NighttimeDarkness();
    void NetMulticast_SendStateSnapshot(const FWeatherReplicatedStateSnapshot& Snapshot);
    void NetMulticast_ResetStateSnapshots(const FWeatherReplicatedStateSnapshot& Snapshot);
}; // Size: 0x16C0

class AWetnessManager : public AActor
{
    int32 MaxNumberOfActiveWettables;                                                 // 0x0220 (size: 0x4)
    float MaxWettableLifeTime;                                                        // 0x0224 (size: 0x4)
    float WeatherAndWettableObjectParametersUpdateInterval;                           // 0x0228 (size: 0x4)
    class UCurveFloat* WettingRateFromRainVsRainIntensity;                            // 0x0230 (size: 0x8)
    float WettingRateFromWaterImmersion;                                              // 0x0238 (size: 0x4)
    float WettingRateFromWetSurfaces;                                                 // 0x023C (size: 0x4)
    float DryingRate;                                                                 // 0x0240 (size: 0x4)
    class UCurveFloat* DryingRateModifierVsTemperature;                               // 0x0248 (size: 0x8)
    class UCurveFloat* DryingRateModifierVsRelativeHumidity;                          // 0x0250 (size: 0x8)
    float AirTemperatureModifierWhenNotExposedToSunlight;                             // 0x0258 (size: 0x4)

}; // Size: 0x270

class AWheelBarrow : public AVehicleBase
{
    float _driverCapsuleMaxDepenetrationVelocity;                                     // 0x1308 (size: 0x4)
    FVector _driverCapsuleRelativeLocation;                                           // 0x130C (size: 0xC)
    float _driverCapsuleMass;                                                         // 0x1318 (size: 0x4)
    float _driverCapsuleLinearDamping;                                                // 0x131C (size: 0x4)
    float _driverCapsuleAngularDamping;                                               // 0x1320 (size: 0x4)
    FVector _driverCapsuleConstraintRelativeLocation;                                 // 0x1324 (size: 0xC)
    float _driverCapsuleConstraintSwingLimit;                                         // 0x1330 (size: 0x4)
    float _driverCapsuleConstraintTwistLimit;                                         // 0x1334 (size: 0x4)
    FTransform _driverTransformRelativeToCapsule;                                     // 0x1340 (size: 0x30)
    FRuntimeFloatCurve _driverActionDifficultyVsSpeed;                                // 0x1370 (size: 0x88)
    FRuntimeFloatCurve _driverActionDifficultyVsSpeedWhenLimping;                     // 0x13F8 (size: 0x88)
    FRuntimeFloatCurve _driverBaseConstitutionChangeRateModifierVsSpeed;              // 0x1480 (size: 0x88)
    FRuntimeFloatCurve _driverBaseConstitutionChangeRateModifierVsSpeedWhenLimping;   // 0x1508 (size: 0x88)
    FRuntimeFloatCurve _driverStrengthGainSpeedInfluenceVsSpeed;                      // 0x1590 (size: 0x88)
    FRuntimeFloatCurve _driverStrengthGainSpeedInfluenceVsSpeedWhenLimping;           // 0x1618 (size: 0x88)
    FFloatInterval _loadModifierInterpedWithDriverStrength;                           // 0x16A0 (size: 0x8)
    FWheelBarrowParametersPerMovementPace _parametersPerMovementPace;                 // 0x16A8 (size: 0x60)
    FFloatInterval _maxSpeedModifierInterpedWithDriverDexterity;                      // 0x1708 (size: 0x8)
    FRuntimeFloatCurve _weightLoadFactorVsFloorSlopeAngle;                            // 0x1710 (size: 0x88)
    float _forwardDriveForceMagnitude;                                                // 0x1798 (size: 0x4)
    float _reverseDriveForceMagnitude;                                                // 0x179C (size: 0x4)
    float _steerForceMagnitude;                                                       // 0x17A0 (size: 0x4)
    float _steerForceMagnitudeWhenLimping;                                            // 0x17A4 (size: 0x4)
    float _steerRollTorqueMagnitude;                                                  // 0x17A8 (size: 0x4)
    float _meshBrakeForceScale;                                                       // 0x17AC (size: 0x4)
    float _meshBrakeForceMagnitudeWhenCloseToMaxSpeed;                                // 0x17B0 (size: 0x4)
    float _meshSidewaysBrakeForceScale;                                               // 0x17B4 (size: 0x4)
    float _driverCapsuleBrakeForceScale;                                              // 0x17B8 (size: 0x4)
    float _driverCapsuleBrakeForceMagnitudeWhenCloseToMaxSpeed;                       // 0x17BC (size: 0x4)
    float _driverCapsuleSidewaysBrakeForceScale;                                      // 0x17C0 (size: 0x4)
    float _physicsMaterialFrictionWhenDriven;                                         // 0x17C4 (size: 0x4)
    float _physicsMaterialRestitutionWhenDriven;                                      // 0x17C8 (size: 0x4)
    bool _stickyFrictionEnabled;                                                      // 0x17CC (size: 0x1)
    float _stickyFrictionSpeedThreshold;                                              // 0x17D0 (size: 0x4)
    float _stickyFriction;                                                            // 0x17D4 (size: 0x4)
    float _healthDrainPerSpeed;                                                       // 0x17D8 (size: 0x4)
    float _healthDrainPerLoad;                                                        // 0x17DC (size: 0x4)
    float _healthDrainUpdateInterval;                                                 // 0x17E0 (size: 0x4)
    float _speedThresholdToEvictAllMountees;                                          // 0x17E8 (size: 0x4)
    float _vertSpeedThresholdToEvictAllMountees;                                      // 0x17EC (size: 0x4)
    class UAkAudioEvent* _startedMovingAudioEvent;                                    // 0x17F0 (size: 0x8)
    class UAkAudioEvent* _stoppedMovingAudioEvent;                                    // 0x17F8 (size: 0x8)
    float _sendStateFrequency;                                                        // 0x1804 (size: 0x4)
    class UPhysicsConstraintComponent* _driverPhysicsConstraintComponent;             // 0x1808 (size: 0x8)
    class UPhysicalMaterial* _physicsMaterialWhenDriven;                              // 0x1818 (size: 0x8)
    class UWheelBarrowDriverCapsuleComponent* _driverPhysicsCapsuleComponent;         // 0x19C8 (size: 0x8)
    TArray<TWeakObjectPtr<UVehicleAttachment_Wheel>> _attachedWheels;                 // 0x19D0 (size: 0x10)
    class UStaticMeshComponent* _wheelMesh;                                           // 0x1A20 (size: 0x8)

    class UWheelBarrowDriverCapsuleComponent* GetDriverPhysicsCapsuleComponent();
}; // Size: 0x1A40

class AWindVane : public AActor
{
    class UStaticMeshComponent* _column;                                              // 0x0220 (size: 0x8)
    class UStaticMeshComponent* _body;                                                // 0x0228 (size: 0x8)
    class UStaticMeshComponent* _propeller;                                           // 0x0230 (size: 0x8)
    float _bodyRotationRate;                                                          // 0x0238 (size: 0x4)
    float _propellerSpinRate;                                                         // 0x023C (size: 0x4)
    FName _rotationRateRTPC;                                                          // 0x0240 (size: 0x8)

}; // Size: 0x250

class AWorldEvent : public AActor
{
    FVector Location;                                                                 // 0x0220 (size: 0xC)
    float Radius;                                                                     // 0x022C (size: 0x4)
    class UTexture* IconTexture;                                                      // 0x0230 (size: 0x8)

    void StartEvent();
}; // Size: 0x248

class AWorldEventManager : public AActor
{
    TArray<class TSubclassOf<AWorldEvent>> EventTypes;                                // 0x0220 (size: 0x10)
    float TimeBetweenEventsMin;                                                       // 0x0230 (size: 0x4)
    float TimeBetweenEventsMax;                                                       // 0x0234 (size: 0x4)
    TArray<class AWorldEvent*> _events;                                               // 0x0240 (size: 0x10)

}; // Size: 0x250

class AWorldItemSpawner : public AActor
{
    class UWorldItemSpawnerComponent* _spawnerComponent;                              // 0x0220 (size: 0x8)

}; // Size: 0x228

class AWristwatch : public AActor
{
    class USkeletalMeshComponent* SkeletalMesh;                                       // 0x0220 (size: 0x8)
    class UTextureRenderTarget2D* TextRenderTarget;                                   // 0x0228 (size: 0x8)
    class UFont* TimeFont;                                                            // 0x0230 (size: 0x8)
    float TextScaleX;                                                                 // 0x0238 (size: 0x4)
    float TextScaleY;                                                                 // 0x023C (size: 0x4)
    class UAkAudioEvent* AlarmSound;                                                  // 0x0240 (size: 0x8)
    class USkeletalMesh* _maleWristwatchMesh;                                         // 0x0248 (size: 0x8)
    class USkeletalMesh* _femaleWristwatchMesh;                                       // 0x0250 (size: 0x8)

    void SetDisplayBrightness(float Value);
}; // Size: 0x2B8

class AZombie2 : public AConZCharacter
{
    bool _enableBaseInteraction;                                                      // 0x0830 (size: 0x1)
    class UNavigationInvokerComponent* _navigationInvokerComponent;                   // 0x0838 (size: 0x8)
    class UHitReactComponent* _hitReactComponent;                                     // 0x0840 (size: 0x8)
    class UBaseInteractionComponent* _baseInteractionComponent;                       // 0x0848 (size: 0x8)
    class UEntityOverlapDetectionComponent* _trapOverlapDetection;                    // 0x0850 (size: 0x8)
    TArray<FZombieMeshVariation2> _meshVariations;                                    // 0x0858 (size: 0x10)
    TArray<FZombieRelaxedStanceVariation2> _relaxedStanceVariations;                  // 0x0868 (size: 0x10)
    TArray<FZombieCombatStanceVariation2> _combatStanceVariations;                    // 0x0878 (size: 0x10)
    FZombieTurnMontageDescription _turnMontageDescriptions;                           // 0x0888 (size: 0xA0)
    TArray<class UAnimMontage*> _intimidateMontages;                                  // 0x0928 (size: 0x10)
    TArray<class UAnimMontage*> _agitatedScreamMontages;                              // 0x0938 (size: 0x10)
    TArray<FZombieAttackDescription> _attacks;                                        // 0x0948 (size: 0x10)
    FGameplayTag _hitReactType;                                                       // 0x0958 (size: 0x8)
    float _explosionDamageMultiplier;                                                 // 0x0960 (size: 0x4)
    float _defaultRagdollHitImpulseIntensity;                                         // 0x0964 (size: 0x4)
    float _ragdollHitImpulseIntensityCollisionPointEventMultiplier;                   // 0x0968 (size: 0x4)
    float _ragdollHitImpulseUpVectorBias;                                             // 0x096C (size: 0x4)
    float _ragdollExplosionHitImpulseIntensity;                                       // 0x0970 (size: 0x4)
    float _minDynamicMovementBaseSpeedForRagdoll;                                     // 0x0974 (size: 0x4)
    float _eyeViewPointOffset;                                                        // 0x0978 (size: 0x4)
    FName _centralBone;                                                               // 0x097C (size: 0x8)
    float _collisionDamageMultiplierPerBodyPart;                                      // 0x0984 (size: 0x30)
    float _receivedDamageComboCooldown;                                               // 0x09B4 (size: 0x4)
    float _receivedMeleeHitComboCooldown;                                             // 0x09B8 (size: 0x4)
    float _inflictedMeleeHitComboCooldown;                                            // 0x09BC (size: 0x4)
    float _minRagdollRecoveryTimeAfterKnockout;                                       // 0x09C0 (size: 0x4)
    float _maxRagdollRecoveryTimeAfterKnockout;                                       // 0x09C4 (size: 0x4)
    float _minLandingImpactSpeedForDamage;                                            // 0x09C8 (size: 0x4)
    float _landingDamagePerImpactSpeed;                                               // 0x09CC (size: 0x4)
    float _landingImpactSpeedForRagdoll;                                              // 0x09D0 (size: 0x4)
    float _minRagdollRecoveryTimeAfterLanding;                                        // 0x09D4 (size: 0x4)
    float _maxRagdollRecoveryTimeAfterLanding;                                        // 0x09D8 (size: 0x4)
    class ULandingEffects* _landingEffects;                                           // 0x09E0 (size: 0x8)
    bool _canEverBeSearched;                                                          // 0x09E8 (size: 0x1)
    bool _shouldGoToRagdollOnDeath;                                                   // 0x09E9 (size: 0x1)
    class UParticleSystem* _deathParticles;                                           // 0x09F0 (size: 0x8)
    FTransform _deathParticlesRelativeTransform;                                      // 0x0A00 (size: 0x30)
    float _corpseSearchDuration;                                                      // 0x0A30 (size: 0x4)
    float _corpseMaxLifeTimeInMinutes;                                                // 0x0A34 (size: 0x4)
    float _destroyCorpseTimerInterval;                                                // 0x0A38 (size: 0x4)
    float _minDistanceToPlayerPawnOrSpectatorToDestroyCorpse;                         // 0x0A3C (size: 0x4)
    uint32 _packedZombieVariationIndices;                                             // 0x0A40 (size: 0x4)
    float _hitPoints;                                                                 // 0x0A44 (size: 0x4)
    float _health;                                                                    // 0x0A4C (size: 0x4)
    float _inflictedMeleeDamageMultiplier;                                            // 0x0A50 (size: 0x4)
    bool _isSearched;                                                                 // 0x0A54 (size: 0x1)
    EZombieStance _stance;                                                            // 0x0A56 (size: 0x1)
    TWeakObjectPtr<class APawn> _foe;                                                 // 0x0A58 (size: 0x8)
    float _inflictedDamageMultiplierConfig;                                           // 0x0AD8 (size: 0x4)
    EBodyPart _fatalBodyPartHit;                                                      // 0x0ADC (size: 0x1)
    float _drownDamageCycleLength;                                                    // 0x0AE0 (size: 0x4)
    float _drownDamagePerCycle;                                                       // 0x0AE4 (size: 0x4)
    TArray<FZombieSleepingAnimationData> _sleepingAnimationsData;                     // 0x0AF0 (size: 0x10)
    TArray<FWindowClimbingAnimationInfo> _windowClimbingAnimations;                   // 0x0B00 (size: 0x10)
    int32 _sleepingAnimationIndex;                                                    // 0x0B10 (size: 0x4)
    TArray<class UAnimMontage*> _doorDestructionAnimations;                           // 0x0B18 (size: 0x10)
    float _animationDistanceToDoor;                                                   // 0x0B28 (size: 0x4)
    FName _doorDestructionNotifyName;                                                 // 0x0B2C (size: 0x8)
    uint8 _netUpdateFrequency;                                                        // 0x0B34 (size: 0x5)

    float StartAttack(const class APawn* foe);
    void SetStance(EZombieStance Value);
    void SetFoe(class APawn* Value);
    void Server_StartAttack(int32 attackDescriptionIndex);
    void Server_SetStance(EZombieStance Value);
    void Server_PlayTurnMontage(EZombieTurnMontage turnMontage, float turnAngle);
    void Server_PlayMontage(class UAnimMontage* Montage);
    void RecoverFromRagdoll();
    void OnRep_Stance(EZombieStance oldValue);
    void OnRep_IsSearched(bool oldValue);
    void OnRep_Health(float oldValue);
    void NetMulticast_StopOpenDoorAnimation();
    void NetMulticast_StartAttack(int32 attackDescriptionIndex);
    void NetMulticast_PlayTurnMontage(EZombieTurnMontage turnMontage, float turnAngle);
    void NetMulticast_PlaySound(class UAkAudioEvent* Sound);
    void NetMulticast_PlayMontage(class UAnimMontage* Montage);
    void NetMulticast_PlayDoorDestructionMontage(int32 Index);
    void NetMulticast_HandleLanded(const FVector& impactVelocity, const FHitResult& HitResult);
    bool IsRagdollAtRest();
    bool IsInRagdoll();
    bool IsAttacking();
    void GoToRagdoll(const FZombieRagdollAutoRecovery& autoRecovery, ERagdollSpawnType SpawnType, float impulseIntensity, FVector Location, FVector Direction, FName Bone);
    class UZombieSoundComponent2* GetZombieSoundComponent();
    class UZombieMovementComponent2* GetZombieMovement();
    EZombieStance GetStance();
    float GetMaxHealth();
    class UHitReactComponent* GetHitReactComponent();
    float GetHealthRatio();
    float GetHealth();
    class APawn* GetFoe();
    FRotator GetAimOffset();
    bool CanStartAttack();
    void BaseInteractionComponent_OnBaseInteractionEvent(class UBaseInteractionComponent* Component, const FBaseInteractionEvent& BaseInteractionEvent);
}; // Size: 0xB40

class AZombieAIController2 : public AConZAIController
{
    class UAISenseConfig_Sight* _lyingSightSenseConfig;                               // 0x0450 (size: 0x8)
    class UAISenseConfig_Hearing* _lyingHearingSenseConfig;                           // 0x0458 (size: 0x8)
    class UAISenseConfig_Damage* _lyingDamageSenseConfig;                             // 0x0460 (size: 0x8)
    float _wakeUpThreshold;                                                           // 0x0468 (size: 0x4)
    float _sleepingAccumulatedNoiseDropRate;                                          // 0x046C (size: 0x4)
    float _playerDistanceForInstantWakeUp;                                            // 0x0474 (size: 0x4)
    float _playerHeightDifferenceForInstantWakeUp;                                    // 0x0478 (size: 0x4)
    TMap<FName, float> _noiseAccumulationMultiplierPerNoiseTag;                       // 0x0480 (size: 0x50)
    float _timeUntilMovementComponentIsDeactivated;                                   // 0x04D0 (size: 0x4)
    float _stateMachineTickIntervalWhenInRelaxedState;                                // 0x04D8 (size: 0x4)
    bool _shouldWander;                                                               // 0x04DC (size: 0x1)
    bool _shouldWanderAroundWanderOrigin;                                             // 0x04DD (size: 0x1)
    float _maxWanderingRadius;                                                        // 0x04E0 (size: 0x4)
    float _minTimeToRestBeforeWandering;                                              // 0x04E4 (size: 0x4)
    float _maxTimeToRestBeforeWandering;                                              // 0x04E8 (size: 0x4)
    bool _shouldBecomeAlertedBySight;                                                 // 0x04EC (size: 0x1)
    float _minLineOfSightDurationToBecomeAlerted;                                     // 0x04F0 (size: 0x4)
    float _maxLineOfSightDurationToBecomeAlerted;                                     // 0x04F4 (size: 0x4)
    bool _shouldBecomeAlertedByHearing;                                               // 0x04F8 (size: 0x1)
    float _minDelayBeforeBecomingAlertedByHearing;                                    // 0x04FC (size: 0x4)
    float _maxDelayBeforeBecomingAlertedByHearing;                                    // 0x0500 (size: 0x4)
    float _timeBeforeDestinationIsConsideredUnreachable;                              // 0x0504 (size: 0x4)
    float _livelyRelaxedMovementDelay;                                                // 0x0508 (size: 0x4)
    float _timeBeforeLivelyRelaxedStateIsForcefullyEnded;                             // 0x050C (size: 0x4)
    class UAISenseConfig_Sight* _relaxedIdleSightSenseConfig;                         // 0x0510 (size: 0x8)
    class UAISenseConfig_Hearing* _relaxedIdleHearingSenseConfig;                     // 0x0518 (size: 0x8)
    class UAISenseConfig_Damage* _relaxedIdleDamageSenseConfig;                       // 0x0520 (size: 0x8)
    class UAISenseConfig_Sight* _relaxedWanderSightSenseConfig;                       // 0x0528 (size: 0x8)
    class UAISenseConfig_Hearing* _relaxedWanderHearingSenseConfig;                   // 0x0530 (size: 0x8)
    class UAISenseConfig_Damage* _relaxedWanderDamageSenseConfig;                     // 0x0538 (size: 0x8)
    float _LPCModeRelaxedHearingSenseRangeMultiplier;                                 // 0x0540 (size: 0x4)
    float _stateMachineTickIntervalWhenInAlertedState;                                // 0x0544 (size: 0x4)
    float _minObservingForLineOfSightStartDelay;                                      // 0x0548 (size: 0x4)
    float _maxObservingForLineOfSightStartDelay;                                      // 0x054C (size: 0x4)
    float _minInvestigateStimulusDelay;                                               // 0x0550 (size: 0x4)
    float _maxInvestigateStimulusDelay;                                               // 0x0554 (size: 0x4)
    float _stimulusInvestigationLocationRadius;                                       // 0x0558 (size: 0x4)
    float _minEnterCombatModeDelay;                                                   // 0x055C (size: 0x4)
    float _maxEnterCombatModeDelay;                                                   // 0x0560 (size: 0x4)
    float _distanceAtWhichToIgnoreEnterCombatModeDelay;                               // 0x0564 (size: 0x4)
    class UCurveVector* _observingCurve;                                              // 0x0568 (size: 0x8)
    float _observingCurvePeriod;                                                      // 0x0570 (size: 0x4)
    float _observingCurveMaxYaw;                                                      // 0x0574 (size: 0x4)
    float _observingCurveMaxPitch;                                                    // 0x0578 (size: 0x4)
    class UAISenseConfig_Sight* _alertedSightSenseConfig;                             // 0x0580 (size: 0x8)
    class UAISenseConfig_Hearing* _alertedHearingSenseConfig;                         // 0x0588 (size: 0x8)
    class UAISenseConfig_Damage* _alertedDamageSenseConfig;                           // 0x0590 (size: 0x8)
    float _stateMachineTickIntervalWhenInCombatState;                                 // 0x0598 (size: 0x4)
    bool _shouldAttack;                                                               // 0x059C (size: 0x1)
    bool _shouldBackOffIfTooCloseToFoe;                                               // 0x059D (size: 0x1)
    bool _shouldPredictFoeLocation;                                                   // 0x059E (size: 0x1)
    class UCurveFloat* _foeLocationPredictionStrengthVsDistanceToFoe;                 // 0x05A0 (size: 0x8)
    int32 _minNumConsecutiveInflictedMeleeHitsToIntimidate;                           // 0x05A8 (size: 0x4)
    int32 _maxNumConsecutiveInflictedMeleeHitsToIntimidate;                           // 0x05AC (size: 0x4)
    float _minTimeBeforeFoeIsConsideredUnreachable;                                   // 0x05B0 (size: 0x4)
    float _maxTimeBeforeFoeIsConsideredUnreachable;                                   // 0x05B4 (size: 0x4)
    float _minTimeSinceLastAttackWhileFoeIsInLineOfSightToIntimidate;                 // 0x05B8 (size: 0x4)
    float _maxTimeSinceLastAttackWhileFoeIsInLineOfSightToIntimidate;                 // 0x05BC (size: 0x4)
    float _minSpeedToIgnoreTurnAnimationsDuringCombatMode;                            // 0x05C0 (size: 0x4)
    float _agitatedIntimidateScreamChance;                                            // 0x05C4 (size: 0x4)
    float _zombieFoeDistanceXYToGiveUpBangingOnDoors;                                 // 0x05C8 (size: 0x4)
    float _zombieFoeDistanceZToGiveUpBangingOnDoors;                                  // 0x05CC (size: 0x4)
    float _distanceToMoveAwayFromMountedPlayer;                                       // 0x05D0 (size: 0x4)
    float _zombieAttackMovementMaxSpeed;                                              // 0x05D4 (size: 0x4)
    float _zombieFoeAllowedAttackHeightDifference;                                    // 0x05D8 (size: 0x4)
    bool _useDistanceInTimeCheck;                                                     // 0x05DC (size: 0x1)
    float _maxDistanceForTimeCheck;                                                   // 0x05E0 (size: 0x4)
    float _maxAcceleractionForTimeCheck;                                              // 0x05E4 (size: 0x4)
    float _costOfJumpingInPathLength;                                                 // 0x05E8 (size: 0x4)
    float _minPathPointDistance;                                                      // 0x05EC (size: 0x4)
    float _durationOfBeingObstructedByObstacleBeforeJump;                             // 0x05F0 (size: 0x4)
    FDetectionDelayTimerData _detectionDelayTimerData;                                // 0x05F4 (size: 0x10)
    float _hearingRangeMultiplierIfSpawnedUnderground;                                // 0x0604 (size: 0x4)
    float _forceKeepStimulusAliveTime;                                                // 0x0608 (size: 0x4)
    float _stimulusTrackOwnerPositionInterval;                                        // 0x060C (size: 0x4)
    class AZombie2* _zombie;                                                          // 0x0610 (size: 0x8)
    float _navLinkAcceptanceRadius;                                                   // 0x087C (size: 0x4)

    void SensingComponent_OnActorSensed(const TArray<class AActor*>& actorsPercepted);
    void OnHitReactStateChanged();
    void OnDoorBreakdownInterrupted();
}; // Size: 0x910

class AZombieKamikazeDummyTrap : public ATrapItem
{
    TWeakObjectPtr<class UZombieKamikazeComponent> _owningComponent;                  // 0x0AE0 (size: 0x8)

    void OnRep_OwningComponent();
}; // Size: 0xAF0

class IActorWithRepGraphPolicy_RelevantToSomeConnections : public IInterface
{
}; // Size: 0x28

class IAdminCommandExecutor : public IInterface
{
}; // Size: 0x28

class IBCULockable : public IInterface
{
}; // Size: 0x28

class IBuriable : public IInterface
{
}; // Size: 0x28

class IChoppable : public IInterface
{
}; // Size: 0x28

class IClaimableWhenKilled : public IInterface
{
}; // Size: 0x28

class IConZButton : public IInterface
{
}; // Size: 0x28

class IConZCustomInteractionWidget : public IInterface
{
}; // Size: 0x28

class IConZNoiseListenSubject : public IInterface
{
}; // Size: 0x28

class IConZNoiseListener : public IInterface
{
}; // Size: 0x28

class IConZPlayerPawn : public IInterface
{
}; // Size: 0x28

class IDamageDealer : public IInterface
{
}; // Size: 0x28

class IDamageReceiver : public IInterface
{
}; // Size: 0x28

class IEntitySystemSettingsProvider : public IInterface
{
}; // Size: 0x28

class IFocusableWidgetInterface : public IInterface
{
}; // Size: 0x28

class IFortifiable : public IInterface
{
}; // Size: 0x28

class IGameResourceContainer : public IInterface
{
}; // Size: 0x28

class IHasCustomRadialDamageHandler : public IInterface
{
}; // Size: 0x28

class IHasLadderMarkersInterface : public IInterface
{

    void GetLadderMarkers(TArray<FLadderMarker>& Result);
}; // Size: 0x28

class IHasOwningUser : public IInterface
{
}; // Size: 0x28

class IHasProcessViewRotation : public IInterface
{
}; // Size: 0x28

class IInjectableSubstance : public IInterface
{
}; // Size: 0x28

class IInteractableInterface : public IInterface
{

    void OnHovered(class APrisoner* Prisoner);
    bool IsAbleToInteractWithItem(const class AItem* Item);
    void InteractWithItem(class APlayerController* PlayerController, class AItem* Item, EInteractionType interactionType, const FInteractionData& InteractionData);
    bool Interactable_WantsHealthBarVisible();
    void Interact(class AController* userController, EInteractionType interactionType, const FInteractionData& InteractionData);
    EInteractionState GetStateForInteractionWithItem(const class AItem* Item);
    TArray<FInteractionStruct> GetInteractionsWithItem(const class UObject* User, const class AItem* Item);
    TArray<FInteractionStruct> GetInteractions(const class UObject* User, const FInteractionQueryParameters& Params);
    FText GetInteractionHint(const class UObject* User);
    FText GetInteractableName(const class UObject* User);
    FInteractionStruct GetDefaultInteractionForPrisoner(const class APrisoner* Prisoner, const FInteractionQueryParameters& Params);
    FInteractionStruct GetDefaultInteractionForDrone(const class ADrone* Drone, const FInteractionQueryParameters& Params);
    bool CanInteract(const class AController* userController);
}; // Size: 0x28

class IInteractionObject : public IInterface
{
}; // Size: 0x28

class IInventoryContainer : public IInterface
{
}; // Size: 0x28

class IInventoryNode : public IInterface
{

    void IncrementUIDisplayStateVersion();
    FText GetInventoryNodeName();
    TSoftObjectPtr<UTexture2D> GetInventoryNodeIcon();
    FText GetInventoryNodeDescription();
    bool CanBeEverDropped();
}; // Size: 0x28

class ILockpickable : public IInterface
{

    void OnLockNeutralized(const class APrisoner* Prisoner);
    bool HasLocks();
    bool CanInitiateLockpickingFor(const class APrisoner* Prisoner);
}; // Size: 0x28

class IMeleeInterface : public IInterface
{

    void OnBeingAttackedByMelee(const FAttackedByMeleeData& Data);
    bool CheckMeleeAttackCapsuleCollision(const FCheckMeleeAttackCapsuleCollisionData& Data);
    bool CanHoldBlock();
    bool CanBeAttackedByMelee();
}; // Size: 0x28

class IMountPathBlocker : public IInterface
{
}; // Size: 0x28

class IMountSlot : public IInterface
{
}; // Size: 0x28

class IMountable : public IInterface
{
}; // Size: 0x28

class IMountableVehicleAttachment : public IInterface
{
}; // Size: 0x28

class IMountee : public IInterface
{
}; // Size: 0x28

class IObjectCondition : public IInterface
{
}; // Size: 0x28

class IPaintable : public IInterface
{
}; // Size: 0x28

class IPhysician : public IInterface
{
}; // Size: 0x28

class IPlayableInstrument : public IInterface
{
}; // Size: 0x28

class IPrisonerBodyCondition_BandagesTreatment : public IInterface
{
}; // Size: 0x28

class IPrisonerSubview : public IInterface
{
}; // Size: 0x28

class ISearchableCorpse : public IInterface
{
}; // Size: 0x28

class ISimulatedShooter : public IInterface
{
}; // Size: 0x28

class ISpawnExaminedObjectsInterface : public IInterface
{
}; // Size: 0x28

class ITabButtonInterface : public IConZButton
{
}; // Size: 0x28

class ITeleportComponentOwner : public IInterface
{
}; // Size: 0x28

class ITeleportSubject : public IInterface
{
}; // Size: 0x28

class ITemporaryDisableable : public IInterface
{
}; // Size: 0x28

class ITemporaryDisableablePart : public IInterface
{
}; // Size: 0x28

class ITradeable : public IInterface
{
}; // Size: 0x28

class IValueProviderInteger : public IInterface
{
}; // Size: 0x28

class IValueProviderString : public IInterface
{
}; // Size: 0x28

class IVehicleAttachmentParent : public IInterface
{
}; // Size: 0x28

class IVehicleElectricalDevice : public IInterface
{
}; // Size: 0x28

class IVehicleMountSlot : public IMountSlot
{
}; // Size: 0x28

class IVehicleWithDashboard : public IInterface
{
}; // Size: 0x28

class IVehicleWithDoors : public IInterface
{
}; // Size: 0x28

class IVehicleWithEngineBlock : public IInterface
{
}; // Size: 0x28

class IVehicleWithGearbox : public IInterface
{
}; // Size: 0x28

class IVehicleWithWheels : public IInterface
{
}; // Size: 0x28

class IWeaponHandler : public IInterface
{

    void SetPendingReload(bool Value);
    void SetPendingFire(bool Value);
    void ReloadWeaponInHands();
    void ReloadWeapon(class AWeapon* Weapon, const FWeaponReloadData& reloadData);
    bool IsFireShotAuthority();
    bool HasInfiniteAmmo();
    EPrisonerGroundStance GetStance2();
    bool GetPendingReload();
    bool GetPendingFire();
}; // Size: 0x28

class IWettable : public IInterface
{

    void SetWaterWeight(float Value);
    float GetWaterWeight();
    float GetMaxPossibleWaterWeight();
}; // Size: 0x28

class UAIManager : public UObject
{
    FAITeamAttitudeData _teamAttitudes;                                               // 0x0040 (size: 0x16B)

}; // Size: 0x1B0

class UAIStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UATMReplenishableResourceComponent : public UReplenishableResourceBaseComponent
{
}; // Size: 0x640

class UAbandonedBunkerActivationRegistry : public UActorComponent
{
}; // Size: 0x118

class UAbandonedBunkerConnectionSetup : public UDataAsset
{
    TArray<FAbandonedBunkerConnectionBinding> Bindings;                               // 0x0030 (size: 0x10)

}; // Size: 0x40

class UAbandonedBunkerDoorComponent : public UStaticMeshComponent
{
    class ADoor* _outerDoor;                                                          // 0x0500 (size: 0x8)
    EDoorOpenMethod _doorOpenMethod;                                                  // 0x0508 (size: 0x1)
    int32 _doorManualOpenMethod;                                                      // 0x050C (size: 0x4)
    bool _canAlwaysBeOpenedDuringDay;                                                 // 0x0510 (size: 0x1)
    FVector _directionTowardsInside;                                                  // 0x0514 (size: 0xC)
    bool _canAlwaysBeOpenedFromInside;                                                // 0x0520 (size: 0x1)
    FGameplayTag _roomId;                                                             // 0x0524 (size: 0x8)
    float _manualOpenActionMovementAcceptanceRadius;                                  // 0x052C (size: 0x4)
    float _manualOpenActionBaseDuration;                                              // 0x0530 (size: 0x4)
    float _manualOpenDurationReductionPerStrengthPoint;                               // 0x0534 (size: 0x4)
    float _manualOpenMinimumDuration;                                                 // 0x0538 (size: 0x4)
    float _forceOpenCrowbarDamage;                                                    // 0x053C (size: 0x4)
    float _manualOpenAutoCloseDelay;                                                  // 0x0540 (size: 0x4)
    TSubclassOf<class AMinigame> _hackingMinigameClass;                               // 0x0548 (size: 0x8)
    TSubclassOf<class UMinigameConfiguration> _hackingMinigameConfiguration;          // 0x0550 (size: 0x8)

    void Door_OnDoorOpened();
}; // Size: 0x580

class UAbandonedBunkerLightComponent : public UActorComponent
{
    EBunkerLightControlType _controlType;                                             // 0x00B0 (size: 0x1)
    float _blinkPeriodWhenLowPower;                                                   // 0x00B4 (size: 0x4)
    bool _autoFindLightComponents;                                                    // 0x00B8 (size: 0x1)
    TArray<class ULightComponent*> _lightComponents;                                  // 0x00C0 (size: 0x10)
    bool _autoFindMeshComponents;                                                     // 0x00E0 (size: 0x1)
    TArray<class UStaticMeshComponent*> _meshComponents;                              // 0x00E8 (size: 0x10)
    bool _autoFindParticleComponents;                                                 // 0x0108 (size: 0x1)
    TArray<class UParticleSystemComponent*> _particleComponents;                      // 0x0110 (size: 0x10)
    bool _autoFindNiagaraComponents;                                                  // 0x0120 (size: 0x1)
    TArray<class UNiagaraComponent*> _niagaraComponents;                              // 0x0128 (size: 0x10)
    bool _autoFindAudioComponents;                                                    // 0x0138 (size: 0x1)
    TArray<class UAkComponent*> _audioComponents;                                     // 0x0140 (size: 0x10)
    class UAkAudioEvent* _audioEventStart;                                            // 0x0150 (size: 0x8)
    class UAkAudioEvent* _audioEventStop;                                             // 0x0158 (size: 0x8)

}; // Size: 0x170

class UAbandonedBunkerManagerSetup : public UEntitySetup
{
}; // Size: 0x80

class UAbandonedBunkerZoneBoxComponent : public UBoxComponent
{
    FGameplayTag _roomId;                                                             // 0x0480 (size: 0x8)

}; // Size: 0x490

class UAbandonedBunkerZoneCommonData : public UDataAsset
{
    float NoiseAccumulationLevels;                                                    // 0x0030 (size: 0xC)
    float NoiseAccumulationLevelsExtraPerPlayer;                                      // 0x003C (size: 0xC)
    float NoiseLoudnessThreshold;                                                     // 0x0048 (size: 0x4)
    float AccumulatedNoiseCap;                                                        // 0x004C (size: 0x4)
    float RoomAlarmNoiseIncreasePerTick;                                              // 0x0050 (size: 0x4)
    float RoomAlarmNoiseIncreaseTickRate;                                             // 0x0054 (size: 0x4)
    TMap<FName, float> NoiseAccumulationMultiplierPerNoiseTag;                        // 0x0058 (size: 0x50)
    float TimeToReleaseExtraResources;                                                // 0x00A8 (size: 0x4)
    float TimeForNoiseLevelToStartDropping;                                           // 0x00AC (size: 0x4)
    float TimeForNoiseLevelAfterEnemyActivationToStartDropping;                       // 0x00B0 (size: 0x4)
    float NoiseDropRatePerSecond;                                                     // 0x00B4 (size: 0x4)
    float TimeForPlayerNoiseToStartDropping;                                          // 0x00B8 (size: 0x4)
    float PlayerNoiseDropRatePerSecond;                                               // 0x00BC (size: 0x4)
    float BunkerComponentResetTime;                                                   // 0x00C0 (size: 0x4)
    float CommotionEventCooldownMin;                                                  // 0x00C4 (size: 0x4)
    float CommotionEventCooldownMax;                                                  // 0x00C8 (size: 0x4)
    float RazorSpawnPointEnemyActivationDistance;                                     // 0x00CC (size: 0x4)
    FFloatRange EnemyActivationEventCooldownRange;                                    // 0x00D0 (size: 0x10)
    FFloatRange EnemyActivationEventRespawnCooldownRange;                             // 0x00E0 (size: 0x10)
    float TimeAfterReturningFromEnemyActivationStateBeforeSpawnCooldownResets;        // 0x00F0 (size: 0x4)
    TSoftClassPtr<ARazor> RazorClass;                                                 // 0x00F8 (size: 0x28)
    TSoftClassPtr<AActor> BrennerClass;                                               // 0x0120 (size: 0x28)
    FInt32Range NaturalRazorLimitRange;                                               // 0x0148 (size: 0x10)
    int32 NaturalRazorLimitPlayerCap;                                                 // 0x0158 (size: 0x4)
    int32 ExtraNaturalRazorsPerPlayer;                                                // 0x015C (size: 0x4)
    float MinDistanceBetweenRazorsWhenSpawning;                                       // 0x0160 (size: 0x4)
    FInt32Range VentilationRazorLimitRange;                                           // 0x0164 (size: 0x10)
    FInt32Interval VentilationRazorsSpawnedPerAlarmEvent;                             // 0x0174 (size: 0x8)
    int32 VentilationRazorLimitPlayerCap;                                             // 0x017C (size: 0x4)
    int32 ExtraVentilationRazorsPerPlayer;                                            // 0x0180 (size: 0x4)
    int32 MaxRazorCorpsesPerZone;                                                     // 0x0184 (size: 0x4)
    float RazorCorpseRemovalCheckInterval;                                            // 0x0188 (size: 0x4)
    float TimeToNormalRazorSpawnRazorRespawn;                                         // 0x018C (size: 0x4)
    TSubclassOf<class UEncounterSpawnAirborneCharacters> DropshipSentryEncounterClass; // 0x0190 (size: 0x8)
    TSubclassOf<class AActor> SentryNavigationInvokerClass;                           // 0x0198 (size: 0x8)
    float EncounterSpawnChanceUponAlarmTrigger;                                       // 0x01A0 (size: 0x4)
    float MinDistanceBetweenEnemyAndPlayerWhenSpawning;                               // 0x01A4 (size: 0x4)
    FGameplayTag VaultRoomId;                                                         // 0x01A8 (size: 0x8)

}; // Size: 0x1B0

class UAbandonedBunkerZoneManagerComponent : public USceneComponent
{
    TArray<FTransform> _razorNormalSpawnTransforms;                                   // 0x0208 (size: 0x10)
    TArray<class ARazorSpawnPoint*> _razorSpawnPoints;                                // 0x0218 (size: 0x10)
    TArray<FTransform> _brennerSpawnPoints;                                           // 0x0228 (size: 0x10)
    FVector _dropshipSentryEncounterSpawnLocation;                                    // 0x0238 (size: 0xC)
    float _sentryNavigationInvokerGenerationRadius;                                   // 0x0244 (size: 0x4)

}; // Size: 0x250

class UActionProgressWidget : public UUserWidget
{
    FActionProgressWidgetActionProgressFinishedEvent ActionProgressFinishedEvent;     // 0x0268 (size: 0x10)
    void OnActionProgressFinishedEvent();
    FActionProgressWidgetActionProgressCancelledEvent ActionProgressCancelledEvent;   // 0x0278 (size: 0x10)
    void OnActionProgressCancelledEvent();
    bool CanCancel;                                                                   // 0x0288 (size: 0x1)
    float _currentTime;                                                               // 0x0294 (size: 0x4)
    float _duration;                                                                  // 0x0298 (size: 0x4)
    bool _manualMode;                                                                 // 0x029C (size: 0x1)
    class UImage* Progress;                                                           // 0x02A0 (size: 0x8)
    class UImage* Cancel;                                                             // 0x02A8 (size: 0x8)
    class UTextBlock* PercentageText;                                                 // 0x02B0 (size: 0x8)
    class UTextBlock* Percent;                                                        // 0x02B8 (size: 0x8)

    void UnPauseProgress();
    void SetProgress(float Progress);
    void PauseProgress();
    void OnActionProgressFinishedEvent__DelegateSignature();
    void OnActionProgressCancelledEvent__DelegateSignature();
    void ExecuteAction();
    void CancelAction();
}; // Size: 0x2E0

class UActorStatics : public UBlueprintFunctionLibrary
{

    class UActorComponent* GetActorComponentByName(const class AActor* Actor, const FName& Name);
    FVector GetActorBoundsCenter(const class AActor* Actor, bool onlyCollidingComponents);
}; // Size: 0x28

class UAdjustableSeparator : public UUserWidget
{
    class USizeBox* _slotSizeBox;                                                     // 0x0268 (size: 0x8)
    class UNamedSlot* _divider;                                                       // 0x0270 (size: 0x8)
    float _slotMinHeight;                                                             // 0x0278 (size: 0x4)
    float _slotMaxHeight;                                                             // 0x027C (size: 0x4)

}; // Size: 0x288

class UAdminCommand : public UObject
{
    FString _verb;                                                                    // 0x0028 (size: 0x10)
    TArray<FAdminCommandArgumentDescription> _argumentDescriptions;                   // 0x0038 (size: 0x10)
    int32 _numberOfRequiredArguments;                                                 // 0x0048 (size: 0x4)
    int32 _numberOfRepeatingArguments;                                                // 0x004C (size: 0x4)
    bool _isEnabled;                                                                  // 0x0050 (size: 0x1)
    bool _isEnabledInShippingBuild;                                                   // 0x0051 (size: 0x1)
    EExecutorStatus _requiredExecutorLevel;                                           // 0x0052 (size: 0x1)
    bool _shouldExecuteOnServer;                                                      // 0x0053 (size: 0x1)
    bool _shouldExecuteOnClient;                                                      // 0x0054 (size: 0x1)
    bool _shouldDisableSingleplayerAchievementsIfExecuted;                            // 0x0055 (size: 0x1)
    bool _hasCooldown;                                                                // 0x0056 (size: 0x1)
    float _cooldown;                                                                  // 0x0058 (size: 0x4)
    FText _description;                                                               // 0x0060 (size: 0x18)

}; // Size: 0xA0

class UAdminCommandArgumentCompletion : public UObject
{
    bool _canCompletionValuesBeCached;                                                // 0x0028 (size: 0x1)

    void GetCompletionValues(TArray<FString>& Result);
}; // Size: 0x38

class UAdminCommandArgumentCompletion_Achievements : public UAdminCommandArgumentCompletion
{
}; // Size: 0x38

class UAdminCommandArgumentCompletion_Constant : public UAdminCommandArgumentCompletion
{
    TArray<FString> _completionValues;                                                // 0x0038 (size: 0x10)

}; // Size: 0x48

class UAdminCommandArgumentCompletion_Enum : public UAdminCommandArgumentCompletion
{
    FName _enum;                                                                      // 0x0038 (size: 0x8)
    bool _excludeNoneEnumerator;                                                      // 0x0040 (size: 0x1)
    bool _excludeCountEnumerator;                                                     // 0x0041 (size: 0x1)
    bool _excludeAutoGeneratedEnumerator;                                             // 0x0042 (size: 0x1)
    TSet<FName> _additionalEnumeratorsToExclude;                                      // 0x0048 (size: 0x50)

}; // Size: 0x98

class UAdminCommandArgumentCompletion_Player : public UAdminCommandArgumentCompletion
{
}; // Size: 0x38

class UAdminCommandArgumentCompletion_PrimaryAsset : public UAdminCommandArgumentCompletion
{
    FPrimaryAssetType _primaryAssetType;                                              // 0x0038 (size: 0x8)
    TSet<FPrimaryAssetId> _primaryAssetsToExclude;                                    // 0x0040 (size: 0x50)

}; // Size: 0x90

class UAdminCommandArgumentCompletion_QuestSetup : public UAdminCommandArgumentCompletion
{
}; // Size: 0x38

class UAdminCommandArgumentCompletion_Skill : public UAdminCommandArgumentCompletion
{
}; // Size: 0x38

class UAdminCommandArgumentCompletion_Squad : public UAdminCommandArgumentCompletion
{
}; // Size: 0x38

class UAdminCommandArgumentCompletion_Widget : public UAdminCommandArgumentCompletion
{
    TSubclassOf<class UAdminCommand_AddOrRemoveWidget> _commandClass;                 // 0x0038 (size: 0x8)

}; // Size: 0x40

class UAdminCommandArgumentDataTypeBase : public UDataAsset
{
    FText DataTypeName;                                                               // 0x0030 (size: 0x18)
    TSubclassOf<class UAdminCommandArgumentCompletion> ArgumentCompletion;            // 0x0048 (size: 0x8)

}; // Size: 0x108

class UAdminCommandArgumentDataType_Bool : public UAdminCommandArgumentDataTypeBase
{
    bool _defaultValue;                                                               // 0x0108 (size: 0x1)

}; // Size: 0x110

class UAdminCommandArgumentDataType_Location : public UAdminCommandArgumentDataTypeBase
{
    FVector _defaultValue;                                                            // 0x0108 (size: 0xC)

}; // Size: 0x118

class UAdminCommandArgumentDataType_Numeric : public UAdminCommandArgumentDataTypeBase
{
    float _defaultValue;                                                              // 0x0108 (size: 0x4)

}; // Size: 0x110

class UAdminCommandArgumentDataType_String : public UAdminCommandArgumentDataTypeBase
{
    FString _defaultValue;                                                            // 0x0108 (size: 0x10)
    bool _caseSensitive;                                                              // 0x0118 (size: 0x1)

}; // Size: 0x120

class UAdminCommandArgumentDataType_Transform : public UAdminCommandArgumentDataTypeBase
{
    FTransform _defaultValue;                                                         // 0x0110 (size: 0x30)

}; // Size: 0x140

class UAdminCommandArgumentDataType_TransformOrLocation : public UAdminCommandArgumentDataTypeBase
{
    FVector _defaultLocationValue;                                                    // 0x0108 (size: 0xC)

}; // Size: 0x118

class UAdminCommandCompletionManager : public UObject
{
    TMap<class FString, class TSubclassOf<UAdminCommand>> _commands;                  // 0x0028 (size: 0x50)

}; // Size: 0x138

class UAdminCommandRegistry : public UObject
{
    TArray<class TSubclassOf<UAdminCommand>> _commands;                               // 0x0038 (size: 0x10)

}; // Size: 0x98

class UAdminCommand_AddOrRemoveWidget : public UAdminCommand
{
    TMap<class FName, class TSubclassOf<UUserWidget>> _widgetClassesByName;           // 0x00A0 (size: 0x50)

}; // Size: 0xF0

class UAdminCommand_AddPrisonerBodyEffect : public UAdminCommand
{
    TSubclassOf<class UPrisonerBodyEffect> _bodyEffectClass;                          // 0x00A0 (size: 0x8)

}; // Size: 0xA8

class UAdminCommand_AdminLight : public UAdminCommand
{
    TSubclassOf<class UAdminLight> _adminLightComponent;                              // 0x00A0 (size: 0x8)
    float _maxIntensityMultiplier;                                                    // 0x00A8 (size: 0x4)

}; // Size: 0xB0

class UAdminCommand_Announce : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_BanPlayer : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_BoatDebug : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_CancelVote : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ChangeCurrencyBalance : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ChangeCurrencyBalanceToAll : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ChangeCurrencyBalanceToAllOnline : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ChangeFamePoints : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_CheckServerTime : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ClearEncounterCooldowns : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ClearFakeName : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_CookRecipe : public UAdminCommand
{
    class UCookingRecipe* _recipe;                                                    // 0x00A0 (size: 0x8)

}; // Size: 0xA8

class UAdminCommand_CrashMajestically : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_CreateEntity : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_DebugWeapon : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_DemolitionSkillDebug : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_DestroyAllFlagsForPlayer : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_DestroyAllItemsWithinRadius : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_DestroyAllRazorsWithinRadius : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_DestroyAllVehicles : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_DestroyCorpsesWithinRadius : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_DestroyEncountersAtPlayerLocation : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_DestroyEntity : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_DestroyFlag : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_DestroyVehicle : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_DestroyZombiesWithinRadius : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_DisablePrisonerBodyEffects : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_DistanceDebug : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_DoorDebug : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_DrawDebugZombieCapsulesOnLegacySpawnPoints : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_DrawNearbyEncounters : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_DrawSentryHealthBar : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_DumpAllSquadsInfoList : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_DumpEncounterManagerData : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_DumpWetnessDebug : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_EnableAdminViolations : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_EnableHuntingClueDebugArrow : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_EnableOrDisableServer : public UAdminCommand
{
    bool _shouldEnableServer;                                                         // 0x00A0 (size: 0x1)

}; // Size: 0xA8

class UAdminCommand_EndTournamentMode : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_EnhancedPhotoMode : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_EquipParachute : public UAdminCommand
{
    TSubclassOf<class AClothesItem> _parachuteClass;                                  // 0x00A0 (size: 0x8)

}; // Size: 0xA8

class UAdminCommand_ExecuteConsoleCommand : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ExecutePrisonerBodyConditionInteraction : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ExportDefaultItemSpawnerPresets : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ExportDefaultItemSpawningCooldownGroups : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ExportDefaultItemSpawningParameters : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ExportItemLootTree : public UAdminCommand
{
    EItemLootTreeToExport _lootTreeToExport;                                          // 0x00A0 (size: 0x1)

}; // Size: 0xA8

class UAdminCommand_ExportItemSpawnerPresetsInZone : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ExportQuests : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_FindSquadMember : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ForceBBEncounterOnNearbyOwnedBase : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ForceEncounterAtPlayerLocation : public UAdminCommand
{
    TSubclassOf<class UEncounterBase> _encounterClass;                                // 0x00A0 (size: 0x8)

}; // Size: 0xA8

class UAdminCommand_GetMeshInfo : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_GetUserID : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_GetUserIDByRank : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_GrantElevatedStatus : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_KickPlayer : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_KnockoutPrisoner : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_LeaveCorpse : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ListActiveAbandonedBunkers : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ListActiveHunts : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ListActiveSecretBunkers : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ListFlags : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ListItemsSpawnLocations : public UAdminCommand
{
    FSearchItemSpawnerPresetArray _itemSpawnerPresets;                                // 0x00A0 (size: 0x20)
    FSearchItemClassesArray _itemClasses;                                             // 0x00C0 (size: 0x20)

}; // Size: 0xE0

class UAdminCommand_ListMutedPlayers : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ListPlayers : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ListPrimaryAssets : public UAdminCommand
{
    FPrimaryAssetType _primaryAssetType;                                              // 0x00A0 (size: 0x8)
    TSet<FPrimaryAssetId> _primaryAssetsToExclude;                                    // 0x00A8 (size: 0x50)

}; // Size: 0xF8

class UAdminCommand_ListPrisonerBodyConditionInteractions : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ListPrisonerBodyEffects : public UAdminCommand
{
    TSubclassOf<class UPrisonerBodyEffect> _bodyEffectClass;                          // 0x00A0 (size: 0x8)

}; // Size: 0xA8

class UAdminCommand_ListPrisonerForeignSubstances : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ListSilencedPlayers : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ListSpawnedAnimals : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ListSpawnedVehicles : public UAdminCommand
{
    FGameplayTagContainer _vehicleSpawnGroupsByCategory;                              // 0x00A0 (size: 0x100)

}; // Size: 0x1A0

class UAdminCommand_ListSquadMembers : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ListSquads : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ListWeatherControllerOverrides : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_Location : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_Loot : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_MapTeleport : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_MutePlayer : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_PlacementDebug : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_PlayerInfo : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_PrintEntities : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_PrintGlobalRaidProtectionRaidTimes : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_Quests : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_RandomizePriceDeltas : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ReloadCustomMapConfig : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ReloadLootCustomizationsAndResetSpawners : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_RemovePrisonerBodyEffect : public UAdminCommand
{
    TSubclassOf<class UPrisonerBodyEffect> _bodyEffectClass;                          // 0x00A0 (size: 0x8)

}; // Size: 0xA8

class UAdminCommand_RenameVehicle : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ReportDesync : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ResetAchievements : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ResetEconomy : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ResetSquadInfo : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_RevokeElevatedStatus : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ScheduleCargoDrop : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ScheduleWorldEvent : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SendNotification : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetAIInvisibility : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetAchievementUnlocked : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetAirplaneMaxVelocity : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetAllInventoryAccess : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetCraftingSearch : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetCurrencyBalance : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetCurrencyBalanceToAll : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetCurrencyBalanceToAllOnline : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetDecayTimeDilation : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetDeluxeVersion : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetFakeName : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetFamePoints : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetFamePointsToAll : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetFamePointsToAllOnline : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetFarmingSimulationSpeed : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetGardenNutrientsHigh : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetGardenPlantGrowthStage : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetGardenPlantingTime : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetGender : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetGodMode : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetHealthToItemInHands : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetInfiniteAmmo : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetItemDebugMode : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetMalfunctionProbability : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetMountedVehicleProperty : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetPrisonerAttributes : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetPrisonerBladderVolume : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetPrisonerExhaustion : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetPrisonerImmortality : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetPrisonerInfiniteOxygen : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetPrisonerInfiniteStamina : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetPrisonerMetabolismSimulationSpeed : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetPrisonerStamina : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetPrisonerStomachVolume : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetReplishableResourceAmount : public UAdminCommand
{
    float _defaultAreaOfEffect;                                                       // 0x00A0 (size: 0x4)
    float _minAreaOfEffect;                                                           // 0x00A4 (size: 0x4)
    float _maxAreaOfEffect;                                                           // 0x00A8 (size: 0x4)

}; // Size: 0xB0

class UAdminCommand_SetShouldPrintExamineSpawnerPresets : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetSkillLevel : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetSuperJump : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetTime : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetTimeSpeed : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetWeather : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetWeatherControllerOverrideActive : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SetWeatherControllerOverrideValue : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ShouldShowOtherPlayerInfo : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ShouldShowOtherPlayerLocations : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ShowBaseBuildingDebug : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ShowFlagInfo : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ShowFlagLocations : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ShowNameplates : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ShowRespawnTimes : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ShowVehicleDebug : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ShowVehicleInfo : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ShowVehicleLocations : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ShowWeaponInfo : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ShutdownServer : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SilencePlayer : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_Sleep : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SpawnAllItems : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SpawnAnimal : public UAdminCommand_SpawnPrimaryActorAsset
{
}; // Size: 0x120

class UAdminCommand_SpawnArmedNPC : public UAdminCommand_SpawnPrimaryActorAsset
{
}; // Size: 0x120

class UAdminCommand_SpawnBrenner : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SpawnDebugAnimalTrack : public UAdminCommand
{
    FPrimaryAssetType _primaryAssetType;                                              // 0x00A0 (size: 0x8)

}; // Size: 0xA8

class UAdminCommand_SpawnInventoryFullOf : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SpawnItem : public UAdminCommand_SpawnPrimaryActorAsset
{
}; // Size: 0x170

class UAdminCommand_SpawnPrimaryActorAsset : public UAdminCommand
{
    FPrimaryAssetType _primaryAssetType;                                              // 0x00A0 (size: 0x8)
    TSet<FPrimaryAssetId> _primaryAssetsToExclude;                                    // 0x00A8 (size: 0x50)
    int32 _countArgumentMinValue;                                                     // 0x00F8 (size: 0x4)
    int32 _countArgumentMaxValue;                                                     // 0x00FC (size: 0x4)
    FVector _spawnOffset;                                                             // 0x0100 (size: 0xC)
    bool _isSpawnedActorCapableOfFalling;                                             // 0x010C (size: 0x1)

}; // Size: 0x120

class UAdminCommand_SpawnRandomAnimal : public UAdminCommand_SpawnAnimal
{
}; // Size: 0x120

class UAdminCommand_SpawnRandomPrimaryActorAsset : public UAdminCommand_SpawnPrimaryActorAsset
{
}; // Size: 0x120

class UAdminCommand_SpawnRandomZombie : public UAdminCommand_SpawnZombie
{
}; // Size: 0x120

class UAdminCommand_SpawnRazor : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_SpawnReflectionSphere : public UAdminCommand
{
    UClass* _actorClass;                                                              // 0x00A0 (size: 0x8)

}; // Size: 0xA8

class UAdminCommand_SpawnVehicle : public UAdminCommand_SpawnPrimaryActorAsset
{
}; // Size: 0x128

class UAdminCommand_SpawnZombie : public UAdminCommand_SpawnPrimaryActorAsset
{
}; // Size: 0x120

class UAdminCommand_StartTournamentMode : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_Teleport : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_TeleportTo : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_TeleportTo3pm : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_TeleportToMe : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_TeleportToVehicle : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_ToggleFamePointsDebugVisualization : public UAdminCommand
{
    TSubclassOf<class UFamePointDebugComponent> _famePointDebugComponentClass;        // 0x00A0 (size: 0x8)

}; // Size: 0xA8

class UAdminCommand_ToggleZombieNavigationLogging : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_TrackShotsFired : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_TrapsDebug : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_UnbanPlayer : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_UnmutePlayer : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_UnsilencePlayer : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_UpgradeBaseBuildingElementsWithinRadius : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_VehicleCheat : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_VisualizeAnimalLocation : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_VisualizeArmedNPCLocation : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_VisualizeBulletTrajectories : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_VisualizePlayerAiming : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_VisualizeVehicleTrajectory : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_VisualizeZombieLocation : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommand_Vote : public UAdminCommand
{
}; // Size: 0xA0

class UAdminCommandsStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UAdminLight : public UPointLightComponent
{
    class UCurveFloat* _intensityVersusTimeOfDay;                                     // 0x0360 (size: 0x8)

}; // Size: 0x370

class UAdminPlantPanel : public UUserWidget
{
    class UButton* _seedingButton;                                                    // 0x0270 (size: 0x8)
    class UButton* _vegetatingButton;                                                 // 0x0278 (size: 0x8)
    class UButton* _floweringButton;                                                  // 0x0280 (size: 0x8)
    class UButton* _ripeningButton;                                                   // 0x0288 (size: 0x8)
    class UButton* _killButton;                                                       // 0x0290 (size: 0x8)
    class UButton* _addWeedButton;                                                    // 0x0298 (size: 0x8)
    class UButton* _removeWeedButton;                                                 // 0x02A0 (size: 0x8)
    class UButton* _removePlantButton;                                                // 0x02A8 (size: 0x8)
    class UButton* _addWaterButton;                                                   // 0x02B0 (size: 0x8)

    void OnClickVegetating();
    void OnClickSeeding();
    void OnClickRipening();
    void OnClickRemoveWeed();
    void OnClickRemovePlant();
    void OnClickKill();
    void OnClickFlowering();
    void OnClickAddWeed();
    void OnClickAddWater();
}; // Size: 0x2B8

class UAdvancedBuoyancyComponent : public UStaticMeshComponent
{
    float _waterKinematicViscosity;                                                   // 0x0504 (size: 0x4)
    float _cPD1;                                                                      // 0x0508 (size: 0x4)
    float _cPD2;                                                                      // 0x050C (size: 0x4)
    float _fP;                                                                        // 0x0510 (size: 0x4)
    float _cSD1;                                                                      // 0x0514 (size: 0x4)
    float _cSD2;                                                                      // 0x0518 (size: 0x4)
    float _fS;                                                                        // 0x051C (size: 0x4)
    float _maxAcceleration;                                                           // 0x0520 (size: 0x4)
    float _p;                                                                         // 0x0524 (size: 0x4)
    float _maxHydrodynamicVelocity;                                                   // 0x0528 (size: 0x4)

}; // Size: 0x560

class UAirplaneAnimInstance : public UDcxWheeledVehicleAnimInstance
{
    bool IsAnyoneMounted;                                                             // 0x0A80 (size: 0x1)
    float Speed;                                                                      // 0x0A84 (size: 0x4)
    float SpeedKph;                                                                   // 0x0A88 (size: 0x4)
    float PropellerRotationAngle;                                                     // 0x0A8C (size: 0x4)
    float RudderAngle;                                                                // 0x0A90 (size: 0x4)
    bool IsMounteeDriver;                                                             // 0x0A94 (size: 0x1)
    float clockMinuteRotation;                                                        // 0x0A98 (size: 0x4)
    float clockHourRotation;                                                          // 0x0A9C (size: 0x4)
    float altimeterTensRotation;                                                      // 0x0AA0 (size: 0x4)
    float altimeterHundredsRotation;                                                  // 0x0AA4 (size: 0x4)
    float altimeterThousandsRotation;                                                 // 0x0AA8 (size: 0x4)
    float airSpeedRotation;                                                           // 0x0AAC (size: 0x4)
    float rpmRotation;                                                                // 0x0AB0 (size: 0x4)
    float verticalSpeedRotation;                                                      // 0x0AB4 (size: 0x4)
    float throttleLeverRotation;                                                      // 0x0AB8 (size: 0x4)
    float leftYawPedalRotation;                                                       // 0x0ABC (size: 0x4)
    float rightYawPedalRotation;                                                      // 0x0AC0 (size: 0x4)
    FRotator stickRotator;                                                            // 0x0AC4 (size: 0xC)
    FRotator headingRotator;                                                          // 0x0AD0 (size: 0xC)
    bool shouldHidePropellerBone;                                                     // 0x0ADC (size: 0x1)

}; // Size: 0xAE0

class UAirplaneElevatorsAnimInstance : public UAnimInstance
{
    float ElevatorsAngle;                                                             // 0x02B8 (size: 0x4)

}; // Size: 0x2C0

class UAirplaneLeftWingAnimInstance : public UAnimInstance
{
    float LeftAileronsAngle;                                                          // 0x02B8 (size: 0x4)

}; // Size: 0x2C0

class UAirplaneLegsFrontAnimInstance : public UAnimInstance
{
    float LeftWheelRotation;                                                          // 0x02B8 (size: 0x4)
    float RightWheelRotation;                                                         // 0x02BC (size: 0x4)
    class UDcxVehicleWheelsComponent* _vehicleWheels;                                 // 0x02C0 (size: 0x8)
    FName _leftWheelDcxBoneName;                                                      // 0x02C8 (size: 0x8)
    FName _rightWheelDcxBoneName;                                                     // 0x02D0 (size: 0x8)

}; // Size: 0x2E0

class UAirplaneLegsRearInstance : public UAnimInstance
{
    float RearWheelRotation;                                                          // 0x02B8 (size: 0x4)
    class UDcxVehicleWheelsComponent* _vehicleWheels;                                 // 0x02C0 (size: 0x8)
    FName _rearWheelDcxBoneName;                                                      // 0x02C8 (size: 0x8)

}; // Size: 0x2D0

class UAirplaneRightWingAnimInstance : public UAnimInstance
{
    float RightAileronsAngle;                                                         // 0x02B8 (size: 0x4)

}; // Size: 0x2C0

class UAkComponentClientOnly : public UAkComponent
{
}; // Size: 0x3D0

class UAmmunitionArrowSpawningParams : public UObject
{
    UClass* AmmunitionArrowClass;                                                     // 0x0028 (size: 0x8)
    float ItemsHealth;                                                                // 0x0030 (size: 0x4)
    bool IsPartOfEvent;                                                               // 0x0034 (size: 0x1)

}; // Size: 0x38

class UAmmunitionBoneListAssetData : public UAssetUserData
{
    TArray<FName> CartridgeBoneNames;                                                 // 0x0028 (size: 0x10)

}; // Size: 0x38

class UAnimNotifyState_BoatRow : public UAnimNotifyState
{
}; // Size: 0x30

class UAnimNotifyState_ChamberWeapon : public UAnimNotifyState
{
}; // Size: 0x30

class UAnimNotifyState_DrainStamina : public UAnimNotifyState
{
    EAnimNotifyStaminDrainType DrainType;                                             // 0x0030 (size: 0x1)
    float AmountToDrain;                                                              // 0x0034 (size: 0x4)
    float Duration;                                                                   // 0x0038 (size: 0x4)
    float RecoveryDelay;                                                              // 0x003C (size: 0x4)
    float RatioToRecover;                                                             // 0x0040 (size: 0x4)
    float RecoveryTime;                                                               // 0x0044 (size: 0x4)

}; // Size: 0x48

class UAnimNotifyState_Fade : public UAnimNotifyState
{
    float _fadeOutRatio;                                                              // 0x0030 (size: 0x4)
    float _fadeInRatio;                                                               // 0x0034 (size: 0x4)
    AnimNotifyState_FadeForAction _forAction;                                         // 0x0038 (size: 0x1)

}; // Size: 0x50

class UAnimNotifyState_IgnoreUsingHandCorrections : public UAnimNotifyState
{
}; // Size: 0x38

class UAnimNotifyState_Melee : public UAnimNotifyState
{
    FGameplayTag _attackCapsuleAttachment;                                            // 0x0030 (size: 0x8)
    float _damageMultiplier;                                                          // 0x0038 (size: 0x4)
    EHitSeverity _hitSeverity;                                                        // 0x003C (size: 0x1)
    bool _stopOnHit;                                                                  // 0x003D (size: 0x1)
    bool _ignoreLandscape;                                                            // 0x003E (size: 0x1)
    EAttackType _attackType;                                                          // 0x003F (size: 0x1)
    FName _hitDetectionMarkersRootBoneParentName;                                     // 0x0040 (size: 0x8)
    TArray<FMeleeHitDetectionMarker> _hitDetectionMarkers;                            // 0x0048 (size: 0x10)
    int32 _hitDetectionSamplingRate;                                                  // 0x0058 (size: 0x4)

}; // Size: 0x70

class UAnimNotifyState_NoScopingAllowed : public UAnimNotifyState
{
}; // Size: 0x38

class UAnimNotifyState_PaniniOverride : public UAnimNotifyState
{
}; // Size: 0x30

class UAnimNotifyState_PhysicalAnimation : public UAnimNotifyState
{
    bool GotoRagdollOnEnd;                                                            // 0x0030 (size: 0x1)
    FName BodyProfileName;                                                            // 0x0034 (size: 0x8)
    FName ConstraintProfileName;                                                      // 0x003C (size: 0x8)
    FName BoneName;                                                                   // 0x0044 (size: 0x8)
    FName StrengthBlendCurveName;                                                     // 0x004C (size: 0x8)
    FName PhysicsBlendCurveName;                                                      // 0x0054 (size: 0x8)

}; // Size: 0x60

class UAnimNotifyState_PlaySoundOnOwnerRanged : public UAnimNotifyState
{
    class UAkAudioEvent* BeginAudioEvent;                                             // 0x0030 (size: 0x8)
    class UAkAudioEvent* EndAudioEvent;                                               // 0x0038 (size: 0x8)

}; // Size: 0x40

class UAnimNotifyState_ShowAmmunitionMeshes : public UAnimNotifyState
{
    bool GenerateCustomMeshComponents;                                                // 0x0030 (size: 0x1)
    TArray<FName> CustomMeshComponentsBoneNames;                                      // 0x0038 (size: 0x10)
    bool showReversed;                                                                // 0x0048 (size: 0x1)
    TArray<int32> ammoIndices;                                                        // 0x0050 (size: 0x10)

}; // Size: 0x60

class UAnimNotifyState_WeaponHideMagazine : public UAnimNotifyState
{
}; // Size: 0x40

class UAnimNotifyState_WeaponRevolverDrumRotationDirection : public UAnimNotifyState
{
    ERotationDirection RotationDirection;                                             // 0x0030 (size: 0x1)

}; // Size: 0x38

class UAnimNotifyState_WeaponRevolverIgnoreDrumRotation : public UAnimNotifyState
{
}; // Size: 0x30

class UAnimNotifyState_WeaponShowAmmunitionMeshes : public UAnimNotifyState
{
    bool showReversed;                                                                // 0x0030 (size: 0x1)
    TArray<int32> ammoIndices;                                                        // 0x0038 (size: 0x10)

}; // Size: 0x48

class UAnimNotify_CharacterActionEnd : public UAnimNotify
{
}; // Size: 0x38

class UAnimNotify_CharacterActionMarker : public UAnimNotify
{
}; // Size: 0x38

class UAnimNotify_CharacterActionNotify : public UAnimNotify
{
    ECharacterActionNotifyType CharacterActionNotifyType;                             // 0x0038 (size: 0x1)

}; // Size: 0x40

class UAnimNotify_ClimbingFinished : public UAnimNotify
{
}; // Size: 0x38

class UAnimNotify_ConditionalPlayParticleEffectForItem : public UAnimNotify
{
    class UParticleSystem* PSTemplate;                                                // 0x0038 (size: 0x8)
    FVector LocationOffset;                                                           // 0x0040 (size: 0xC)
    FRotator RotationOffset;                                                          // 0x004C (size: 0xC)
    FVector Scale;                                                                    // 0x0058 (size: 0xC)
    uint8 Attached;                                                                   // 0x0080 (size: 0x1)
    FName SocketName;                                                                 // 0x0084 (size: 0x8)

    bool ShouldPlayParticleEffectForItem(const class AItem* Item);
}; // Size: 0x90

class UAnimNotify_FishingActionNotify : public UAnimNotify
{
    EFishingActionNotifyType FishingActionNotifyType;                                 // 0x0038 (size: 0x1)

}; // Size: 0x40

class UAnimNotify_MagazineUpdateAmmunitionMeshes : public UAnimNotify
{
    bool showReversed;                                                                // 0x0038 (size: 0x1)
    TArray<int32> ammoIndices;                                                        // 0x0040 (size: 0x10)

}; // Size: 0x50

class UAnimNotify_MakeNoise : public UAnimNotify
{
    ENoiseLevel noiseLevel;                                                           // 0x0038 (size: 0x1)
    FName NoiseTag;                                                                   // 0x003C (size: 0x8)

}; // Size: 0x48

class UAnimNotify_PaddlingSwitchHands : public UAnimNotify
{
    EBoatPaddlingState _newState;                                                     // 0x0038 (size: 0x1)

}; // Size: 0x40

class UAnimNotify_PlaySoundBySurface : public UAnimNotify
{
    class UAkAudioEvent* AudioEvent;                                                  // 0x0038 (size: 0x8)
    TEnumAsByte<ECollisionChannel> TraceChannel;                                      // 0x0040 (size: 0x1)

}; // Size: 0x48

class UAnimNotify_PlaySoundOnOwner : public UAnimNotify
{
    class UAkAudioEvent* AudioEvent;                                                  // 0x0038 (size: 0x8)

}; // Size: 0x40

class UAnimNotify_PlaySubtitledSound : public UAnimNotify
{
    class UAkAudioEvent* AudioEvent;                                                  // 0x0038 (size: 0x8)
    FText Subtitles;                                                                  // 0x0040 (size: 0x18)

}; // Size: 0x58

class UAnimNotify_QuestBookMinigameNotify : public UAnimNotify
{
    EQuestBookMinigameNotifyType _type;                                               // 0x0038 (size: 0x1)

}; // Size: 0x40

class UAnimNotify_SmokableItemEquip : public UAnimNotify
{
}; // Size: 0x38

class UAnimNotify_SmokableItemSwitchMeshParent : public UAnimNotify
{
    EDesiredParent DesiredParentSocket;                                               // 0x0038 (size: 0x1)

}; // Size: 0x40

class UAnimNotify_SmokableItemUnequip : public UAnimNotify
{
}; // Size: 0x38

class UAnimNotify_SpawnDefecationEffects : public UAnimNotify
{
}; // Size: 0x38

class UAnimNotify_SpawnDiarrheaEffects : public UAnimNotify
{
}; // Size: 0x38

class UAnimNotify_VehicleDoorOpenOrClose : public UAnimNotify
{
}; // Size: 0x38

class UAnimNotify_WaterPaddle : public UAnimNotify
{
    class UParticleSystem* ParticleSystem;                                            // 0x0038 (size: 0x8)
    class UAkAudioEvent* AudioEvent;                                                  // 0x0040 (size: 0x8)
    float VolumeMultiplier;                                                           // 0x0048 (size: 0x4)
    float PitchMultiplier;                                                            // 0x004C (size: 0x4)
    bool IsUnderwater;                                                                // 0x0050 (size: 0x1)
    bool IsAttached;                                                                  // 0x0051 (size: 0x1)
    FName AttachPointName;                                                            // 0x0054 (size: 0x8)
    bool DebugMode;                                                                   // 0x005C (size: 0x1)

}; // Size: 0x60

class UAnimNotify_WeaponActionNotify : public UAnimNotify
{
    EWeaponActionNotifyType WeaponActionNotifyType;                                   // 0x0038 (size: 0x1)

}; // Size: 0x40

class UAnimNotify_WeaponChamberBullet : public UAnimNotify
{
}; // Size: 0x38

class UAnimNotify_WeaponChamberBulletInternal : public UAnimNotify
{
}; // Size: 0x38

class UAnimNotify_WeaponEjectCasing : public UAnimNotify
{
    FName EmitterSocketName;                                                          // 0x0038 (size: 0x8)
    bool AttachEmitter;                                                               // 0x0040 (size: 0x1)

}; // Size: 0x48

class UAnimNotify_WeaponUpdateAmmunitionMeshes : public UAnimNotify
{
    bool showReversed;                                                                // 0x0038 (size: 0x1)
    TArray<int32> ammoIndices;                                                        // 0x0040 (size: 0x10)

}; // Size: 0x50

class UAnimStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UAnimal2AnimInstance : public UAnimInstance
{
    class UCurveFloat* InverseLocomotionBias;                                         // 0x02B8 (size: 0x8)
    float MaximumLeaningAngle;                                                        // 0x02C0 (size: 0x4)
    int32 IdleStanceIndex;                                                            // 0x02C4 (size: 0x4)
    EAnimalStance stance;                                                             // 0x02C8 (size: 0x1)
    FRotator SlopeRootTiltRotation;                                                   // 0x02CC (size: 0xC)
    float ABPSpeed;                                                                   // 0x02D8 (size: 0x4)
    float ABPTurn;                                                                    // 0x02DC (size: 0x4)
    float MoveVelocity;                                                               // 0x02E0 (size: 0x4)
    bool _isRagdolled;                                                                // 0x02EC (size: 0x1)

    void AnimNotify_RFootDownRear();
    void AnimNotify_RFootDown();
    void AnimNotify_LFootDownRear();
    void AnimNotify_LFootDown();
    void AnimNotify_IntroEnd();
    void AnimNotify_IdleEnd();
}; // Size: 0x2F0

class UAnimal2MovementComponent : public UConZCharacterMovementComponent
{
    float GroundSlopeRotationSpeedDegrees;                                            // 0x0DA0 (size: 0x4)
    bool CorrectServerReceivedZ;                                                      // 0x0DA4 (size: 0x1)

}; // Size: 0xDC0

class UAnimal2SoundComponent : public UCharacterSoundComponent
{
    class UAkAudioEvent* IdleAudioEvent;                                              // 0x0128 (size: 0x8)
    class UAkAudioEvent* AngryAudioEvent;                                             // 0x0130 (size: 0x8)
    class UAkAudioEvent* AttackAudioEvent;                                            // 0x0138 (size: 0x8)
    class UAkAudioEvent* ScaredAudioEvent;                                            // 0x0140 (size: 0x8)
    class UAkAudioEvent* AlertedAudioEvent;                                           // 0x0148 (size: 0x8)
    class UAkAudioEvent* TakeDamageAudioEvent;                                        // 0x0150 (size: 0x8)
    class UAkAudioEvent* KillAudioEvent;                                              // 0x0158 (size: 0x8)
    class UAkAudioEvent* AnimalFootstep;                                              // 0x0160 (size: 0x8)
    float FootstepSoundOverlap;                                                       // 0x0168 (size: 0x4)
    float FixedFootstepVolume;                                                        // 0x016C (size: 0x4)
    float SpeedFootstepVolume;                                                        // 0x0170 (size: 0x4)
    float MinSilenceTimeout;                                                          // 0x0174 (size: 0x4)
    float MaxSilenceTimeout;                                                          // 0x0178 (size: 0x4)

}; // Size: 0x1A0

class UAnimalHandlingItemTag : public UBaseItemTag
{
}; // Size: 0x30

class UAnimalHandlingSkill : public UIntelligenceSkill
{
}; // Size: 0xC0

class UArcherySkill : public URangedWeaponsSkill
{
    float _drawWeightNoSkillValue;                                                    // 0x0218 (size: 0x4)
    float _drawWeightBasicSkillValue;                                                 // 0x021C (size: 0x4)
    float _drawWeightMediumSkillValue;                                                // 0x0220 (size: 0x4)
    float _drawWeightAdvancedSkillValue;                                              // 0x0224 (size: 0x4)
    float _drawWeightAboveAvancedSkillValue;                                          // 0x0228 (size: 0x4)
    float _holdTimeInFullDrawNoSkillValue;                                            // 0x022C (size: 0x4)
    float _holdTimeInFullDrawBasicSkillValue;                                         // 0x0230 (size: 0x4)
    float _holdTimeInFullDrawMediumSkillValue;                                        // 0x0234 (size: 0x4)
    float _holdTimeInFullDrawAdvancedSkillValue;                                      // 0x0238 (size: 0x4)
    float _holdTimeInFullDrawAboveAvancedSkillValue;                                  // 0x023C (size: 0x4)
    float _armsShakeMultiplierNoSkillValue;                                           // 0x0240 (size: 0x4)
    float _armsShakeMultiplierBasicSkillValue;                                        // 0x0244 (size: 0x4)
    float _armsShakeMultiplierMediumSkillValue;                                       // 0x0248 (size: 0x4)
    float _armsShakeMultiplierAdvancedSkillValue;                                     // 0x024C (size: 0x4)
    float _armsShakeMultiplierAboveAvancedSkillValue;                                 // 0x0250 (size: 0x4)
    float _tuneBowDurationNoSkillValue;                                               // 0x0254 (size: 0x4)
    float _tuneBowDurationBasicSkillValue;                                            // 0x0258 (size: 0x4)
    float _tuneBowDurationMediumSkillValue;                                           // 0x025C (size: 0x4)
    float _tuneBowDurationAdvancedSkillValue;                                         // 0x0260 (size: 0x4)
    float _tuneBowDurationAboveAvancedSkillValue;                                     // 0x0264 (size: 0x4)
    float _drawCenterDotExtraTimeLimitNoSkillValue;                                   // 0x0268 (size: 0x4)
    float _drawCenterDotExtraTimeLimitBasicSkillValue;                                // 0x026C (size: 0x4)
    float _drawCenterDotExtraTimeLimitMediumSkillValue;                               // 0x0270 (size: 0x4)
    float _drawCenterDotExtraTimeLimitAdvancedSkillValue;                             // 0x0274 (size: 0x4)
    float _drawCenterDotExtraTimeLimitAboveAvancedSkillValue;                         // 0x0278 (size: 0x4)

}; // Size: 0x280

class UArmedNPCActionInsertArrow : public UCharacterAction
{
}; // Size: 0x108

class UArmedNPCActionInsertArrowDescription : public UCharacterActionDescription
{
}; // Size: 0x40

class UArmedNPCActionReloadWeapon : public UCharacterAction
{
}; // Size: 0x110

class UArmedNPCActionReloadWeaponDescription : public UCharacterActionDescription
{
}; // Size: 0x70

class UArmedNPCAimCorrectionsData : public UDataAsset
{
    FArmedNPCAimCorrection HandgunCorrections;                                        // 0x0030 (size: 0x120)
    FArmedNPCAimCorrection RifleCorrections;                                          // 0x0150 (size: 0x120)
    TMap<class TSubclassOf<AWeapon>, class FArmedNPCAimCorrection> CorrectionsPerWeapon; // 0x0270 (size: 0x50)

}; // Size: 0x2C0

class UArmedNPCBaseAnimInstance : public UAnimInstance
{
    EArmedNPCBaseMovementPace _desiredMovementPace;                                   // 0x02C8 (size: 0x1)
    EPrisonerGroundStance _stance;                                                    // 0x02C9 (size: 0x1)
    float _desiredCourseAngle;                                                        // 0x02CC (size: 0x4)
    float _groundStartAnimPlayRate;                                                   // 0x02D0 (size: 0x4)
    FVector _acceleration;                                                            // 0x02D4 (size: 0xC)
    FVector _velocity;                                                                // 0x02E0 (size: 0xC)
    float _speedXY;                                                                   // 0x02EC (size: 0x4)
    bool _wantsToMove;                                                                // 0x02F0 (size: 0x1)
    bool _wantsToWalk;                                                                // 0x02F1 (size: 0x1)
    float _stoppingDistance;                                                          // 0x02F4 (size: 0x4)
    bool _shouldUseLUGroundStopAnimation;                                             // 0x02F8 (size: 0x1)
    float _legsPoseBeforeGroundStop;                                                  // 0x02FC (size: 0x4)
    ECardinalDirection _movementDirectionBeforeGroundStop;                            // 0x0300 (size: 0x1)
    bool _wantsToJog;                                                                 // 0x0301 (size: 0x1)
    bool _wantsToRun;                                                                 // 0x0302 (size: 0x1)
    EPrisonerAnimationSet _animationSet;                                              // 0x0303 (size: 0x1)
    EPrisonerAnimationSet _animationSetBeforeGroundStop;                              // 0x0304 (size: 0x1)
    bool _shouldUseWeaponAnimationPose;                                               // 0x0305 (size: 0x1)
    EPrisonerCombatMode _combatMode;                                                  // 0x0306 (size: 0x1)
    EWeaponType _weaponType;                                                          // 0x0307 (size: 0x1)
    float _weaponAimYaw;                                                              // 0x0308 (size: 0x4)
    float _weaponAimPitch;                                                            // 0x030C (size: 0x4)
    bool _hasAimLocation;                                                             // 0x0310 (size: 0x1)
    FVector _handRAimLocation;                                                        // 0x0314 (size: 0xC)
    FVector _supportingHandIKLocation;                                                // 0x0320 (size: 0xC)
    bool _shouldIgnoreSupportingHandIK;                                               // 0x032C (size: 0x1)
    float _leftHandIKAmount;                                                          // 0x0330 (size: 0x4)
    bool _isAimingBow;                                                                // 0x0334 (size: 0x1)
    bool _shouldSkipStandWalkOrJogOrRunStart;                                         // 0x0335 (size: 0x1)
    class UAnimSequenceBase* _meleeSkill_PrimaryIdleAnimation;                        // 0x0338 (size: 0x8)
    class UAnimSequenceBase* _meleeSkill_TiredIdleAnimation;                          // 0x0340 (size: 0x8)
    class UAnimSequenceBase* _meleeSkill_WalkingIdleAnimation;                        // 0x0348 (size: 0x8)
    class UAnimSequenceBase* _meleeSkill_BlockIdleAnimation;                          // 0x0350 (size: 0x8)
    class UBlendSpace* _meleeSkill_AimOffsetBlendSpace;                               // 0x0358 (size: 0x8)
    float _meleeSkill_IdleToBlockBlendDuration;                                       // 0x0360 (size: 0x4)
    float _meleeSkill_BlockToIdleBlendDuration;                                       // 0x0364 (size: 0x4)
    float _meleeSkill_ExhaustionFactor;                                               // 0x0368 (size: 0x4)
    bool _shouldUseUnarmedCombatWalk;                                                 // 0x036C (size: 0x1)
    bool _isHoldingBlock;                                                             // 0x036D (size: 0x1)
    FRotator _handAimCorrectionRotator;                                               // 0x0370 (size: 0xC)

    bool IsCourseAngleSupportedByStartAndStopAnimations(float courseAngle);
    class UAnimSequenceBase* GetWeaponAnimationPoseOnWorkerThread(EWeaponAnimationPose animationPose, EPrisonerGroundStance stance);
    float GetPlayRateFromSpeed(float speedInAnimation, float MinPlayRate, float MaxPlayRate);
    void GetLeanBlendWeights(float& Left, float& Right, float Multiplier, const class UCurveFloat* strengthBySpeedCurve);
    float GetKnownCurveValueOnWorkerThread(EPrisonerAnimationCurve Curve);
    float GetInPlaceTurningElapsedTimeRight(EPrisonerGroundStance stance);
    float GetInPlaceTurningElapsedTimeLeft(EPrisonerGroundStance stance);
    float GetInPlaceTurningDirectionBlendAlpha(EPrisonerGroundStance stance);
    float GetInPlaceTurningBlendAlpha(EPrisonerGroundStance stance);
    ECardinalDirection GetCardinalDirectionFromCourseAngle(float Value);
    float GetBoxingInPlaceTurningElapsedTimeRight();
    float GetBoxingInPlaceTurningElapsedTimeLeft();
    float GetBoxingInPlaceTurningDirectionBlendAlpha();
    float GetBoxingInPlaceTurningBlendAlpha();
    void AnimNotify_RFootDown();
    void AnimNotify_LFootDown();
}; // Size: 0x510

class UArmedNPCBaseCommonData : public UDataAsset
{
    float MaxHealth;                                                                  // 0x0030 (size: 0x4)
    FFloatInterval SightAndAwarenessRange;                                            // 0x0034 (size: 0x8)
    class UArmedNPCVariationsData* Variations;                                        // 0x0040 (size: 0x8)
    TArray<TSoftClassPtr<AItem>> PossibleItemInHands;                                 // 0x0048 (size: 0x10)
    TArray<TSoftClassPtr<AItem>> PossibleItemsOnSearch;                               // 0x0058 (size: 0x10)
    class UArmedNPCDifficultyLevelSettings* DifficultyLevelSettings;                  // 0x0068 (size: 0x8)
    class UArmedNPCDamageCustomizationData* DamageCustomizationData;                  // 0x0070 (size: 0x8)
    float TimeForItemsToGetSoakedOnRain;                                              // 0x0078 (size: 0x4)
    float TimeForItemsToGetDry;                                                       // 0x007C (size: 0x4)
    class UPhysicalSurfacesData* PhysicalSurfacesData;                                // 0x0080 (size: 0x8)
    FName HeadBoneName;                                                               // 0x0088 (size: 0x8)
    ESkillLevel MeleSkillLevel;                                                       // 0x0090 (size: 0x1)
    class UMeleeSkillAnimationsPreset* BoxingSkillAnimationsPreset;                   // 0x0098 (size: 0x8)
    FArmedNPCMeleeAttackTypes MeleeAttackTypes;                                       // 0x00A0 (size: 0x88)
    FGameplayTag MeleeAttackCapsulesAttachmentForItemInRHand;                         // 0x0128 (size: 0x8)
    FGameplayTag HitReactTypeWhenStanding;                                            // 0x0130 (size: 0x8)
    FGameplayTag HitReactTypeWhenStandingInCombatMode;                                // 0x0138 (size: 0x8)
    FGameplayTag HitReactTypeWhenCrouching;                                           // 0x0140 (size: 0x8)
    FGameplayTag HitReactTypeWhenProne;                                               // 0x0148 (size: 0x8)
    class UAnimMontage* AnimationsForEvents;                                          // 0x0150 (size: 0x10)

}; // Size: 0x160

class UArmedNPCBaseEncounterSaveState : public UConZCharacterEncounterSaveState
{
    int32 Version;                                                                    // 0x0038 (size: 0x4)
    float health;                                                                     // 0x003C (size: 0x4)
    int32 BodyMeshIndex;                                                              // 0x0040 (size: 0x4)
    int32 ItemInHandsIndex;                                                           // 0x0044 (size: 0x4)
    bool IsSearched;                                                                  // 0x0048 (size: 0x1)
    EArmedNPCPersonality Personality;                                                 // 0x0049 (size: 0x1)

}; // Size: 0x50

class UArmedNPCBaseMovementComponent : public UConZCharacterMovementComponent
{
    float _speed;                                                                     // 0x0DA4 (size: 0x10)
    float _acceleration;                                                              // 0x0DB4 (size: 0x10)
    float _turnRate;                                                                  // 0x0DC4 (size: 0x8)

    float GetDesiredCourseAngle();
}; // Size: 0xDD0

class UArmedNPCDamageCustomizationData : public UDataAsset
{
    float PointDamageMultiplierPerBodyPart;                                           // 0x0030 (size: 0x30)
    float MeleeDamageMultiplierPerBodyPart;                                           // 0x0060 (size: 0x30)
    float HeadshotInstantKillEnergyThreshold;                                         // 0x0090 (size: 0x4)

}; // Size: 0x98

class UArmedNPCDifficultyLevelSettings : public UDataAsset
{
    TArray<FArmedNPCDifficultyLevelSettingProperties> Levels;                         // 0x0030 (size: 0x10)

}; // Size: 0x40

class UArmedNPCSoundComponent : public UCharacterSoundComponent
{
    class UAkAudioEvent* RelaxedStanceEnteredAudioEvent;                              // 0x0138 (size: 0x8)
    class UAkAudioEvent* AlertedStanceEnteredAudioEvent;                              // 0x0140 (size: 0x8)
    class UAkAudioEvent* CombatStanceEnteredAudioEvent;                               // 0x0148 (size: 0x8)
    class UAkAudioEvent* FootstepAudioEvent;                                          // 0x0150 (size: 0x8)
    class UAkAudioEvent* StopAllAudioEvent;                                           // 0x0158 (size: 0x8)
    class UAkAudioEvent* DeathAudioEvent;                                             // 0x0160 (size: 0x8)
    class UAkAudioEvent* StartSearchCorpseAudioEvent;                                 // 0x0168 (size: 0x8)
    class UAkAudioEvent* StopSearchCorpseAudioEvent;                                  // 0x0170 (size: 0x8)
    class UAkAudioEvent* FootstepsAudioEvent;                                         // 0x0178 (size: 0x8)
    class UArmedNPCVoiceLinesData* VoiceLinesByPersonality;                           // 0x0180 (size: 0x48)

    void PlayFootstepSounds(TEnumAsByte<EPhysicalSurface> inPhysicalSurface);
    void OnAkPostEventCallback(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
}; // Size: 0x1E0

class UArmedNPCVariationsData : public UDataAsset
{
    TArray<FArmedNPCVariation> Physical;                                              // 0x0030 (size: 0x10)

}; // Size: 0x40

class UArmedNPCVoiceLinesData : public UDataAsset
{
    class UAkAudioEvent* Lines;                                                       // 0x0030 (size: 0x30)

}; // Size: 0x60

class UArmedNPCWeaponManual : public UObject
{

    void Tick(float DeltaTime);
    void OnCharacterActionEnded(const class UCharacterAction* action);
    void OnArmedNPCDifficultyLevelChanged(int32 Level);
    bool IsOutOfAmmo();
    void Initialize();
    class AWeapon* GetWeapon();
}; // Size: 0x28

class UArmedNPCWeaponManualBow : public UArmedNPCWeaponManual
{
    TSubclassOf<class AAmmunitionArrow> AmmoClass;                                    // 0x0040 (size: 0x8)

}; // Size: 0x88

class UArmedNPCWeaponManualCrossbow : public UArmedNPCWeaponManual
{
    TSubclassOf<class AAmmunitionArrow> AmmoClass;                                    // 0x0038 (size: 0x8)

}; // Size: 0x68

class UArmedNPCWeaponManualHandgun : public UArmedNPCWeaponManual
{
}; // Size: 0x80

class UArmedNPCWeaponManualRifleAutomatic : public UArmedNPCWeaponManual
{
}; // Size: 0x70

class UArmedNPCWeaponManualRifleManual : public UArmedNPCWeaponManual
{
}; // Size: 0x70

class UArrayStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UAsepsisItemTag : public UBaseItemTag
{
    float Asepsis;                                                                    // 0x0030 (size: 0x4)

}; // Size: 0x38

class UAttachableItemComponent : public UItemComponent
{
    FTransform _attachRelativeTransform;                                              // 0x00E0 (size: 0x30)
    float _damage;                                                                    // 0x0110 (size: 0x4)
    FText _interactionText;                                                           // 0x0118 (size: 0x18)

    void OnGardenDestroyed(uint16 GardenId);
    void OnFortificationDestroyed(FEntityComponentId fortificationEntityComponentId);
    void OnBaseElementDestroyed(FDbIntegerId BaseElementId);
    void NetMulticast_OnAttachActorDestroyed();
}; // Size: 0x170

class UAttachmentSocketMountType : public UObject
{
}; // Size: 0x28

class UAttachmentSocketMountTypePrisonerHand : public UAttachmentSocketMountType
{
}; // Size: 0x28

class UAudibleButtonComponent : public UObject
{
    TMap<class EButtonEventType, class UAkAudioEvent*> _audioEvents;                  // 0x0028 (size: 0x50)

}; // Size: 0x78

class UAudioDeviceDisplay : public UUserWidget
{
    class UTextBlock* _deviceName;                                                    // 0x0268 (size: 0x8)

}; // Size: 0x270

class UAudioSettingsManager : public UObject
{
}; // Size: 0x28

class UAudioStatics : public UBlueprintFunctionLibrary
{

    void StopAkActor(class AActor* Actor);
    void SetAkRTPCValue(FName RTPC, float Value, int32 InterpolationTimeMs, class AActor* Actor);
    int32 PostAndWaitForEndOfAkEvent(class UAkAudioEvent* akEvent, class AActor* Actor, bool bStopWhenAttachedToDestroyed, FLatentActionInfo LatentInfo);
    int32 PostAkEventAtLocation(class UAkAudioEvent* akEvent, FVector Location, FRotator Orientation, const class UObject* WorldContextObject);
    int32 PostAkAudioEventToAudioComponent(class UAkAudioEvent* akEvent, class UAkComponent* AkComponent);
    int32 PostAkAudioEvent(class UAkAudioEvent* akEvent, class AActor* Actor, bool bStopWhenAttachedToDestroyed);
    FName GetMovementPaceSwitchValue(EPrisonerMovementPace Value);
    FName GetMovementPaceSwitchName();
    FName GetMotionIntensitySwitchValue(EMotionIntensity Value);
    FName GetMotionIntensitySwitchName();
    FName GetMaterialSwitchValue(TEnumAsByte<EPhysicalSurface> Value);
    FName GetMaterialSwitchName();
    FName GetImpactSeveritySwitchName();
    FName GetHitSeveritySwitchValue(EHitSeverity Value);
    FName GetGenderSwitchValue(EConZGender Value);
    FName GetGenderSwitchName();
    FName GetEnvironmentSwitchValue(EEnvironmentClass Value);
    FName GetEnvironmentSwitchName();
    FName GetCharacterPainSeveritySwitchValue(ECharacterPainSoundSeverity Value);
    FName GetCharacterPainSeveritySwitchName();
    void GetAkRTPCValue(FName RTPC, float& OutValue, ERTPCValueType& outValueType, class AActor* Actor);
}; // Size: 0x28

class UAutoCrossbowMagazineAnimInstance : public UWeaponAttachmentMagazineAnimInstance
{
    float _followerBoneLocationOffset;                                                // 0x02E0 (size: 0x4)

}; // Size: 0x2F0

class UAvailabilityGrid : public UObject
{
    FGameplayTag _waterImageAssetTag;                                                 // 0x0048 (size: 0x8)

}; // Size: 0x225578

class UAviationSkill : public UVehicleHandlingSkill
{
    FVehicleHandlingExperienceAwards NoSkillExperienceAwards;                         // 0x00B0 (size: 0x8)
    FVehicleHandlingExperienceAwards BasicSkillExperienceAwards;                      // 0x00B8 (size: 0x8)
    FVehicleHandlingExperienceAwards MediumSkillExperienceAwards;                     // 0x00C0 (size: 0x8)
    FVehicleHandlingExperienceAwards AdvancedSkillExperienceAwards;                   // 0x00C8 (size: 0x8)
    FVehicleHandlingExperienceAwards AboveAdvancedSkillExperienceAwards;              // 0x00D0 (size: 0x8)
    FAviationSkillParametersPerSkillLevel NoSkillParameters;                          // 0x00D8 (size: 0x100)
    FAviationSkillParametersPerSkillLevel BasicSkillParameters;                       // 0x01D8 (size: 0x100)
    FAviationSkillParametersPerSkillLevel MediumSkillParameters;                      // 0x02D8 (size: 0x100)
    FAviationSkillParametersPerSkillLevel AdvancedSkillParameters;                    // 0x03D8 (size: 0x100)
    FAviationSkillParametersPerSkillLevel AboveAdvancedSkillParameters;               // 0x04D8 (size: 0x100)

}; // Size: 0x5D8

class UAwarenessSkill : public UIntelligenceSkill
{
    class UAkAudioEvent* EnterFocusModeAudioEvent;                                    // 0x00C0 (size: 0x8)
    class UAkAudioEvent* LeaveFocusModeAudioEvent;                                    // 0x00C8 (size: 0x8)
    float _updateTime;                                                                // 0x00D0 (size: 0x4)
    float _serverUpdateTime;                                                          // 0x00D4 (size: 0x4)
    float _staminaConsumption;                                                        // 0x00D8 (size: 0x4)
    float _focusModeActivationTime;                                                   // 0x00DC (size: 0x4)
    FAwarenessSkillExperienceAwards NoSkillExperienceAwards;                          // 0x00E0 (size: 0xC)
    FAwarenessSkillExperienceAwards BasicSkillExperienceAwards;                       // 0x00EC (size: 0xC)
    FAwarenessSkillExperienceAwards MediumSkillExperienceAwards;                      // 0x00F8 (size: 0xC)
    FAwarenessSkillExperienceAwards AdvancedSkillExperienceAwards;                    // 0x0104 (size: 0xC)
    FAwarenessSkillExperienceAwards AboveAdvancedSkillExperienceAwards;               // 0x0110 (size: 0xC)
    FAwarenessSkillParametersPerSkillLevel NoSkillParameters;                         // 0x011C (size: 0x54)
    FAwarenessSkillParametersPerSkillLevel BasicSkillParameters;                      // 0x0170 (size: 0x54)
    FAwarenessSkillParametersPerSkillLevel MediumSkillParameters;                     // 0x01C4 (size: 0x54)
    FAwarenessSkillParametersPerSkillLevel AdvancedSkillParameters;                   // 0x0218 (size: 0x54)
    FAwarenessSkillParametersPerSkillLevel AboveAdvancedSkillParameters;              // 0x026C (size: 0x54)

    void EnterFocusMode();
}; // Size: 0x3C0

class UBCUUpgradeService : public UTraderService
{
}; // Size: 0x38

class UBCUUpgradeSlotWidget : public UUpgradeSlotWidget
{
    FLinearColor _connectedBackgroundColor;                                           // 0x02E8 (size: 0x10)
    FSlateBrush _connectedIconTexture;                                                // 0x02F8 (size: 0x88)
    FSlateBrush _disconnectedIconTexture;                                             // 0x0380 (size: 0x88)

}; // Size: 0x420

class UBadAdjustableSeparator : public UUserWidget
{
    class USizeBox* UpperSizeBox;                                                     // 0x0268 (size: 0x8)
    float HeightOverride;                                                             // 0x0270 (size: 0x4)
    bool TradingRelated;                                                              // 0x0274 (size: 0x1)

}; // Size: 0x278

class UBankATMAccountInfo : public UUserWidget
{
    class UTextBlock* _accountNumber;                                                 // 0x0280 (size: 0x8)
    class UTextBlock* _accountName;                                                   // 0x0288 (size: 0x8)
    class UTextBlock* _cardType;                                                      // 0x0290 (size: 0x8)
    class UTextBlock* _renewalAmount;                                                 // 0x0298 (size: 0x8)
    class UHorizontalBox* _goldAmountHorizontalBox;                                   // 0x02A0 (size: 0x8)
    class UTextBlock* _goldAmount;                                                    // 0x02A8 (size: 0x8)
    class UBankATMPointingButton* _btnReturn;                                         // 0x02B0 (size: 0x8)
    TMap<class EBankCardType, class FSlateColor> _cardTypeFontColor;                  // 0x02B8 (size: 0x50)

}; // Size: 0x308

class UBankATMAccountSummary : public UUserWidget
{
    class UTextBlock* _accountBalance;                                                // 0x0268 (size: 0x8)
    class UHorizontalBox* _ATMOperationalTransactionLimitHorizontalBox;               // 0x0270 (size: 0x8)
    class UTextBlock* _ATMOperationalTransactionLimit;                                // 0x0278 (size: 0x8)
    class UHorizontalBox* _cardOperationalTransactionLimitHorizontalBox;              // 0x0280 (size: 0x8)
    class UTextBlock* _cardOperationalTransactionLimit;                               // 0x0288 (size: 0x8)

}; // Size: 0x290

class UBankATMBoughtCard : public UUserWidget
{
    EBankATMCardUIType _cardQualityType;                                              // 0x0280 (size: 0x1)
    TMap<class EBankATMCardUIType, class FSlateBrush> _cardBrushes;                   // 0x0288 (size: 0x50)
    FBankATMBoughtCardStateVisual _normalVisuals;                                     // 0x02D8 (size: 0x40)
    FBankATMBoughtCardStateVisual _hoveredVisuals;                                    // 0x0318 (size: 0x40)
    FBankATMBoughtCardStateVisual _pressedVisuals;                                    // 0x0358 (size: 0x40)
    class UOverlay* _visualOverlay;                                                   // 0x0398 (size: 0x8)
    class UImage* _imgCardBackground;                                                 // 0x03A0 (size: 0x8)
    class UTextBlock* _textCardType;                                                  // 0x03A8 (size: 0x8)
    class UTextBlock* _textCardNumber;                                                // 0x03B0 (size: 0x8)
    class UWidgetSwitcher* _optionsCircleSwitcher;                                    // 0x03B8 (size: 0x8)

}; // Size: 0x3C8

class UBankATMBuyableCard : public UUserWidget
{
    EBankATMCardUIType _cardQualityType;                                              // 0x0280 (size: 0x1)
    FBankATMBuyableCardStateVisual _normalVisuals;                                    // 0x0284 (size: 0xC)
    FBankATMBuyableCardStateVisual _hoveredAndPressedVisuals;                         // 0x0290 (size: 0xC)
    FBankATMBuyableCardStateVisual _disabledVisuals;                                  // 0x029C (size: 0xC)
    class UWidgetSwitcher* _visualStateSwitcher;                                      // 0x02A8 (size: 0x8)
    class UImage* _toggleablePlusCircle;                                              // 0x02B0 (size: 0x8)
    class UTextBlock* _textCardType;                                                  // 0x02B8 (size: 0x8)
    class UTextBlock* _textFreeRenewals;                                              // 0x02C0 (size: 0x8)
    class UTextBlock* _textDigitsOfPin;                                               // 0x02C8 (size: 0x8)
    class UTextBlock* _textOperationalTransactionLimit;                               // 0x02D0 (size: 0x8)
    class UTextBlock* _textGoldPurchaseAvailable;                                     // 0x02D8 (size: 0x8)
    class UTextBlock* _textCardCost;                                                  // 0x02E0 (size: 0x8)

}; // Size: 0x2F0

class UBankATMCardManagementOptionsScreen : public UUserWidget
{
    class UBankATMPointingButton* _btnRenew;                                          // 0x02B8 (size: 0x8)
    class UBankATMPointingButton* _btnDelete;                                         // 0x02C0 (size: 0x8)
    class UBankATMPointingButton* _btnReturn;                                         // 0x02C8 (size: 0x8)
    class UBankATMErrorPopup* _popupMessage;                                          // 0x02D0 (size: 0x8)

}; // Size: 0x2D8

class UBankATMCarouselCard : public UUserWidget
{
    class UWidgetSwitcher* _typeSwitcher;                                             // 0x0280 (size: 0x8)
    class UTextBlock* _numberLabel;                                                   // 0x0288 (size: 0x8)
    class UImage* _ownershipIcon;                                                     // 0x0290 (size: 0x8)
    class UPanelWidget* _expirationNotice;                                            // 0x0298 (size: 0x8)
    FColor _stolenCardColor;                                                          // 0x02A0 (size: 0x4)
    FBankATMCarouselCardStateVisual _normalVisuals;                                   // 0x02AC (size: 0x10)
    FBankATMCarouselCardStateVisual _hoveredVisuals;                                  // 0x02BC (size: 0x10)
    FBankATMCarouselCardStateVisual _pressedVisuals;                                  // 0x02CC (size: 0x10)
    FBankATMCarouselCardStateVisual _disabledVisuals;                                 // 0x02DC (size: 0x10)

}; // Size: 0x2F0

class UBankATMChooseTransaction : public UUserWidget
{
    class UBankATMPointingButton* _btnWithdraw;                                       // 0x02E0 (size: 0x8)
    class UBankATMPointingButton* _btnDeposit;                                        // 0x02E8 (size: 0x8)
    class UBankATMPointingButton* _btnTransfer;                                       // 0x02F0 (size: 0x8)
    class UBankATMPointingButton* _btnEjectCard;                                      // 0x02F8 (size: 0x8)
    class UBankATMPointingButton* _btnAccountInfo;                                    // 0x0300 (size: 0x8)
    class UBankATMPointingButton* _btnBuyGold;                                        // 0x0308 (size: 0x8)
    class UBankATMPointingButton* _btnSellGold;                                       // 0x0310 (size: 0x8)

}; // Size: 0x318

class UBankATMEnterPin : public UUserWidget
{
    class UWidgetSwitcher* _pinEnteringSwitcher;                                      // 0x0288 (size: 0x8)
    class UTextBlock* _enterPinTitleMessage;                                          // 0x0290 (size: 0x8)
    class UPanelWidget* _pinSlotsPanel;                                               // 0x0298 (size: 0x8)
    TSubclassOf<class UBankATMPinSlot> _pinSlotClass;                                 // 0x02A0 (size: 0x8)
    class UPanelWidget* _incorrectPinWarning;                                         // 0x02A8 (size: 0x8)
    class UTextBlock* _remainingAttemptsLabel;                                        // 0x02B0 (size: 0x8)
    class UBankATMPointingButton* _btnReturn;                                         // 0x02B8 (size: 0x8)
    class UBankATMPointingButton* _btnSubmit;                                         // 0x02C0 (size: 0x8)

}; // Size: 0x2E0

class UBankATMErrorPopup : public UUserWidget
{
    class UTextBlock* _popupMessage;                                                  // 0x0268 (size: 0x8)
    float _fadeInTime;                                                                // 0x0274 (size: 0x4)
    float _displayHoldTime;                                                           // 0x0278 (size: 0x4)
    float _fadeOutTime;                                                               // 0x027C (size: 0x4)

}; // Size: 0x288

class UBankATMGoldTrading : public UUserWidget
{
    class UConZCustomInteractionButton* _btnEjectCard;                                // 0x02C0 (size: 0x8)
    class UWidgetSwitcher* _buttonSwitcher;                                           // 0x02C8 (size: 0x8)
    class UBankATMPointingButton* _btnReturn;                                         // 0x02D0 (size: 0x8)
    class UBankATMPointingButton* _btnSubmit;                                         // 0x02D8 (size: 0x8)
    class UBankATMPointingButton* _btnNo;                                             // 0x02E0 (size: 0x8)
    class UBankATMPointingButton* _btnYes;                                            // 0x02E8 (size: 0x8)
    class UWidgetSwitcher* _subsectionSwitcher;                                       // 0x02F0 (size: 0x8)
    class UTextBlock* _goldBuyConversionLabel;                                        // 0x02F8 (size: 0x8)
    class UBankATMVirtualEditbox* _editBuyAmount;                                     // 0x0300 (size: 0x8)
    class UTextBlock* _creditsLostLabel;                                              // 0x0308 (size: 0x8)
    class UTextBlock* _goldSellConversionLabel;                                       // 0x0310 (size: 0x8)
    class UBankATMVirtualEditbox* _editSellAmount;                                    // 0x0318 (size: 0x8)
    class UTextBlock* _creditsGainedLabel;                                            // 0x0320 (size: 0x8)
    class UTextBlock* _questionLabel;                                                 // 0x0328 (size: 0x8)
    class UTextBlock* _errorLabel;                                                    // 0x0330 (size: 0x8)
    class UBankATMGoldValueGraph* _goldValueGraph;                                    // 0x0338 (size: 0x8)
    class UTextBlock* _goldBalanceTextBlock;                                          // 0x0340 (size: 0x8)
    class UTextBlock* _fundsSourceWarning;                                            // 0x0348 (size: 0x8)

    void HandleOnEjectClicked();
}; // Size: 0x370

class UBankATMGoldValueGraph : public UUserWidget
{
    class UVerticalBox* _yAxisVerticalBox;                                            // 0x0268 (size: 0x8)
    class UImage* _graphShadedAreaImg;                                                // 0x0270 (size: 0x8)
    class UHorizontalBox* _xAxisHorizontalBox;                                        // 0x0278 (size: 0x8)
    class UTextBlock* _graphDescriptionTextBox;                                       // 0x0280 (size: 0x8)

}; // Size: 0x288

class UBankATMMainPanel : public UUserWidget
{
    FBankATMMainPanelOnMouseMoveEvent OnMouseMoveEvent;                               // 0x0268 (size: 0x10)
    FEventReply OnPointerEvent(FGeometry MyGeometry, const FPointerEvent& MouseEvent);
    class UWidget* _virtualMouseCursorWidget;                                         // 0x0278 (size: 0x8)
    class UWidgetSwitcher* _panelSwitcher;                                            // 0x0290 (size: 0x8)
    class UBankATMWelcomeScreen* _welcomeScreen;                                      // 0x0298 (size: 0x8)
    class UBankATMEnterPin* _enterPinScreen;                                          // 0x02A0 (size: 0x8)
    class UBankATMChooseTransaction* _chooseTransactionScreen;                        // 0x02A8 (size: 0x8)
    class UBankATMMoneyTransfer* _moneyTransferScreen;                                // 0x02B0 (size: 0x8)
    class UBankATMGoldTrading* _goldTradingScreen;                                    // 0x02B8 (size: 0x8)
    class UBankATMManageCards* _manageCardsScreen;                                    // 0x02C0 (size: 0x8)
    class UBankATMAccountInfo* _accountInfoScreen;                                    // 0x02C8 (size: 0x8)
    class UBankATMAccountSummary* _accountSummaryHeader;                              // 0x02D0 (size: 0x8)
    class UPanelWidget* _loadingOverlay;                                              // 0x02D8 (size: 0x8)

}; // Size: 0x2E8

class UBankATMManageCards : public UUserWidget
{
    class UWidgetSwitcher* _screenSwitcher;                                           // 0x0290 (size: 0x8)
    class UHorizontalBox* _boughtCardsHorizontalBox;                                  // 0x0298 (size: 0x8)
    class UBankATMBoughtCard* _boughtCardStarter;                                     // 0x02A0 (size: 0x8)
    class UBankATMBoughtCard* _boughtCardGold;                                        // 0x02A8 (size: 0x8)
    class UBankATMBoughtCard* _boughtCardClassic;                                     // 0x02B0 (size: 0x8)
    class UTextBlock* _textNoCards;                                                   // 0x02B8 (size: 0x8)
    class UHorizontalBox* _buyableCardsHorizontalBox;                                 // 0x02C0 (size: 0x8)
    class UBankATMBuyableCard* _buyableCardClassic;                                   // 0x02C8 (size: 0x8)
    class UBankATMBuyableCard* _buyableCardGold;                                      // 0x02D0 (size: 0x8)
    class UTextBlock* _textInventoryBalance;                                          // 0x02D8 (size: 0x8)
    class UTextBlock* _textAccountBalance;                                            // 0x02E0 (size: 0x8)
    class UBankATMPointingButton* _btnBack;                                           // 0x02E8 (size: 0x8)
    class UBankATMCardManagementOptionsScreen* _cardManagementOptionsScreen;          // 0x02F0 (size: 0x8)
    class UBankATMYesNoConfirmationScreen* _purchaseConfirmationScreen;               // 0x02F8 (size: 0x8)
    class UBankATMYesNoConfirmationScreen* _cancellationConfirmationScreen;           // 0x0300 (size: 0x8)
    class UBankATMYesNoConfirmationScreen* _renewalConfirmationScreen;                // 0x0308 (size: 0x8)

}; // Size: 0x318

class UBankATMMinigameConfiguration : public UMinigameConfiguration
{
}; // Size: 0x68

class UBankATMMoneyTransfer : public UUserWidget
{
    class UButton* _btnEjectCard;                                                     // 0x02A8 (size: 0x8)
    class UWidgetSwitcher* _buttonSwitcher;                                           // 0x02B0 (size: 0x8)
    class UBankATMPointingButton* _btnReturn;                                         // 0x02B8 (size: 0x8)
    class UBankATMPointingButton* _btnSubmit;                                         // 0x02C0 (size: 0x8)
    class UBankATMPointingButton* _btnNo;                                             // 0x02C8 (size: 0x8)
    class UBankATMPointingButton* _btnYes;                                            // 0x02D0 (size: 0x8)
    class UWidgetSwitcher* _subsectionSwitcher;                                       // 0x02D8 (size: 0x8)
    class UBankATMVirtualEditbox* _editAccountNumber;                                 // 0x02E0 (size: 0x8)
    class UBankATMVirtualEditbox* _editTransferAmount;                                // 0x02E8 (size: 0x8)
    class UBankATMVirtualEditbox* _editDepositAmount;                                 // 0x02F0 (size: 0x8)
    class UBankATMVirtualEditbox* _editWithdrawAmount;                                // 0x02F8 (size: 0x8)
    class UTextBlock* _questionLabel;                                                 // 0x0300 (size: 0x8)
    class UTextBlock* _errorLabel;                                                    // 0x0308 (size: 0x8)
    class UTextBlock* _commissionPercentageTextBlock;                                 // 0x0310 (size: 0x8)
    class UTextBlock* _inventoryBalanceTextBlock;                                     // 0x0318 (size: 0x8)

    void HandleOnEjectCardButtonClicked();
}; // Size: 0x368

class UBankATMMyCardsButton : public UUserWidget
{
    class UImage* _background;                                                        // 0x0280 (size: 0x8)
    class UImage* _cardIcon;                                                          // 0x0288 (size: 0x8)
    class UTextBlock* _labelMy;                                                       // 0x0290 (size: 0x8)
    class UTextBlock* _labelCards;                                                    // 0x0298 (size: 0x8)
    FBankATMMyCardsButtonStateVisual _normalVisuals;                                  // 0x02A8 (size: 0x120)
    FBankATMMyCardsButtonStateVisual _hoveredVisuals;                                 // 0x03C8 (size: 0x120)
    FBankATMMyCardsButtonStateVisual _pressedVisuals;                                 // 0x04E8 (size: 0x120)
    FBankATMMyCardsButtonStateVisual _disabledVisuals;                                // 0x0608 (size: 0x120)

}; // Size: 0x728

class UBankATMPinSlot : public UUserWidget
{
    class UWidgetSwitcher* _pinNumberTypeSwitcher;                                    // 0x0278 (size: 0x8)
    class UTextBlock* _pinNumber;                                                     // 0x0280 (size: 0x8)
    class UImage* _animatedEntryBar;                                                  // 0x0288 (size: 0x8)
    class UWidgetAnimation* _enterNumber;                                             // 0x0290 (size: 0x8)
    class UWidgetAnimation* _enterNumberLast;                                         // 0x0298 (size: 0x8)
    float _caretBlinkSeconds;                                                         // 0x02B0 (size: 0x4)

    void OnCaretSettles();
    void OnCaretCoversNumber();
}; // Size: 0x2B8

class UBankATMPointingButton : public UUserWidget
{
    FText _titleText;                                                                 // 0x0290 (size: 0x18)
    bool _isPointingRight;                                                            // 0x02A8 (size: 0x1)
    class UImage* _backgroundImage;                                                   // 0x02B0 (size: 0x8)
    class UTextBlock* _titleLabel;                                                    // 0x02B8 (size: 0x8)
    FBankATMPointingButtonStateVisual _normalVisuals;                                 // 0x02C8 (size: 0x98)
    FBankATMPointingButtonStateVisual _hoveredVisuals;                                // 0x0360 (size: 0x98)
    FBankATMPointingButtonStateVisual _pressedVisuals;                                // 0x03F8 (size: 0x98)
    FBankATMPointingButtonStateVisual _disabledVisuals;                               // 0x0490 (size: 0x98)

}; // Size: 0x528

class UBankATMUIController : public UObject
{
}; // Size: 0x120

class UBankATMVirtualEditbox : public UUserWidget
{
    FText _hintText;                                                                  // 0x0280 (size: 0x18)
    class UImage* _outline;                                                           // 0x0298 (size: 0x8)
    class UTextBlock* _hintLabel;                                                     // 0x02A0 (size: 0x8)
    class UTextBlock* _editboxLabel;                                                  // 0x02A8 (size: 0x8)
    FBankATMVirtualEditboxStateVisual _inactiveVisuals;                               // 0x02B4 (size: 0x10)
    FBankATMVirtualEditboxStateVisual _activeVisuals;                                 // 0x02C4 (size: 0x10)
    FBankATMVirtualEditboxStateVisual _disabledVisuals;                               // 0x02D4 (size: 0x10)

}; // Size: 0x2E8

class UBankATMWelcomeScreen : public UUserWidget
{
    class UButton* _btnCardsPrevious;                                                 // 0x0288 (size: 0x8)
    class UButton* _btnCardsNext;                                                     // 0x0290 (size: 0x8)
    class UPanelWidget* _cardCarousel;                                                // 0x0298 (size: 0x8)
    class UBankATMMyCardsButton* _btnMyCards;                                         // 0x02A0 (size: 0x8)

    void HandleOnCardsPreviousClicked();
    void HandleOnCardsNextClicked();
}; // Size: 0x2C0

class UBankATMYesNoConfirmationScreen : public UUserWidget
{
    class UTextBlock* _textDialog;                                                    // 0x0288 (size: 0x8)
    class UBankATMPointingButton* _btnCancel;                                         // 0x0290 (size: 0x8)
    class UBankATMPointingButton* _btnYes;                                            // 0x0298 (size: 0x8)

}; // Size: 0x2A0

class UBankAccountRegistry : public UActorComponent
{

    void ResetDailyTransactionLimitsOnAllAccounts();
}; // Size: 0x1C8

class UBankAccountRegistryRequest : public UPlayerRpcChannelServerRequest
{
}; // Size: 0x48

class UBankAccountRegistryResponse : public UPlayerRpcChannelServerResponse
{
    class UBankAccountRegistryResponseDataObject* _payload;                           // 0x0028 (size: 0x8)

}; // Size: 0x30

class UBankAccountRegistryResponseDataObject : public UObject
{
}; // Size: 0xA0

class UBankAccountRegistryStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UBankCardItemComponent : public UItemComponent
{
    FDbIntegerId _ownerUserProfileId;                                                 // 0x00C8 (size: 0x8)
    int64 _bankAccountNumber;                                                         // 0x00D0 (size: 0x8)
    EBankCardType _bankCardType;                                                      // 0x00D8 (size: 0x1)

}; // Size: 0xE0

class UBankCardOperationRequest : public UPlayerRpcChannelServerRequest
{
}; // Size: 0x40

class UBankCardOperationResponse : public UPlayerRpcChannelServerResponse
{
}; // Size: 0x30

class UBankCardOwnershipRequest : public UPlayerRpcChannelServerRequest
{
}; // Size: 0x30

class UBankCardOwnershipResponse : public UPlayerRpcChannelServerResponse
{
}; // Size: 0x80

class UBankTransactionAssetData : public UInteractionAssetData
{
    TSubclassOf<class ABankATMMinigame> BankATMMinigame;                              // 0x0030 (size: 0x8)

}; // Size: 0x38

class UBankTransactionRequest : public UPlayerRpcChannelServerRequest
{
}; // Size: 0x60

class UBankTransactionResponse : public UPlayerRpcChannelServerResponse
{
}; // Size: 0x30

class UBarberShopMenuWidget : public UBaseMenu
{
    class UOverlay* _overlayMenu;                                                     // 0x0270 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderHairStyle;                                  // 0x0278 (size: 0x8)
    class UCCGameUpgradeConditionDisplayWidget* _hairStyleUpgradeConditionDisplay;    // 0x0280 (size: 0x8)
    class UVerticalBox* _facialHairVerticalBox;                                       // 0x0288 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderMoustacheStyle;                             // 0x0290 (size: 0x8)
    class UCCGameUpgradeConditionDisplayWidget* _moustacheStyleUpgradeConditionDisplay; // 0x0298 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderBeardStyle;                                 // 0x02A0 (size: 0x8)
    class UCCGameUpgradeConditionDisplayWidget* _beardStyleUpgradeConditionDisplay;   // 0x02A8 (size: 0x8)
    class UPresetColorPicker* _presetColorPickerHairColor;                            // 0x02B0 (size: 0x8)
    class UCollapsableColorPicker* _dropdownColorPickerEyeshadow;                     // 0x02B8 (size: 0x8)
    class UCollapsableColorPicker* _dropdownColorPickerEyeliner;                      // 0x02C0 (size: 0x8)
    class UVerticalBox* _makeupVerticalBox;                                           // 0x02C8 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderEyesMakeupMetalness;                        // 0x02D0 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderEyesMakeupIntensity;                        // 0x02D8 (size: 0x8)
    class UCollapsableColorPicker* _dropdownColorPickerLipstickColor;                 // 0x02E0 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderLipstickGlossiness;                         // 0x02E8 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderLipstickIntensity;                          // 0x02F0 (size: 0x8)
    class UConZStandardButton* _buttonRandomize;                                      // 0x02F8 (size: 0x8)
    class UConZStandardButton* _buttonApply;                                          // 0x0300 (size: 0x8)
    class UOverlay* _overlayConfirmation;                                             // 0x0308 (size: 0x8)
    class UConZStandardButton* _buttonCancelConfirmation;                             // 0x0310 (size: 0x8)
    class UConZStandardButton* _buttonContinueConfirmation;                           // 0x0318 (size: 0x8)
    class UScrollBox* _faceOptionsScrollbox;                                          // 0x0320 (size: 0x8)

    void OnRandomizeClicked();
    void OnContinueClickedInConfirmationPanel();
    void OnCancelClickedInConfirmationPanel();
    void OnApplyClicked();
}; // Size: 0x458

class UBaseBuildingBaseEntitySetup : public UEntitySetup
{
}; // Size: 0x80

class UBaseBuildingComponent : public UStaticMeshComponent
{
    FString _name;                                                                    // 0x04F8 (size: 0x10)
    EBaseElementType _baseElementType;                                                // 0x0508 (size: 0x4)
    bool _forbidPlacementOfOtherElements;                                             // 0x050C (size: 0x1)
    bool _useBoxOverlapTypeWhitelist;                                                 // 0x050D (size: 0x1)
    int32 _boxOverlapTypeWhitelist;                                                   // 0x0510 (size: 0x4)
    bool _isClimbable;                                                                // 0x0514 (size: 0x1)
    bool _isBlockingItemPlacement;                                                    // 0x0515 (size: 0x1)
    TArray<class UStaticMesh*> _staticMeshVariations;                                 // 0x0518 (size: 0x10)
    class UChoppingRecipeDataAsset* _choppingRecipeAsset;                             // 0x0528 (size: 0x8)
    float _healthPoints;                                                              // 0x0530 (size: 0x4)
    bool _canBeDamaged;                                                               // 0x0534 (size: 0x1)
    float _hoursToDecay;                                                              // 0x0538 (size: 0x4)
    float _hoursToDecayOutsideFlagArea;                                               // 0x053C (size: 0x4)
    int32 _startDecayingIfFlagAreaHasMoreThan;                                        // 0x0540 (size: 0x4)
    bool _isUsedForRespawn;                                                           // 0x0544 (size: 0x1)
    float _explosionResistance;                                                       // 0x0548 (size: 0x4)
    class UCurveFloat* _collisionDamageModifierFromEnergy;                            // 0x0550 (size: 0x8)
    class UStaticMesh* _weatherMaskMesh;                                              // 0x0558 (size: 0x8)
    bool _canBePlacedWithoutFlag;                                                     // 0x0560 (size: 0x1)
    bool _canBePlacedInBuilding;                                                      // 0x0561 (size: 0x1)
    bool _canBePlacedInRestrictedArea;                                                // 0x0562 (size: 0x1)
    bool _canBePlacedInAbandonedBunker;                                               // 0x0563 (size: 0x1)
    bool _canBePainted;                                                               // 0x0564 (size: 0x1)
    int32 _maxInstancesPerFlagArea;                                                   // 0x0568 (size: 0x4)
    FGameplayTag _maxInstancesServerSettingTag;                                       // 0x056C (size: 0x8)
    bool _shouldUseParentClassForMaxInstances;                                        // 0x0574 (size: 0x1)
    class UPlaceableCraftingRecipe* _upgradeRecipe;                                   // 0x0578 (size: 0x8)
    bool _cascadeDestroySnappedElementsOnUpgrade;                                     // 0x0580 (size: 0x1)
    bool _checkOverlapsBelowOnUpgrade;                                                // 0x0581 (size: 0x1)
    bool _ignoreDisabledBaseBuildingFlag;                                             // 0x0582 (size: 0x1)
    bool _isTileable;                                                                 // 0x0583 (size: 0x1)
    bool _mustBePlacedOnFoundation;                                                   // 0x0584 (size: 0x1)
    bool _canEverBePlacedOnFoundation;                                                // 0x0585 (size: 0x1)
    bool _canBePlacedOnOtherBaseElements;                                             // 0x0586 (size: 0x1)
    bool _canBePlacedWithoutSnapping;                                                 // 0x0587 (size: 0x1)
    bool _shouldIgnoreSelfWhilePlacing;                                               // 0x0588 (size: 0x1)
    bool _canBeGroundedOnOtherElements;                                               // 0x0589 (size: 0x1)
    uint8 _maxHeightLevel;                                                            // 0x058A (size: 0x1)
    float _maxHeightDifference;                                                       // 0x058C (size: 0x4)
    bool _addRandomRotation;                                                          // 0x0590 (size: 0x1)
    bool _mustGroundAllPoints;                                                        // 0x0591 (size: 0x1)
    bool _mustBePlacedUpright;                                                        // 0x0592 (size: 0x1)
    EConZPlacementHeightType _placementHeightType;                                    // 0x0593 (size: 0x1)
    bool _useSimpleCollisionForOverlaps;                                              // 0x0594 (size: 0x1)
    bool _markedForBoundsBoundsCheck;                                                 // 0x0595 (size: 0x1)
    FRotator _maxRotationWhilePlacing;                                                // 0x0598 (size: 0xC)
    bool _useEncapsulationTestWhenSnapping;                                           // 0x05A4 (size: 0x1)
    TArray<FElementSnapMarker> _elementSnapMarkers;                                   // 0x05A8 (size: 0x10)
    TArray<FBaseBuildingSizeVariation> _sizeVariations;                               // 0x05B8 (size: 0x10)
    float _sizeVariationsSpacing;                                                     // 0x05CC (size: 0x4)
    float _repairTime;                                                                // 0x05D0 (size: 0x4)
    FRepairableParams _repairableParams;                                              // 0x05D8 (size: 0x38)
    float _experienceAwardForBuilding;                                                // 0x0610 (size: 0x4)
    TArray<class UParticleSystem*> _destructionParticles;                             // 0x0618 (size: 0x10)
    TArray<FTransform> _destructionParticlesSpawnTransforms;                          // 0x0628 (size: 0x10)
    class UAkAudioEvent* _destructionSound;                                           // 0x0638 (size: 0x8)
    bool _isDoor;                                                                     // 0x0640 (size: 0x1)
    TSubclassOf<class ADoor> _doorClass;                                              // 0x0648 (size: 0x8)
    bool _hasLadder;                                                                  // 0x0650 (size: 0x1)
    TArray<FLadderMarker> _ladderMarkers;                                             // 0x0658 (size: 0x10)
    bool _hasWindows;                                                                 // 0x0668 (size: 0x1)
    TArray<FWindowMarker> _windowMarkers;                                             // 0x0670 (size: 0x10)
    TArray<FBaseElementDamageZone> _damageZones;                                      // 0x0680 (size: 0x10)
    bool _shouldDestroyElementsOnTopWhenDestroyed;                                    // 0x0690 (size: 0x1)
    bool _disableBeingDestroyedByOtherElement;                                        // 0x0691 (size: 0x1)
    float _destructionTime;                                                           // 0x0694 (size: 0x4)
    bool _shouldRemoveIntersectingElementsOnDestroy;                                  // 0x0698 (size: 0x1)
    TArray<FBaseElementDestructionZone> _destructionZones;                            // 0x06A0 (size: 0x10)
    bool _useAsReplenishableResource;                                                 // 0x06B0 (size: 0x1)
    FReplenishableResourceDescription _replenishableResourceDescription;              // 0x06B8 (size: 0x88)
    bool _shouldCheckBaseBuildingElementsInFirstBoxOverlap;                           // 0x0740 (size: 0x1)
    bool _shouldLogStateChanges;                                                      // 0x0741 (size: 0x1)
    FName _collisionChannelName;                                                      // 0x0744 (size: 0x8)

}; // Size: 0x750

class UBaseBuildingDetailsPanel : public UUserWidget
{
    class UBigItemCraftingButton* _bigItemCraftingButton;                             // 0x0270 (size: 0x8)
    class UTextBlock* _descriptionTextBlock;                                          // 0x0278 (size: 0x8)
    class UCheckBox* _expandIngredientsCheckBox;                                      // 0x0280 (size: 0x8)
    class UWrapBox* _recipeIngredientButtonsWrapBox;                                  // 0x0288 (size: 0x8)
    class UOverlay* _possibleIngredientsOverlay;                                      // 0x0290 (size: 0x8)
    class UWrapBox* _possibleRecipeIngredientButtonsWrapBox;                          // 0x0298 (size: 0x8)
    TSubclassOf<class URecipeIngredientButton> _recipeIngredientButtonClass;          // 0x02A0 (size: 0x8)
    TSubclassOf<class URecipeIngredientButton> _possibleRecipeIngredientButtonClass;  // 0x02A8 (size: 0x8)

    void OnDropdownStateChanged(bool isCollapsed);
}; // Size: 0x360

class UBaseBuildingItemComponent : public UBaseBuildingComponent
{
    TSubclassOf<class AItem> _itemClass;                                              // 0x0750 (size: 0x8)
    bool _shouldDestroyAssociatedItemWhenMovedOutOfFlag;                              // 0x0758 (size: 0x1)
    bool _shouldDestroyElementWhenMovedOutOfFlag;                                     // 0x0759 (size: 0x1)

}; // Size: 0x760

class UBaseBuildingPanel : public UUserWidget
{
    class UCraftingCategoriesTabButtonsContainer* _craftingCategoriesTabButtonsContainer; // 0x0270 (size: 0x8)
    class USearchBox* _searchBox;                                                     // 0x0278 (size: 0x8)
    class UWidgetSwitcher* _categoriesDetailsSwitcher;                                // 0x0280 (size: 0x8)
    class UTextBlock* _selectedCategoryTitle;                                         // 0x0288 (size: 0x8)
    class UScrollBox* _categoriesScrollBox;                                           // 0x0290 (size: 0x8)
    class UBaseBuildingDetailsPanel* _baseBuildingDetailsPanel;                       // 0x0298 (size: 0x8)
    class UPrimaryButton* _detailsAndBackButton;                                      // 0x02A0 (size: 0x8)
    FText _detailsTooltipText;                                                        // 0x02A8 (size: 0x18)
    FText _backTooltipText;                                                           // 0x02C0 (size: 0x18)
    class UPrimaryButton* _placeButton;                                               // 0x02D8 (size: 0x8)
    FText _placeTooltipText;                                                          // 0x02E0 (size: 0x18)
    class UPlacedPlaceableWidget* _placedPlaceablesContainer;                         // 0x02F8 (size: 0x8)
    class UConZCustomInteractionButton* _collapseAllButton;                           // 0x0300 (size: 0x8)
    class UConZCustomInteractionButton* _expandAllButton;                             // 0x0308 (size: 0x8)
    TSubclassOf<class UCraftingRecipeButtonsContainer> _craftingRecipeButtonsContainerClass; // 0x0310 (size: 0x8)
    FMargin _categoriesPadding;                                                       // 0x0318 (size: 0x10)
    TSubclassOf<class UTextOnlyTooltip> _tooltipClass;                                // 0x0328 (size: 0x8)

    void OnPlaceButtonClicked();
    void OnDetailsAndBackButtonClicked();
    void OnAnyButtonHovered();
    void HandleOnExpandAllClicked();
    void HandleOnCollapseAllClicked();
}; // Size: 0x398

class UBaseBuildingStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UBaseBuildingUIContext : public UUIContext
{
}; // Size: 0x28

class UBaseBuildingUIController : public UCraftingUIControllerBase
{
}; // Size: 0x3C0

class UBaseInteractionComponent : public USceneComponent
{
    float _capsuleRadius;                                                             // 0x0208 (size: 0x4)
    float _capsuleHalfHeight;                                                         // 0x020C (size: 0x4)

}; // Size: 0x220

class UBaseItemContainerWidget : public UUserWidget
{
    FBaseItemContainerWidgetObjectAddedToContainer ObjectAddedToContainer;            // 0x0268 (size: 0x10)
    void OnObjectAddedToContainerEvent(class UObject* Object);
    int32 Columns;                                                                    // 0x027C (size: 0x4)
    int32 Rows;                                                                       // 0x0280 (size: 0x4)
    class UGridPanel* GridPanel;                                                      // 0x0288 (size: 0x8)
    class UUserWidget* HighlightBorder;                                               // 0x0290 (size: 0x8)

    void RefreshSize();
    void OnObjectAddedToContainerEvent__DelegateSignature(class UObject* Object);
    void OnDropEvent(class UInventorySlotUserWidget* inventorySlot, class UBaseItemWidget* Item);
    void OnDragStartEvent(class UBaseItemWidget* Widget, const FGeometry& Geometry);
    void OnDragLeaveEvent(class UInventorySlotUserWidget* inventorySlot, class UBaseItemWidget* Widget);
    void OnDragEnterEvent(class UInventorySlotUserWidget* inventorySlot, class UBaseItemWidget* Widget);
    void OnDragCancelledEvent(class UBaseItemWidget* Widget);
    void InitGrid(const FMargin& gridPadding);
    bool GetSlotsForPanel(class UGridSlot* GridSlot, int32 Width, int32 Height, TArray<class UInventorySlotUserWidget*>& Slots, class UGridPanel* panel, int32 numColumns, int32 numRows);
    bool GetSlots(class UGridSlot* GridSlot, int32 Width, int32 Height, TArray<class UInventorySlotUserWidget*>& Slots);
    TArray<class UItemUserWidget*> GetItemWidgets();
}; // Size: 0x2A0

class UBaseItemTag : public UDataAsset
{
}; // Size: 0x30

class UBaseItemWidget : public UUserWidget
{
    class UBaseItemContainerWidget* ParentInventory;                                  // 0x0268 (size: 0x8)
    int32 Width;                                                                      // 0x0278 (size: 0x4)
    int32 Height;                                                                     // 0x027C (size: 0x4)
    class UImage* _imageWidget;                                                       // 0x0280 (size: 0x8)

    void SetStacksCount(int32 Count);
    int32 GetStacksCount();
    void GetDragImage(FGeometry Geometry, class UInventorySlotUserWidget* widgetImage);
    void DragCancelled();
}; // Size: 0x288

class UBaseMenu : public UUserWidget
{
}; // Size: 0x268

class UBaseMinigameAnimator : public UObject
{
}; // Size: 0x28

class UBaseMountPathBlocker : public UObject
{
}; // Size: 0x30

class UBaseResourceLightAnimator : public UObject
{
    float _perlinNoiseTraversalSpeed;                                                 // 0x0030 (size: 0x4)
    FRuntimeFloatCurve _resourceRatioToBaseLightModifierCurve;                        // 0x0038 (size: 0x88)
    FRuntimeFloatCurve _resourceRatioToRandomLightModifierBumpCurve;                  // 0x00C0 (size: 0x88)

}; // Size: 0x168

class UBasicGameResourceContainerComponent : public UItemComponent
{
    TSubclassOf<class UGameResourceType> _repResourceType;                            // 0x00E8 (size: 0x8)
    float _repResourceAmount;                                                         // 0x00F0 (size: 0x4)
    FGameplayTagContainer _resourceFillingInSocketTypes;                              // 0x00F8 (size: 0x20)
    FGameplayTagContainer _resourceFillingOutSocketTypes;                             // 0x0118 (size: 0x20)
    TArray<class UBaseItemTag*> _requiredItemTagsForFilling;                          // 0x0138 (size: 0x10)
    bool _shouldUpdateOwningItemUses;                                                 // 0x0148 (size: 0x1)
    bool _amountDependsOnItemWeight;                                                  // 0x0149 (size: 0x1)
    bool _canDrink;                                                                   // 0x014A (size: 0x1)
    bool _canSpill;                                                                   // 0x014B (size: 0x1)
    bool _canCheck;                                                                   // 0x014C (size: 0x1)
    bool _canFill;                                                                    // 0x014D (size: 0x1)
    bool _showResourcePercentageOnCheck;                                              // 0x014E (size: 0x1)
    bool _shouldUncraftWhenEmpty;                                                     // 0x014F (size: 0x1)
    bool _shouldSpillWhenPickedUp;                                                    // 0x0150 (size: 0x1)
    bool _shouldSpillWhenAddedToContainer;                                            // 0x0151 (size: 0x1)
    bool _shouldTakeInHandsWhenDrinking;                                              // 0x0152 (size: 0x1)
    FText _interactionText;                                                           // 0x0158 (size: 0x18)
    class UAnimMontage* _resourceFillingMontage;                                      // 0x0170 (size: 0x8)
    class UAkAudioEvent* _resourceStartFillingAudioEvent;                             // 0x0178 (size: 0x8)
    class UAkAudioEvent* _resourceStopFillingAudioEvent;                              // 0x0180 (size: 0x8)
    float _resourceFillingDurationPerAmountFilled;                                    // 0x0188 (size: 0x4)
    float _resourceFillingExperiencePerAmount;                                        // 0x018C (size: 0x4)
    EPrisonerGroundStance _targetStanceWhenFilling;                                   // 0x0190 (size: 0x1)
    bool _shouldTakeInHandsWhenFilling;                                               // 0x0191 (size: 0x1)
    class UAkAudioEvent* _spillStartAudioEvent;                                       // 0x0198 (size: 0x8)
    class UAkAudioEvent* _spillStopAudioEvent;                                        // 0x01A0 (size: 0x8)
    class UAnimMontage* _spillMontage;                                                // 0x01A8 (size: 0x8)
    class UAnimMontage* _spillMontageEnd;                                             // 0x01B0 (size: 0x8)
    class UParticleSystem* _particles;                                                // 0x01B8 (size: 0x8)
    float _minSpillTime;                                                              // 0x01C0 (size: 0x4)
    float _maxSpillTime;                                                              // 0x01C4 (size: 0x4)
    float _spillTimePerKg;                                                            // 0x01C8 (size: 0x4)
    class UAkAudioEvent* _drinkStartAudioEvent;                                       // 0x01D0 (size: 0x8)
    class UAkAudioEvent* _drinkStopAudioEvent;                                        // 0x01D8 (size: 0x8)
    float _EMInterferenceDisabledTime;                                                // 0x01E0 (size: 0x4)

    void OnRep_ResourceType();
    void OnRep_ResourceAmount();
}; // Size: 0x1F0

class UBasicGameResourceSlotItemComponent : public UItemComponent
{
    float _EMInterferenceDisabledTime;                                                // 0x0100 (size: 0x4)
    bool _disableInteractions;                                                        // 0x0108 (size: 0x1)
    TSubclassOf<class AItem> _repResourceClass;                                       // 0x0110 (size: 0x8)
    float _repResourceAmountRatio;                                                    // 0x0118 (size: 0x4)
    float _repResourceUsageRateNormalized;                                            // 0x011C (size: 0x4)

    void OnRep_RepResourceAmountRatio();
}; // Size: 0x120

class UBasicItemDecayEntityComponentSetup : public UEntityComponentSetup
{
    float LifeTime;                                                                   // 0x0048 (size: 0x4)

}; // Size: 0x50

class UBasicNotification : public UConZNotification
{
}; // Size: 0x30

class UBasicNotificationDescription : public UNotificationDescription
{
    FText Message;                                                                    // 0x0040 (size: 0x18)
    int32 FontSize;                                                                   // 0x0058 (size: 0x4)
    class UTexture2D* Icon;                                                           // 0x0060 (size: 0x8)
    int32 IconSize;                                                                   // 0x0068 (size: 0x4)
    float Duration;                                                                   // 0x006C (size: 0x4)
    bool Ping;                                                                        // 0x0070 (size: 0x1)

}; // Size: 0x78

class UBasicPrisonerBodySymptomNotifier : public UPrisonerBodySymptomNotifier
{
    FFloatInterval _triggerDelay;                                                     // 0x0030 (size: 0x8)
    bool _shouldDisplayNotificationOnChangeForWorse;                                  // 0x0038 (size: 0x1)
    bool _shouldResetNotificationTimerOnSeverityChange;                               // 0x0039 (size: 0x1)
    TArray<FBasicPrisonerBodySymptomNotificationParameters> _notificationParameters;  // 0x0040 (size: 0x10)

}; // Size: 0x60

class UBasicTextWidget : public UUserWidget
{
    int32 MaxTextRows;                                                                // 0x0268 (size: 0x4)
    int32 MaxCharactersPerTextRow;                                                    // 0x026C (size: 0x4)

    void SetCurrentText(const FText& Text);
}; // Size: 0x270

class UBatchFuelHeatSource : public UFueledHeatSource
{
    float _fuelMassCapacity;                                                          // 0x0220 (size: 0x4)
    FCombustibleItemParams _initialFuelCombustionParams;                              // 0x0224 (size: 0x8)
    float _initialFuelMass;                                                           // 0x022C (size: 0x4)
    float _temperatureMultiplierRain;                                                 // 0x0230 (size: 0x4)
    EBlowAirAnimHeight _heightForBlowAirAnimation;                                    // 0x0234 (size: 0x1)
    float _distanceForBlowAirAnimation;                                               // 0x0238 (size: 0x4)
    bool _isBurning;                                                                  // 0x023C (size: 0x1)
    int32 _burningStage;                                                              // 0x0240 (size: 0x4)
    float _repFuelMass;                                                               // 0x0244 (size: 0x4)

    void OnRep_IsBurning();
    void OnRep_BurningStage();
}; // Size: 0x260

class UBatteryEntityComponentSave : public UGameResourceContainerEntityComponentSave
{
}; // Size: 0x40

class UBatteryEntityComponentSetup : public UGameResourceContainerEntityComponentSetup
{
    float Voltage;                                                                    // 0x0070 (size: 0x4)
    float BaseDrainRate;                                                              // 0x0074 (size: 0x4)
    bool IsRechargeable;                                                              // 0x0078 (size: 0x1)

}; // Size: 0x80

class UBatteryItemComponent : public UBasicGameResourceContainerComponent
{
    float _repResourceUsageRate;                                                      // 0x01F0 (size: 0x4)

    void OnRep_ResourceUsageRate();
}; // Size: 0x1F8

class UBedrollItemEntitySave : public UObject
{
    bool IsRolledUp;                                                                  // 0x0028 (size: 0x1)

}; // Size: 0x30

class UBedrollItemEntitySetup : public UItemEntitySetup
{
}; // Size: 0x90

class UBedrollVirtualizedItemUserData : public UVirtualizedItemUserData
{
    FDbIntegerId Occupant;                                                            // 0x0028 (size: 0x8)
    FDateTime TimerStart;                                                             // 0x0030 (size: 0x8)
    FTimespan TimerDuration;                                                          // 0x0038 (size: 0x8)
    bool ShouldLoad;                                                                  // 0x0040 (size: 0x1)

}; // Size: 0x48

class UBigItemCraftingButton : public UUserWidget
{
    class UCheckBox* _favouriteStar;                                                  // 0x02E0 (size: 0x8)
    class UOverlay* _quantityDataOverlay;                                             // 0x02E8 (size: 0x8)
    class UImage* _icon;                                                              // 0x02F0 (size: 0x8)
    class UTextBlock* _title;                                                         // 0x02F8 (size: 0x8)
    class UTextBlock* _quantity;                                                      // 0x0300 (size: 0x8)
    class UTextBlock* _quantityFadeout;                                               // 0x0308 (size: 0x8)
    class UImage* _quantityBackground;                                                // 0x0310 (size: 0x8)
    class UImage* _quantityBackgroundFadeout;                                         // 0x0318 (size: 0x8)
    class UWidgetAnimation* _changeQuantity;                                          // 0x0320 (size: 0x8)

    void OnFavouritesStateChanged(bool IsChecked);
    void OnChangeQuantityAnimationMidway();
    void OnChangeQuantityAnimationEnded();
}; // Size: 0x330

class UBioChemSkill : public UIntelligenceSkill
{
}; // Size: 0xB0

class UBiomeData : public UDataAsset
{
    FGameplayTag BiomeTag;                                                            // 0x0030 (size: 0x8)
    class UMaterialInstance* VisualizationMaterial;                                   // 0x0038 (size: 0x8)
    TMap<class TSoftClassPtr<AAnimal2>, class FAnimalSpawnData> AnimalSpawnData;      // 0x0040 (size: 0x50)

}; // Size: 0x90

class UBird2AnimInstance : public UAnimInstance
{
    float ABPSpeed;                                                                   // 0x02B8 (size: 0x4)
    bool IsLanding;                                                                   // 0x02BC (size: 0x1)
    bool IsTakingOff;                                                                 // 0x02BD (size: 0x1)
    bool IsPerched;                                                                   // 0x02BE (size: 0x1)
    bool IsFlying;                                                                    // 0x02BF (size: 0x1)
    bool IsStaringPerched;                                                            // 0x02C0 (size: 0x1)
    FRotator SlopeRootTiltRotation;                                                   // 0x02C4 (size: 0xC)

}; // Size: 0x2D0

class UBluntMeleeWeaponItemTag : public UBaseItemTag
{
}; // Size: 0x30

class UBoatMountSlot : public UVehicleBaseMountSlot
{
    EBoatControlType _controlType;                                                    // 0x0188 (size: 0x1)
    class UAnimSequence* _startEngineStartAnimation;                                  // 0x0190 (size: 0x8)
    class UAnimSequence* _startEngineLoopAnimation;                                   // 0x0198 (size: 0x8)
    class UAnimSequence* _startEngineLongLoopAnimation;                               // 0x01A0 (size: 0x8)
    class UAnimSequence* _startEngineEndAnimation;                                    // 0x01A8 (size: 0x8)

}; // Size: 0x1B0

class UBombDefusalMinigameConfiguration : public UMinigameConfiguration
{
}; // Size: 0x70

class UBombDefusalWidget : public UMinigameWidget
{
    class UTextBlock* _remainingTimeMinutes1;                                         // 0x0280 (size: 0x8)
    class UTextBlock* _remainingTimeMinutes2;                                         // 0x0288 (size: 0x8)
    class UTextBlock* _remainingTimeSeconds1;                                         // 0x0290 (size: 0x8)
    class UTextBlock* _remainingTimeSeconds2;                                         // 0x0298 (size: 0x8)

    void ShowInfo();
    bool ShouldShowChangeDurationInfo();
    void OnSuccess();
    void HideInfo();
    int32 GetNumTries();
}; // Size: 0x2A0

class UBondageComponent : public USkeletalMeshComponent
{
    class AItem* _bondageItem;                                                        // 0x0ED8 (size: 0x8)
    EBoundBodyPart _boundBodyPart;                                                    // 0x0EE0 (size: 0x1)
    float _tightness;                                                                 // 0x0EE4 (size: 0x4)

    void UpdateVisuals();
    void OnRep_BoundBodyPart();
    void OnRep_BondageItem();
    class AItem* GetBondageItem();
}; // Size: 0xEF0

class UBondageItemTag : public UBaseItemTag
{
    class USkeletalMesh* BondageMesh;                                                 // 0x0030 (size: 0x8)
    float BaseStruggleDuration;                                                       // 0x0038 (size: 0x4)
    float StruggleStrengthModifier;                                                   // 0x003C (size: 0x4)
    float StruggleDexterityModifier;                                                  // 0x0040 (size: 0x4)
    float GroundMovementSpeedMultiplier;                                              // 0x0044 (size: 0x4)
    float WaterMovementSpeedMultiplier;                                               // 0x0048 (size: 0x4)
    class UAnimSequenceBase* HandsBoundIdleFPAnimation;                               // 0x0050 (size: 0x8)
    class UAnimSequenceBase* HandsBoundIdleTPAnimation;                               // 0x0058 (size: 0x8)
    class UAnimMontage* HandsBoundMontage;                                            // 0x0060 (size: 0x8)
    class UAnimMontage* HandsAdjustMontage;                                           // 0x0068 (size: 0x8)
    class UAnimMontage* HandsBoundStruggleMontage;                                    // 0x0070 (size: 0x8)
    class UAnimMontage* HandsFreedMontage;                                            // 0x0078 (size: 0x8)
    class UAnimMontage* BindingHandsMontage;                                          // 0x0080 (size: 0x8)
    class UAnimMontage* AdjustingHandsMontage;                                        // 0x0088 (size: 0x8)
    class UAnimMontage* HandsBoundSuicideMontage;                                     // 0x0090 (size: 0x8)

}; // Size: 0x98

class UBoxMotionTriggerComponent : public UMotionTriggerComponent
{
    class UBoxComponent* BoxCollisionComponent;                                       // 0x0528 (size: 0x8)
    FVector _triggerSize;                                                             // 0x0530 (size: 0xC)

    void BoxComponent_OnComponentEndOverlap(class UPrimitiveComponent* activatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
    void BoxComponent_OnComponentBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
}; // Size: 0x540

class UBoxingSkill : public UMeleeSkill
{
}; // Size: 0x108

class UBrennerAnimInstance : public UAnimInstance
{
    EBrennerState _brennerState;                                                      // 0x02C8 (size: 0x1)
    EBrennerMovementPace _desiredMovementPace;                                        // 0x02C9 (size: 0x1)
    FVector _acceleration;                                                            // 0x02CC (size: 0xC)
    bool _wantsToMove;                                                                // 0x02D8 (size: 0x1)
    bool _wantsToWalk;                                                                // 0x02D9 (size: 0x1)
    bool _wantsToJog;                                                                 // 0x02DA (size: 0x1)
    bool _wantsToCharge;                                                              // 0x02DB (size: 0x1)
    FVector _velocity;                                                                // 0x02DC (size: 0xC)
    float _speed;                                                                     // 0x02E8 (size: 0x4)
    float _speedXY;                                                                   // 0x02EC (size: 0x4)
    bool _isUsingFlamethrower;                                                        // 0x02F0 (size: 0x1)
    bool _isAimingFlamethrower;                                                       // 0x02F1 (size: 0x1)
    FVector _flamethrowerAimLocation;                                                 // 0x02F4 (size: 0xC)

}; // Size: 0x300

class UBrennerCommonData : public UDataAsset
{
    float AlertedSoundThreshold;                                                      // 0x0030 (size: 0x4)
    float TwitchSoundThreshold;                                                       // 0x0034 (size: 0x4)
    FFloatInterval SightAndAwarenessRange;                                            // 0x0038 (size: 0x8)
    float TwitchCooldown;                                                             // 0x0040 (size: 0x4)
    float HopForwardSpeed;                                                            // 0x0044 (size: 0x4)
    float PostHopCooldown;                                                            // 0x0048 (size: 0x4)
    float InvestigateAlarmDuration;                                                   // 0x004C (size: 0x4)
    FFloatInterval FlamethrowerRange;                                                 // 0x0050 (size: 0x8)
    float HalfAngleAtMinRange;                                                        // 0x0058 (size: 0x4)
    float HalfAngleAtMaxRange;                                                        // 0x005C (size: 0x4)
    class UAnimMontage* _animationsForEvents;                                         // 0x0060 (size: 0x30)
    TArray<class UAnimMontage*> FrontAttacks;                                         // 0x0090 (size: 0x10)
    TArray<class UAnimMontage*> BackAttacks;                                          // 0x00A0 (size: 0x10)
    TArray<class UAnimMontage*> LegAttacks;                                           // 0x00B0 (size: 0x10)
    TArray<class UAnimMontage*> AllAroundAttacks;                                     // 0x00C0 (size: 0x10)
    TArray<class UAnimMontage*> ChargeAttacks;                                        // 0x00D0 (size: 0x10)
    FName HeadBoneName;                                                               // 0x00E0 (size: 0x8)
    FGameplayTag HitReactTypeStanding;                                                // 0x00E8 (size: 0x8)
    float HeadShotDamageHitReactThreshold;                                            // 0x00F0 (size: 0x4)
    float AccumulatedDamageHitReactThreshold;                                         // 0x00F4 (size: 0x4)
    float BleedingChance;                                                             // 0x00F8 (size: 0x4)
    float BleedingCooldown;                                                           // 0x00FC (size: 0x4)
    int32 NumBleedsToEnterLongCooldown;                                               // 0x0100 (size: 0x4)
    float BleedingLongCooldown;                                                       // 0x0104 (size: 0x4)
    float BleedingDuration;                                                           // 0x0108 (size: 0x4)
    TArray<FBrennerCommonData_BleedingParticles> BleedingParticles;                   // 0x0110 (size: 0x10)
    TArray<TSoftClassPtr<ABloodStain>> PossibleBloodStains;                           // 0x0120 (size: 0x10)
    float BloodStainsOffsetAlongHitNormal;                                            // 0x0130 (size: 0x4)
    float DamageThresholdForRageMode;                                                 // 0x0134 (size: 0x4)
    float DamageDepletionRate;                                                        // 0x0138 (size: 0x4)
    float RageModeDuration;                                                           // 0x013C (size: 0x4)
    class UAkAudioEvent* HibernateAudioEvent;                                         // 0x0140 (size: 0x8)
    class UAkAudioEvent* AlertedAudioEvent;                                           // 0x0148 (size: 0x8)
    class UAkAudioEvent* CombatAudioEvent;                                            // 0x0150 (size: 0x8)
    class UAkAudioEvent* ChargeAudioEvent;                                            // 0x0158 (size: 0x8)

}; // Size: 0x160

class UBrennerMovementComponent : public UConZCharacterMovementComponent
{
    float _speedForPace;                                                              // 0x0DA0 (size: 0xC)
    float _accelerationForPace;                                                       // 0x0DAC (size: 0xC)

}; // Size: 0xDC0

class UBruisingComponent : public UActorComponent
{
    class UBruisingData* BruisingData;                                                // 0x00B0 (size: 0x8)
    bool FadeBruises;                                                                 // 0x00B8 (size: 0x1)
    float BruisesLifeTime;                                                            // 0x00BC (size: 0x4)
    float BruisesFadeUpdateInterval;                                                  // 0x00C0 (size: 0x4)
    class UTextureRenderTarget2D* _renderTargetByLayer;                               // 0x00C8 (size: 0x18)

    void MakeCompletelyBruised();
    class UTextureRenderTarget2D* GetBruiseLayerRenderTarget(EBruiseLayer Layer);
    void ClearBruises();
    void AddBruise(EBruiseZone zone);
}; // Size: 0x128

class UBruisingData : public UDataAsset
{
    TArray<FBruisePatch> Patches;                                                     // 0x0030 (size: 0x10)

}; // Size: 0x40

class UBuildingEntitySave : public UObject
{
    FBuildingEntityData BuildingData;                                                 // 0x0028 (size: 0x1)

}; // Size: 0x30

class UBuildingEntitySetup : public UEntitySetup
{
}; // Size: 0x80

class UBuildingHelperComponent : public UActorComponent
{
}; // Size: 0xB0

class UBuriableChestItemComponent : public UBuriableItemComponent
{
    int64 _decayInDaysWhenBuried;                                                     // 0x0180 (size: 0x8)

}; // Size: 0x190

class UBuriableChestItemComponentState : public UBuriableItemComponentState
{
    float StoredAutoDestructTime;                                                     // 0x0050 (size: 0x4)

}; // Size: 0x58

class UBuriableItemComponent : public UItemComponent
{
    bool _canEverShowMarker;                                                          // 0x00D0 (size: 0x1)
    bool _canBeBuried;                                                                // 0x00E1 (size: 0x1)
    bool _canBeBuriedInEnemyFlagArea;                                                 // 0x00E2 (size: 0x1)
    FBurialInformation _repBurialInformation;                                         // 0x00E8 (size: 0x18)
    class UStaticMesh* _buriedMesh;                                                   // 0x0108 (size: 0x8)
    FVector _buriedMeshScale;                                                         // 0x0110 (size: 0xC)
    FVector _buriedMeshRelativeLocation;                                              // 0x011C (size: 0xC)
    class UMaterialBillboardComponent* _spriteMarkerBillboard;                        // 0x0138 (size: 0x8)
    FMaterialSpriteElement _spriteMarkerData;                                         // 0x0140 (size: 0x28)
    FVector _spriteMarkerRelativeLocation;                                            // 0x0168 (size: 0xC)
    bool _applyBuryMaterial;                                                          // 0x0174 (size: 0x1)
    float _startMeshFadeDistance;                                                     // 0x0178 (size: 0x4)
    float _endMeshFadeDistance;                                                       // 0x017C (size: 0x4)

    void OnRep_UpdateBurialInformation();
}; // Size: 0x180

class UBuriableItemComponentState : public UItemComponentStateBase
{
    bool IsBuried;                                                                    // 0x0040 (size: 0x1)
    FDbIntegerId BurierUserId;                                                        // 0x0048 (size: 0x8)

}; // Size: 0x50

class UBuriableTrapItemComponent : public UBuriableItemComponent
{
}; // Size: 0x180

class UBurnDamageType : public UDamageType
{
}; // Size: 0x40

class UBuryData : public UDataAsset
{
    TMap<TEnumAsByte<EPhysicalSurface>, FBuryMaterialData> AllowedBuryMaterials;      // 0x0030 (size: 0x50)
    float StaminaDrain;                                                               // 0x0080 (size: 0x4)
    float RecoveredStaminaThreshold;                                                  // 0x0084 (size: 0x4)

}; // Size: 0x88

class UBuryToolItemTag : public UBaseItemTag
{
    bool IsSmallSizedTool;                                                            // 0x0030 (size: 0x1)
    int32 BuryItemUsage;                                                              // 0x0034 (size: 0x4)
    float BuryDurationModifier;                                                       // 0x0038 (size: 0x4)
    FName BladeTipSocket;                                                             // 0x003C (size: 0x8)
    FName BladeCenterSocket;                                                          // 0x0044 (size: 0x8)
    float ShortToolMinBuryTime;                                                       // 0x004C (size: 0x4)
    float ShortToolMaxBuryTime;                                                       // 0x0050 (size: 0x4)
    float LongToolMinBuryTime;                                                        // 0x0054 (size: 0x4)
    float LongToolMaxBuryTime;                                                        // 0x0058 (size: 0x4)

}; // Size: 0x60

class UC4PartTag : public UBaseItemTag
{
}; // Size: 0x30

class UCCGameUpgradeConditionDisplayWidget : public UUserWidget
{
    class UBorder* _border;                                                           // 0x0268 (size: 0x8)
    class UTextBlock* _text;                                                          // 0x0270 (size: 0x8)
    TMap<class EDeluxeVersion, class FText> _requirementTextPerGameUpgrade;           // 0x0278 (size: 0x50)

}; // Size: 0x2D0

class UCCNonSelectableTextWidget : public UUserWidget
{
    class URetainerBox* _retainerBox;                                                 // 0x0268 (size: 0x8)
    class USizeBox* _sizeBox;                                                         // 0x0270 (size: 0x8)
    class UTextBlock* _textBlock;                                                     // 0x0278 (size: 0x8)
    FText _text;                                                                      // 0x0280 (size: 0x18)
    int32 _fontSize;                                                                  // 0x0298 (size: 0x4)
    FMargin _textPadding;                                                             // 0x029C (size: 0x10)
    FVector2D _sizeOverride;                                                          // 0x02AC (size: 0x8)
    TEnumAsByte<EHorizontalAlignment> _textHorizontalAlignment;                       // 0x02B4 (size: 0x1)
    FLinearColor _textColor;                                                          // 0x02B8 (size: 0x10)

    void SetTextColor(FLinearColor Color);
    void SetText(FText Text);
    void HighlightPartially(float Percent);
}; // Size: 0x2C8

class UCCSkillSliderWidget : public UUserWidgetWithDescription
{
    FCCSkillSliderWidgetOnSliderChanged OnSliderChanged;                              // 0x02B8 (size: 0x10)
    void CCSliderChanged(class UCCSkillSliderWidget* Slider, ESkillAttribute Attribute);
    FCCSkillSliderWidgetOnSliderSelected OnSliderSelected;                            // 0x02C8 (size: 0x10)
    void CCSliderSelected(class UCCSkillSliderWidget* Slider);
    FCCSkillSliderWidgetOnSliderDeselected OnSliderDeselected;                        // 0x02D8 (size: 0x10)
    void CCSliderDeselected(class UCCSkillSliderWidget* Slider);
    class UTextBlock* _skillName;                                                     // 0x02E8 (size: 0x8)
    class UCCNonSelectableTextWidget* _nonSelectableText;                             // 0x02F0 (size: 0x8)
    class UTrashSliderWidget* _slider;                                                // 0x02F8 (size: 0x8)
    bool _enabled;                                                                    // 0x0300 (size: 0x1)
    FSkillTemplate _skillTemplate;                                                    // 0x0308 (size: 0x38)
    FLinearColor _enabledColor;                                                       // 0x0340 (size: 0x10)
    FLinearColor _disabledColor;                                                      // 0x0350 (size: 0x10)

    void HandleValueChanged(float Value);
}; // Size: 0x360

class UCICM_Default : public UCraftingIngredientConsumptionMethod
{
}; // Size: 0x28

class UCICM_GameResource : public UCraftingIngredientConsumptionMethod
{
    TArray<class TSubclassOf<UGameResourceType>> _allowedResources;                   // 0x0028 (size: 0x10)
    float _gameResourceAmountPerCraftingSlotAmount;                                   // 0x0038 (size: 0x4)

}; // Size: 0x40

class UCICM_HealthAsFakeUses : public UCraftingIngredientConsumptionMethod
{
}; // Size: 0x28

class UCICM_HealthRatio : public UCraftingIngredientConsumptionMethod
{
}; // Size: 0x28

class UCICM_Uses : public UCraftingIngredientConsumptionMethod
{
}; // Size: 0x28

class UCPQEM_Default : public UCraftingProductQualityApplicationMethod
{
}; // Size: 0x28

class UCPSM_AmmunitionStack : public UCraftingProductSpawningMethod
{
}; // Size: 0x28

class UCPSM_Default : public UCraftingProductSpawningMethod
{
}; // Size: 0x28

class UCPT_Dirtiness : public UCraftingPropertyTracker
{
}; // Size: 0x30

class UCPT_GameResource : public UCraftingPropertyTracker
{
    TSubclassOf<class UGameResourceType> _resourceClass;                              // 0x0028 (size: 0x8)

}; // Size: 0x38

class UCPT_Weight : public UCraftingPropertyTracker
{
}; // Size: 0x30

class UCTFParticipantStats : public UGameEventParticipantStats
{
    int32 Pickups;                                                                    // 0x0048 (size: 0x4)
    int32 Captures;                                                                   // 0x004C (size: 0x4)
    int32 Returns;                                                                    // 0x0050 (size: 0x4)

}; // Size: 0x58

class UCamouflageSkill : public UIntelligenceSkill
{
    float _activationTime;                                                            // 0x00B0 (size: 0x4)
    float _standingPenalty;                                                           // 0x00B4 (size: 0x4)
    float _crouchingPenalty;                                                          // 0x00B8 (size: 0x4)
    float _pronePenalty;                                                              // 0x00BC (size: 0x4)
    float _slowMovingStandingPenalty;                                                 // 0x00C0 (size: 0x4)
    float _slowMovingCrouchingPenalty;                                                // 0x00C4 (size: 0x4)
    float _slowMovingPronePenalty;                                                    // 0x00C8 (size: 0x4)
    float _mediumMovingStandingPenalty;                                               // 0x00CC (size: 0x4)
    float _mediumMovingCrouchingPenalty;                                              // 0x00D0 (size: 0x4)
    float _fastMovingStandingPenalty;                                                 // 0x00D4 (size: 0x4)
    float _standingAIPerceptionMultiplier;                                            // 0x00D8 (size: 0x4)
    float _crouchingAIPerceptionMultiplier;                                           // 0x00DC (size: 0x4)
    float _proneAIPerceptionMultiplier;                                               // 0x00E0 (size: 0x4)
    float _maxRelevantAIPerceptionRadius;                                             // 0x00E4 (size: 0x4)
    FCamouflageSkillExperienceAwards NoSkillExperienceAwards;                         // 0x0154 (size: 0x4)
    FCamouflageSkillExperienceAwards BasicSkillExperienceAwards;                      // 0x0158 (size: 0x4)
    FCamouflageSkillExperienceAwards MediumSkillExperienceAwards;                     // 0x015C (size: 0x4)
    FCamouflageSkillExperienceAwards AdvancedSkillExperienceAwards;                   // 0x0160 (size: 0x4)
    FCamouflageSkillExperienceAwards AboveAdvancedSkillExperienceAwards;              // 0x0164 (size: 0x4)
    FCamouflageSkillParametersPerSkillLevel NoSkillParameters;                        // 0x0168 (size: 0x30)
    FCamouflageSkillParametersPerSkillLevel BasicSkillParameters;                     // 0x0198 (size: 0x30)
    FCamouflageSkillParametersPerSkillLevel MediumSkillParameters;                    // 0x01C8 (size: 0x30)
    FCamouflageSkillParametersPerSkillLevel AdvancedSkillParameters;                  // 0x01F8 (size: 0x30)
    FCamouflageSkillParametersPerSkillLevel AboveAdvancedSkillParameters;             // 0x0228 (size: 0x30)

    float GetHidePenaltyForCharacter(class AConZCharacter* Character);
}; // Size: 0x258

class UCannedFoodTag : public UBaseItemTag
{
}; // Size: 0x30

class UCarousel : public UUserWidget
{
    class UTextBlock* _selectionDisplay;                                              // 0x0288 (size: 0x8)
    class UButton* _leftArrow;                                                        // 0x0290 (size: 0x8)
    class UButton* _rightArrow;                                                       // 0x0298 (size: 0x8)
    TArray<FText> _carouselValues;                                                    // 0x02A0 (size: 0x10)
    bool _canWrap;                                                                    // 0x02B0 (size: 0x1)
    FCarouselStyle _selectedAndFocusedCarouselStyle;                                  // 0x02B8 (size: 0x570)
    FCarouselStyle _selectedAndUnfocusedCarouselStyle;                                // 0x0828 (size: 0x570)
    FCarouselStyle _unselectedCarouselStyle;                                          // 0x0D98 (size: 0x570)
    FCarouselStyle _highlightedCarouselStyle;                                         // 0x1308 (size: 0x570)
    FCarouselStyle _disabledCarouselStyle;                                            // 0x1878 (size: 0x570)
    bool _controlWithMouseWheel;                                                      // 0x1DE8 (size: 0x1)
    bool _controlWithKeyboard;                                                        // 0x1DE9 (size: 0x1)

    void ClickRight();
    void ClickLeft();
}; // Size: 0x1DF8

class UCarouselWithLabel : public UCarousel
{
    class UTextBlock* _name;                                                          // 0x1E10 (size: 0x8)
    class UImage* _focusBackgroundImage;                                              // 0x1E18 (size: 0x8)
    FText _label;                                                                     // 0x1E20 (size: 0x18)
    FCarouselWithLabelStyle _selectedAndFocusedCWLStyle;                              // 0x1E38 (size: 0x108)
    FCarouselWithLabelStyle _selectedAndUnfocusedCWLStyle;                            // 0x1F40 (size: 0x108)
    FCarouselWithLabelStyle _unselectedCWLStyle;                                      // 0x2048 (size: 0x108)
    FCarouselWithLabelStyle _highlightedCWLStyle;                                     // 0x2150 (size: 0x108)
    FCarouselWithLabelStyle _disabledCWLStyle;                                        // 0x2258 (size: 0x108)

}; // Size: 0x2360

class UCentralBuildingPanel : public UTabMenuPanel
{
    class UPlacedPlaceableWidget* _placedPlaceableWidget;                             // 0x0268 (size: 0x8)

}; // Size: 0x270

class UChainsawAnimInstance : public UItemAnimInstance
{
    bool _isTurnedOn;                                                                 // 0x02D0 (size: 0x1)

}; // Size: 0x2E0

class UChamberCartridge : public UWeaponActionReloadSequence
{
}; // Size: 0x90

class UChangeTextWidget : public UWaypointWidgetBase
{

    void TextAcceptedEvent__DelegateSignature(class APrisoner* User, const FText& Text);
    void SetMaxNumberOfCharacters(int32 Value);
    void SetCurrentInputText_BP(const FText& Text);
    void OnTextAccepted();
    void OnCurrentInputTextChanged(FText Text);
}; // Size: 0x368

class UCharacterAction : public UObject
{
    TArray<class UCharacterActionDescription*> PreActionsDescriptions;                // 0x0058 (size: 0x10)
    TArray<class UCharacterActionDescription*> PostActionsDescriptions;               // 0x0068 (size: 0x10)
    class UCharacterAction* ParentAction;                                             // 0x0078 (size: 0x8)
    TArray<class UCharacterAction*> _preActions;                                      // 0x0080 (size: 0x10)
    TArray<class UCharacterAction*> _postActions;                                     // 0x0090 (size: 0x10)
    class UActionProgressWidget* _progressWidget;                                     // 0x00A0 (size: 0x8)
    class UCharacterActionDescription* _description;                                  // 0x00C0 (size: 0x8)

    float PlayMontage(class UAnimMontage* Montage, float PlayRate, const FName& startSection, bool assignCallbacks);
    void OnProgressWidgetFinished();
    void OnProgressWidgetCanceled();
    void OnPreActionEnd(const class UCharacterAction* action);
    void OnPreActionBegin(const class UCharacterAction* action);
    void OnMontageEnded(class UAnimMontage* Montage, bool interrupted);
    void OnMontageBlendingOutStarted(class UAnimMontage* Montage, bool interrupted);
}; // Size: 0x108

class UCharacterActionComponent : public UActorComponent
{
    bool _shouldStopMontageOnEnd;                                                     // 0x00B8 (size: 0x1)

    void Server_NotifyReadyToDestroy();
}; // Size: 0xC0

class UCharacterActionDescription : public UObject
{
}; // Size: 0x38

class UCharacterCreationMenu : public UBaseMenu
{
    class UCanvasPanel* _canvasMain;                                                  // 0x0268 (size: 0x8)
    class UCanvasPanel* _canvasContent;                                               // 0x0270 (size: 0x8)
    class UOverlay* _overlayMenu;                                                     // 0x0278 (size: 0x8)
    class UOverlay* _overlayPopup;                                                    // 0x0280 (size: 0x8)
    class UWidgetSwitcher* _widgetSwitcher;                                           // 0x0290 (size: 0x8)
    class UEditableTextBox* _editableTextNameCharacterPanel;                          // 0x0298 (size: 0x8)
    class UBorder* _borderNameCharacterPanel;                                         // 0x02A0 (size: 0x8)
    class UCCNonSelectableTextWidget* _availableAttributePointsDisplay;               // 0x02A8 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderStrength;                                   // 0x02B0 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderConstitution;                               // 0x02B8 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderDexterity;                                  // 0x02C0 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderIntelligence;                               // 0x02C8 (size: 0x8)
    class UTrashNamedCarouselWidget* _carouselGender;                                 // 0x02D0 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderHead;                                       // 0x02D8 (size: 0x8)
    class UTrashNamedCarouselWidget* _carouselHairiness;                              // 0x02E0 (size: 0x8)
    class UCCGameUpgradeConditionDisplayWidget* _appearanceUpgradeConditionDisplay;   // 0x02E8 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderAge;                                        // 0x02F0 (size: 0x8)
    class UTrashNamedCarouselWidget* _carouselTattoos;                                // 0x02F8 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderTattooStyle;                                // 0x0300 (size: 0x8)
    class UCCGameUpgradeConditionDisplayWidget* _tattooUpgradeConditionDisplay;       // 0x0308 (size: 0x8)
    class UTrashNamedCarouselWidget* _carouselConcealedMode;                          // 0x0310 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderPenisBreastSize;                            // 0x0318 (size: 0x8)
    class UConZStandardButton* _buttonRandomizeAttributes;                            // 0x0320 (size: 0x8)
    class UConZStandardButton* _buttonCancelToMainMenu;                               // 0x0328 (size: 0x8)
    class UConZStandardButton* _buttonNextToFace;                                     // 0x0330 (size: 0x8)
    class UOverlay* _overlayAttributeConfirmation;                                    // 0x0338 (size: 0x8)
    class UConZStandardButton* _buttonCancelCharacter;                                // 0x0340 (size: 0x8)
    class UConZStandardButton* _buttonContinueCharacter;                              // 0x0348 (size: 0x8)
    class UEditableTextBox* _editableTextNameFacePanel;                               // 0x0350 (size: 0x8)
    class UBorder* _borderNameFacePanel;                                              // 0x0358 (size: 0x8)
    class UConZStandardButton* _buttonRandomizeFace;                                  // 0x0360 (size: 0x8)
    class UConZStandardButton* _buttonBackToCharacter;                                // 0x0368 (size: 0x8)
    class UConZStandardButton* _buttonNextToSkills;                                   // 0x0370 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderFaceType;                                   // 0x0378 (size: 0x8)
    class UPresetColorPicker* _presetColorPickerSkinTone;                             // 0x0380 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderHairStyle;                                  // 0x0388 (size: 0x8)
    class UCCGameUpgradeConditionDisplayWidget* _hairStyleUpgradeConditionDisplay;    // 0x0390 (size: 0x8)
    class UPresetColorPicker* _presetColorPickerHairColor;                            // 0x0398 (size: 0x8)
    class UVerticalBox* _facialHairVerticalBox;                                       // 0x03A0 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderMoustacheStyle;                             // 0x03A8 (size: 0x8)
    class UCCGameUpgradeConditionDisplayWidget* _moustacheStyleUpgradeConditionDisplay; // 0x03B0 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderBeardStyle;                                 // 0x03B8 (size: 0x8)
    class UCCGameUpgradeConditionDisplayWidget* _beardStyleUpgradeConditionDisplay;   // 0x03C0 (size: 0x8)
    class UPresetColorPicker* _presetColorPickerEyeColor;                             // 0x03C8 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderIrisType;                                   // 0x03D0 (size: 0x8)
    class UEditableTextBox* _editableTextNameSkillsPanel;                             // 0x03D8 (size: 0x8)
    class UBorder* _borderNameSkillsPanel;                                            // 0x03E0 (size: 0x8)
    class UCCNonSelectableTextWidget* _attributeDisplayConstitution;                  // 0x03E8 (size: 0x8)
    class UCCNonSelectableTextWidget* _attributeDisplayDexterity;                     // 0x03F0 (size: 0x8)
    class UCCNonSelectableTextWidget* _attributeDisplayIntelligence;                  // 0x03F8 (size: 0x8)
    class UCCNonSelectableTextWidget* _attributeDisplayStrength;                      // 0x0400 (size: 0x8)
    class UCCNonSelectableTextWidget* _skillPointDisplayConstitution;                 // 0x0408 (size: 0x8)
    class UCCNonSelectableTextWidget* _skillPointDisplayDexterity;                    // 0x0410 (size: 0x8)
    class UCCNonSelectableTextWidget* _skillPointDisplayIntelligence;                 // 0x0418 (size: 0x8)
    class UCCNonSelectableTextWidget* _skillPointDisplayStrength;                     // 0x0420 (size: 0x8)
    class UVerticalBox* _skillBoxStrength;                                            // 0x0428 (size: 0x8)
    class UVerticalBox* _skillBoxConstitution;                                        // 0x0430 (size: 0x8)
    class UVerticalBox* _skillBoxDexterity;                                           // 0x0438 (size: 0x8)
    class UVerticalBox* _skillBoxIntelligence;                                        // 0x0440 (size: 0x8)
    class UConZStandardButton* _buttonRandomizeSkills;                                // 0x0448 (size: 0x8)
    class UTextBlock* _textNameAlreadyTaken;                                          // 0x0450 (size: 0x8)
    class UConZStandardButton* _buttonBackToFace;                                     // 0x0458 (size: 0x8)
    class UConZStandardButton* _buttonSwitchToCriminalRecord;                         // 0x0460 (size: 0x8)
    class UScrollBox* _faceOptionsScrollbox;                                          // 0x0468 (size: 0x8)
    class UOverlay* _overlaySkillConfirmation;                                        // 0x0470 (size: 0x8)
    class UConZStandardButton* _buttonCancelSkills;                                   // 0x0478 (size: 0x8)
    class UConZStandardButton* _buttonContinueSkills;                                 // 0x0480 (size: 0x8)
    class UCriminalRecord* _criminalRecord;                                           // 0x0488 (size: 0x8)
    TArray<FCCNonImplementedSkill> _nonImplementedSkills;                             // 0x0490 (size: 0x10)
    FLinearColor _pointDisplayAvailableColor;                                         // 0x04A0 (size: 0x10)
    FLinearColor _pointDisplayDepletedColor;                                          // 0x04B0 (size: 0x10)
    TSubclassOf<class UCCSkillSliderWidget> _skillSliderClass;                        // 0x04C0 (size: 0x8)
    class UOverlay* _overlayDescription;                                              // 0x04C8 (size: 0x8)
    class UTextBlock* _descriptionTextBlock;                                          // 0x04D0 (size: 0x8)
    class UCutsceneWidget* _cutsceneWidget;                                           // 0x04D8 (size: 0x8)

    void StartGame();
    void PlayIntroVideo();
    void OnUserProfileCreated();
    void OnTextNameCommittedInSkillsPanel(const FText& NewValue, TEnumAsByte<ETextCommit::Type> CommitMethod);
    void OnTextNameCommittedInFacePanel(const FText& NewValue, TEnumAsByte<ETextCommit::Type> CommitMethod);
    void OnTextNameCommittedInCharacterPanel(const FText& NewValue, TEnumAsByte<ETextCommit::Type> CommitMethod);
    void OnTextNameChanged(const FText& Text);
    void OnSwitchToCriminalRecordClicked();
    void OnRandomizeSkillsClicked();
    void OnRandomizeFaceClicked();
    void OnRandomizeAttributesClicked();
    void OnNextToSkillsClicked();
    void OnNextToFaceClicked();
    void OnInputWidgetUnhovered(class UUserWidgetWithDescription* Widget);
    void OnInputWidgetHovered(class UUserWidgetWithDescription* Widget);
    void OnContinueClickedInSkillsConfirmationPanel();
    void OnContinueClickedInCharacterConfirmationPanel();
    void OnCancelToMainMenuClicked();
    void OnCancelClickedInSkillsConfirmationPanel();
    void OnCancelClickedInCharacterConfirmationPanel();
    void OnBackToFaceClicked();
    void OnBackToCharacterClicked();
    void HandleSkillSliderValueChanged(class UCCSkillSliderWidget* Slider, ESkillAttribute Attribute);
    void CreateUserProfile();
}; // Size: 0x520

class UCharacterImpactSoundsData : public UDataAsset
{
    FCharacterHeadImpactSoundsData Head;                                              // 0x0030 (size: 0x18)
    FCharacterTorsoImpactSoundsData Torso;                                            // 0x0048 (size: 0x18)
    FCharacterArmsImpactSoundsData Arms;                                              // 0x0060 (size: 0x18)
    FCharacterLegsImpactSoundsData Legs;                                              // 0x0078 (size: 0x18)

}; // Size: 0x90

class UCharacterItemDragComponent : public UActorComponent
{
}; // Size: 0x108

class UCharacterMesh : public UObject
{
    FGameplayTagContainer Tags;                                                       // 0x0028 (size: 0x20)
    TArray<FCharacterMeshSlice> MeshSlices;                                           // 0x0048 (size: 0x10)

}; // Size: 0x60

class UCharacterMeshManager : public UObject
{
    TMap<class TSubclassOf<UCharacterMesh>, class FCharacterMeshClassSet> _incompatibleCharacterMeshClasses; // 0x0040 (size: 0x50)
    TMap<class FGameplayTag, class FCharacterMeshManagerPerSlotData> _perCharacterMeshSlotData; // 0x0090 (size: 0x50)
    float _destroyUnusedMeshComponentsTime;                                           // 0x00E0 (size: 0x4)

}; // Size: 0x230

class UCharacterNameDisplayWidget : public UUserWidget
{
    class UTextBlock* _nameText;                                                      // 0x0268 (size: 0x8)
    class UTextBlock* _distanceText;                                                  // 0x0270 (size: 0x8)
    class USquadEmblemWidget* _squadEmblem;                                           // 0x0278 (size: 0x8)

}; // Size: 0x288

class UCharacterPainSoundsData : public UDataAsset
{
    class UAkAudioEvent* AudioEvent;                                                  // 0x0030 (size: 0x8)

}; // Size: 0x38

class UCharacterSelectionWidget : public UBaseMenu
{
    TSubclassOf<class UCharacterSlot> _characterSlotClass;                            // 0x0270 (size: 0x8)
    class UScrollBox* _mainScrollBox;                                                 // 0x0278 (size: 0x8)
    class UConZStandardButton* _buttonCreate;                                         // 0x0280 (size: 0x8)
    class UConZStandardButton* _buttonLoad;                                           // 0x0288 (size: 0x8)
    class UOverlay* _characterSlotsOverlay;                                           // 0x0290 (size: 0x8)
    class UVerticalBox* _characterSlotsVerticalBox;                                   // 0x0298 (size: 0x8)
    class UConZStandardButton* _buttonBack;                                           // 0x02A0 (size: 0x8)
    class UOverlay* _criminalRecordOverlay;                                           // 0x02A8 (size: 0x8)
    class UCriminalRecord* _criminalRecord;                                           // 0x02B0 (size: 0x8)
    class UYesNoDialog* _deleteCharacterConfirmation;                                 // 0x02B8 (size: 0x8)

    void UpdatePreviewPrisonersInternal(const class UUserProfile* profile);
    void OnLoadButtonClicked();
    void OnCreateButtonClicked();
    void OnBackButtonClicked();
    void GoBack();
    void DeleteCharacter(class UUserProfile* UserProfile);
}; // Size: 0x2C0

class UCharacterSlot : public UUserWidget
{
    class UConZStandardButton* _profileButton;                                        // 0x0298 (size: 0x8)
    class UButton* _deleteButton;                                                     // 0x02A0 (size: 0x8)

    void OnProfileButtonClicked();
    void OnDeleteButtonClicked();
}; // Size: 0x2B0

class UCharacterSoundComponent : public UActorComponent
{
    FName AttachedSoundsAttachPointName;                                              // 0x00B0 (size: 0x8)
    class UCharacterImpactSoundsData* ImpactSounds;                                   // 0x00B8 (size: 0x8)
    class UCharacterPainSoundsData* PainSounds;                                       // 0x00C0 (size: 0x8)
    float MinDurationBetweenPainSounds;                                               // 0x00C8 (size: 0x4)
    float MaxDurationBetweenPainSounds;                                               // 0x00CC (size: 0x4)
    TMap<class FGameplayTag, class FConZCharacterTagSoundArray> _audioEventsPerTag;   // 0x00D8 (size: 0x50)

}; // Size: 0x128

class UCharacterSpawnerComponent : public USceneComponent
{
    TArray<FCharacterSpawnerMarker> SpawnerMarkers;                                   // 0x01F8 (size: 0x10)

}; // Size: 0x210

class UCharacterVoiceline : public UDataAsset
{
    FText Name;                                                                       // 0x0030 (size: 0x18)
    FGameplayTag CharacterTypeTag;                                                    // 0x0048 (size: 0x8)
    class UAkAudioEvent* AudioEvent;                                                  // 0x0050 (size: 0x8)
    FText Subtitles;                                                                  // 0x0058 (size: 0x18)

}; // Size: 0x70

class UChatNotification : public UConZNotification
{
}; // Size: 0x30

class UChatNotificationDescription : public UNotificationDescription
{
    FString Message;                                                                  // 0x0040 (size: 0x10)
    EChatType ChatType;                                                               // 0x0050 (size: 0x1)
    bool ShouldCopyToClientClipboard;                                                 // 0x0051 (size: 0x1)

}; // Size: 0x58

class UChatSpamProtectionRules : public UDataAsset
{
    float OffenceDuration;                                                            // 0x0030 (size: 0x4)
    int32 MessageRepetitions;                                                         // 0x0034 (size: 0x4)
    TMap<class ESpamSeverity, class FSpamSeverityConditions> _conditions;             // 0x0038 (size: 0x50)
    TMap<class ESpamSeverity, class FSpamConsequences> _consequences;                 // 0x0088 (size: 0x50)

}; // Size: 0xD8

class UChatSuggestionWidget : public UUserWidget
{
    class UBorder* _border;                                                           // 0x0268 (size: 0x8)
    class UChatText* _textBlock;                                                      // 0x0270 (size: 0x8)
    FLinearColor _defaultColor;                                                       // 0x0278 (size: 0x10)
    FLinearColor _highlightedColor;                                                   // 0x0288 (size: 0x10)

    void SetText(FString Text);
    void SetIsHighlighted(bool Value);
}; // Size: 0x2A0

class UChatText : public UTextBlock
{
}; // Size: 0x2B0

class UChatUIController : public UObject
{
    int32 _maxHistorySize;                                                            // 0x0118 (size: 0x4)

}; // Size: 0x128

class UChatWidget : public UUserWidget
{
    class UButton* _muteButton;                                                       // 0x0268 (size: 0x8)
    class UTextBlock* _muteText;                                                      // 0x0270 (size: 0x8)
    class UImage* _backgroundImage;                                                   // 0x0278 (size: 0x8)
    class UScrollBox* _chatScrollBox;                                                 // 0x0280 (size: 0x8)
    class UScrollBox* _suggestionsScrollBox;                                          // 0x0288 (size: 0x8)
    class UOverlay* _suggestionsDropDown;                                             // 0x0290 (size: 0x8)
    class UEditableTextBox* _inputText;                                               // 0x0298 (size: 0x8)
    class UEditableTextBox* _suggestionTextBox;                                       // 0x02A0 (size: 0x8)
    class UTextBlock* _chatTypeIndicator;                                             // 0x02A8 (size: 0x8)
    FLinearColor _localChatColor;                                                     // 0x02B0 (size: 0x10)
    FLinearColor _globalChatColor;                                                    // 0x02C0 (size: 0x10)
    FLinearColor _squadChatColor;                                                     // 0x02D0 (size: 0x10)
    FLinearColor _serverChatColor;                                                    // 0x02E0 (size: 0x10)
    FLinearColor _errorChatColor;                                                     // 0x02F0 (size: 0x10)
    FLinearColor _defaultChatColor;                                                   // 0x0300 (size: 0x10)
    FLinearColor _commandsOnlyChatColor;                                              // 0x0310 (size: 0x10)
    FLinearColor _suggestionsTextColor;                                               // 0x0320 (size: 0x10)
    FLinearColor _adminChatColor;                                                     // 0x0330 (size: 0x10)
    TSubclassOf<class UChatSuggestionWidget> _chatSuggestionWidgetClass;              // 0x0340 (size: 0x8)
    class UAdminCommandCompletionManager* _adminCommandCompletionManager;             // 0x0348 (size: 0x8)

    void OnTextCommitted(const FText& Text, TEnumAsByte<ETextCommit::Type> CommitMethod);
    void OnTextChanged(const FText& Text);
    void OnMuteButtonClicked();
}; // Size: 0x388

class UCheckAmmoMagazineAttached : public UWeaponActionCheckAmmoSequence
{
}; // Size: 0x50

class UCheckAmmoMagazineNotAttached : public UWeaponActionCheckAmmoSequence
{
}; // Size: 0x50

class UCheckDetectableItemsAction : public USkillAction
{
}; // Size: 0xB0

class UCheckDetectablePlayersAction : public USkillAction
{
}; // Size: 0xA8

class UCheckOccludedDetectablePlayersAction : public USkillAction
{
}; // Size: 0xA8

class UChildEncounterLocationGenerationMethodBase : public UObject
{
}; // Size: 0x28

class UChildEncounterLocationGenerationMethod_AverageCharacterLocation : public UChildEncounterLocationGenerationMethodBase
{
    FFloatInterval _encounterSpawnDistanceInterval;                                   // 0x0028 (size: 0x8)

}; // Size: 0x30

class UChildEncounterLocationGenerationMethod_RandomCharacterLocation : public UChildEncounterLocationGenerationMethodBase
{
    FFloatInterval _encounterSpawnDistanceInterval;                                   // 0x0028 (size: 0x8)

}; // Size: 0x30

class UChopItemAction : public UInteractionAction
{
}; // Size: 0xB0

class UChoppingRecipeDataAsset : public UDataAsset
{
    FChoppingRecipe ChoppingRecipe;                                                   // 0x0030 (size: 0x98)

}; // Size: 0xC8

class UChoppingToolItemTag : public UBaseItemTag
{
    float ChoppingTimeMultiplier;                                                     // 0x0030 (size: 0x4)
    int32 IngredientsQuantityBonus;                                                   // 0x0034 (size: 0x4)
    bool CanBeUsedForChoppingHair;                                                    // 0x0038 (size: 0x1)

}; // Size: 0x40

class UCircularAreaGroupComponent : public USceneComponent
{
    FName Name;                                                                       // 0x01F8 (size: 0x8)
    FCircularAreaGroup CircularAreaGroup;                                             // 0x0200 (size: 0x10)

}; // Size: 0x210

class UCircularMenuDanceToggleInfo : public UCircularMenuSegmentSubmenuInfo
{
}; // Size: 0xC0

class UCircularMenuMusicPlayerToggleInfo : public UCircularMenuSegmentInfo
{
    EInteractionTargetType InteractionTargetType;                                     // 0x00A8 (size: 0x1)
    FInteractionStruct PrimaryInteractionInfo;                                        // 0x00B0 (size: 0x98)
    FInteractionStruct SecondaryInteractionInfo;                                      // 0x0148 (size: 0x98)
    FText PrimaryCaption;                                                             // 0x01E0 (size: 0x18)
    class UCircularMenuSegmentIcons* PrimaryIcons;                                    // 0x01F8 (size: 0x8)
    FText SecondaryCaption;                                                           // 0x0200 (size: 0x18)
    class UCircularMenuSegmentIcons* SecondaryIcons;                                  // 0x0218 (size: 0x8)
    bool IsPrimaryActive;                                                             // 0x0220 (size: 0x1)
    EMusicPlayerCommandType MusicPlayerCommandType;                                   // 0x0221 (size: 0x1)
    class APrisoner* _interactionInitiator;                                           // 0x0228 (size: 0x8)
    class UObject* _interactableObject;                                               // 0x0230 (size: 0x8)

    class UCircularMenuMusicPlayerToggleInfo* CreateSpecific(class APrisoner* interactionInitiator, class UObject* interactableObject, const FInteractionStruct& firstInteractionStruct, const FInteractionStruct& secondInteractionStruct);
    class UCircularMenuMusicPlayerToggleInfo* Create(EInteractionTargetType interactionTarget, const FInteractionStruct& fistInteractionStruct, const FInteractionStruct& secondInteractionStruct);
}; // Size: 0x240

class UCircularMenuSegmentDanceInfo : public UCircularMenuSegmentInfo
{
    EGestureType DanceType;                                                           // 0x00A8 (size: 0x1)

}; // Size: 0xB0

class UCircularMenuSegmentGenericInfo : public UCircularMenuSegmentInfo
{
    FCircularMenuSegmentGenericInfoAction action;                                     // 0x00A8 (size: 0x10)
    void SegmentExecutionDelegate();

}; // Size: 0xB8

class UCircularMenuSegmentIcons : public UDataAsset
{
    class UTexture2D* UnselectedIcon;                                                 // 0x0030 (size: 0x8)
    class UTexture2D* SelectedIcon;                                                   // 0x0038 (size: 0x8)
    class UTexture2D* DisabledIcon;                                                   // 0x0040 (size: 0x8)
    class UTexture2D* OverlayIcon;                                                    // 0x0048 (size: 0x8)

}; // Size: 0x50

class UCircularMenuSegmentInfo : public UDataAsset
{
    FText Caption;                                                                    // 0x0030 (size: 0x18)
    class UCircularMenuSegmentIcons* Icons;                                           // 0x0048 (size: 0x8)
    bool ShouldApplyFadeToIcon;                                                       // 0x0050 (size: 0x1)
    float IconSizeOverride;                                                           // 0x0054 (size: 0x4)
    bool ShouldStayVisible;                                                           // 0x0058 (size: 0x1)
    bool ShowTooltip;                                                                 // 0x0059 (size: 0x1)
    bool OverrideTooltipText;                                                         // 0x005A (size: 0x1)
    FText ToolTipText;                                                                // 0x0060 (size: 0x18)
    FText TooltipTextUnselectable;                                                    // 0x0078 (size: 0x18)
    EDeluxeVersion RequiredDLC;                                                       // 0x0090 (size: 0x1)
    FGameplayTag HighlightTag;                                                        // 0x0094 (size: 0x8)
    class UCircularMenuWidget* ParentCircularWidget;                                  // 0x00A0 (size: 0x8)

}; // Size: 0xA8

class UCircularMenuSegmentInteractionInfo : public UCircularMenuSegmentInfo
{
    EInteractionTargetType InteractionTargetType;                                     // 0x00A8 (size: 0x1)
    FInteractionStruct InteractionInfo;                                               // 0x00B0 (size: 0x98)
    class APrisoner* _interactionInitiator;                                           // 0x0148 (size: 0x8)
    class UObject* _interactableObject;                                               // 0x0150 (size: 0x8)

    class UCircularMenuSegmentInteractionInfo* CreateSpecific(class APrisoner* initiator, class UObject* interactable, const FInteractionStruct& InteractionStruct);
    class UCircularMenuSegmentInteractionInfo* Create(EInteractionTargetType interactionTarget, const FInteractionStruct& InteractionStruct);
}; // Size: 0x160

class UCircularMenuSegmentSubmenuInfo : public UCircularMenuSegmentInfo
{
    TArray<class UCircularMenuSegmentInfo*> SubmenuInfo;                              // 0x00A8 (size: 0x10)
    float IndexOffset;                                                                // 0x00B8 (size: 0x4)

}; // Size: 0xC0

class UCircularMenuSegmentThrowingInfo : public UCircularMenuSegmentInfo
{
    FCircularMenuSegmentThrowingInfoAction action;                                    // 0x00A8 (size: 0x10)
    void SegmentExecutionThrowingDelegate(int32 Index);
    int32 Index;                                                                      // 0x00B8 (size: 0x4)

}; // Size: 0xC0

class UCircularMenuSegmentWeaponMalfunctionInfo : public UCircularMenuSegmentInfo
{
    EWeaponMalfunction _weaponMalfunction;                                            // 0x00A8 (size: 0x1)

}; // Size: 0xB0

class UCircularMenuSegmentWidget : public UConZUserWidget
{
    TSubclassOf<class UCircularMenuTooltip> _tooltipClass;                            // 0x0290 (size: 0x8)
    float _nonSelectableAlpha;                                                        // 0x0298 (size: 0x4)
    FLinearColor _highlightedColour;                                                  // 0x029C (size: 0x10)
    FLinearColor _unHighlightedColour;                                                // 0x02AC (size: 0x10)
    class UCircularMenuSegmentInfo* _info;                                            // 0x02C0 (size: 0x8)
    class UCircularMenuSegmentWidget* _parentSegmentWidget;                           // 0x02C8 (size: 0x8)
    class UImage* _segment;                                                           // 0x02D0 (size: 0x8)
    class UOverlay* _iconsOverlay;                                                    // 0x02D8 (size: 0x8)
    class USizeBox* _iconSizeBox;                                                     // 0x02E0 (size: 0x8)
    class UImage* _icon;                                                              // 0x02E8 (size: 0x8)
    class USizeBox* _overlayIconSizeBox;                                              // 0x02F0 (size: 0x8)
    class UImage* _overlayIcon;                                                       // 0x02F8 (size: 0x8)

    void UpdateVisualParameters(int32 numberOfSegments, int32 Index, float Offset, float middleCutoffPercentage, float Size);
    bool IsTooltipEnabled();
    FText GetTooltipText();
    class UCircularMenuSegmentWidget* CreateFromInfo(class UCircularMenuSegmentInfo* Info);
}; // Size: 0x318

class UCircularMenuTooltip : public UUserWidget
{
    class UTextBlock* _titleTextBlock;                                                // 0x0268 (size: 0x8)
    class UTextBlock* _descriptionTextBlock;                                          // 0x0270 (size: 0x8)
    FDataTableRowHandle _neutralDispositionColor;                                     // 0x0278 (size: 0x10)
    FDataTableRowHandle _goodDispositionColor;                                        // 0x0288 (size: 0x10)
    FDataTableRowHandle _badDispositionColor;                                         // 0x0298 (size: 0x10)

}; // Size: 0x2F8

class UCircularMenuWidget : public UUserWidget
{
    TArray<FCircularLayerData> _layerData;                                            // 0x0268 (size: 0x10)
    float _centerSize;                                                                // 0x0278 (size: 0x4)
    bool _constrainMouseToWidget;                                                     // 0x027C (size: 0x1)
    bool _unboundOuterRadiusOnFirstInteractionLayer;                                  // 0x027D (size: 0x1)
    TArray<FCircularSegmentContainer> _segmentsByLayer;                               // 0x0280 (size: 0x10)
    class UOverlay* _rootOverlay;                                                     // 0x0290 (size: 0x8)
    class UOverlay* _mainOverlay;                                                     // 0x0298 (size: 0x8)
    class UOverlay* _centerOverlay;                                                   // 0x02A0 (size: 0x8)
    class UButton* _backButton;                                                       // 0x02A8 (size: 0x8)
    class UTextBlock* _caption;                                                       // 0x02B0 (size: 0x8)
    class UCircularMenuWidget* _parentMenu;                                           // 0x02C8 (size: 0x8)
    class UCircularMenuWidget* _submenu;                                              // 0x02D0 (size: 0x8)

    void OnBackButtonClicked();
    void InitializeThrowingLayer(int32 Layer, float Offset, TArray<class UCircularMenuSegmentThrowingInfo*> SegmentInfo, int32 countParameterOverride);
    void InitializeLayer(int32 Layer, float Offset, TArray<class UCircularMenuSegmentInfo*> SegmentInfo, int32 countParameterOverride, bool createAdditionalDummySegments);
    int32 GetSegmentIdForCoordinatesAndLayer(FVector2D Coordinates, int32 Layer);
    int32 GetSegmentIdForCoordinates(FVector2D Coordinates, int32& Layer);
    class UCircularMenuWidget* CreateThrowingMenuWidget(class UObject* WorldContextObject, TArray<class UCircularMenuSegmentThrowingInfo*> throwingSegmentInfo);
    class UCircularMenuWidget* Create(class UObject* WorldContextObject, TArray<class UCircularMenuSegmentInfo*> SegmentInfo);
}; // Size: 0x2E0

class UCircularProgressBar : public UUserWidget
{
    float _speedChange;                                                               // 0x0278 (size: 0x4)
    bool _shouldProgressTextBeVisible;                                                // 0x027C (size: 0x1)
    FLinearColor _alarmColor;                                                         // 0x0280 (size: 0x10)
    FLinearColor _normalColor;                                                        // 0x0290 (size: 0x10)
    FLinearColor _textColor;                                                          // 0x02A0 (size: 0x10)
    class UMaterialInstanceDynamic* _circularMaterial;                                // 0x02B0 (size: 0x8)
    class UTexture2D* Image;                                                          // 0x02B8 (size: 0x8)
    class UImage* Fill_Value_BCG;                                                     // 0x02C0 (size: 0x8)
    class UImage* Icon;                                                               // 0x02C8 (size: 0x8)
    class UHorizontalBox* ProgressTextBox;                                            // 0x02D0 (size: 0x8)
    class UTextBlock* TPercentage;                                                    // 0x02D8 (size: 0x8)
    class UTextBlock* TPercentageSign;                                                // 0x02E0 (size: 0x8)
    class UWidgetAnimation* OuterCircleAlarmAnimation;                                // 0x02E8 (size: 0x8)

    void SetPercentage(float Percentage);
    float GetPercentage();
}; // Size: 0x2F0

class UCleaningItemTag : public UBaseItemTag
{
}; // Size: 0x30

class UClearBadRound : public UWeaponActionClearMalfunctionSequence
{
    FName MontageEndSectionName;                                                      // 0x00B8 (size: 0x8)

}; // Size: 0xC0

class UClearClipPartiallyEjected : public UWeaponActionClearMalfunctionSequence
{
    FName MontageEndSectionName;                                                      // 0x00B8 (size: 0x8)

}; // Size: 0xC0

class UClearDoubleFeed : public UWeaponActionClearMalfunctionSequence
{
    FName MontageEndSectionName;                                                      // 0x00B8 (size: 0x8)
    int32 _ejectedRoundsCount;                                                        // 0x00C0 (size: 0x4)
    class AWeaponAttachmentMagazine* _magazineToRestore;                              // 0x00C8 (size: 0x8)

}; // Size: 0xD0

class UClearRoundNotLoaded : public UWeaponActionClearMalfunctionSequence
{
    FName MontageEndSectionName;                                                      // 0x00B8 (size: 0x8)

}; // Size: 0xC0

class UClearSearchButton : public UUserWidget
{
    class UWidgetAnimation* _hoverAnimation;                                          // 0x0278 (size: 0x8)
    class UWidgetAnimation* _clickAnimation;                                          // 0x0280 (size: 0x8)

}; // Size: 0x288

class UClearStovePipe : public UWeaponActionClearMalfunctionSequence
{
    FName MontageEndSectionName;                                                      // 0x00B8 (size: 0x8)

}; // Size: 0xC0

class UClearStuckBullet : public UWeaponActionClearMalfunctionSequence
{
    FName MontageEndSectionName;                                                      // 0x00B8 (size: 0x8)

}; // Size: 0xC0

class UClientPriceCache : public UObject
{
}; // Size: 0x2C8

class UClientSettingsMenu : public UConZSettingsMenu
{
    TSubclassOf<class UAudioDeviceDisplay> _audioDeviceDisplay;                       // 0x0608 (size: 0x8)
    TSubclassOf<class UTelemetrySetting> _telemetrySettingClass;                      // 0x0610 (size: 0x8)

}; // Size: 0x690

class UClientSettingsUIController : public UConZSettingsUIController
{
}; // Size: 0x220

class UClockFaceWidget : public UUserWidget
{

    void SetTime(float Time);
    void SetMinutes(int32 Minutes);
    void SetHours(int32 Hours);
}; // Size: 0x268

class UClothesItemEntitySetup : public UItemEntitySetup
{
}; // Size: 0x90

class UClothesModifierItemTag : public UBaseItemTag
{
}; // Size: 0x30

class UCodexEntriesDropdownWidget : public UManualEntriesDropdownWidget
{
    ECodexCategory _codexCategory;                                                    // 0x02B0 (size: 0x1)
    class UImage* _categoryIcon;                                                      // 0x02B8 (size: 0x8)

}; // Size: 0x2C0

class UCodexEntriesPanelWidget : public UUserWidget
{
    class USearchBox* _searchBox;                                                     // 0x0268 (size: 0x8)
    class UVerticalBox* _entryContainer;                                              // 0x0270 (size: 0x8)
    TSubclassOf<class UCodexEntriesDropdownWidget> _dropdownWidgetClass;              // 0x0278 (size: 0x8)
    TSubclassOf<class UCodexEntryWidget> _entryWidgetClass;                           // 0x0280 (size: 0x8)
    TArray<class UCodexEntry*> _cachedCodexEntries;                                   // 0x02B0 (size: 0x10)
    class UConZCustomInteractionButton* _collapseAllButton;                           // 0x0360 (size: 0x8)
    class UConZCustomInteractionButton* _expandAllButton;                             // 0x0368 (size: 0x8)
    class UButton* _showSurvivalTipsButton;                                           // 0x0370 (size: 0x8)

    void OnShowSurvivalTipsClicked();
    void OnAnyButtonHovered();
    void HandleOnExpandAllClicked();
    void HandleOnCollapseAllClicked();
}; // Size: 0x380

class UCodexEntry : public UManualEntry
{
    ECodexCategory Category;                                                          // 0x0060 (size: 0x1)
    TArray<class UModularCodexEntryElementData*> Elements;                            // 0x0068 (size: 0x10)

}; // Size: 0x78

class UCodexEntryDetailsPanelWidget : public UUserWidget
{
    FMargin _elementsPadding;                                                         // 0x0268 (size: 0x10)
    class UTextBlock* _entryNameTextBlock;                                            // 0x0278 (size: 0x8)
    class UVerticalBox* _codexEntryItemsContainer;                                    // 0x0280 (size: 0x8)
    class UScrollBox* _scrollBox;                                                     // 0x0288 (size: 0x8)
    TSubclassOf<class UCodexSurvivalTipEntryWidget> _survivalTipEntryWidgetClass;     // 0x0290 (size: 0x8)
    TSubclassOf<class UUserWidget> _horizontalSeperatorWidgetClass;                   // 0x0298 (size: 0x8)

}; // Size: 0x2B8

class UCodexEntryWidget : public UManualEntryWidget
{
    class UCodexEntry* _entry;                                                        // 0x02C0 (size: 0x8)

}; // Size: 0x2D0

class UCodexSurvivalTipEntryWidget : public UUserWidget
{
    class UImage* _categoryIcon;                                                      // 0x0268 (size: 0x8)
    class URichTextBlock* _survivalTipText;                                           // 0x0270 (size: 0x8)
    class UImage* _verticalIndicator;                                                 // 0x0278 (size: 0x8)
    FLinearColor _readSurvivalTipColor;                                               // 0x0280 (size: 0x10)
    FLinearColor _unreadSurvivalTipColor;                                             // 0x0290 (size: 0x10)

}; // Size: 0x2A0

class UCollapsableColorPicker : public UUserWidget
{
    class USelectionOverlayWidget* _selectionOverlay;                                 // 0x0280 (size: 0x8)
    class UTextBlock* _label;                                                         // 0x0288 (size: 0x8)
    class UImage* _colorPreviewSquare;                                                // 0x0290 (size: 0x8)
    class UColorPicker* _colorPicker;                                                 // 0x0298 (size: 0x8)
    FText dropdownLabel;                                                              // 0x02A0 (size: 0x18)

}; // Size: 0x2B8

class UCollapsableContainer : public UUserWidget
{
    FText Title;                                                                      // 0x0268 (size: 0x18)
    class UTextBlock* _title;                                                         // 0x0280 (size: 0x8)
    class UImage* _titleBackground;                                                   // 0x0288 (size: 0x8)
    class UButton* _displayContentButton;                                             // 0x0290 (size: 0x8)
    class UOverlay* _contentAreaOverlay;                                              // 0x0298 (size: 0x8)
    FDataTableRowHandle _titleBackgroundColor;                                        // 0x02A0 (size: 0x10)
    FDataTableRowHandle _titleTextColor;                                              // 0x02B0 (size: 0x10)
    FButtonStyle _buttonStyleWhenCollapsedContent;                                    // 0x02C0 (size: 0x278)
    FButtonStyle _buttonStyleWhenExpandedContent;                                     // 0x0538 (size: 0x278)

    void OnDisplayContentButtonClicked();
}; // Size: 0x7B8

class UCollectObjectAssetData : public UCutObjectAssetData
{
}; // Size: 0x38

class UCollectSeedsItemTag : public UBaseItemTag
{
    TSoftClassPtr<AItem> _seedsClass;                                                 // 0x0030 (size: 0x28)

}; // Size: 0x58

class UColorPicker : public UUserWidget
{
    class UImage* _dynamicGradient;                                                   // 0x0268 (size: 0x8)
    class UImage* _dynamicReticle;                                                    // 0x0270 (size: 0x8)
    class USlider* _sliderHUE;                                                        // 0x0278 (size: 0x8)
    FVector2D _saturationAndBrightnessPickerSize;                                     // 0x0280 (size: 0x8)

}; // Size: 0x2A8

class UCombinationLockData : public ULockData
{
    int32 Combination;                                                                // 0x00B8 (size: 0x4)
    int32 LockIndex;                                                                  // 0x00BC (size: 0x4)
    TSubclassOf<class AMinigame> SetCombinationMinigameClass;                         // 0x00C0 (size: 0x8)
    TSubclassOf<class UMinigameConfiguration> SetCombinationMinigameConfigurationClass; // 0x00C8 (size: 0x8)

}; // Size: 0xD0

class UCombinationLockUnlockAttemptRequest : public UPlayerRpcChannelServerRequest
{
}; // Size: 0x48

class UCombinationLockUnlockAttemptResponse : public UPlayerRpcChannelServerResponse
{
}; // Size: 0x30

class UComboBoxStringWithIndexing : public UComboBoxString
{
}; // Size: 0xE18

class UComboBoxWrapper : public UUserWidget
{
    class UComboBoxString* ComboBox;                                                  // 0x0268 (size: 0x8)

}; // Size: 0x278

class UCompanionCrowAnimInstance : public UAnimInstance
{
    bool _isIdle;                                                                     // 0x02B8 (size: 0x1)
    bool _isFlyingOff;                                                                // 0x02B9 (size: 0x1)
    bool _isCruising;                                                                 // 0x02BA (size: 0x1)
    bool _isLanding;                                                                  // 0x02BB (size: 0x1)
    float _landedRatio;                                                               // 0x02BC (size: 0x4)
    float _speed;                                                                     // 0x02C0 (size: 0x4)
    float _prisonerSpeed;                                                             // 0x02C4 (size: 0x4)

}; // Size: 0x2D0

class UCompassItemTag : public UBaseItemTag
{
    uint8 CompassLevel;                                                               // 0x0030 (size: 0x1)

}; // Size: 0x38

class UCompassWidget : public UUserWidget
{
    class UImage* _compassTrack;                                                      // 0x0270 (size: 0x8)
    class UTexture2D* _compassTrackNorthOnly;                                         // 0x0278 (size: 0x8)
    class UTexture2D* _compassTrackCardinalOnly;                                      // 0x0280 (size: 0x8)
    class UTexture2D* _compassTrackCardinalAndIntercardinal;                          // 0x0288 (size: 0x8)
    class UTexture2D* _compassTrackEverything;                                        // 0x0290 (size: 0x8)
    FVector2D _offset;                                                                // 0x0298 (size: 0x8)
    float _compassTrackWidthMultiplier;                                               // 0x02A0 (size: 0x4)

}; // Size: 0x2A8

class UComplexAnimal2AnimInstance : public UAnimal2AnimInstance
{
    EAnimalAction CurrentAction;                                                      // 0x02F0 (size: 0x1)
    float HeadLookRight;                                                              // 0x02F4 (size: 0x4)
    float HeadLookUp;                                                                 // 0x02F8 (size: 0x4)
    float AngularVelocity;                                                            // 0x02FC (size: 0x4)
    FName faceMorphTargetName;                                                        // 0x0300 (size: 0x8)
    float InterpolationSpeed;                                                         // 0x0308 (size: 0x4)
    float BlendInTime;                                                                // 0x030C (size: 0x4)
    float BlendOutTime;                                                               // 0x0310 (size: 0x4)
    float _faceMorphValueChangePerSeconds;                                            // 0x0350 (size: 0x4)

    float GetTurnInPlaceElapsedTimeRight();
    float GetTurnInPlaceElapsedTimeLeft();
    float GetTurnInPlaceDirectionBlendAlpha();
    float GetTurnInPlaceBlendAlpha();
}; // Size: 0x360

class UConZAIControllerEncounterSaveState : public UObject
{
    FDbIntegerId AttackedBaseId;                                                      // 0x0028 (size: 0x8)
    TSet<FDbIntegerId> AttackedBaseFlagsIds;                                          // 0x0030 (size: 0x50)

}; // Size: 0x80

class UConZAssetManager : public UAssetManager
{
    TArray<FImageAssetToLoad> _imageAssetsToLoad;                                     // 0x0478 (size: 0x10)
    TMap<class FName, class ULWObjectSetup*> _lwobjectSetupByPrimaryAssetName;        // 0x04D8 (size: 0x50)
    TArray<class UPrisonerResponseIdle*> _prisonerResponseIdleCDOs;                   // 0x0618 (size: 0x10)
    TArray<class UPrisonerBodyEffect*> _autoAddablePrisonerBodyEffectCDOs;            // 0x0628 (size: 0x10)
    TArray<class UItemCraftingRecipe*> _itemCraftingRecipes;                          // 0x0638 (size: 0x10)
    TArray<class UPlaceableCraftingRecipe*> _placeableCraftingRecipes;                // 0x0648 (size: 0x10)

}; // Size: 0x6F8

class UConZBoatAnimInstance : public UAnimInstance
{
    bool IsAnyoneMounted;                                                             // 0x02B8 (size: 0x1)
    float Speed;                                                                      // 0x02BC (size: 0x4)
    float SpeedKph;                                                                   // 0x02C0 (size: 0x4)
    float MaxEngineSteerAngle;                                                        // 0x02C4 (size: 0x4)
    float EngineSteerAngleInterpSpeed;                                                // 0x02C8 (size: 0x4)
    float CurrentEngineSteerAngle;                                                    // 0x02CC (size: 0x4)
    float PropellerRotationAngle;                                                     // 0x02D0 (size: 0x4)
    float PropellerRotationSpeedScale;                                                // 0x02D4 (size: 0x4)
    float SailsRotationAngle;                                                         // 0x02D8 (size: 0x4)
    bool IsMounteeDriver;                                                             // 0x02DC (size: 0x1)
    bool IsMounteeRowing;                                                             // 0x02DD (size: 0x1)
    FTransform _prisonerLHandTransform;                                               // 0x02E0 (size: 0x30)
    FTransform _prisonerRHandTransform;                                               // 0x0310 (size: 0x30)
    FVector WindDirection;                                                            // 0x0340 (size: 0xC)

}; // Size: 0x350

class UConZBorderBase : public UUserWidget
{
    EBorderSizes _borderSize;                                                         // 0x0268 (size: 0x1)
    FLinearColor _color;                                                              // 0x026C (size: 0x10)
    class UTexture2D* White1x1;                                                       // 0x0280 (size: 0x8)
    class UTexture2D* White2x2;                                                       // 0x0288 (size: 0x8)
    class UTexture2D* White4x4;                                                       // 0x0290 (size: 0x8)
    class UImage* Image_0;                                                            // 0x0298 (size: 0x8)
    class UNamedSlot* NamedSlot_0;                                                    // 0x02A0 (size: 0x8)

    void SetColor(FLinearColor Color);
}; // Size: 0x2A8

class UConZCharacterEncounterSaveState : public UObject
{
    TArray<uint8> AIControllerData;                                                   // 0x0028 (size: 0x10)

}; // Size: 0x38

class UConZCharacterMovementComponent : public UCharacterMovementComponent
{
    TEnumAsByte<ECollisionResponse> _navWalkingCollisionResponseToWorldStatic;        // 0x0B40 (size: 0x1)
    TEnumAsByte<ECollisionResponse> _navWalkingCollisionResponseToWorldDynamic;       // 0x0B41 (size: 0x1)
    float _maxClimbHeight;                                                            // 0x0B44 (size: 0x4)
    float _obstacleDetectionInterval;                                                 // 0x0B48 (size: 0x4)
    bool _queryWaterSplinesEveryFrame;                                                // 0x0B51 (size: 0x1)
    float _angularVelocityFilteringInterpolationSpeed;                                // 0x0C50 (size: 0x4)

}; // Size: 0xDA0

class UConZCharacterSkeletalMeshComponent : public USkeletalMeshComponent
{
}; // Size: 0xEE0

class UConZCustomInteractionButton : public UButton
{
}; // Size: 0x438

class UConZCustomInteractionMultilineEditableText : public UMultiLineEditableText
{
}; // Size: 0x480

class UConZDoorNavLinkComponent : public UNavLinkCustomComponent
{
}; // Size: 0x190

class UConZGameInstance : public UGameInstance
{
    FCommonMaps CommonMaps;                                                           // 0x01A8 (size: 0x78)
    FCharacterCreationMenuContext CharacterCreationMenuContext;                       // 0x0220 (size: 0x30)
    bool NetworkFailed;                                                               // 0x0250 (size: 0x1)
    bool WasKickedFromGameSession;                                                    // 0x0251 (size: 0x1)
    class UGameplayLog* GameplayLogLogin;                                             // 0x0268 (size: 0x8)
    class UGameplayLog* GameplayLogAdmin;                                             // 0x0270 (size: 0x8)
    class UGameplayLog* GameplayLogEventKill;                                         // 0x0278 (size: 0x8)
    class UGameplayLog* GameplayLogKill;                                              // 0x0280 (size: 0x8)
    class UGameplayLog* GameplayLogViolations;                                        // 0x0288 (size: 0x8)
    class UGameplayLog* GameplayLogChat;                                              // 0x0290 (size: 0x8)
    class UGameplayLog* GameplayLogEconomy;                                           // 0x0298 (size: 0x8)
    class UGameplayLog* GameplayLogMiscellaneous;                                     // 0x02A0 (size: 0x8)
    class UGameplayLog* GameplayLogFamePoints;                                        // 0x02A8 (size: 0x8)
    class UGameplayLog* GameplayLogLoot;                                              // 0x02B0 (size: 0x8)
    class UGameplayLog* GameplayLogRaidProtection;                                    // 0x02B8 (size: 0x8)
    class UGameplayLog* GameplayLogChestOwnership;                                    // 0x02C0 (size: 0x8)
    class UGameplayLog* GameplayLogQuests;                                            // 0x02C8 (size: 0x8)
    class UGameplayLog* GameplayLogVehicleDestruction;                                // 0x02D0 (size: 0x8)
    TMap<uint32, UDbConnection*> _databaseConnections;                                // 0x0328 (size: 0x50)
    class UDbAsyncWorker* _dbAsyncWorker;                                             // 0x03A0 (size: 0x8)
    class UDbIdGenerator* _dbIdGenerator;                                             // 0x03A8 (size: 0x8)
    class UDedicatedServerRequest* _dedicatedServerRequest;                           // 0x03C8 (size: 0x8)
    class UUserManager* _userManager;                                                 // 0x03D0 (size: 0x8)
    class UTwitchDropsManager* _twitchDropsManager;                                   // 0x03D8 (size: 0x8)
    class UUser* _currentUser;                                                        // 0x03E0 (size: 0x8)
    class UUserProfile* _currentUserProfile;                                          // 0x03E8 (size: 0x8)
    TSubclassOf<class UEntitySystem> _entitySystemClass;                              // 0x0408 (size: 0x8)
    class UEntitySystem* _entitySystem;                                               // 0x0410 (size: 0x8)
    class UTexture2D* _loadingScreenTexture;                                          // 0x0418 (size: 0x8)
    class ULoadingScreen* _loadingScreen;                                             // 0x0420 (size: 0x8)
    class ULoadingScreen* _specialLoadingScreen;                                      // 0x0428 (size: 0x8)
    class UAdminCommandRegistry* _adminCommandRegistry;                               // 0x04B8 (size: 0x8)

    void StartSingleplayerGame();
    void StartMultiplayerGame(FString Ip, int32 GameplayPort, int32 ResponsePort, FString AuthToken);
    void SetPlayAsDrone(bool Value);
    void RemoveLoadingWidget();
    void OnPreLoadMap(FString mapName);
    void OnPostLoadMap(class UWorld* loadedWorld);
    void OnPlaySessionEnd(bool quit);
    bool IsTransitioningMap();
    void HandleNetworkFailure(class UWorld* World, class UNetDriver* NetDriver, TEnumAsByte<ENetworkFailure::Type> FailureType, FString errorString);
    bool GetPlayAsDrone();
    FText GetLastNetworkError();
    class UDedicatedServerRequest* GetDedicatedServerRequest();
    class UDbConnection* GetDatabaseConnection();
    class UUserProfile* GetCurrentUserProfile();
    class UUser* GetCurrentUser();
    void AddLoadingWidget(class ULoadingScreen* Widget);
    void AddDefaultLoadingWidget();
}; // Size: 0x528

class UConZNetReplicationGraphConnection : public UNetReplicationGraphConnection
{
    class UConZReplicationGraphNode_AlwaysRelevantToConnection* AlwaysRelevantNode;   // 0x0238 (size: 0x8)
    class UConZReplicationGraphNode_RelevantToConnectionOnly* ActorListNode;          // 0x0240 (size: 0x8)

}; // Size: 0x248

class UConZNotification : public UObject
{
}; // Size: 0x30

class UConZPathFollowingComponent : public UPathFollowingComponent
{
}; // Size: 0x250

class UConZReplicationGraph : public UReplicationGraph
{
    class UReplicationGraphNode_GridSpatialization2D* _gridSpatializationNode;        // 0x07C0 (size: 0x8)
    class UReplicationGraphNode_ActorList* _alwaysRelevantNode;                       // 0x07C8 (size: 0x8)

}; // Size: 0x7D0

class UConZReplicationGraphNode_AlwaysRelevantToConnection : public UReplicationGraphNode
{
    class UConZNetReplicationGraphConnection* RepGraphConnection;                     // 0x0050 (size: 0x8)

}; // Size: 0xC8

class UConZReplicationGraphNode_RelevantToConnectionOnly : public UReplicationGraphNode_ActorList
{
    class UConZNetReplicationGraphConnection* RepGraphConnection;                     // 0x00D0 (size: 0x8)

}; // Size: 0xD8

class UConZReverbComponent : public UAkLateReverbComponent
{
    class UAkAuxBus* IndoorSmallAuxBus;                                               // 0x0280 (size: 0x8)
    class UAkAuxBus* IndoorMediumAuxBus;                                              // 0x0288 (size: 0x8)
    class UAkAuxBus* IndoorLargeAuxBus;                                               // 0x0290 (size: 0x8)
    class UAkAuxBus* OutdoorLargeAuxBus;                                              // 0x0298 (size: 0x8)

}; // Size: 0x2A0

class UConZSettingsMenu : public UBaseMenu
{
    class UTabGroup* _categorySelector;                                               // 0x02C8 (size: 0x8)
    class UWidgetSwitcher* _categorySwitcher;                                         // 0x02D0 (size: 0x8)
    TSubclassOf<class UUserWidget> _tabButtonClass;                                   // 0x02D8 (size: 0x8)
    TSubclassOf<class UCarouselWithLabel> _subcategoryCarouselClass;                  // 0x02E0 (size: 0x8)
    TSubclassOf<class UTextOnlyTooltip> _tooltipClass;                                // 0x02E8 (size: 0x8)
    class UConZSettingsUIController* _settingsController;                             // 0x0460 (size: 0x8)
    class UMenuButton* _apply;                                                        // 0x0478 (size: 0x8)
    class UMenuButton* _reset;                                                        // 0x0480 (size: 0x8)
    class UMenuButton* _resetAll;                                                     // 0x0488 (size: 0x8)
    class UMenuButton* _back;                                                         // 0x0490 (size: 0x8)
    float _maxDesiredSubcategoryHeight;                                               // 0x0498 (size: 0x4)
    float _tooltipDelayInSeconds;                                                     // 0x0550 (size: 0x4)
    FSlateFontInfo _requiresServerRestartFont;                                        // 0x0558 (size: 0x58)

    class UWidget* MoveFocusUp(EUINavigation UINavigation);
    class UWidget* MoveFocusDown(EUINavigation UINavigation);
}; // Size: 0x608

class UConZSettingsUIController : public UObject
{
}; // Size: 0x1E8

class UConZSlider : public UUserWidget
{
    int32 _minValue;                                                                  // 0x0288 (size: 0x4)
    int32 _maxValue;                                                                  // 0x028C (size: 0x4)
    int32 _stepSize;                                                                  // 0x0290 (size: 0x4)
    bool _controlWithKeyboard;                                                        // 0x0294 (size: 0x1)
    class UOverlay* _progressBarOverlay;                                              // 0x02B0 (size: 0x8)
    class UImage* _sliderThumb;                                                       // 0x02B8 (size: 0x8)
    class UProgressBar* _progressBar;                                                 // 0x02C0 (size: 0x8)
    FConZSliderStyle _selectedAndFocusedSliderStyle;                                  // 0x02C8 (size: 0x228)
    FConZSliderStyle _selectedAndUnfocusedSliderStyle;                                // 0x04F0 (size: 0x228)
    FConZSliderStyle _unselectedSliderStyle;                                          // 0x0718 (size: 0x228)
    FConZSliderStyle _highlightedSliderStyle;                                         // 0x0940 (size: 0x228)
    FConZSliderStyle _disabledSliderStyle;                                            // 0x0B68 (size: 0x228)
    float _stepSpeedStartTreshold;                                                    // 0x0D90 (size: 0x4)
    float _stepSpeedThreshold;                                                        // 0x0D94 (size: 0x4)
    float _stepSpeedAtStart;                                                          // 0x0D98 (size: 0x4)
    float _stepSpeedSlow;                                                             // 0x0D9C (size: 0x4)
    float _stepSpeedFast;                                                             // 0x0DA0 (size: 0x4)
    bool _controlWithMouseClick;                                                      // 0x0DA4 (size: 0x1)
    bool _controlWithMouseWheel;                                                      // 0x0DA5 (size: 0x1)

}; // Size: 0xDC0

class UConZStandardButton : public UUserWidget
{
    class UButton* MainButton;                                                        // 0x02B8 (size: 0x8)
    class UTextBlock* TextBlock_0;                                                    // 0x02C0 (size: 0x8)
    bool OverridesHighlight;                                                          // 0x02C8 (size: 0x1)
    FText Text;                                                                       // 0x02D0 (size: 0x18)
    int32 FontSize;                                                                   // 0x02E8 (size: 0x4)
    bool SizeToContent;                                                               // 0x02EC (size: 0x1)
    float WidthOverride;                                                              // 0x02F0 (size: 0x4)
    int32 HoveredFontSize;                                                            // 0x02F4 (size: 0x4)
    class UImage* Image_0;                                                            // 0x02F8 (size: 0x8)
    class USizeBox* MainSizeBox;                                                      // 0x0300 (size: 0x8)
    class UAkAudioEvent* _menuButtonClick;                                            // 0x0308 (size: 0x8)
    class UAkAudioEvent* _menuButtonHover;                                            // 0x0310 (size: 0x8)

    void TriggerButton();
    void HoverButton();
}; // Size: 0x318

class UConZUniqueObjectCacher : public UObject
{
    TMap<class UClass*, class FTimestampedObject> _timestampedObjectMap;              // 0x0028 (size: 0x50)

}; // Size: 0x80

class UConZUserWidget : public UUserWidget
{
    FGameplayTagContainer GameplayTags;                                               // 0x0268 (size: 0x20)

}; // Size: 0x290

class UConZVehicleSpringArmComponent : public USpringArmComponent
{
    float _ownerAccelerationDirectionInterpSpeed;                                     // 0x0290 (size: 0x4)
    FVector _maxCameraOffset;                                                         // 0x0294 (size: 0xC)
    FVector _cameraOffsetInterpSpeed;                                                 // 0x02A0 (size: 0xC)
    float _maxCameraPitch;                                                            // 0x02AC (size: 0x4)

}; // Size: 0x2E0

class UConZWindowNavLinkComponent : public UNavLinkCustomComponent
{
}; // Size: 0x190

class UConsoleStatics : public UObject
{
}; // Size: 0x28

class UConstitutionSkill : public USkill
{
}; // Size: 0xC8

class UConsumableDigestionHandler : public UObject
{
}; // Size: 0x28

class UConsumableUserData : public UObject
{
}; // Size: 0x28

class UContainerDisplay : public UUserWidget
{
    class UImage* _containerImage;                                                    // 0x02C8 (size: 0x8)
    class UImage* _containerImage2;                                                   // 0x02D0 (size: 0x8)
    class USizeBox* _sizeBox;                                                         // 0x02D8 (size: 0x8)
    class UTextBlock* _name;                                                          // 0x02E0 (size: 0x8)
    class UTextBlock* _name2;                                                         // 0x02E8 (size: 0x8)
    class UTextBlock* _durability;                                                    // 0x02F0 (size: 0x8)
    class UTextBlock* _durability2;                                                   // 0x02F8 (size: 0x8)
    class UProgressBar* _durabilityProgressBar;                                       // 0x0300 (size: 0x8)
    class UProgressBar* _durabilityProgressBar2;                                      // 0x0308 (size: 0x8)
    class UWidgetSwitcher* _selectionSwitcher;                                        // 0x0310 (size: 0x8)
    float _width;                                                                     // 0x0318 (size: 0x4)
    float _height;                                                                    // 0x031C (size: 0x4)

}; // Size: 0x328

class UContainerItemDescriptor : public UObject
{
    UClass* _itemClass;                                                               // 0x0060 (size: 0x8)
    FContainerItemDescriptorData _data;                                               // 0x0080 (size: 0x60)
    TScriptInterface<class IInventoryContainer> _owningContainer;                     // 0x00E0 (size: 0x10)
    TScriptInterface<class IInventoryNode> _owningNode;                               // 0x00F0 (size: 0x10)

}; // Size: 0x248

class UContinuousFuelConsumptionEntityComponentSave : public UObject
{
    bool TickEnabled;                                                                 // 0x0028 (size: 0x1)

}; // Size: 0x30

class UContinuousFuelConsumptionEntityComponentSetup : public UEntityComponentSetup
{
    bool HasInfiniteResources;                                                        // 0x0048 (size: 0x1)
    TSubclassOf<class UGameResourceType> ResourceType;                                // 0x0050 (size: 0x8)
    bool AutoFindResourceComponent;                                                   // 0x0058 (size: 0x1)
    FName AssociatedResourceComponentName;                                            // 0x005C (size: 0x8)

}; // Size: 0x68

class UContinuousFuelHeatSource : public UFueledHeatSource
{
    bool _autoFindFuelConsumption;                                                    // 0x0228 (size: 0x1)
    FName _associatedFuelConsumptionEntityComponent;                                  // 0x022C (size: 0x8)
    TSubclassOf<class UGameResourceType> _resourceType;                               // 0x0238 (size: 0x8)
    bool _requiresMinimumAvailableEnergyAmountToTurnOn;                               // 0x0240 (size: 0x1)
    bool _isRecreateable;                                                             // 0x0241 (size: 0x1)
    float _maxEnergyConsumptionRate;                                                  // 0x0244 (size: 0x4)
    uint8 _repCurrentEnergyConsumptionRatio;                                          // 0x0248 (size: 0x1)
    FRuntimeFloatCurve _energyConsumptionRateVsTemperatureScaleCurve;                 // 0x0250 (size: 0x88)
    uint8 _repDialValue;                                                              // 0x02D8 (size: 0x1)
    float _dialOffValue;                                                              // 0x02DC (size: 0x4)
    float _minDialDeltaValueForRPC;                                                   // 0x02E0 (size: 0x4)
    float _updateToServerCheckInterval;                                               // 0x02E4 (size: 0x4)

    void OnRep_DialValue();
    void OnRep_ConsumptionRate(uint8 previousConsumptionRate);
}; // Size: 0x310

class UControlMappingWidget : public UUserWidget
{
    class UTextBlock* _label;                                                         // 0x02E0 (size: 0x8)
    class UTextBlock* _keyCombination;                                                // 0x02E8 (size: 0x8)
    class UImage* _focusBackgroundImage;                                              // 0x02F0 (size: 0x8)
    FControlMappingStyle _selectedAndFocusedCMStyle;                                  // 0x02F8 (size: 0x158)
    FControlMappingStyle _selectedAndUnfocusedCMStyle;                                // 0x0450 (size: 0x158)
    FControlMappingStyle _unselectedCMStyle;                                          // 0x05A8 (size: 0x158)
    FControlMappingStyle _highlightedCMStyle;                                         // 0x0700 (size: 0x158)
    float _mouseMoveDeltaThreshold;                                                   // 0x0858 (size: 0x4)

}; // Size: 0x8B8

class UControlMappingsUIController : public UObject
{
}; // Size: 0x1C0

class UCookedFoodItemEntitySave : public UObject
{
    float CookAmount;                                                                 // 0x0028 (size: 0x4)
    float ExhaustionBonus;                                                            // 0x002C (size: 0x4)
    EFoodCookQuality CookQuality;                                                     // 0x0030 (size: 0x1)
    TMap<FPrimaryAssetId, float> OptionalResourceTypes;                               // 0x0038 (size: 0x50)

}; // Size: 0x88

class UCookedFoodItemEntitySetup : public UFoodItemEntitySetup
{
}; // Size: 0x90

class UCookingAddRecipeButton : public UUserWidget
{
    class UImage* _addRecipeIcon;                                                     // 0x02B8 (size: 0x8)
    class UTextBlock* _emptySlotText;                                                 // 0x02C0 (size: 0x8)
    class UTextBlock* _heatSourceWarningText;                                         // 0x02C8 (size: 0x8)
    FLinearColor _disabledColor;                                                      // 0x02D0 (size: 0x10)
    FLinearColor _enabledColor;                                                       // 0x02E0 (size: 0x10)

}; // Size: 0x2F0

class UCookingCategoryButtonWidget : public UUserWidget
{
    class UTextBlock* _titleTextBlock;                                                // 0x0278 (size: 0x8)
    class UImage* _buttonImageWidget;                                                 // 0x0280 (size: 0x8)
    class UImage* _overallBorder;                                                     // 0x0288 (size: 0x8)
    FGameplayTag _cookingCategory;                                                    // 0x0290 (size: 0x8)
    FGameplayTag _navigationTag;                                                      // 0x0298 (size: 0x8)
    FText _titleText;                                                                 // 0x02A0 (size: 0x18)
    TSoftObjectPtr<UTexture2D> _buttonImage;                                          // 0x02B8 (size: 0x28)
    FLinearColor _unHoveredBorderColor;                                               // 0x02E0 (size: 0x10)
    FLinearColor _hoveredBorderColor;                                                 // 0x02F0 (size: 0x10)

}; // Size: 0x300

class UCookingCategoryDropdown : public UUserWidget
{
    TSubclassOf<class USimpleTextDropdownEntry> _textDropdownEntryClass;              // 0x0288 (size: 0x8)
    class UTextBlock* _chosenCategory;                                                // 0x0290 (size: 0x8)
    class UMenuAnchor* _popup;                                                        // 0x0298 (size: 0x8)
    TSubclassOf<class UVerticalScrollBoxDropdownContent> _categoryDropdownContentClass; // 0x02A0 (size: 0x8)
    TArray<FCookingCategoryDropdownEntryData> _cookingCategoryDropdownEntries;        // 0x02A8 (size: 0x10)

    class UUserWidget* CreateContentWidget();
}; // Size: 0x2B8

class UCookingCommonData : public UDataAsset
{
    class UCurveFloat* MassReductionByPeakTemperature_Fiber;                          // 0x0030 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_Starch;                         // 0x0038 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_Sugars;                         // 0x0040 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_OtherCarbohydrates;             // 0x0048 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_SaturatedFat;                   // 0x0050 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_OtherFats;                      // 0x0058 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_Protein;                        // 0x0060 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_VitaminA;                       // 0x0068 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_VitaminC;                       // 0x0070 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_VitaminD;                       // 0x0078 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_VitaminE;                       // 0x0080 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_VitaminK;                       // 0x0088 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_VitaminB1;                      // 0x0090 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_VitaminB2;                      // 0x0098 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_VitaminB3;                      // 0x00A0 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_VitaminB6;                      // 0x00A8 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_VitaminB9;                      // 0x00B0 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_VitaminB12;                     // 0x00B8 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_VitaminB5;                      // 0x00C0 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_VitaminB4;                      // 0x00C8 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_Calcium;                        // 0x00D0 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_Iron;                           // 0x00D8 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_Magnesium;                      // 0x00E0 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_Phosphorus;                     // 0x00E8 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_Potassium;                      // 0x00F0 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_Sodium;                         // 0x00F8 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_Zinc;                           // 0x0100 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_Copper;                         // 0x0108 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_Manganese;                      // 0x0110 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_Selenium;                       // 0x0118 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_Alcohol;                        // 0x0120 (size: 0x8)
    class UCurveFloat* MassReductionByPeakTemperature_Water;                          // 0x0128 (size: 0x8)
    class UCurveFloat* _cookQualityVsCookAmount;                                      // 0x0130 (size: 0x8)
    class UCurveFloat* _cookQualityVsCookTimeRelativeError_NoSkill;                   // 0x0138 (size: 0x8)
    class UCurveFloat* _cookQualityVsCookTimeRelativeError_Basic;                     // 0x0140 (size: 0x8)
    class UCurveFloat* _cookQualityVsCookTimeRelativeError_Medium;                    // 0x0148 (size: 0x8)
    class UCurveFloat* _cookQualityVsCookTimeRelativeError_Advanced;                  // 0x0150 (size: 0x8)
    class UCurveFloat* _cookQualityVsCookTimeRelativeError_AboveAdvanced;             // 0x0158 (size: 0x8)
    float _recipeMemorizationChancePerSkillLevel;                                     // 0x0160 (size: 0x4)
    float _recipeMemorizationChancePerCookQuality;                                    // 0x0164 (size: 0x4)
    float _baseExperienceGainPerRecipe;                                               // 0x0168 (size: 0x4)
    float _experienceGainPerRecipeCookTimeInMinutes;                                  // 0x016C (size: 0x4)
    float _experienceGainPerRecipeCookTemperatureInDegrees;                           // 0x0170 (size: 0x4)
    float _experienceGainMultiplier_Ruined;                                           // 0x0174 (size: 0x4)
    float _experienceGainMultiplier_Bad;                                              // 0x0178 (size: 0x4)
    float _experienceGainMultiplier_Poor;                                             // 0x017C (size: 0x4)
    float _experienceGainMultiplier_Good;                                             // 0x0180 (size: 0x4)
    float _experienceGainMultiplier_Excellent;                                        // 0x0184 (size: 0x4)
    float _experienceGainMultiplier_Perfect;                                          // 0x0188 (size: 0x4)

}; // Size: 0x190

class UCookingControlButton : public UUserWidget
{
    class UImage* _buttonBackground;                                                  // 0x02B8 (size: 0x8)
    class UImage* _timerBorder;                                                       // 0x02C0 (size: 0x8)
    class UWidgetSwitcher* _visualSwitcher;                                           // 0x02C8 (size: 0x8)
    class UTextBlock* _buttonTimer;                                                   // 0x02D0 (size: 0x8)
    TSubclassOf<class UTextOnlyTooltip> _cookingTextTooltipClass;                     // 0x02E0 (size: 0x8)
    ECookingControlButtonState _controlButtonState;                                   // 0x02E8 (size: 0x1)
    TMap<class ECookingControlButtonVisual, class FHoverClickButtonVisualInfo> _hoverAndClickVisualsMap; // 0x02F0 (size: 0x50)

}; // Size: 0x340

class UCookingFavouriteButton : public UUserWidget
{
    class UImage* _buttonImage;                                                       // 0x02C0 (size: 0x8)
    class UWidgetAnimation* _clickAnimation;                                          // 0x02C8 (size: 0x8)
    class UWidgetAnimation* _hoverAnimation;                                          // 0x02D0 (size: 0x8)
    FSlateBrush _nonFavouriteButtonBrush;                                             // 0x02D8 (size: 0x88)
    FSlateBrush _favouriteButtonBrush;                                                // 0x0360 (size: 0x88)

}; // Size: 0x3E8

class UCookingFinishedWidget : public UUserWidget
{
    class UImage* _productImage;                                                      // 0x0278 (size: 0x8)
    class UTextBlock* _ratingText;                                                    // 0x0280 (size: 0x8)
    class UHorizontalBox* _starsHorizontalBox;                                        // 0x0288 (size: 0x8)
    class UTextBlock* _qualityDescription;                                            // 0x0290 (size: 0x8)
    class UButton* _grabButton;                                                       // 0x0298 (size: 0x8)
    FSlateBrush _activeStarBrush;                                                     // 0x02A0 (size: 0x88)
    FSlateBrush _inactiveStarBrush;                                                   // 0x0328 (size: 0x88)

    void OnGrabButtonClicked();
}; // Size: 0x3B0

class UCookingHeatSourceButton : public UUserWidget
{
    class USizeBox* _mainSizeBox;                                                     // 0x0278 (size: 0x8)
    class UImage* _heatSourceIcon;                                                    // 0x0280 (size: 0x8)
    class UImage* _borderImage;                                                       // 0x0288 (size: 0x8)
    bool _selected;                                                                   // 0x0290 (size: 0x1)
    FVector2D _selectedButtonSize;                                                    // 0x0294 (size: 0x8)
    FVector2D _deselectedButtonSize;                                                  // 0x029C (size: 0x8)
    FLinearColor _selectedBorderColor;                                                // 0x02A4 (size: 0x10)
    FLinearColor _deselectedBorderColor;                                              // 0x02B4 (size: 0x10)

}; // Size: 0x2C8

class UCookingInfoButton : public UUserWidget
{
    class UWidgetAnimation* _pulseAnimation;                                          // 0x02B8 (size: 0x8)

}; // Size: 0x2C8

class UCookingIngredientInfoWidget : public UUserWidget
{
    FLinearColor _unselectedBorderColor;                                              // 0x0278 (size: 0x10)
    FLinearColor _selectedBorderColor;                                                // 0x0288 (size: 0x10)
    class UWidgetSwitcher* _mainSwitcher;                                             // 0x0298 (size: 0x8)
    class UOverlay* _nonEmptyPage;                                                    // 0x02A0 (size: 0x8)
    class UCookingInfoButton* _infoButton;                                            // 0x02A8 (size: 0x8)
    class UTextBlock* _amountText;                                                    // 0x02B0 (size: 0x8)
    class UImage* _ingredientIcon;                                                    // 0x02B8 (size: 0x8)
    class UImage* _border;                                                            // 0x02C0 (size: 0x8)
    class UOverlay* _emptyPage;                                                       // 0x02C8 (size: 0x8)
    TSubclassOf<class UTextOnlyTooltip> _ingredientTextTooltipClass;                  // 0x02E0 (size: 0x8)

}; // Size: 0x2E8

class UCookingIngredientTooltip : public UUserWidget
{
    class UTextBlock* _ingredientName;                                                // 0x0268 (size: 0x8)
    class UTextBlock* _ingredientNecessity;                                           // 0x0270 (size: 0x8)

}; // Size: 0x278

class UCookingPanel : public UUserWidget
{
    class UCraftingCategoryTabButton* _cookingUtilitySlotsButton;                     // 0x0270 (size: 0x8)
    class UCraftingCategoriesTabButtonsContainer* _categoriesTabButtonsContainer;     // 0x0278 (size: 0x8)
    class UWidgetSwitcher* _mainSwitcher;                                             // 0x0280 (size: 0x8)
    class UCookingUtilitySlotsPanel* _cookingUtilitySlotsPanel;                       // 0x0288 (size: 0x8)
    class UCookingRecipesPanel* _cookingRecipesPanel;                                 // 0x0290 (size: 0x8)
    FGameplayTag _allRecipesTag;                                                      // 0x029C (size: 0x8)
    FGameplayTag _favoritesAndRecentRecipesTag;                                       // 0x02A4 (size: 0x8)
    FCraftingCategoryTabButtonSharedStyle _addingRecipeToUtilitySlotButtonStyle;      // 0x02AC (size: 0x24)
    float _checkIngredientsValidityPeriod;                                            // 0x02D0 (size: 0x4)
    float _checkVicinityHeatSourceItemsPeriod;                                        // 0x02D4 (size: 0x4)
    float _updateProgressBarColorsPeriod;                                             // 0x02D8 (size: 0x4)

}; // Size: 0x2F8

class UCookingProgressWidget : public UUserWidget
{
    class URetainerBox* _progressImageRetainerBox;                                    // 0x0268 (size: 0x8)
    class UImage* _progressImage;                                                     // 0x0270 (size: 0x8)
    class URichTextBlock* _cookingTimeText;                                           // 0x0278 (size: 0x8)
    class URichTextBlock* _cookingTemperatureText;                                    // 0x0280 (size: 0x8)

}; // Size: 0x288

class UCookingRecipe : public UPrimaryDataAsset
{
    FText RecipeName;                                                                 // 0x0030 (size: 0x18)
    FText Description;                                                                // 0x0048 (size: 0x18)
    TArray<FRecipeIngredient> MainIngredients;                                        // 0x0060 (size: 0x10)
    TArray<FRecipeIngredient> OptionalIngredients;                                    // 0x0070 (size: 0x10)
    FCookingResult ResultingFood;                                                     // 0x0080 (size: 0x28)
    float CookingTemperature;                                                         // 0x00A8 (size: 0x4)
    float CookingTime;                                                                // 0x00AC (size: 0x4)
    FGameplayTagContainer Utility;                                                    // 0x00B0 (size: 0x20)
    FGameplayTagContainer Category;                                                   // 0x00D0 (size: 0x20)
    TSoftObjectPtr<UStaticMesh> CookProgressMesh;                                     // 0x00F0 (size: 0x28)
    TSoftObjectPtr<UMaterialInterface> CookProgressMeshMaterial;                      // 0x0118 (size: 0x28)
    int32 CookProgressMeshMaterialSlot;                                               // 0x0140 (size: 0x4)
    bool UseMeshRelativeTransform;                                                    // 0x0144 (size: 0x1)
    FTransform CookProgressMeshRelativeTransform;                                     // 0x0150 (size: 0x30)
    bool CookProgressMeshFacesHeatsource;                                             // 0x0180 (size: 0x1)
    class UAkAudioEvent* StartCookingEvent;                                           // 0x0188 (size: 0x8)
    class UAkAudioEvent* StopCookingEvent;                                            // 0x0190 (size: 0x8)

}; // Size: 0x1A0

class UCookingRecipeButtonWidget : public UUserWidget
{
    class UTextBlock* _titleText;                                                     // 0x02D8 (size: 0x8)
    class UImage* _buttonIcon;                                                        // 0x02E0 (size: 0x8)
    class UImage* _favoriteStar;                                                      // 0x02E8 (size: 0x8)
    class UMenuAnchor* _contextMenuAnchor;                                            // 0x02F0 (size: 0x8)
    class UImage* _overallBorder;                                                     // 0x02F8 (size: 0x8)
    FLinearColor _deselectedBorderColor;                                              // 0x0300 (size: 0x10)
    FLinearColor _selectedBorderColor;                                                // 0x0310 (size: 0x10)
    TSubclassOf<class UVerticalScrollBoxDropdownContent> _contextMenuVBox;            // 0x0328 (size: 0x8)
    TSubclassOf<class USimpleDropdownEntryCategoryTitle> _dropdownEntryCategoryTitleClass; // 0x0330 (size: 0x8)
    TSubclassOf<class USimpleTextDropdownEntry> _textDropdownEntryClass;              // 0x0338 (size: 0x8)

    class UUserWidget* CreateContextMenu();
}; // Size: 0x340

class UCookingRecipeButtonsContainer : public UUserWidget
{
    class UOverlay* _titleOverlay;                                                    // 0x02A0 (size: 0x8)
    class UTextBlock* _titleText;                                                     // 0x02A8 (size: 0x8)
    class UCheckBox* _expandCheckBox;                                                 // 0x02B0 (size: 0x8)
    class UWrapBox* _wrapBox;                                                         // 0x02B8 (size: 0x8)
    TSubclassOf<class UCookingRecipeButtonWidget> _buttonClass;                       // 0x02C0 (size: 0x8)

    void OnContainerCheckBoxStateChanged(bool checked);
}; // Size: 0x2D0

class UCookingRecipeCategoryPanel : public UWrapBox
{
    FGameplayTag _navigationTag;                                                      // 0x0150 (size: 0x8)

}; // Size: 0x158

class UCookingRecipeCollectionItemTag : public UBaseItemTag
{
    TArray<FPrimaryAssetId> _recipes;                                                 // 0x0030 (size: 0x10)

}; // Size: 0x40

class UCookingRecipeDetailsWidget : public UUserWidget
{
    TSubclassOf<class UCookingIngredientInfoWidget> _ingredientInfoWidgetClass;       // 0x0280 (size: 0x8)
    TSubclassOf<class UPossibleCookingIngredientWidget> _possibleIngredientWidgetClass; // 0x0288 (size: 0x8)
    class UImage* _recipeIcon;                                                        // 0x0290 (size: 0x8)
    class UCookingFavouriteButton* _favouritesButton;                                 // 0x0298 (size: 0x8)
    class URichTextBlock* _cookingTimeText;                                           // 0x02A0 (size: 0x8)
    class UTextBlock* _recipeTitle;                                                   // 0x02A8 (size: 0x8)
    class UCheckBox* _expandCheckBoxMainIngredients;                                  // 0x02B0 (size: 0x8)
    class UWrapBox* _mainIngredientsWrapBox;                                          // 0x02B8 (size: 0x8)
    class UVerticalBox* _mainIngredientDetailsVerticalBox;                            // 0x02C0 (size: 0x8)
    class UWrapBox* _possibleMainIngredientsWrapBox;                                  // 0x02C8 (size: 0x8)
    class UCheckBox* _expandCheckBoxOptionalIngredients;                              // 0x02D0 (size: 0x8)
    class UWrapBox* _optionalIngredientsWrapBox;                                      // 0x02D8 (size: 0x8)
    class UVerticalBox* _optionalIngredientDetailsVerticalBox;                        // 0x02E0 (size: 0x8)
    class UWrapBox* _possibleOptionalIngredientsWrapBox;                              // 0x02E8 (size: 0x8)
    class UTextBlock* _detailedDescriptionText;                                       // 0x02F0 (size: 0x8)
    class UTextBlock* _cookingUtilities;                                              // 0x02F8 (size: 0x8)
    class UTextBlock* _cookingTimeEmphasized;                                         // 0x0300 (size: 0x8)

    void OnOptionalIngredientsCheckBoxStateChanged(bool checked);
    void OnMainIngredientsCheckBoxStateChanged(bool checked);
}; // Size: 0x310

class UCookingRecipeRegistry : public UDataAsset
{
    TArray<FCookingRecipeRegistryEntry> _entries;                                     // 0x0030 (size: 0x10)

}; // Size: 0x40

class UCookingRecipesPanel : public UUserWidget
{
    class USearchBox* _searchBox;                                                     // 0x02A0 (size: 0x8)
    class UWidgetSwitcher* _categoriesDetailsSwitcher;                                // 0x02A8 (size: 0x8)
    class UTextBlock* _selectedCategoryTitle;                                         // 0x02B0 (size: 0x8)
    class UScrollBox* _categoriesScrollBox;                                           // 0x02B8 (size: 0x8)
    class UCookingRecipeDetailsWidget* _cookingRecipeDetailsWidget;                   // 0x02C0 (size: 0x8)
    class UOverlay* _addRecipeToUtilitySlotOverlay;                                   // 0x02C8 (size: 0x8)
    class UPrimaryButton* _leftButton;                                                // 0x02D0 (size: 0x8)
    class UPrimaryButton* _middleButton;                                              // 0x02D8 (size: 0x8)
    class UPrimaryButton* _rightButton;                                               // 0x02E0 (size: 0x8)
    class UConZCustomInteractionButton* _collapseAllButton;                           // 0x02E8 (size: 0x8)
    class UConZCustomInteractionButton* _expandAllButton;                             // 0x02F0 (size: 0x8)
    TSubclassOf<class UCookingRecipeButtonsContainer> _cookingRecipeButtonsContainerClass; // 0x02F8 (size: 0x8)
    TSubclassOf<class UTextOnlyTooltip> _tooltipClass;                                // 0x0300 (size: 0x8)
    FText _cancelTooltipText;                                                         // 0x0358 (size: 0x18)
    FText _detailsTooltipText;                                                        // 0x0370 (size: 0x18)
    FText _backTooltipText;                                                           // 0x0388 (size: 0x18)
    FText _addRecipeTooltipText;                                                      // 0x03A0 (size: 0x18)
    FMargin _cookingCategoryPadding;                                                  // 0x0450 (size: 0x10)

    void OnShowDetailsPanelClicked();
    void OnNavigateBackClicked();
    void OnCancelRecipeAdditionClicked();
    void OnAnyButtonHovered();
    void OnAddRecipeClicked();
    void HandleOnExpandAllClicked();
    void HandleOnCollapseAllClicked();
}; // Size: 0x460

class UCookingSkill : public UIntelligenceSkill
{
    TArray<FPrimaryAssetId> _recipesKnownByDefault;                                   // 0x00B0 (size: 0x10)
    float _cookTimeMultiplier_NoSkill;                                                // 0x0160 (size: 0x4)
    float _cookTimeMultiplier_Basic;                                                  // 0x0164 (size: 0x4)
    float _cookTimeMultiplier_Medium;                                                 // 0x0168 (size: 0x4)
    float _cookTimeMultiplier_Advanced;                                               // 0x016C (size: 0x4)
    float _cookTimeMultiplier_AboveAdvanced;                                          // 0x0170 (size: 0x4)

}; // Size: 0x178

class UCookingSortingDropdown : public UUserWidget
{
    TSubclassOf<class USimpleTextDropdownEntry> _textDropdownEntryClass;              // 0x0280 (size: 0x8)
    TSubclassOf<class UVerticalScrollBoxDropdownContent> _categoryDropdownContentClass; // 0x0288 (size: 0x8)
    class UImage* _icon;                                                              // 0x0290 (size: 0x8)
    class UMenuAnchor* _popup;                                                        // 0x0298 (size: 0x8)
    TArray<FCookingSortingDropdownEntryData> _cookingSortingDropdownEntries;          // 0x02A0 (size: 0x10)

    class UUserWidget* CreateContentWidget();
}; // Size: 0x2B0

class UCookingTemperatureControlLinearWidget : public UUserWidget
{
    class URetainerBox* _effectBox;                                                   // 0x0280 (size: 0x8)
    class USlider* _temperatureSlider;                                                // 0x0288 (size: 0x8)
    class UOverlay* _temperatureValuesOverlay;                                        // 0x0290 (size: 0x8)
    float _minimumVisualValue;                                                        // 0x0298 (size: 0x4)
    float _maximumVisualValue;                                                        // 0x029C (size: 0x4)

    void OnValueChanged(float Value);
}; // Size: 0x2A0

class UCookingTemperatureControlRadialWidget : public UUserWidget
{
    class UWidgetSwitcher* _dialDetailSwitcher;                                       // 0x0278 (size: 0x8)
    class UOverlay* _exactTemperaturesOverlay;                                        // 0x0280 (size: 0x8)
    class UImage* _dialArrow;                                                         // 0x0288 (size: 0x8)
    float _rotationSpeedMultiplier;                                                   // 0x0290 (size: 0x4)
    FSlateBrush _arrowNormalBrush;                                                    // 0x0298 (size: 0x88)
    FSlateBrush _arrowHoveredBrush;                                                   // 0x0320 (size: 0x88)

}; // Size: 0x3B0

class UCookingUIContext : public UUIContext
{
}; // Size: 0x28

class UCookingUIController : public UObject
{
    float _vicinityRadius;                                                            // 0x0290 (size: 0x4)
    FLinearColor _overcookedColor;                                                    // 0x0294 (size: 0x10)
    FLinearColor _cookedColor;                                                        // 0x02A4 (size: 0x10)
    FLinearColor _undercookedColor;                                                   // 0x02B4 (size: 0x10)
    float _updateAllRecipeInstanceProgressBarColorsPeriod;                            // 0x03B8 (size: 0x4)
    TMap<class FGameplayTag, class FText> _categoryTagNames;                          // 0x03C0 (size: 0x50)
    FGameplayTag _favoritesAndRecentRecipesCategoryTag;                               // 0x0410 (size: 0x8)

}; // Size: 0x470

class UCookingUtilityFilterDropdown : public UUserWidget
{
    class UImage* _utilityFilterIcon;                                                 // 0x0280 (size: 0x8)
    class UMenuAnchor* _popup;                                                        // 0x0288 (size: 0x8)
    TSubclassOf<class USimpleTextDropdownEntryWithCheckBox> _dropdownEntryClass;      // 0x0290 (size: 0x8)
    TSubclassOf<class UVerticalScrollBoxDropdownContent> _dropdownContentClass;       // 0x0298 (size: 0x8)
    TArray<FCookingUtilityFilterDropdownEntryData> _cookingUtilityFilterDropdownEntries; // 0x02A0 (size: 0x10)

    class UUserWidget* CreateContentWidget();
}; // Size: 0x2B0

class UCookingUtilityItemTag : public UBaseItemTag
{
    bool UsesMainSnapPoint;                                                           // 0x0030 (size: 0x1)
    FCookingUtilityMainSnapPoint MainSnapPoint;                                       // 0x0038 (size: 0x48)
    TArray<FCookingUtilitySlot> Slots;                                                // 0x0080 (size: 0x10)
    bool HighlightItem;                                                               // 0x0090 (size: 0x1)

}; // Size: 0x98

class UCookingUtilityOverview : public UUserWidget
{
    TSubclassOf<class UInteractiveIngredientWidget> _ingredientWidgetClass;           // 0x02D8 (size: 0x8)
    TSubclassOf<class UCookingIngredientTooltip> _ingredientWidgetTooltipClass;       // 0x02E0 (size: 0x8)
    class UTextBlock* _utilityTitleText;                                              // 0x02E8 (size: 0x8)
    class URetainerBox* _recipeTitleTextEffectBox;                                    // 0x02F0 (size: 0x8)
    class UTextBlock* _recipeTitleText;                                               // 0x02F8 (size: 0x8)
    class UImage* _heatSourceWarningIcon;                                             // 0x0300 (size: 0x8)
    class USizeBox* _mainSwitcherSizeBox;                                             // 0x0308 (size: 0x8)
    class UWidgetSwitcher* _mainSwitcher;                                             // 0x0310 (size: 0x8)
    class UCookingAddRecipeButton* _addRecipeButton;                                  // 0x0318 (size: 0x8)
    class UIngredientsForRecipeWidget* _ingredientsForRecipeWidget;                   // 0x0320 (size: 0x8)
    class UCookingProgressWidget* _cookingProgressWidget;                             // 0x0328 (size: 0x8)
    class UCookingFinishedWidget* _cookingFinishedWidget;                             // 0x0330 (size: 0x8)
    class UTextBlock* _slotOrdinalNumber;                                             // 0x0338 (size: 0x8)
    class UCookingControlButton* _cookAndTimerButton;                                 // 0x0340 (size: 0x8)
    class UCookingControlButton* _cancelButton;                                       // 0x0348 (size: 0x8)
    class USizeBox* _progressBarSizeBox;                                              // 0x0350 (size: 0x8)
    FLinearColor _hasCookingTimeLeftColor;                                            // 0x0358 (size: 0x10)
    FLinearColor _cookingTimeOverflowedColor;                                         // 0x0368 (size: 0x10)
    FSlateBrush _heatSourceWarningIcon_MissingFuel;                                   // 0x0378 (size: 0x88)
    FSlateBrush _heatSourceWarningIcon_NotTurnedOn;                                   // 0x0400 (size: 0x88)

}; // Size: 0x4A0

class UCookingUtilitySlotButton : public UUserWidget
{
    class UTextBlock* _titleText;                                                     // 0x0278 (size: 0x8)
    class UImage* _utilityIcon;                                                       // 0x0280 (size: 0x8)
    class UImage* _borderImage;                                                       // 0x0288 (size: 0x8)
    class UImage* _ordinalNumberBorderImage;                                          // 0x0290 (size: 0x8)
    class UTextBlock* _slotOrdinalNumber;                                             // 0x0298 (size: 0x8)
    class UImage* _cookingInProgressIcon;                                             // 0x02A0 (size: 0x8)
    bool _selected;                                                                   // 0x02A8 (size: 0x1)
    FLinearColor _selectedBorderColor;                                                // 0x02AC (size: 0x10)
    FLinearColor _deselectedBorderColor;                                              // 0x02BC (size: 0x10)
    FLinearColor _selectedTextColor;                                                  // 0x02CC (size: 0x10)
    FLinearColor _deselectedTextColor;                                                // 0x02DC (size: 0x10)

}; // Size: 0x2F0

class UCookingUtilitySlotsPanel : public UUserWidget
{
    class UScrollBox* _utilityOverviewScrollBox;                                      // 0x0280 (size: 0x8)
    TSubclassOf<class UCookingUtilityOverview> _cookingUtilityOverviewClass;          // 0x0288 (size: 0x8)
    FMargin _utilityOverviewPadding;                                                  // 0x0290 (size: 0x10)

}; // Size: 0x2A0

class UCookingUtilityUIDataAsset : public UDataAsset
{
    FText Name;                                                                       // 0x0030 (size: 0x18)
    bool CanAddRecipeTo;                                                              // 0x0048 (size: 0x1)
    TSoftObjectPtr<UTexture2D> Icon;                                                  // 0x0050 (size: 0x28)
    ECookingTemperatureControlType CookingTemperatureControlType;                     // 0x0078 (size: 0x1)

}; // Size: 0x80

class UCraftItemAction : public UInteractionAction
{
}; // Size: 0xC0

class UCraftingAvailableItemWidget : public UUserWidget
{
    class AItem* _item;                                                               // 0x0280 (size: 0x8)
    class UAkAudioEvent* _clickSound;                                                 // 0x0288 (size: 0x8)
    TSubclassOf<class UTooltipBase> _tooltipClass;                                    // 0x0290 (size: 0x8)
    class UTexture2D* _selectedTexture;                                               // 0x0298 (size: 0x8)
    class UTexture2D* _unselectedTexture;                                             // 0x02A0 (size: 0x8)
    class UTexture2D* _componentAddTexture;                                           // 0x02A8 (size: 0x8)
    class UTexture2D* _componentRemoveTexture;                                        // 0x02B0 (size: 0x8)
    class URetainerBox* MainRetainerBox;                                              // 0x02B8 (size: 0x8)
    class UImage* _itemImage;                                                         // 0x02C0 (size: 0x8)
    class UImage* BackgroundImage;                                                    // 0x02C8 (size: 0x8)
    class UImage* AdditionalComponentImage;                                           // 0x02D0 (size: 0x8)
    class UTextBlock* CountText;                                                      // 0x02D8 (size: 0x8)

}; // Size: 0x2E0

class UCraftingCategoriesTabButtonsContainer : public UUserWidget
{
    class UTabContainer* _categoryButtonsContainer;                                   // 0x0278 (size: 0x8)
    TArray<FCraftingPanelCategoryButtonUIData> _craftingPanelCategoryButtonsUIData;   // 0x0280 (size: 0x10)
    TSubclassOf<class UCraftingCategoryTabButton> _craftingCategoryTabButtonClass;    // 0x0290 (size: 0x8)
    float _categoryButtonsSpacing;                                                    // 0x0298 (size: 0x4)

}; // Size: 0x2A0

class UCraftingCategoryTabButton : public UConZUserWidget
{
    TSubclassOf<class UTextOnlyTooltip> _tooltipClass;                                // 0x02F0 (size: 0x8)
    class UImage* _shadow;                                                            // 0x0300 (size: 0x8)
    class UImage* _background;                                                        // 0x0308 (size: 0x8)
    class UImage* _icon;                                                              // 0x0310 (size: 0x8)
    FSlateBrush _iconBrush;                                                           // 0x0318 (size: 0x88)
    FSlateBrush _backgroundBrush;                                                     // 0x03A0 (size: 0x88)
    FSlateBrush _backgroundShadowBrush;                                               // 0x0428 (size: 0x88)
    FCraftingCategoryTabButtonSharedStyle _selectedStyle;                             // 0x04B0 (size: 0x24)
    FCraftingCategoryTabButtonSharedStyle _deselectedStyle;                           // 0x04D4 (size: 0x24)
    FCraftingCategoryTabButtonSharedStyle _deselectedFocusedStyle;                    // 0x04F8 (size: 0x24)
    FCraftingCategoryTabButtonSharedStyle _disabledStyle;                             // 0x051C (size: 0x24)
    FText _categoryName;                                                              // 0x0540 (size: 0x18)

}; // Size: 0x568

class UCraftingComponentTooltip : public UUserWidget
{
    class UImage* BackgroundImage;                                                    // 0x0268 (size: 0x8)
    class UTextBlock* ComponentTypeText;                                              // 0x0270 (size: 0x8)
    class UTextBlock* DescriptionText;                                                // 0x0278 (size: 0x8)
    class UImage* Image_0;                                                            // 0x0280 (size: 0x8)
    class UTextBlock* NameText;                                                       // 0x0288 (size: 0x8)
    class UCraftingComponentWidget* _craftingComponentWidget;                         // 0x0290 (size: 0x8)

}; // Size: 0x298

class UCraftingComponentWidget : public UUserWidget
{
    class UItemClassWidget* ItemWidget;                                               // 0x0268 (size: 0x8)
    class UTextBlock* CountText;                                                      // 0x0278 (size: 0x8)
    class UTextBlock* OrderNumberText;                                                // 0x0280 (size: 0x8)
    class UImage* TypeImage;                                                          // 0x0288 (size: 0x8)
    class UTexture2D* Component_Main;                                                 // 0x0290 (size: 0x8)
    class UTexture2D* Component_Tool;                                                 // 0x0298 (size: 0x8)
    TSubclassOf<class UUserWidget> _craftingComponentWidget;                          // 0x02A0 (size: 0x8)

}; // Size: 0x2B0

class UCraftingFamePointsItemTag : public UBaseItemTag
{
    float _fameAmount;                                                                // 0x0030 (size: 0x4)

}; // Size: 0x38

class UCraftingInfoWidget : public UUserWidget
{
    class UInspectedItemWidget* ItemWidget;                                           // 0x0268 (size: 0x8)
    class UGridPanel* ComponentsGridPanel;                                            // 0x0270 (size: 0x8)
    class UGridPanel* CraftingGridPanel;                                              // 0x0278 (size: 0x8)
    class UUserWidget* ComponentsMinimizableWidget;                                   // 0x0280 (size: 0x8)
    class UUserWidget* CraftingMinimizableWidget;                                     // 0x0288 (size: 0x8)
    TArray<class UPreviousNextSwitchWidget*> _switchWidgets;                          // 0x0308 (size: 0x10)
    TWeakObjectPtr<class UPrisonerInventoryComponent> _inventoryComponent;            // 0x0318 (size: 0x8)
    class UTextBlock* TitleText;                                                      // 0x0338 (size: 0x8)
    class UTextBlock* DescriptionText;                                                // 0x0340 (size: 0x8)

    void SwapIngredient(int32 widgetIndex, int32 orderIndex);
}; // Size: 0x348

class UCraftingIngredientConsumptionMethod : public UObject
{
}; // Size: 0x28

class UCraftingIngredientTag : public UDataAsset
{
    TSubclassOf<class UCraftingIngredientConsumptionMethod> ConsumptionMethod;        // 0x0030 (size: 0x8)
    class UAkAudioEvent* PlaceableFillSound;                                          // 0x0038 (size: 0x8)
    TSoftClassPtr<AItem> UIClassRepresentative;                                       // 0x0040 (size: 0x28)
    bool OverrideClassRepresentativeCaption;                                          // 0x0068 (size: 0x1)
    FText ClassRepresentativeCaption;                                                 // 0x0070 (size: 0x18)

}; // Size: 0x88

class UCraftingItemTag : public UBaseItemTag
{
}; // Size: 0x30

class UCraftingPanelSwitcher : public UTabMenuPanel
{
    class UTabContainer* _tabRow;                                                     // 0x0268 (size: 0x8)
    class UWidgetSwitcher* _switcher;                                                 // 0x0270 (size: 0x8)
    class UItemsCraftingPanel* _itemsCraftingPanel;                                   // 0x0278 (size: 0x8)
    class UBaseBuildingPanel* _baseBuildingPanel;                                     // 0x0280 (size: 0x8)
    class UCookingPanel* _cookingPanel;                                               // 0x0288 (size: 0x8)

}; // Size: 0x298

class UCraftingPanelWidget : public UUserWidget
{
    class UCentralBuildingPanel* _centralBuildingPanel;                               // 0x0268 (size: 0x8)
    class UWidgetSwitcher* _buildingCraftingWidgetSwitcher;                           // 0x0270 (size: 0x8)

}; // Size: 0x278

class UCraftingProductQualityApplicationMethod : public UObject
{
}; // Size: 0x28

class UCraftingProductSpawningMethod : public UObject
{
}; // Size: 0x28

class UCraftingPropertyTracker : public UObject
{
}; // Size: 0x28

class UCraftingRecipe : public UPrimaryDataAsset
{
    TArray<FCraftingIngredientSlot> Ingredients;                                      // 0x0030 (size: 0x10)
    bool IsTwitchDrop;                                                                // 0x0040 (size: 0x1)
    FString TwitchDropId;                                                             // 0x0048 (size: 0x10)
    bool IsDLC;                                                                       // 0x0058 (size: 0x1)
    EDeluxeVersion DLCVersion;                                                        // 0x0059 (size: 0x1)
    TSubclassOf<class USkill> RelevantSkill;                                          // 0x0060 (size: 0x8)
    FPerSkillLevelFloatData ExperienceReward;                                         // 0x0068 (size: 0x14)
    FPerSkillLevelFloatData FamePointReward;                                          // 0x007C (size: 0x14)
    FName SurvivalTipToShowOnCraft;                                                   // 0x0090 (size: 0x8)

}; // Size: 0x98

class UCraftingRecipeButton : public UUserWidget
{
    class USizeBox* _sizeBox;                                                         // 0x02A0 (size: 0x8)
    class UImage* _background;                                                        // 0x02A8 (size: 0x8)
    class UImage* _lines;                                                             // 0x02B0 (size: 0x8)
    class UImage* _border;                                                            // 0x02B8 (size: 0x8)
    class UImage* _icon;                                                              // 0x02C0 (size: 0x8)
    class UImage* _favouriteStar;                                                     // 0x02C8 (size: 0x8)
    class UImage* _twitchDropOrDLC;                                                   // 0x02D0 (size: 0x8)
    class UMenuAnchor* _contextMenuPopup;                                             // 0x02D8 (size: 0x8)
    TSubclassOf<class UTitleAndDescriptionTooltip> _tooltipClass;                     // 0x02E8 (size: 0x8)
    TSubclassOf<class USimpleTextDropdownEntry> _textDropdownEntryClass;              // 0x02F0 (size: 0x8)
    TSubclassOf<class UVerticalScrollBoxDropdownContent> _dropdownContentContainerClass; // 0x02F8 (size: 0x8)
    class UAkAudioEvent* _onClickAudioEvent;                                          // 0x0300 (size: 0x8)
    FSlateBrush _twitchDropIcon;                                                      // 0x0308 (size: 0x88)
    FSlateBrush _dlcIcon;                                                             // 0x0390 (size: 0x88)

    void OnContextMenuOpenChanged(bool IsOpen);
    class UUserWidget* CreateContextMenuPopup();
}; // Size: 0x418

class UCraftingRecipeButtonsContainer : public UUserWidget
{
    class UOverlay* _titleOverlay;                                                    // 0x0290 (size: 0x8)
    class UTextBlock* _titleText;                                                     // 0x0298 (size: 0x8)
    class UCheckBox* _expandCheckBox;                                                 // 0x02A0 (size: 0x8)
    class UWrapBox* _wrapBox;                                                         // 0x02A8 (size: 0x8)
    TSubclassOf<class UCraftingRecipeButton> _buttonClass;                            // 0x02B0 (size: 0x8)

    void OnCheckBoxStateChanged(bool IsChecked);
}; // Size: 0x2C8

class UCraftingUIControllerBase : public UObject
{
    FCraftingRecipeAndIngredientButtonVisualData _craftingRecipeAndIngredientButtonVisualData; // 0x00B8 (size: 0x278)
    class UCraftingUIData* _dataAsset;                                                // 0x0388 (size: 0x8)

}; // Size: 0x390

class UCraftingUIData : public UDataAsset
{
    TArray<FCraftingCategoryData> ItemCategories;                                     // 0x0030 (size: 0x10)
    TArray<FCraftingCategoryData> PlaceableCategories;                                // 0x0040 (size: 0x10)
    TMap<class FGameplayTag, class FText> CategoryNames;                              // 0x0050 (size: 0x50)

}; // Size: 0xA0

class UCreditsWidget : public UBaseMenu
{
    class UWidgetAnimation* _scrollingAnimation;                                      // 0x0268 (size: 0x8)

}; // Size: 0x270

class UCriminalRecord : public UUserWidget
{
    TSubclassOf<class UCriminalRecordSkill> _criminalRecordSkillClass;                // 0x0298 (size: 0x8)
    class UCriminalRecordText* _textName;                                             // 0x02A0 (size: 0x8)
    class UCriminalRecordText* _textAliases;                                          // 0x02A8 (size: 0x8)
    class UCriminalRecordText* _textCrime;                                            // 0x02B0 (size: 0x8)
    class UCriminalRecordText* _textNumber;                                           // 0x02B8 (size: 0x8)
    class UCriminalRecordText* _textDateOfArrest;                                     // 0x02C0 (size: 0x8)
    class UCriminalRecordText* _textCountry;                                          // 0x02C8 (size: 0x8)
    class UCriminalRecordText* _textCity;                                             // 0x02D0 (size: 0x8)
    class UCriminalRecordText* _textGender;                                           // 0x02D8 (size: 0x8)
    class UCriminalRecordText* _textHeight;                                           // 0x02E0 (size: 0x8)
    class UCriminalRecordText* _textWeight;                                           // 0x02E8 (size: 0x8)
    class UCriminalRecordText* _textAge;                                              // 0x02F0 (size: 0x8)
    class UCriminalRecordText* _textBirthDate;                                        // 0x02F8 (size: 0x8)
    class UCriminalRecordText* _textEyeColor;                                         // 0x0300 (size: 0x8)
    class UCriminalRecordText* _textHairColor;                                        // 0x0308 (size: 0x8)
    class UCriminalRecordText* _textFlaws;                                            // 0x0310 (size: 0x8)
    class UCriminalRecordText* _textServerLocation;                                   // 0x0318 (size: 0x8)
    class UCriminalRecordText* _textBuildAndOccupation;                               // 0x0320 (size: 0x8)
    class UCriminalRecordText* _textStrengthCategory;                                 // 0x0328 (size: 0x8)
    class UVerticalBox* _verticalBoxStrengthSkills;                                   // 0x0330 (size: 0x8)
    class UCriminalRecordText* _textConstitutionCategory;                             // 0x0338 (size: 0x8)
    class UVerticalBox* _verticalBoxConstitutionSkills;                               // 0x0340 (size: 0x8)
    class UCriminalRecordText* _textDexterityCategory;                                // 0x0348 (size: 0x8)
    class UVerticalBox* _verticalBoxDexteritySkills;                                  // 0x0350 (size: 0x8)
    class UCriminalRecordText* _textIntelligenceCategory;                             // 0x0358 (size: 0x8)
    class UVerticalBox* _verticalBoxIntelligenceSkills;                               // 0x0360 (size: 0x8)
    class UConZStandardButton* _buttonCancel;                                         // 0x0368 (size: 0x8)
    class UConZStandardButton* _buttonOk;                                             // 0x0370 (size: 0x8)

    void OnButtonOkClicked();
    void OnButtonCancelClicked();
}; // Size: 0x378

class UCriminalRecordSkill : public UUserWidget
{
    class UQuartalPieProgressBar* _quartalPieProgressBar;                             // 0x0268 (size: 0x8)
    class UTextBlock* _textName;                                                      // 0x0270 (size: 0x8)
    class UTextBlock* _textPercentage;                                                // 0x0278 (size: 0x8)

}; // Size: 0x280

class UCriminalRecordText : public UUserWidget
{
    class UBorder* _mainBorder;                                                       // 0x0268 (size: 0x8)
    class UTextBlock* _textTitle;                                                     // 0x0270 (size: 0x8)
    class UTextBlock* _textValue;                                                     // 0x0278 (size: 0x8)
    bool _hasLeftBorder;                                                              // 0x0280 (size: 0x1)
    FSlateBrush _leftAndBottomBorder;                                                 // 0x0288 (size: 0x88)
    FSlateBrush _bottomBorder;                                                        // 0x0310 (size: 0x88)
    FText _title;                                                                     // 0x0398 (size: 0x18)
    int32 _titleFontSize;                                                             // 0x03B0 (size: 0x4)
    FMargin _titlePadding;                                                            // 0x03B4 (size: 0x10)
    FText _value;                                                                     // 0x03C8 (size: 0x18)
    int32 _valueFontSize;                                                             // 0x03E0 (size: 0x4)
    FMargin _valuePadding;                                                            // 0x03E4 (size: 0x10)
    TEnumAsByte<EHorizontalAlignment> _horizontalAlignment;                           // 0x03F4 (size: 0x1)

}; // Size: 0x3F8

class UCurrencyConversionRequest : public UPlayerRpcChannelServerRequest
{
}; // Size: 0x50

class UCurrencyConversionResponse : public UPlayerRpcChannelServerResponse
{
}; // Size: 0x30

class UCurrencyItemComponent : public UItemComponent
{
    int32 _value;                                                                     // 0x00C8 (size: 0x4)

}; // Size: 0xD8

class UCursedScrollBar : public UUserWidget
{
    float ScrollBarValue;                                                             // 0x0280 (size: 0x4)
    float ViewportHeight;                                                             // 0x0284 (size: 0x4)
    float ContentHeight;                                                              // 0x0288 (size: 0x4)

    void UpdateFromValueInternal2(float Value, float MaxCountOnScreen, float MaxValue);
    void CallSetToUpdateFromValue(float Value, float MaxCountOnScreen, float MaxValue);
    void CallOnSliderMoved(float Value);
}; // Size: 0x290

class UCustomBorder : public UUserWidget
{
    class UImage* Left;                                                               // 0x0268 (size: 0x8)
    class UImage* Right;                                                              // 0x0270 (size: 0x8)
    class UImage* Top;                                                                // 0x0278 (size: 0x8)
    class UImage* Bottom;                                                             // 0x0280 (size: 0x8)
    float BorderThickness;                                                            // 0x0288 (size: 0x4)
    FLinearColor BorderColor;                                                         // 0x028C (size: 0x10)

}; // Size: 0x2A0

class UCustomZoneDataAsset : public UDataAsset
{
    TArray<FCustomZoneDisplayData> CustomZoneEventDisplayData;                        // 0x0030 (size: 0x10)
    TArray<FCustomZoneDisplayData> CustomZoneHandlingMethodDisplayData;               // 0x0040 (size: 0x10)

}; // Size: 0x50

class UCustomZoneRegistry : public UActorComponent
{
    class UMaterialInterface* _mapMaterial;                                           // 0x00C0 (size: 0x8)
    FCustomZoneConfiguration _defaultGlobalConfiguration;                             // 0x00C8 (size: 0x48)
    FCustomZoneConfiguration _defaultConfiguration;                                   // 0x0110 (size: 0x48)
    TMap<class FName, class FCustomZoneRegion> _defaultRegions;                       // 0x0158 (size: 0x50)
    class UCanvasRenderTarget2D* _mapTexture;                                         // 0x01A8 (size: 0x8)
    class UTexture2D* _shaderData;                                                    // 0x01B0 (size: 0x8)

    void NetMulticast_ReceiveCustomZoneData(const FCustomZoneConfiguration& globalConfiguration, const TArray<FCustomZoneConfiguration>& configurations, const TArray<FCustomZoneRegion>& Regions);
}; // Size: 0x220

class UCustomZoneSettingsApplyNotification : public UUserWidget
{
    class UTextBlock* _text;                                                          // 0x0268 (size: 0x8)

}; // Size: 0x278

class UCustomZoneSettingsColorPicker : public UUserWidget
{
    class UButton* _button0;                                                          // 0x0280 (size: 0x8)
    class UButton* _button1;                                                          // 0x0288 (size: 0x8)
    class UButton* _button2;                                                          // 0x0290 (size: 0x8)
    class UButton* _button3;                                                          // 0x0298 (size: 0x8)
    class UButton* _button4;                                                          // 0x02A0 (size: 0x8)
    class UButton* _button5;                                                          // 0x02A8 (size: 0x8)
    class UButton* _button6;                                                          // 0x02B0 (size: 0x8)
    class UButton* _button7;                                                          // 0x02B8 (size: 0x8)
    class UGridPanel* _border0;                                                       // 0x02C0 (size: 0x8)
    class UGridPanel* _border1;                                                       // 0x02C8 (size: 0x8)
    class UGridPanel* _border2;                                                       // 0x02D0 (size: 0x8)
    class UGridPanel* _border3;                                                       // 0x02D8 (size: 0x8)
    class UGridPanel* _border4;                                                       // 0x02E0 (size: 0x8)
    class UGridPanel* _border5;                                                       // 0x02E8 (size: 0x8)
    class UGridPanel* _border6;                                                       // 0x02F0 (size: 0x8)
    class UGridPanel* _border7;                                                       // 0x02F8 (size: 0x8)

    void HandleButtonPress7();
    void HandleButtonPress6();
    void HandleButtonPress5();
    void HandleButtonPress4();
    void HandleButtonPress3();
    void HandleButtonPress2();
    void HandleButtonPress1();
    void HandleButtonPress0();
}; // Size: 0x328

class UCustomZoneSettingsConfiguration : public UUserWidget
{
    class UBorder* _border;                                                           // 0x0298 (size: 0x8)
    class UTextBlock* _configurationName;                                             // 0x02A0 (size: 0x8)
    class UButton* _buttonRemove;                                                     // 0x02A8 (size: 0x8)
    FLinearColor _unhighlightedColor;                                                 // 0x02B0 (size: 0x10)
    FLinearColor _highlightedColor;                                                   // 0x02C0 (size: 0x10)

    void HandleRemoveButtonClicked();
}; // Size: 0x320

class UCustomZoneSettingsConfigurationDetails : public UUserWidget
{
    class UEditableText* _name;                                                       // 0x0280 (size: 0x8)
    class UCustomZoneSettingsColorPicker* _color;                                     // 0x0288 (size: 0x8)
    class UVerticalBox* _handlingMethodSelectorContainer;                             // 0x0290 (size: 0x8)
    TArray<FLinearColor> _colors;                                                     // 0x0298 (size: 0x10)
    TSubclassOf<class UCustomZoneSettingsHandlingMethodSelector> _handlingMethodSelectorClass; // 0x02A8 (size: 0x8)
    bool _shouldShowSkipOption;                                                       // 0x02B0 (size: 0x1)

    void HandleNameChange(const FText& Text, TEnumAsByte<ETextCommit::Type> CommitMethod);
}; // Size: 0x310

class UCustomZoneSettingsConfigurationsList : public UUserWidget
{
    class UTextBlock* _configurationCountDisplay;                                     // 0x0298 (size: 0x8)
    class UButton* _buttonAddConfiguration;                                           // 0x02A0 (size: 0x8)
    class UScrollBox* _scrollBox;                                                     // 0x02A8 (size: 0x8)
    TSubclassOf<class UCustomZoneSettingsConfiguration> _configurationWidgetClass;    // 0x02B0 (size: 0x8)

    void UpdateConfiguration(int32 ConfigurationIndex, const FCustomZoneConfiguration& configuration);
    void RemoveConfiguration(int32 ConfigurationIndex);
    void AddConfiguration(const FCustomZoneConfiguration& configuration);
}; // Size: 0x2C8

class UCustomZoneSettingsDetailsDisplay : public UUserWidget
{
    class UBorder* _displayBox;                                                       // 0x02C8 (size: 0x8)
    TSubclassOf<class UCustomZoneSettingsConfigurationDetails> _globalConfigurationDetailsWidgetClass; // 0x02D0 (size: 0x8)
    TSubclassOf<class UCustomZoneSettingsConfigurationDetails> _configurationDetailsWidgetClass; // 0x02D8 (size: 0x8)
    TSubclassOf<class UCustomZoneSettingsRegionDetails> _regionDetailsWidgetClass;    // 0x02E0 (size: 0x8)
    class UCustomZoneSettingsConfigurationDetails* _globalConfigurationDetails;       // 0x02E8 (size: 0x8)
    class UCustomZoneSettingsConfigurationDetails* _configurationDetails;             // 0x02F0 (size: 0x8)
    class UCustomZoneSettingsRegionDetails* _regionDetails;                           // 0x02F8 (size: 0x8)

}; // Size: 0x300

class UCustomZoneSettingsEventDisplay : public UUserWidget
{
    class UTextBlock* _eventNameText;                                                 // 0x0268 (size: 0x8)
    class UTextBlock* _handlingMethodText;                                            // 0x0270 (size: 0x8)
    class UCustomZoneDataAsset* _customZoneData;                                      // 0x0278 (size: 0x8)

}; // Size: 0x280

class UCustomZoneSettingsHandlingMethodSelector : public UUserWidget
{
    class UTextBlock* _nameText;                                                      // 0x0280 (size: 0x8)
    class UButton* _buttonSkip;                                                       // 0x0288 (size: 0x8)
    class UButton* _buttonAllow;                                                      // 0x0290 (size: 0x8)
    class UButton* _buttonBlock;                                                      // 0x0298 (size: 0x8)
    class UCustomZoneDataAsset* _customZoneData;                                      // 0x02A0 (size: 0x8)
    TSubclassOf<class UCustomZoneSettingsToolTip> _tooltipClass;                      // 0x02A8 (size: 0x8)
    bool _showSkipOption;                                                             // 0x02B0 (size: 0x1)

    void HandleSelectionSkip();
    void HandleSelectionBlock();
    void HandleSelectionAllow();
}; // Size: 0x2B8

class UCustomZoneSettingsMap : public UUserWidget
{
    class UImage* _map;                                                               // 0x0280 (size: 0x8)
    class UTextBlock* _infoLeft;                                                      // 0x0288 (size: 0x8)
    class UTextBlock* _infoRight;                                                     // 0x0290 (size: 0x8)
    class UButton* _buttonAddCircleRegion;                                            // 0x0298 (size: 0x8)
    class UButton* _buttonAddRectangleRegion;                                         // 0x02A0 (size: 0x8)
    class UButton* _buttonRemoveRegion;                                               // 0x02A8 (size: 0x8)
    FLinearColor _buttonHighlightColor;                                               // 0x02B0 (size: 0x10)
    class UTexture2D* _shaderData;                                                    // 0x02C0 (size: 0x8)
    class UMaterialInstanceDynamic* _mapMaterial;                                     // 0x02C8 (size: 0x8)

}; // Size: 0x308

class UCustomZoneSettingsMenu : public UBaseMenu
{
    class UCustomZoneSettingsMap* _map;                                               // 0x0280 (size: 0x8)
    class UCustomZoneSettingsConfigurationsList* _configurationsList;                 // 0x0288 (size: 0x8)
    class UCustomZoneSettingsRegionsList* _regionsList;                               // 0x0290 (size: 0x8)
    class UCustomZoneSettingsDetailsDisplay* _detailsDisplay;                         // 0x0298 (size: 0x8)
    class UCustomZoneSettingsApplyNotification* _applyNotification;                   // 0x02A0 (size: 0x8)
    class UButton* _buttonBack;                                                       // 0x02A8 (size: 0x8)
    class UButton* _buttonApply;                                                      // 0x02B0 (size: 0x8)
    class UButton* _buttonReset;                                                      // 0x02B8 (size: 0x8)

    void CloseMenu();
}; // Size: 0x2C8

class UCustomZoneSettingsRegion : public UUserWidget
{
    class UHorizontalBox* _mainBox;                                                   // 0x02C8 (size: 0x8)
    class UBorder* _border;                                                           // 0x02D0 (size: 0x8)
    class UTextBlock* _regionName;                                                    // 0x02D8 (size: 0x8)
    class UTextBlock* _regionData;                                                    // 0x02E0 (size: 0x8)
    class UButton* _buttonIncreasePriority;                                           // 0x02E8 (size: 0x8)
    class UButton* _buttonDecreasePriority;                                           // 0x02F0 (size: 0x8)
    class UButton* _buttonRemove;                                                     // 0x02F8 (size: 0x8)
    FLinearColor _unhighlightedColor;                                                 // 0x0300 (size: 0x10)
    FLinearColor _highlightedColor;                                                   // 0x0310 (size: 0x10)
    FLinearColor _defaultZoneUnmodifiedUnhighlightedColor;                            // 0x0320 (size: 0x10)
    FLinearColor _defaultZoneUnmodifiedHighlightedColor;                              // 0x0330 (size: 0x10)
    FLinearColor _defaultZoneModifiedUnhighlightedColor;                              // 0x0340 (size: 0x10)
    FLinearColor _defaultZoneModifiedHighlightedColor;                                // 0x0350 (size: 0x10)
    FLinearColor _defaultZoneDeletedUnhighlightedColor;                               // 0x0360 (size: 0x10)
    FLinearColor _defaultZoneDeletedHighlightedColor;                                 // 0x0370 (size: 0x10)
    TSubclassOf<class UCustomZoneSettingsToolTip> _tooltipClass;                      // 0x0380 (size: 0x8)
    FText _unmodifiedToolTipText;                                                     // 0x0388 (size: 0x18)
    FText _modifiedToolTipText;                                                       // 0x03A0 (size: 0x18)
    FText _deletedToolTipText;                                                        // 0x03B8 (size: 0x18)

    void HandleRemoveButtonClicked();
    void HandleIncreasePriorityButtonClicked();
    void HandleDecreasePriorityButtonClicked();
    EDefaultCustomZoneState GetDefaultZoneState();
}; // Size: 0x410

class UCustomZoneSettingsRegionDetails : public UUserWidget
{
    class UEditableText* _name;                                                       // 0x02B8 (size: 0x8)
    class UButton* _buttonRestore;                                                    // 0x02C0 (size: 0x8)
    class UCarouselWithLabel* _shape;                                                 // 0x02C8 (size: 0x8)
    class USpinBox* _locationX;                                                       // 0x02D0 (size: 0x8)
    class USpinBox* _locationY;                                                       // 0x02D8 (size: 0x8)
    class UTextBlock* _textSize;                                                      // 0x02E0 (size: 0x8)
    class USpinBox* _sizeX;                                                           // 0x02E8 (size: 0x8)
    class USpinBox* _sizeY;                                                           // 0x02F0 (size: 0x8)
    class UTextBlock* _textConfiguration;                                             // 0x02F8 (size: 0x8)
    class UButton* _buttonOpenConfiguration;                                          // 0x0300 (size: 0x8)
    class UButton* _buttonNextConfiguration;                                          // 0x0308 (size: 0x8)
    class UButton* _buttonPreviousConfiguration;                                      // 0x0310 (size: 0x8)
    class UVerticalBox* _eventDisplayContainer;                                       // 0x0318 (size: 0x8)
    TSubclassOf<class UCustomZoneSettingsEventDisplay> _eventDisplayClass;            // 0x0320 (size: 0x8)

    void OpenConfiguration();
    void IncrementConfiguration();
    void HandleSizeChange(float Value, TEnumAsByte<ETextCommit::Type> CommitMethod);
    void HandleShapeChange(int32 oldValue, int32 NewValue, class UWidget* Source, EChangeSource changeSource);
    void HandleRestoreClicked();
    void HandleNameChange(const FText& Text, TEnumAsByte<ETextCommit::Type> CommitMethod);
    void HandleLocationChange(float Value, TEnumAsByte<ETextCommit::Type> CommitMethod);
    void DecrementConfiguration();
}; // Size: 0x370

class UCustomZoneSettingsRegionsList : public UUserWidget
{
    class UTextBlock* _regionCountDisplay;                                            // 0x02C8 (size: 0x8)
    class UButton* _buttonAddRegion;                                                  // 0x02D0 (size: 0x8)
    class UScrollBox* _scrollBox;                                                     // 0x02D8 (size: 0x8)
    TSubclassOf<class UCustomZoneSettingsRegion> _regionWidgetClass;                  // 0x02E0 (size: 0x8)

}; // Size: 0x2F8

class UCustomZoneSettingsToolTip : public UUserWidget
{
    class UTextBlock* _toolTip;                                                       // 0x0268 (size: 0x8)

}; // Size: 0x270

class UCustomZoneSettingsUIController : public UObject
{

    void ToggleRemoveRegionMapMode();
    void ToggleAddRectangleRegionMapMode();
    void ToggleAddCircleRegionMapMode();
    void ResetToDefaults();
    void ProcessAddDefaultRegionRequest();
    void ProcessAddDefaultConfigurationRequest();
    void ApplyCustomZoneSettings();
}; // Size: 0x270

class UCutObjectAction : public UInteractionAction
{
}; // Size: 0xC0

class UCutObjectAssetData : public UInteractionAssetData
{
    class UChoppingRecipeDataAsset* ChoppingRecipeDataAsset;                          // 0x0030 (size: 0x8)

}; // Size: 0x38

class UCutsceneWidget : public UUserWidget
{
    class UDataTable* _subtitlesDataTable;                                            // 0x0298 (size: 0x8)
    class UOverlay* _overlaySkip;                                                     // 0x02A0 (size: 0x8)
    class UTextBlock* _skipText;                                                      // 0x02A8 (size: 0x8)
    class USubtitleWidget* _subtitleWidget;                                           // 0x02B0 (size: 0x8)
    class USizeBox* _sizeBoxVideo;                                                    // 0x02B8 (size: 0x8)
    class UImage* _textureVideo;                                                      // 0x02C0 (size: 0x8)
    class UOverlay* _overlayVideoText;                                                // 0x02C8 (size: 0x8)
    class UBinkMediaPlayer* _binkMediaPlayer;                                         // 0x02D0 (size: 0x8)
    TArray<FVideoInfo> _videos;                                                       // 0x02D8 (size: 0x10)
    class UWidgetAnimation* _showSkipTextAnimation;                                   // 0x02F8 (size: 0x8)
    class UWidgetAnimation* _fadeOutSkipTextAnimation;                                // 0x0300 (size: 0x8)
    float _fadeOutSkipTextTime;                                                       // 0x0308 (size: 0x4)

    void StopCutscene();
}; // Size: 0x340

class UDamageCustomization : public UObject
{
}; // Size: 0x28

class UDamageData : public UDataAsset
{
    FGameplayTag DamageResponseTag;                                                   // 0x0030 (size: 0x8)
    FGameplayTag GameEventTag;                                                        // 0x0038 (size: 0x8)
    FGameplayTag IgnoreForStatsTag;                                                   // 0x0040 (size: 0x8)
    FGameplayTag CauseHeadExplosionTag;                                               // 0x0048 (size: 0x8)
    FGameplayTag ApplyBleedingOnlyTag;                                                // 0x0050 (size: 0x8)
    FGameplayTag AIProjectileTag;                                                     // 0x0058 (size: 0x8)
    class UDataTable* WeaponDescTable;                                                // 0x0060 (size: 0x8)
    TArray<FDamageTargetTypeMapping> DamageTargetTypeMap;                             // 0x0068 (size: 0x10)
    float BurnDamageTemperatureThreshold;                                             // 0x0078 (size: 0x4)
    FRuntimeFloatCurve BurnDamagePerSecondVsTemperature;                              // 0x0080 (size: 0x88)

}; // Size: 0x108

class UDamageDirectionIndicator : public UObject
{
    bool Visible;                                                                     // 0x0028 (size: 0x1)
    class UTexture* Texture;                                                          // 0x0030 (size: 0x8)
    float Radius;                                                                     // 0x0038 (size: 0x4)
    float OpacityMultiplier;                                                          // 0x003C (size: 0x4)
    float DefaultDelayDuration;                                                       // 0x0040 (size: 0x4)
    float DefaultSustainDuration;                                                     // 0x0044 (size: 0x4)
    float DefaultReleaseDuration;                                                     // 0x0048 (size: 0x4)

}; // Size: 0x70

class UDamageStatics : public UBlueprintFunctionLibrary
{

    void TestingOnly_DirectDamage(class AActor* Target, float Damage);
    void CheckWeaponDescReferences(class UObject* WorldContext);
}; // Size: 0x28

class UDataSingleton : public UObject
{
    TArray<FProjectileImpulseMultiplier> ImpulseMultipliers;                          // 0x0028 (size: 0x10)
    FCanvasIcon CrosshairIconUp;                                                      // 0x0038 (size: 0x18)
    FCanvasIcon CrosshairIconDown;                                                    // 0x0050 (size: 0x18)
    FCanvasIcon CrosshairIconLeft;                                                    // 0x0068 (size: 0x18)
    FCanvasIcon CrosshairIconRight;                                                   // 0x0080 (size: 0x18)
    FCanvasIcon CrosshairIconCenter;                                                  // 0x0098 (size: 0x18)
    FCanvasIcon CrosshairIconCenterThrowing;                                          // 0x00B0 (size: 0x18)
    FCanvasIcon CrosshairBlockedIcon;                                                 // 0x00C8 (size: 0x18)
    FCanvasIcon BowSpreadCircle;                                                      // 0x00E0 (size: 0x18)
    class UTexture2D* SingleFireIcon;                                                 // 0x00F8 (size: 0x8)
    class UTexture2D* AutoFireIcon;                                                   // 0x0100 (size: 0x8)
    class UTexture2D* BurstFireIcon;                                                  // 0x0108 (size: 0x8)
    float WeaponSpreadBase;                                                           // 0x0110 (size: 0x4)
    FWeaponSpreadData WeaponSpreadData;                                               // 0x0114 (size: 0x1D4)
    float BowArrowDeviationDegreesAngleByStep;                                        // 0x02E8 (size: 0x4)
    FWeaponViewKickData WeaponViewKickData;                                           // 0x02EC (size: 0xD8)
    float WeaponAimingAutoCorrectAngle;                                               // 0x03C4 (size: 0x4)
    FWeaponMalfunctionProbabilityCurves WeaponMalfunctionProbabilityCurves;           // 0x03C8 (size: 0x3B8)
    float UpperBoundStaminaAmountToDrain;                                             // 0x0780 (size: 0x4)
    float LowerBoundWeaponWeightForStaminaDrain;                                      // 0x0784 (size: 0x4)
    float UpperBoundWeaponWeightForStaminaDrain;                                      // 0x0788 (size: 0x4)
    FFloatInterval FOVFirstPersonMultiplierRange;                                     // 0x078C (size: 0x8)
    FFloatInterval FOVThirdPersonMultiplierRange;                                     // 0x0794 (size: 0x8)
    FFloatInterval FOVFirstPersonDrivingMultiplierRange;                              // 0x079C (size: 0x8)
    FFloatInterval FOVThirdPersonDrivingMultiplierRange;                              // 0x07A4 (size: 0x8)
    float WeaponFOVWhileScoping;                                                      // 0x07AC (size: 0x4)
    class UCurveFloat* DownTheSightsModeLerpCurve;                                    // 0x07B0 (size: 0x8)
    class UMaterialParameterCollection* WeaponFOVParameterCollection;                 // 0x07B8 (size: 0x8)
    FFloatInterval LoadMagazineSpeedModifierSkillFactor;                              // 0x07C0 (size: 0x8)
    FFloatInterval LoadMagazineSpeedModifierDexterityFactor;                          // 0x07C8 (size: 0x8)
    FCanvasIcon InteractIcon;                                                         // 0x07D0 (size: 0x18)
    FCanvasIcon BondageIcon;                                                          // 0x07E8 (size: 0x18)
    class UDerivedWidgetsData* Widgets;                                               // 0x0800 (size: 0x8)
    class UMaterialInterface* PlaceablePrimaryMatValid;                               // 0x0808 (size: 0x8)
    class UMaterialInterface* PlaceablePrimaryMatInvalid;                             // 0x0810 (size: 0x8)
    class UMaterialInterface* PlaceablePrimaryMatFriendlyFlag;                        // 0x0818 (size: 0x8)
    class UMaterialInterface* PlaceableOutlineMat;                                    // 0x0820 (size: 0x8)
    class UMaterialInterface* PlaceableDepthMat;                                      // 0x0828 (size: 0x8)
    class UMaterialInterface* PlaceableMaterialRadiusSphere;                          // 0x0830 (size: 0x8)
    class UMaterialInterface* ItemPlacementMatValid;                                  // 0x0838 (size: 0x8)
    class UMaterialInterface* ItemPlacementMatInvalid;                                // 0x0840 (size: 0x8)
    class UMaterialInterface* WidgetMaterial;                                         // 0x0848 (size: 0x8)
    class UBaseItemTag* ToolBoxItemTag;                                               // 0x0850 (size: 0x8)
    class UBaseItemTag* MushroomItemTag;                                              // 0x0858 (size: 0x8)
    class UBaseItemTag* AlcoholItemTag;                                               // 0x0860 (size: 0x8)
    class UBaseItemTag* SoapItemTag;                                                  // 0x0868 (size: 0x8)
    TSoftClassPtr<UObject> AnimalSkinItemClass;                                       // 0x0870 (size: 0x28)
    class UTrapData* TrapData;                                                        // 0x0898 (size: 0x8)
    TSoftClassPtr<UObject> DogTagItemClass;                                           // 0x08A0 (size: 0x28)
    class UDataTable* ItemGeneralParametersDataTable;                                 // 0x08C8 (size: 0x8)
    TSoftObjectPtr<UDataTable> ItemSpawningParametersTable;                           // 0x08D0 (size: 0x28)
    TEnumAsByte<ECollisionChannel> ItemObstructionCollisionChannel;                   // 0x08F8 (size: 0x1)
    bool ShouldTraceComplexCollisionForItemObstruction;                               // 0x08F9 (size: 0x1)
    TSet<FPrimaryAssetId> AssetsHiddenFromAdminCommands;                              // 0x0900 (size: 0x50)
    class USoundClass* VoiceSoundClass;                                               // 0x0950 (size: 0x8)
    class UNetworkDataIdAsset* NetworkDataIdAsset;                                    // 0x0958 (size: 0x8)
    class UDecontaminateData* DecontaminateData;                                      // 0x0960 (size: 0x8)
    class UBuryData* BuryData;                                                        // 0x0968 (size: 0x8)
    class UEmblemData* SquadEmblemData;                                               // 0x0970 (size: 0x8)
    class UMaterialInterface* ItemTetrisMaterial;                                     // 0x0978 (size: 0x8)
    class UPhysicalSurfacesEffectsData* PhysicalSurfaceEffectsData;                   // 0x0980 (size: 0x8)
    class UTexture2D* ChestLockedIcon;                                                // 0x0988 (size: 0x8)
    class UTexture2D* ChestUnlockedIcon;                                              // 0x0990 (size: 0x8)
    class UAkAudioEvent* ChestLockingSound;                                           // 0x0998 (size: 0x8)
    TSubclassOf<class UGlobalUIData> UIData;                                          // 0x09A0 (size: 0x8)
    class UParticleSystem* WaterSplashParticleSystem;                                 // 0x09A8 (size: 0x8)
    class UAkAudioEvent* WaterSplashAudioEvent;                                       // 0x09B0 (size: 0x8)
    class UDialogueData* DialogueData;                                                // 0x09B8 (size: 0x8)
    class USurfaceHardnessData* SurfaceHardnessData;                                  // 0x09C0 (size: 0x8)
    class UDamageData* DamageData;                                                    // 0x09C8 (size: 0x8)
    TSubclassOf<class UDamageCustomization> DefaultDamageCustomizationClass;          // 0x09D0 (size: 0x8)
    TSubclassOf<class UDamageCustomization> LandingDamageCustomizationClass;          // 0x09D8 (size: 0x8)
    TSoftClassPtr<UCharacterMesh> BackpackCharacterMeshClass;                         // 0x09E0 (size: 0x28)
    TSubclassOf<class UGameResourceType> RainWaterResourceClass;                      // 0x0A08 (size: 0x8)
    TArray<FGameResourceMixingRule> GameResourceMixingRules;                          // 0x0A10 (size: 0x10)
    TEnumAsByte<EPhysicalSurface> WaterSurfaceType;                                   // 0x0A20 (size: 0x1)
    class UAkAudioEvent* TransactionCompleteSound;                                    // 0x0A28 (size: 0x8)
    FGameplayTag GenderEnumVsGenderTagMapping;                                        // 0x0B18 (size: 0x18)
    TSoftClassPtr<ASurgeryRoom> SurgeryRoomClass;                                     // 0x0B30 (size: 0x28)
    TSoftClassPtr<ABarberShop> BarberShopClass;                                       // 0x0B58 (size: 0x28)
    FLazyLoadedClassPtr DefaultPrisonerCommonDataLazy;                                // 0x0B80 (size: 0x30)
    class UPrisonerAppearanceSetDataAsset* PrisonerAppearanceSet;                     // 0x0BB0 (size: 0x8)
    class UCookingCommonData* CookingCommonData;                                      // 0x0BB8 (size: 0x8)
    class UCookingRecipeRegistry* CookingRecipeRegistry;                              // 0x0BC0 (size: 0x8)
    class UAkAudioEvent* SprayCanAudio;                                               // 0x0BC8 (size: 0x8)
    class UPaintJobColorsDataAsset* PaintJobColorsData;                               // 0x0BD0 (size: 0x8)
    class UVehiclePaintjobCommonData* VehiclePaintjobCommonData;                      // 0x0BD8 (size: 0x8)
    class UWeaponPaintjobCommonData* WeaponPaintjobCommonData;                        // 0x0BE0 (size: 0x8)
    class UTurretPaintjobCommonData* TurretPaintjobCommonData;                        // 0x0BE8 (size: 0x8)
    class UQuestCommonData* QuestCommonData;                                          // 0x0BF0 (size: 0x8)
    class UArmedNPCAimCorrectionsData* ArmedNPCAimCorrectionsData;                    // 0x0BF8 (size: 0x8)
    TSoftObjectPtr<UDataTable> CookingUtilityUIDataTable;                             // 0x0C00 (size: 0x28)
    class UFamePointSettings* FamePointSettings;                                      // 0x0C28 (size: 0x8)
    TArray<FPrimaryAssetId> AlwaysFunctioningVehicles;                                // 0x0C30 (size: 0x10)
    FGameplayTagContainer VehicleSpawnGroupsIgnoredByServerSettings;                  // 0x0C40 (size: 0x20)
    TSubclassOf<class UEntitySystemSettings> DefaultEntitySystemSettings;             // 0x0C60 (size: 0x8)
    class UBaseItemTag* LightFireTag;                                                 // 0x0C68 (size: 0x8)
    TArray<FAbandonedBunkerAnnouncementSoundAndTime> AbandonedBunkerAnnouncementSoundsBeforeClosing; // 0x0C70 (size: 0x10)
    class UParticleSystem* FoliageDestructionParticleSystem;                          // 0x0C80 (size: 0x8)
    float FoliageDestructionParticleSystemSpawnDistance;                              // 0x0C88 (size: 0x4)
    float FoliageDestructionParticleSystemZOffset;                                    // 0x0C8C (size: 0x4)
    TSubclassOf<class UResourceSpotLightAnimator> ResourceSpotLightAnimatorClass;     // 0x0C90 (size: 0x8)
    TSubclassOf<class UResourcePointLightAnimator> ResourcePointLightAnimatorClass;   // 0x0C98 (size: 0x8)
    class UDataTable* _cookingUtilityTagToUIDataTable;                                // 0x0CF8 (size: 0x8)
    float _noiseLevelValues;                                                          // 0x0D00 (size: 0x18)
    FAITeamAttitudeData _teamAttitudes;                                               // 0x0D18 (size: 0x16B)
    class UDataTable* _economyTradeablesDataTable;                                    // 0x0ED8 (size: 0x8)
    class UEconomySpecificData* _economySpecificData;                                 // 0x0EE0 (size: 0x8)
    class UDataTable* _survivalTipsDataTable;                                         // 0x0EE8 (size: 0x8)
    uint8 _maxNumberOfVisibleSurvivalTips;                                            // 0x0EF0 (size: 0x1)
    int32 _numberOfFishesToCatchForSurvivalTip;                                       // 0x0EF4 (size: 0x4)

}; // Size: 0xEF8

class UDbAsyncWorker : public UObject
{
}; // Size: 0x40

class UDbConnection : public UObject
{
}; // Size: 0xC8

class UDbIdGenerator : public UObject
{
}; // Size: 0x98

class UDbStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UDcxBicycleAnimInstance : public UDcxBikeAnimInstance
{
}; // Size: 0xAB0

class UDcxBicycleDriverMountSlot : public UDcxBikeDriverMountSlot
{
}; // Size: 0x230

class UDcxBikeAnimInstance : public UDcxVehicleAnimInstance
{
    float RPM;                                                                        // 0x0A48 (size: 0x4)
    float Speed;                                                                      // 0x0A4C (size: 0x4)
    float SpeedKph;                                                                   // 0x0A50 (size: 0x4)
    float SteerAngle;                                                                 // 0x0A54 (size: 0x4)
    float SteerAngleMultiplierWhenPushed;                                             // 0x0A58 (size: 0x4)
    float SteerAmount;                                                                // 0x0A5C (size: 0x4)
    float ThrottleAmount;                                                             // 0x0A60 (size: 0x4)
    float BrakeAmount;                                                                // 0x0A64 (size: 0x4)
    FRotator FrontWheelRotator;                                                       // 0x0A68 (size: 0xC)
    FRotator RearWheelRotator;                                                        // 0x0A74 (size: 0xC)
    FRotator TransmissionRotator;                                                     // 0x0A80 (size: 0xC)
    float FrontSuspensionOffset;                                                      // 0x0A8C (size: 0x4)
    float RearSuspensionRotation;                                                     // 0x0A90 (size: 0x4)
    FVector MeshLocation;                                                             // 0x0A94 (size: 0xC)
    bool IsMounteeDriver;                                                             // 0x0AA0 (size: 0x1)

}; // Size: 0xAB0

class UDcxBikeDriverMountSlot : public UVehicleBaseMountSlot
{
    bool UseDashboardForHandleSockets;                                                // 0x0188 (size: 0x1)
    FName DriverLHandleSocketName;                                                    // 0x018C (size: 0x8)
    FName DriverRHandleSocketName;                                                    // 0x0194 (size: 0x8)
    FName DriverReverseSeatHandSocketName;                                            // 0x019C (size: 0x8)
    class UBlendSpace* _forwardIdleAnimation;                                         // 0x01A8 (size: 0x8)
    class UBlendSpace* _forwardIdleAnimationFP;                                       // 0x01B0 (size: 0x8)
    class UAnimSequenceBase* _forwardSteeringAnimation;                               // 0x01B8 (size: 0x8)
    class UAnimSequenceBase* _forwardSteeringAnimationFP;                             // 0x01C0 (size: 0x8)
    class UBlendSpace* _reverseIdleAnimation;                                         // 0x01C8 (size: 0x8)
    class UAnimSequenceBase* _reverseSteeringAnimation;                               // 0x01D0 (size: 0x8)
    class UAnimSequenceBase* _reverseSteeringAnimationFP;                             // 0x01D8 (size: 0x8)
    class UAnimSequence* _standUpStartAnimation;                                      // 0x01E0 (size: 0x8)
    class UAnimSequence* _standUpLoopAnimation;                                       // 0x01E8 (size: 0x8)
    class UAnimSequence* _standUpEndAnimation;                                        // 0x01F0 (size: 0x8)
    class UAnimSequence* _startEngineStartAnimation;                                  // 0x01F8 (size: 0x8)
    class UAnimSequence* _startEngineLoopAnimation;                                   // 0x0200 (size: 0x8)
    class UAnimSequence* _startEngineLongLoopAnimation;                               // 0x0208 (size: 0x8)
    class UAnimSequence* _startEngineEndAnimation;                                    // 0x0210 (size: 0x8)
    class UAimOffsetBlendSpace* _turnAimOffset;                                       // 0x0218 (size: 0x8)
    float _playratePerMovementPace;                                                   // 0x0220 (size: 0xC)

}; // Size: 0x230

class UDcxBikePassengerMountSlot : public UVehicleBaseMountSlot
{
}; // Size: 0x190

class UDcxMotorcycleAnimInstance : public UDcxBikeAnimInstance
{
}; // Size: 0xAB0

class UDcxWheeledVehicleAnimInstance : public UDcxVehicleAnimInstance
{
    EVehicleEngineState EngineState;                                                  // 0x0A48 (size: 0x1)
    bool IsEngineRunning;                                                             // 0x0A49 (size: 0x1)
    float EngineRpm;                                                                  // 0x0A4C (size: 0x4)
    float EngineRpmInterpSpeed;                                                       // 0x0A50 (size: 0x4)
    float MaxSteeringWheelSteerAngle;                                                 // 0x0A54 (size: 0x4)
    float SteeringWheelSteerAngleInterpSpeed;                                         // 0x0A58 (size: 0x4)
    float CurrentSteeringWheelSteerAngle;                                             // 0x0A5C (size: 0x4)
    TArray<float> DoorOpenPercentage;                                                 // 0x0A60 (size: 0x10)
    TArray<float> DoorWindowOpenPercentage;                                           // 0x0A70 (size: 0x10)

}; // Size: 0xA80

class UDcxWheeledVehicleDriveComponent4W : public UDcxVehicleDriveComponent4W
{
    FRuntimeFloatCurve _maxArtificialBrakingForceVsSpeedKph;                          // 0x0450 (size: 0x88)
    TArray<FDcxWheeledVehicleFlatTireWheelConfiguration> _flatTireWheelConfigurations; // 0x04D8 (size: 0x10)

    void InflateWheelTire(int32 WheelIndex);
    float GetEngineLoad();
    void DeflateWheelTire(int32 WheelIndex);
}; // Size: 0x4E8

class UDcxWheeledVehicleEffectsComponent : public UActorComponent
{
    float _soundCullDistance;                                                         // 0x00B0 (size: 0x4)
    class UAkAudioEvent* _chassisStartedMovingAudioEvent;                             // 0x00B8 (size: 0x8)
    class UAkAudioEvent* _chassisStoppedMovingAudioEvent;                             // 0x00C0 (size: 0x8)
    float _speedOfSoundMultiplerForDoppler;                                           // 0x00C8 (size: 0x4)
    class UTireToSurfaceAudioData* _tireToSurfaceAudioData;                           // 0x00D0 (size: 0x8)
    int32 _numAudioObjectsForTires;                                                   // 0x00D8 (size: 0x4)
    float _tireEffectUpdateRange;                                                     // 0x0100 (size: 0x4)
    TArray<FDcxWheeledVehicleTireEffectProperties> _tireEffectProperties;             // 0x0108 (size: 0x10)

}; // Size: 0x128

class UDcxWheeledVehicleTire : public UDcxVehicleTire
{
    FDcxVehicleTireParticleData ParticleTrail;                                        // 0x00E0 (size: 0x14)
    FDcxVehicleTireParticleData ParticleWave;                                         // 0x00F4 (size: 0x14)

}; // Size: 0x108

class UDeathmatchParticipantStats : public UGameEventParticipantStats
{
    float LongestHeadshot;                                                            // 0x0048 (size: 0x4)
    int32 MeleeKills;                                                                 // 0x004C (size: 0x4)
    float LongestLife;                                                                // 0x0050 (size: 0x4)

}; // Size: 0x58

class UDebugRpcChannel : public UActorComponent
{

    void Server_Farming_SetWeedIntensity(class AGarden* Garden, int32 SlotId, float Intensity);
    void Server_Farming_SetGrowthState(class AGarden* Garden, int32 SlotId, EPlantGrowthStage stage);
    void Server_Farming_RemovePlant(class AGarden* Garden, int32 SlotId);
    void Server_Farming_PlantAPlant(class APrisoner* planter, class AGarden* Garden, int32 Slot, const class UPlantSpecies* species);
    void Server_Farming_KillPlant(class AGarden* Garden, int32 SlotId);
    void Server_Farming_CreateGarden(class APrisoner* Owner, FVector Location, FRotator Rotation, FIntPoint Size);
    void Server_Farming_ApplyPesticide(class AGarden* Garden, int32 Slot);
    void Server_Farming_ApplyFungicide(class AGarden* Garden, int32 Slot);
    void Server_Farming_AddWaterToSlot(class AGarden* Garden, int32 Slot, float Amount);
    void Server_Farming_AddFertilizer(class AGarden* Garden, int32 Slot, bool isIndustrial);
}; // Size: 0xB0

class UDecontaminateData : public UDataAsset
{
    TSubclassOf<class USkill> SkillToIncrease;                                        // 0x0030 (size: 0x8)
    float SkillIncreaseAmount;                                                        // 0x0038 (size: 0x4)
    float SkillIncreaseModifier;                                                      // 0x003C (size: 0x4)
    float RadiationDecontaminationAmountPerSoapUse;                                   // 0x0040 (size: 0x4)

}; // Size: 0x48

class UDedicatedServerRequest : public UObject
{
}; // Size: 0xE8

class UDedicatedServerResponse : public UObject
{
    class UDbConnection* _dbConnection;                                               // 0x0058 (size: 0x8)

}; // Size: 0xD0

class UDefaultDamageCustomization : public UDamageCustomization
{
    TArray<FPrisonerInjuryTypeLikelihoods> PrisonerInjuryTypeLikelihoodsPerBodyPart;  // 0x0028 (size: 0x10)
    TArray<float> PrisonerBleedingSeverityEnergyThreshold;                            // 0x0038 (size: 0x10)
    float PrisonerDamageMultiplierPerBodyPart;                                        // 0x0048 (size: 0x30)
    float StaminaDrainPerHundredJoules;                                               // 0x0078 (size: 0x4)
    float HeadshotInstantKillEnergyThreshold;                                         // 0x007C (size: 0x4)

}; // Size: 0x80

class UDefusalMinigameValidationParams : public UMinigameValidationParams
{
}; // Size: 0x30

class UDefusingCuttingToolItemTag : public UBaseItemTag
{
    class USkeletalMesh* SkeletalMesh;                                                // 0x0030 (size: 0x8)
    class UAnimMontage* Montage;                                                      // 0x0038 (size: 0x8)

}; // Size: 0x40

class UDemolitionSkill : public UDexteritySkill
{
    FDemolitionSkillExperienceAwards NoSkillExperienceAwards;                         // 0x00B0 (size: 0x20)
    FDemolitionSkillExperienceAwards BasicSkillExperienceAwards;                      // 0x00D0 (size: 0x20)
    FDemolitionSkillExperienceAwards MediumSkillExperienceAwards;                     // 0x00F0 (size: 0x20)
    FDemolitionSkillExperienceAwards AdvancedSkillExperienceAwards;                   // 0x0110 (size: 0x20)
    FDemolitionSkillExperienceAwards AboveAdvancedSkillExperienceAwards;              // 0x0130 (size: 0x20)
    FDemolitionSkillParametersPerSkillLevel NoSkillParameters;                        // 0x0150 (size: 0x68)
    FDemolitionSkillParametersPerSkillLevel BasicSkillParameters;                     // 0x01B8 (size: 0x68)
    FDemolitionSkillParametersPerSkillLevel MediumSkillParameters;                    // 0x0220 (size: 0x68)
    FDemolitionSkillParametersPerSkillLevel AdvancedSkillParameters;                  // 0x0288 (size: 0x68)
    FDemolitionSkillParametersPerSkillLevel AboveAdvancedSkillParameters;             // 0x02F0 (size: 0x68)
    float _practiceTrapExperienceAwardBaseDuration;                                   // 0x0358 (size: 0x4)

}; // Size: 0x360

class UDepotItemUserData : public UVirtualizedItemUserData
{
    FDbIntegerId OwnerUserProfileId;                                                  // 0x0028 (size: 0x8)
    FString TraderPersistentId;                                                       // 0x0030 (size: 0x10)
    bool ShouldClearContents;                                                         // 0x0040 (size: 0x1)

}; // Size: 0x48

class UDerivedWidgetsData : public UDataAsset
{
    TSubclassOf<class UUserWidget> AvailableItem;                                     // 0x0030 (size: 0x8)
    TSubclassOf<class UWorldCraftingMarkerWidget> WorldCraftingMarker;                // 0x0038 (size: 0x8)
    TSubclassOf<class UWorldQuestMarkerWidget> WorldQuestMarker;                      // 0x0040 (size: 0x8)
    TSubclassOf<class ULoadingScreen> LoadingScreen;                                  // 0x0048 (size: 0x8)
    TSubclassOf<class UUserWidget> ItemWidgetClass;                                   // 0x0050 (size: 0x8)
    TSubclassOf<class UUserWidget> InventorySlotWidgetClass;                          // 0x0058 (size: 0x8)
    TSubclassOf<class UUserWidget> WarningWidgetClass;                                // 0x0060 (size: 0x8)
    TSubclassOf<class UUserWidget> HudWidgetClass;                                    // 0x0068 (size: 0x8)
    TSubclassOf<class UUserWidget> QuestTrackingWidgetClass;                          // 0x0070 (size: 0x8)
    TSubclassOf<class UUserWidget> LoadingWidgetClass;                                // 0x0078 (size: 0x8)
    TSubclassOf<class UUserWidget> LoadingIconWidgetClass;                            // 0x0080 (size: 0x8)
    TSubclassOf<class UUserWidget> SpawnScreenWidgetClass;                            // 0x0088 (size: 0x8)
    TSubclassOf<class UUserWidget> WaypointScreenWidgetClass;                         // 0x0090 (size: 0x8)
    TSubclassOf<class UUserWidget> ActionProgressWidgetClass;                         // 0x0098 (size: 0x8)
    TSubclassOf<class UUserWidget> TeamInvitationWidgetClass;                         // 0x00A0 (size: 0x8)
    TSubclassOf<class UUserWidget> CraftingComponentWidgetClass;                      // 0x00A8 (size: 0x8)
    TSubclassOf<class UUserWidget> EmptySlotWidgetClass;                              // 0x00B0 (size: 0x8)
    TSubclassOf<class UUserWidget> PreviousNextSwitchWidgetClass;                     // 0x00B8 (size: 0x8)
    TSubclassOf<class UUserWidget> QuickAccessItemWidget;                             // 0x00C0 (size: 0x8)
    TSubclassOf<class UChangeTextWidget> ChangeTextWidgetClass;                       // 0x00C8 (size: 0x8)
    TSubclassOf<class UItemStatusWidget> ItemStatusWidgetClass;                       // 0x00D0 (size: 0x8)
    TSubclassOf<class UHealthWidget> HealthWidgetClass;                               // 0x00D8 (size: 0x8)
    TSubclassOf<class UUserWidget> RaidProtectionSelectionWidgetClass;                // 0x00E0 (size: 0x8)
    TSubclassOf<class UUserWidget> GameEventCardWidgetClass;                          // 0x00E8 (size: 0x8)
    TSubclassOf<class UUserWidget> GameEventScoreboardWidgetClass;                    // 0x00F0 (size: 0x8)
    TSubclassOf<class UUserWidget> GameEventMiniScoreboardWidgetClass;                // 0x00F8 (size: 0x8)
    TSubclassOf<class UUserWidget> TournamentScoreboardWidgetClass;                   // 0x0100 (size: 0x8)
    TSubclassOf<class UUserWidget> CircularMenuWidgetClass;                           // 0x0108 (size: 0x8)
    TSubclassOf<class UUserWidget> CircularMenuSegmentWidgetClass;                    // 0x0110 (size: 0x8)
    TSubclassOf<class UUserWidget> LockpickingWidgetClass;                            // 0x0118 (size: 0x8)
    TSubclassOf<class UDoorUpgradeWidget> DoorUpgradeWidgetClass;                     // 0x0120 (size: 0x8)
    TSubclassOf<class UUserWidget> InventoryContainerWidget2Test;                     // 0x0128 (size: 0x8)
    TSubclassOf<class UUserWidget> InventoryItemWidget2Test;                          // 0x0130 (size: 0x8)
    TSubclassOf<class UUserWidget> ItemInventoryWidget2;                              // 0x0138 (size: 0x8)
    TSubclassOf<class UUserWidget> InventoryPanelSideLayerWidget;                     // 0x0140 (size: 0x8)
    TSubclassOf<class UUserWidget> ItemSplittingWidgetClass;                          // 0x0148 (size: 0x8)
    TMap<class EWidgetType, class TSubclassOf<UUserWidget>> Widgets;                  // 0x0150 (size: 0x50)
    TSubclassOf<class UUserWidget> StatisticsListRow;                                 // 0x01A0 (size: 0x8)
    TArray<FTooltipPanelData> ItemTooltipPanels;                                      // 0x01A8 (size: 0x10)
    TSubclassOf<class UUserWidget> MalfunctionsContainerClass;                        // 0x01B8 (size: 0x8)
    TSubclassOf<class UUserWidget> WeaponAmmoCountContainerClass;                     // 0x01C0 (size: 0x8)
    TSubclassOf<class UUserWidget> PlaceableElementWidgetClass;                       // 0x01C8 (size: 0x8)

}; // Size: 0x1D0

class UDetectableMetalAssetData : public UAssetUserData
{
}; // Size: 0x28

class UDetectableTag : public UBaseItemTag
{
}; // Size: 0x30

class UDexteritySkill : public USkill
{
}; // Size: 0xB0

class UDialLockData : public UCombinationLockData
{
    int32 NumberOfWheels;                                                             // 0x00D0 (size: 0x4)
    class UStaticMesh* LockBodyMesh;                                                  // 0x00D8 (size: 0x8)
    class UStaticMesh* LockClampMesh;                                                 // 0x00E0 (size: 0x8)
    TArray<class UStaticMesh*> LockDialMeshes;                                        // 0x00E8 (size: 0x10)
    FVector WheelUpVector;                                                            // 0x00F8 (size: 0xC)

}; // Size: 0x108

class UDialLockMinigameConfiguration : public ULockpickingMinigameConfiguration
{
}; // Size: 0x70

class UDialLockSetConfigurationMinigameConfiguration : public UDialLockMinigameConfiguration
{
}; // Size: 0x78

class UDialLockWidget : public UMinigameWidget
{
    class UWidgetAnimation* _onSuccess;                                               // 0x0280 (size: 0x8)
    class UWidgetAnimation* _onFailure;                                               // 0x0288 (size: 0x8)
    class UWidgetAnimation* _showThrobber;                                            // 0x0290 (size: 0x8)
    class UWidgetAnimation* _hideThrobber;                                            // 0x0298 (size: 0x8)

}; // Size: 0x2A8

class UDialPadButtonAssetData : public UAssetUserData
{
    FGameplayTag ButtonTag;                                                           // 0x0028 (size: 0x8)
    EDialPadButtonType ButtonType;                                                    // 0x0030 (size: 0x1)
    FString ButtonInput;                                                              // 0x0038 (size: 0x10)
    FTransform ReleasedRelativeTransform;                                             // 0x0050 (size: 0x30)
    FTransform PressedRelativeTransform;                                              // 0x0080 (size: 0x30)
    float TransitionDuration;                                                         // 0x00B0 (size: 0x4)
    class UAkAudioEvent* ToggleAudio;                                                 // 0x00B8 (size: 0x8)
    FLinearColor PressedEmissiveColor;                                                // 0x00C0 (size: 0x10)
    FLinearColor ReleasedEmissiveColor;                                               // 0x00D0 (size: 0x10)
    class UMaterialInterface* DefaultButtonMaterial;                                  // 0x00E0 (size: 0x8)
    class UMaterialInterface* WornButtonMaterial;                                     // 0x00E8 (size: 0x8)

}; // Size: 0xF0

class UDialPadMinigameConfiguration : public UMinigameConfiguration
{
}; // Size: 0x70

class UDialPadWidget : public UMinigameWidget
{
    class UTextBlock* _screenText;                                                    // 0x0280 (size: 0x8)
    class UTextBlock* _timerText;                                                     // 0x0288 (size: 0x8)
    int32 _maxLettersOnScreen;                                                        // 0x0290 (size: 0x4)

}; // Size: 0x298

class UDialogButton : public UUserWidget
{
    bool PreviewSelectedState;                                                        // 0x02B8 (size: 0x1)
    class UButton* _button;                                                           // 0x02C0 (size: 0x8)
    class UTextBlock* _text;                                                          // 0x02C8 (size: 0x8)
    class USizeBox* _sizeBox;                                                         // 0x02D0 (size: 0x8)
    FText _initialTitle;                                                              // 0x02D8 (size: 0x18)
    FTabButtonStyle _selectedButtonStyle;                                             // 0x02F0 (size: 0x288)
    FTabButtonStyle _deselectedButtonStyle;                                           // 0x0578 (size: 0x288)
    FTabTextStyle _selectedTextStyle;                                                 // 0x0800 (size: 0x98)
    FTabTextStyle _deselectedTextStyle;                                               // 0x0898 (size: 0x98)

    void OnClick();
}; // Size: 0x930

class UDialogueData : public UDataAsset
{
    TMap<class FName, class FDialogueInfoContainer> GenericDialogues;                 // 0x0030 (size: 0x50)
    TMap<class FName, class FDialogueInfoContainer> TaskDialogues;                    // 0x0080 (size: 0x50)

}; // Size: 0xD0

class UDialogueSystemContainerWidget : public UUserWidget
{
    class UWidgetAnimation* _showAvatarAnimation;                                     // 0x0268 (size: 0x8)
    class UWidgetAnimation* _hideAvatarAnimation;                                     // 0x0270 (size: 0x8)
    class USubtitleWidget* _subtitleWidget;                                           // 0x0278 (size: 0x8)
    class UOverlay* _avatarImageOverlay;                                              // 0x0280 (size: 0x8)

}; // Size: 0x298

class UDialogueSystemUIController : public UObject
{

    void PlayNextDialogue();
    void HideSubtitles();
}; // Size: 0xD0

class UDiegeticLockState : public UUserWidget
{
    FSlateColor LockedColor;                                                          // 0x0268 (size: 0x28)
    FSlateColor UnlockedColor;                                                        // 0x0290 (size: 0x28)
    class UTextBlock* _lockState;                                                     // 0x02B8 (size: 0x8)

}; // Size: 0x2C8

class UDisablingReason : public UObject
{
}; // Size: 0x28

class UDisablingReason_EMP : public UDisablingReason
{
}; // Size: 0x28

class UDivingMaskTag : public UBaseItemTag
{
}; // Size: 0x30

class UDoorEntitySave : public UObject
{
    FDbIntegerId BaseElementDoorId;                                                   // 0x0028 (size: 0x8)
    FDbIntegerId OwningUserProfileId;                                                 // 0x0030 (size: 0x8)
    EAccessLevel AccessLevel;                                                         // 0x0038 (size: 0x1)
    TArray<FDoorEntityUpgradeLock> Locks;                                             // 0x0040 (size: 0x10)
    TArray<FDoorEntityUpgradeAttachment> Attachments;                                 // 0x0050 (size: 0x10)

}; // Size: 0x60

class UDoorEntitySetup : public UEntitySetup
{
}; // Size: 0x80

class UDoorLockingRegistry : public UActorComponent
{
    TMap<class EDoorUnlockDataType, class FDoorUnlockDataCollection> _doorUnlockDataByType; // 0x00B0 (size: 0x50)
    int32 _countNormalizationThreshold;                                               // 0x0100 (size: 0x4)

}; // Size: 0x108

class UDoorUnlockData : public UObject
{
    EDoorUnlockDataType Type;                                                         // 0x0028 (size: 0x1)
    FText DescriptionText;                                                            // 0x0030 (size: 0x18)
    FString Description;                                                              // 0x0048 (size: 0x10)

}; // Size: 0x58

class UDoorUnlockItemComponent : public UExpirableItemComponent
{
    EDoorUnlockDataType _unlockDataType;                                              // 0x00E0 (size: 0x1)
    TSubclassOf<class UDoorUnlockData> _doorUnlockData;                               // 0x00E8 (size: 0x8)

    void OnRep_DoorLockingDescriptor();
}; // Size: 0xF0

class UDoorUpgradeWidget : public UWaypointWidgetBase
{
    class UVerticalBox* _lockSlotsBox;                                                // 0x0340 (size: 0x8)
    class UVerticalBox* _protectionSlotsBox;                                          // 0x0348 (size: 0x8)
    class UVerticalBox* _sensorSlotsBox;                                              // 0x0350 (size: 0x8)
    class UVerticalBox* _bcuLockSlotBox;                                              // 0x0358 (size: 0x8)
    class ADoor* _door;                                                               // 0x0360 (size: 0x8)

}; // Size: 0x3A8

class UDrinkWaterAssetData : public UInteractionAssetData
{
    TSubclassOf<class UGameResourceType> ResourceType;                                // 0x0030 (size: 0x8)
    float QuantityPerDrink;                                                           // 0x0038 (size: 0x4)
    float Salinity;                                                                   // 0x003C (size: 0x4)
    class UAkAudioEvent* StartDrinkingAudioEvent;                                     // 0x0040 (size: 0x8)
    class UAkAudioEvent* StopDrinkingAudioEvent;                                      // 0x0048 (size: 0x8)

}; // Size: 0x50

class UDrivingSkill : public UVehicleHandlingSkill
{
    FVehicleHandlingExperienceAwards NoSkillExperienceAwards;                         // 0x00B0 (size: 0x8)
    FVehicleHandlingExperienceAwards BasicSkillExperienceAwards;                      // 0x00B8 (size: 0x8)
    FVehicleHandlingExperienceAwards MediumSkillExperienceAwards;                     // 0x00C0 (size: 0x8)
    FVehicleHandlingExperienceAwards AdvancedSkillExperienceAwards;                   // 0x00C8 (size: 0x8)
    FVehicleHandlingExperienceAwards AboveAdvancedSkillExperienceAwards;              // 0x00D0 (size: 0x8)
    FDrivingSkillParametersPerSkillLevel NoSkillParameters;                           // 0x00D8 (size: 0x100)
    FDrivingSkillParametersPerSkillLevel BasicSkillParameters;                        // 0x01D8 (size: 0x100)
    FDrivingSkillParametersPerSkillLevel MediumSkillParameters;                       // 0x02D8 (size: 0x100)
    FDrivingSkillParametersPerSkillLevel AdvancedSkillParameters;                     // 0x03D8 (size: 0x100)
    FDrivingSkillParametersPerSkillLevel AboveAdvancedSkillParameters;                // 0x04D8 (size: 0x100)

}; // Size: 0x5D8

class UDroneDestructibleItemComponent : public UItemComponent
{
}; // Size: 0xC8

class UDroneSoundComponent : public UCharacterSoundComponent
{
    class USoundCue* IdleSound;                                                       // 0x0128 (size: 0x8)
    class UAkAudioEvent* IdleAudioEvent;                                              // 0x0130 (size: 0x8)
    class USoundCue* AngrySound;                                                      // 0x0138 (size: 0x8)
    class UAkAudioEvent* AngryAudioEvent;                                             // 0x0140 (size: 0x8)
    class USoundCue* AttackSound;                                                     // 0x0148 (size: 0x8)
    class UAkAudioEvent* AttackAudioEvent;                                            // 0x0150 (size: 0x8)
    class USoundCue* KillSound;                                                       // 0x0158 (size: 0x8)
    class UAkAudioEvent* KillAudioEvent;                                              // 0x0160 (size: 0x8)
    float MinSilenceTimeout;                                                          // 0x0168 (size: 0x4)
    float MaxSilenceTimeout;                                                          // 0x016C (size: 0x4)

}; // Size: 0x170

class UDroneTargetData : public UObject
{
}; // Size: 0x30

class UDropItemOnStartEntityComponentSetup : public UEntityComponentSetup
{
}; // Size: 0x48

class UDropZoneParticipantStats : public UGameEventParticipantStats
{
    int32 Activations;                                                                // 0x0048 (size: 0x4)

}; // Size: 0x50

class UDropdownColorPicker : public UDropdownContainerWithDialogue
{
    class UImage* _colorPreviewSquare;                                                // 0x02D8 (size: 0x8)
    class UColorPicker* _colorPicker;                                                 // 0x02E0 (size: 0x8)

}; // Size: 0x2E8

class UDropdownContainerWithDialogue : public UUserWidget
{
    class USelectionOverlayWidget* _selectionOverlay;                                 // 0x0268 (size: 0x8)
    class UTextBlock* _label;                                                         // 0x0270 (size: 0x8)
    class UVerticalBox* _dropdownContainer;                                           // 0x0278 (size: 0x8)
    class UButton* _cancelButton;                                                     // 0x0280 (size: 0x8)
    class UButton* _applyButton;                                                      // 0x0288 (size: 0x8)
    FText dropdownLabel;                                                              // 0x0290 (size: 0x18)

    void OnCancelButtonClicked();
    void OnApplyButtonClicked();
}; // Size: 0x2A8

class UDropdownMenuColorSelectionWidget : public UDropdownMenuSelectionWidget
{
    FLinearColor Color;                                                               // 0x02B0 (size: 0x10)

}; // Size: 0x2C0

class UDropdownMenuSelectionWidget : public UUserWidget
{
    class UImage* SelectionImage;                                                     // 0x0298 (size: 0x8)
    class UCustomBorder* SelectionBorder;                                             // 0x02A0 (size: 0x8)
    class UDropdownMenuWidget* _dropdownMenu;                                         // 0x02A8 (size: 0x8)

    void Update();
    void OnDropdownSelectionDelegate__DelegateSignature(class UDropdownMenuSelectionWidget* Widget);
    FEventReply Click(FGeometry MyGeometry, const FPointerEvent& MouseEvent);
}; // Size: 0x2B0

class UDropdownMenuTextureSelectionWidget : public UDropdownMenuSelectionWidget
{
    class UTexture2D* Texture;                                                        // 0x02B0 (size: 0x8)

}; // Size: 0x2B8

class UDropdownMenuWidget : public UUserWidget
{
    class UScrollBox* ScrollPanel;                                                    // 0x0278 (size: 0x8)
    class UNamedSlot* _panelSlot;                                                     // 0x0288 (size: 0x8)

}; // Size: 0x290

class UDropshipAIControllerEncounterSaveState : public UConZAIControllerEncounterSaveState
{
    EDropshipState DropshipState;                                                     // 0x0080 (size: 0x1)
    bool ShouldIgnoreStimuliDuringSearch;                                             // 0x0081 (size: 0x1)

}; // Size: 0x88

class UDropshipAnimInstance : public UAnimInstance
{
    int32 _minigunBonesNum;                                                           // 0x02C0 (size: 0x4)
    float _minigunRotationSpeed;                                                      // 0x02C4 (size: 0x4)
    float _minigunRotationAcceleration;                                               // 0x02C8 (size: 0x4)
    float _minigunRotationDeceleration;                                               // 0x02CC (size: 0x4)
    float _droppableSentryFinalAngle;                                                 // 0x02D4 (size: 0x4)
    bool _isBraking;                                                                  // 0x02D8 (size: 0x1)
    TArray<float> _minigunRotationAngles;                                             // 0x02E0 (size: 0x10)
    FRotator _aimRotationLeft;                                                        // 0x02F0 (size: 0xC)
    FRotator _aimRotationRight;                                                       // 0x02FC (size: 0xC)
    float _droppableSentryLeverAngle;                                                 // 0x0308 (size: 0x4)
    EDropshipStance _dropshipStance;                                                  // 0x030C (size: 0x1)

    void AnimNotify_DropshipRailgunStartCharging();
    void AnimNotify_DropshipRailgunFired();
}; // Size: 0x310

class UDropshipDroppableSentryAnimInstance : public UAnimInstance
{
    float _sentryUnfoldTimePassed;                                                    // 0x02C0 (size: 0x4)

}; // Size: 0x2D0

class UDropshipEncounterSaveState : public UConZCharacterEncounterSaveState
{
    float health;                                                                     // 0x0038 (size: 0x4)
    bool ShouldLeaveAfterSentryDeployment;                                            // 0x003C (size: 0x1)
    bool CanDropSentry;                                                               // 0x003D (size: 0x1)
    bool IsSpawnedThroughSpawner;                                                     // 0x003E (size: 0x1)
    FVector SpawnerLocationZero;                                                      // 0x0040 (size: 0xC)
    FRotator SpawnerRotator;                                                          // 0x004C (size: 0xC)
    TArray<FVector> PatrolPointsRelativeLocations;                                    // 0x0058 (size: 0x10)
    float OperatingRange;                                                             // 0x0068 (size: 0x4)

}; // Size: 0x70

class UDropshipMovementComponent : public UConZCharacterMovementComponent
{
    float _movementForwardAccelerationMaxAngle;                                       // 0x0DA8 (size: 0x4)
    float _movementStrafeAccelerationMaxAngle;                                        // 0x0DAC (size: 0x4)
    float _movementAngleRotationFactor;                                               // 0x0DBC (size: 0x4)
    float _maxLeanSpeed;                                                              // 0x0DC0 (size: 0x4)
    float _maxLeanAngularSpeed;                                                       // 0x0DC4 (size: 0x4)
    float _maxInPlaceLeanSpeed;                                                       // 0x0DC8 (size: 0x4)
    float _maxAccelerationMultiplierForOppositeVelocityDirection;                     // 0x0DD8 (size: 0x4)
    float _oppositeDirectionHalfAngle;                                                // 0x0DDC (size: 0x4)

}; // Size: 0xDE0

class UDualArcedProgressBar : public UUserWidget
{
    class UImage* _frontFillImage;                                                    // 0x0268 (size: 0x8)
    class UImage* _backFillImage;                                                     // 0x0270 (size: 0x8)
    class UMaterialInstanceConstant* _frontFillMaterial;                              // 0x0278 (size: 0x8)
    class UMaterialInstanceConstant* _backFillMaterial;                               // 0x0280 (size: 0x8)
    FLinearColor _frontFillColor;                                                     // 0x0288 (size: 0x10)
    FLinearColor _backFillColor;                                                      // 0x0298 (size: 0x10)

}; // Size: 0x2B8

class UDummyCollisionCapsule : public UCapsuleComponent
{
    FGameplayTag _attachment;                                                         // 0x0478 (size: 0x8)

}; // Size: 0x480

class UEconomyManagerRequest : public UPlayerRpcChannelServerRequest
{
}; // Size: 0xD8

class UEconomyManagerResponse : public UPlayerRpcChannelServerResponse
{
    class UEconomyManagerResponseData* _payload;                                      // 0x0028 (size: 0x8)

}; // Size: 0x30

class UEconomyManagerResponseData : public UObject
{
    class ADepotItem* _assignedDepotItem;                                             // 0x0030 (size: 0x8)
    TArray<FTradeablesResponseData> _tradeables;                                      // 0x0038 (size: 0x10)
    TArray<FTraderSpecialDeal> _specialDeals;                                         // 0x0048 (size: 0x10)

}; // Size: 0x58

class UEconomySpecificData : public UDataAsset
{
    TSoftClassPtr<AItem> CashItemClass;                                               // 0x0030 (size: 0x28)
    int32 CashStackMaxValue;                                                          // 0x0058 (size: 0x4)
    TSoftClassPtr<ADepotItem> DepotItemClass;                                         // 0x0060 (size: 0x28)
    TSoftClassPtr<AItem> VehicleLockItemClass;                                        // 0x0088 (size: 0x28)
    float BasePriceModifierPerTradeCategory;                                          // 0x00B0 (size: 0x70)
    float BaseSalePriceReductionModifierPerTradeCategory;                             // 0x0120 (size: 0x70)
    FCurrencyDescription CurrencyDescriptions;                                        // 0x0190 (size: 0x138)
    TMap<class EBankCardType, class FBankCardTypeData> CardDataPerBankCardType;       // 0x02C8 (size: 0x50)
    float ATMProvisionPercentage;                                                     // 0x0318 (size: 0x4)
    float BankerProvisionPercentage;                                                  // 0x031C (size: 0x4)
    TMap<FGameplayTag, float> RotationRarityVsAvailabilityChance;                     // 0x0320 (size: 0x50)
    float OutpostProsperityVsAvailabilityChanceIncrease;                              // 0x0370 (size: 0x18)

}; // Size: 0x388

class UEconomyStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UElectricDoorAssetData : public UAssetUserData
{
}; // Size: 0x28

class UElectricianGlovesTag : public UBaseItemTag
{
    float PrisonerDamageModifier;                                                     // 0x0030 (size: 0x4)

}; // Size: 0x38

class UEmblemData : public UDataAsset
{
    TArray<class UTexture2D*> BackgroundTextures;                                     // 0x0030 (size: 0x10)
    TArray<class UTexture2D*> SymbolTextures;                                         // 0x0040 (size: 0x10)
    TArray<FLinearColor> ColorPalette;                                                // 0x0050 (size: 0x10)

}; // Size: 0x60

class UEmptySlot : public UUserWidget
{
    class UImage* MainImage;                                                          // 0x0268 (size: 0x8)

}; // Size: 0x270

class UEncounterBBBase : public UEncounterBase
{
    float _encounterExtraRadiusDistance;                                              // 0x0268 (size: 0x4)
    float _encounterExtraRadiusMultiplier;                                            // 0x026C (size: 0x4)
    TSubclassOf<class UNavArea> _blockingVolumeClass;                                 // 0x0270 (size: 0x8)
    TSubclassOf<class AActor> _navigationInvokerClass;                                // 0x0278 (size: 0x8)

}; // Size: 0x290

class UEncounterBBSpawnFlyingAttacker : public UEncounterBBBase
{
    TMap<TSoftClassPtr<AConZCharacter>, float> _possibleCharacters;                   // 0x0290 (size: 0x50)
    FGameplayTag _presetType;                                                         // 0x02E0 (size: 0x8)
    float _moveToLocationHeight;                                                      // 0x02E8 (size: 0x4)
    float _spawnDistanceXY;                                                           // 0x02EC (size: 0x4)
    float _spawnDistanceZ;                                                            // 0x02F0 (size: 0x4)
    float _lifeSpanAfterDeath;                                                        // 0x02F4 (size: 0x4)
    bool _shouldUseExternalMoveToLocation;                                            // 0x02F8 (size: 0x1)
    float _spawnPreciseLocationRaycastUpOffset;                                       // 0x02FC (size: 0x4)
    float _spawnPreciseLocationRaycastDownOffset;                                     // 0x0300 (size: 0x4)
    TMap<EEncounterPostExternalMoveAction, float> _postExternalMoveToActionsMap;      // 0x0308 (size: 0x50)
    float _flyingCharacterDespawnDistance;                                            // 0x0358 (size: 0x4)
    float _minOwningForeignCharacterRemovalDistance;                                  // 0x035C (size: 0x4)
    float _minOwningForeignCharacterRemovalSightDistance;                             // 0x0360 (size: 0x4)
    float _baseElementsDestroyedPerSecondOfVirtualization;                            // 0x0364 (size: 0x4)

    void OnCharacterKilled(class AConZCharacter* ConZCharacter);
    void OnCharacterAboutToBeDestroyed(class AConZCharacter* ConZCharacter);
}; // Size: 0x400

class UEncounterBase : public UObject
{
    FGameplayTag _lockAreaTag;                                                        // 0x0088 (size: 0x8)
    float _lockAreaRadiusMultiplier;                                                  // 0x0090 (size: 0x4)
    float _lockAreaUnlockTime;                                                        // 0x0094 (size: 0x4)
    TArray<ECustomZoneEvent> _encounterBlockingCustomZoneEvents;                      // 0x0098 (size: 0x10)
    float _radius;                                                                    // 0x00A8 (size: 0x4)
    int32 _innerRadiusStepsNum;                                                       // 0x00AC (size: 0x4)
    float _removalTime;                                                               // 0x00C0 (size: 0x4)
    bool _canEverBeVirtualized;                                                       // 0x00C4 (size: 0x1)
    float _removalTimeAfterVirtualization;                                            // 0x00C8 (size: 0x4)
    float _fixedDuration;                                                             // 0x00CC (size: 0x4)
    float _autosaveTime;                                                              // 0x00D0 (size: 0x4)
    FGameplayTag _encounterTypeTag;                                                   // 0x00D4 (size: 0x8)
    bool _encounterTypeCooldownAppliedOnSpawn;                                        // 0x00DC (size: 0x1)
    float _noiseLevelThresholdToAccumulate;                                           // 0x00E0 (size: 0x4)
    float _accumulatedNoiseDropRate;                                                  // 0x00E4 (size: 0x4)
    float _accumulatedNoiseDropTime;                                                  // 0x00E8 (size: 0x4)
    TMap<FName, float> _noiseMultiplierPerNoiseTag;                                   // 0x00F0 (size: 0x50)
    bool _startRemovalCounterIfAllRelevantPawnsAreInSubzone;                          // 0x0140 (size: 0x1)
    bool _canBeSpawnedInsideWater;                                                    // 0x0141 (size: 0x1)
    bool _canBeSetInBuildingForbiddenZone;                                            // 0x0142 (size: 0x1)
    bool _isSubjectToNewPlayerProtection;                                             // 0x0143 (size: 0x1)
    bool _isSubjectToServerSettings;                                                  // 0x0144 (size: 0x1)
    FGameplayTag _encounterServerSettingsSpawnWeightMultiplierTag;                    // 0x0148 (size: 0x8)
    float _chanceToSpawnChildEncounter;                                               // 0x0150 (size: 0x4)
    TMap<TSubclassOf<UEncounterBase>, float> _possibleChildEncounters;                // 0x0158 (size: 0x50)
    class UChildEncounterLocationGenerationMethodBase* _childEncounterLocationGenerationMethod; // 0x01A8 (size: 0x8)

}; // Size: 0x210

class UEncounterCargoDropEvent : public UEncounterSpawnCharacters
{
    FFloatInterval _cargoDropEventCharacterSpawnDistanceInterval;                     // 0x0460 (size: 0x8)
    float _playerDistanceCharacterSpawn;                                              // 0x0468 (size: 0x4)
    FGameplayTag _serverSettingsCargoEventTag;                                        // 0x0470 (size: 0x8)

}; // Size: 0x478

class UEncounterCargoDropEventFlyingGuardian : public UEncounterCargoDropEvent
{
    FFloatInterval _spawnHeightInterval;                                              // 0x0478 (size: 0x8)
    FFloatInterval _approachHeightInterval;                                           // 0x0480 (size: 0x8)
    float _approachPointRadiusMultiplier;                                             // 0x0488 (size: 0x4)

}; // Size: 0x490

class UEncounterCharacterGroupObject : public UObject
{
}; // Size: 0x40

class UEncounterCharacterSpawnPreset : public UDataAsset
{
    FGameplayTag PresetType;                                                          // 0x0030 (size: 0x8)
    TMap<TSoftClassPtr<AConZCharacter>, float> CharacterClasses;                      // 0x0038 (size: 0x50)

}; // Size: 0x88

class UEncounterHorde : public UEncounterSpawnCharacters
{
    TArray<FHordeParametersPresetPair> _hordeParameterPresets;                        // 0x0460 (size: 0x10)
    TMap<FName, float> _hordeActivationChancePerNoiseTag;                             // 0x0470 (size: 0x50)
    FFloatInterval _cooldownIntervalBetweenNoiseTriggerChecks;                        // 0x04C0 (size: 0x8)
    int32 _hordeMaxDeadCharacters;                                                    // 0x04C8 (size: 0x4)
    float _periodicHordeTriggerCheckNoiseThreshold;                                   // 0x04CC (size: 0x4)
    float _periodicHordeTriggerCheckTime;                                             // 0x04D0 (size: 0x4)
    float _periodicHordeTriggerChance;                                                // 0x04D4 (size: 0x4)
    bool _prioritizeInteriorHordeSpawnPoints;                                         // 0x04D8 (size: 0x1)
    bool _prioritizeExteriorHordeSpawnPoints;                                         // 0x04D9 (size: 0x1)
    bool _checkZoneValidity;                                                          // 0x04DA (size: 0x1)
    bool _allowDifferentSubZoneHordeSpawn;                                            // 0x04DB (size: 0x1)
    bool _spawnHordeOnlyIfBaitsArePresent;                                            // 0x04DC (size: 0x1)
    float _LPCCharacterAlertOnHordeTriggerRadius;                                     // 0x04E0 (size: 0x4)
    bool _useClosestPlayerForHordeSpawn;                                              // 0x04E4 (size: 0x1)
    bool _collectExistingCharactersAsPartOfHorde;                                     // 0x04E5 (size: 0x1)
    bool _useVisitedPointSpawnPrevention;                                             // 0x04E6 (size: 0x1)
    float _hordeSpawnPointCooldownAreaTime;                                           // 0x0558 (size: 0x4)
    float _hordeSpawnPointCooldownAreaExtent;                                         // 0x055C (size: 0x4)

}; // Size: 0x588

class UEncounterManagerCommonData : public UDataAsset
{
    int32 MaxCharacters;                                                              // 0x0030 (size: 0x4)
    TMap<FGameplayTag, int32> MaxCharactersPerType;                                   // 0x0038 (size: 0x50)
    TSoftClassPtr<AConZCharacter> SuicidePuppetClass;                                 // 0x0088 (size: 0x28)
    TArray<TEnumAsByte<EPhysicalSurface>> CharacterSpawnAllowedSurfaces;              // 0x00B0 (size: 0x10)
    class UEncounterZoneData* LowThreatZoneData;                                      // 0x00C0 (size: 0x8)
    float GroupDistanceBetweenPlayers;                                                // 0x00C8 (size: 0x4)
    float PlayerDataArrayShufflePeriod;                                               // 0x00CC (size: 0x4)
    float TimeForPlayerNoiseRateToStartDropping;                                      // 0x00D0 (size: 0x4)
    float PlayerNoiseDropRatePerSecond;                                               // 0x00D4 (size: 0x4)
    float AccumulatedNoiseCap;                                                        // 0x00D8 (size: 0x4)
    TMap<FName, float> NoiseAccumulationMultiplierPerNoiseTag;                        // 0x00E0 (size: 0x50)
    float PlayerAverageMovementDirectionChangeRate;                                   // 0x0130 (size: 0x4)
    float PlayerMovementDirectionResetTime;                                           // 0x0134 (size: 0x4)
    TMap<FGameplayTag, int32> LimitedEncounterTypes;                                  // 0x0138 (size: 0x50)
    TMap<class FGameplayTag, class FFloatInterval> CooldownsPerEncounterType;         // 0x0188 (size: 0x50)
    float EveryPlayerExperiencedCooldownDecayMultiplierDefault;                       // 0x01D8 (size: 0x4)
    TMap<FGameplayTag, float> EveryPlayerExperiencedCooldownDecayMultiplierPerType;   // 0x01E0 (size: 0x50)
    float PercentageOfMaxCharactersToStartDespawningLowPriorityCharacters;            // 0x0230 (size: 0x4)
    float VisitedPointCheckInterval;                                                  // 0x0234 (size: 0x4)
    float VisitedPointsAutosaveTime;                                                  // 0x0238 (size: 0x4)
    float BBBaseBoundsExtentAddition;                                                 // 0x023C (size: 0x4)
    int32 BBEncounterMinBaseElementsNumRequired;                                      // 0x0240 (size: 0x4)
    int32 BBEncounterBaseElementsNumToEnd;                                            // 0x0244 (size: 0x4)
    float BBEncounterTimeToFullMinNumToEnd;                                           // 0x0248 (size: 0x4)
    int32 BBEncounterMaximumMinToEndReduction;                                        // 0x024C (size: 0x4)
    float TimeWithPresentPlayersAfterBBEncounterCheckCanBeMade;                       // 0x0250 (size: 0x4)
    float BBEncounterSpawnChance;                                                     // 0x0254 (size: 0x4)
    TArray<FPossibleEncounterData> PossibleBBEncounters;                              // 0x0258 (size: 0x10)
    FFloatInterval BBEncounterCheckCooldownInterval;                                  // 0x0268 (size: 0x8)
    FFloatInterval BBEncounterCooldownInterval;                                       // 0x0270 (size: 0x8)
    float BBDataArrayShufflePeriod;                                                   // 0x0278 (size: 0x4)
    float BBDataAutosavePeriod;                                                       // 0x027C (size: 0x4)
    FFloatInterval LPCModeZoneCooldownOverride;                                       // 0x0280 (size: 0x8)
    float LPCModeVirtualizationTimeOverride;                                          // 0x0288 (size: 0x4)
    FGameplayTag LowPlayerCountModeEncounterSpecialCooldownTag;                       // 0x028C (size: 0x8)
    float RogueCharacterCorpseRemovalTimeMinutes;                                     // 0x0294 (size: 0x4)
    float RogueCharacterRemovalDistance;                                              // 0x0298 (size: 0x4)
    float RogueCharacterRemovalDistanceOutsideOfSight;                                // 0x029C (size: 0x4)
    float RogueCharactersAutosaveTime;                                                // 0x02A0 (size: 0x4)
    float GlobalZoneCooldownsAutosaveTime;                                            // 0x02A4 (size: 0x4)
    FGameplayTag EnabledPuppetWorldEncounterTag;                                      // 0x02A8 (size: 0x8)
    FGameplayTag EnabledAnimalWorldEncounterTag;                                      // 0x02B0 (size: 0x8)
    FGameplayTag EnabledDropshipWorldEncounterTag;                                    // 0x02B8 (size: 0x8)
    FGameplayTag EnabledDropshipAbandonedBunkerEncounterTag;                          // 0x02C0 (size: 0x8)
    FGameplayTag EnabledDropshipBaseBuildingEncounterTag;                             // 0x02C8 (size: 0x8)
    FGameplayTag PuppetPresetTypeServerSettingsTag;                                   // 0x02D0 (size: 0x8)
    FGameplayTag AnimalPresetTypeServerSettingsTag;                                   // 0x02D8 (size: 0x8)
    FGameplayTag NPCPresetTypeServerSettingsTag;                                      // 0x02E0 (size: 0x8)
    TMap<class TSoftClassPtr<AConZCharacter>, class FColor> DrawDebugColor;           // 0x02E8 (size: 0x50)
    TMap<class TSoftClassPtr<AConZCharacter>, class FColor> DrawDebugVirtualizedColor; // 0x0338 (size: 0x50)

}; // Size: 0x388

class UEncounterManagerHordePreset : public UDataAsset
{
    TMap<UEncounterCharacterSpawnPreset*, float> PossibleHordeCharacters;             // 0x0030 (size: 0x50)
    FInt32Interval HordeGroupSizeInterval;                                            // 0x0080 (size: 0x8)
    FInt32Interval HordeSizeAdditionInterval;                                         // 0x0088 (size: 0x8)
    int32 HordeGroupSizeExtraPerPlayer;                                               // 0x0090 (size: 0x4)
    int32 HordeSizeExtraPerPlayer;                                                    // 0x0094 (size: 0x4)
    int32 HordeSizesAmountPlayerCap;                                                  // 0x0098 (size: 0x4)
    FFloatInterval HordeSpawnDistanceInterval;                                        // 0x009C (size: 0x8)
    float FallbackLocationZCheckDistance;                                             // 0x00A4 (size: 0x4)
    FFloatInterval HordeGroupRefillTimeInterval;                                      // 0x00A8 (size: 0x8)
    FFloatInterval HordeRespawnCooldownInterval;                                      // 0x00B0 (size: 0x8)
    FFloatInterval HordeActivationSoundDelay;                                         // 0x00B8 (size: 0x8)
    class UAkAudioEvent* HordeActivationAudioEvent;                                   // 0x00C0 (size: 0x8)

}; // Size: 0xC8

class UEncounterSpawnAirborneCharacters : public UEncounterSpawnCharacters
{
    TMap<UEncounterCharacterSpawnPreset*, float> _possibleAirborneCharacters;         // 0x0460 (size: 0x50)
    FFloatInterval _spawnHeightInterval;                                              // 0x04B0 (size: 0x8)
    FFloatInterval _approachHeightInterval;                                           // 0x04B8 (size: 0x8)
    FInt32Interval _allowedAirborneCharactersInterval;                                // 0x04C0 (size: 0x8)
    float _approachPointRadiusMultiplier;                                             // 0x04CC (size: 0x4)
    bool _useEncounterZoneApproachLocations;                                          // 0x04D0 (size: 0x1)

}; // Size: 0x4F0

class UEncounterSpawnCharacters : public UEncounterBase
{
    float _minRemovalSightDistance;                                                   // 0x0210 (size: 0x4)
    float _minRemovalDistance;                                                        // 0x0214 (size: 0x4)
    FFloatInterval _characterSpawnRangeOverride;                                      // 0x0218 (size: 0x8)
    FFloatInterval _characterFallbackSpawnRangeOverride;                              // 0x0220 (size: 0x8)
    TMap<TSoftClassPtr<AConZCharacter>, int32> _limitedCharacters;                    // 0x0228 (size: 0x50)
    bool _ignoreGlobalCharacterLimit;                                                 // 0x0278 (size: 0x1)
    bool _ignoreCharactersOutsideOfZoneOrUnownedWhenCounting;                         // 0x0279 (size: 0x1)
    bool _useOnlyOwnPossibleCharacters;                                               // 0x027A (size: 0x1)
    uint8 _allowedSpawnPoints;                                                        // 0x027B (size: 0x1)
    uint8 _allowedGroupSpawnPoints;                                                   // 0x027C (size: 0x1)
    TArray<FEncounterSpawnPointTypeArrayData> _spawnPointTypesAdditionalData;         // 0x0280 (size: 0x10)
    TMap<UEncounterCharacterSpawnPreset*, float> _possibleCharacters;                 // 0x0290 (size: 0x50)
    class UCurveFloat* _characterBaseAmountCurve;                                     // 0x02E0 (size: 0x8)
    FInt32Interval _characterBaseAmountRange;                                         // 0x02E8 (size: 0x8)
    bool _isGroupSpawn;                                                               // 0x02F0 (size: 0x1)
    int32 _characterExtraAmountPerPlayer;                                             // 0x02F4 (size: 0x4)
    int32 _characterAmountPlayerCap;                                                  // 0x02F8 (size: 0x4)
    float _singleGroupPointFallbackGenerationRadius;                                  // 0x02FC (size: 0x4)
    bool _canKilledCharactersRespawn;                                                 // 0x0300 (size: 0x1)
    bool _destroyEncounterAfterAllCharactersAreKilled;                                // 0x0301 (size: 0x1)
    FFloatInterval _characterRespawnTimeRange;                                        // 0x0304 (size: 0x8)
    FInt32Interval _characterRespawnBatchSize;                                        // 0x030C (size: 0x8)
    float _minDistanceBetweenCharacters;                                              // 0x0314 (size: 0x4)
    float _minDistanceBetweenGroupedCharacters;                                       // 0x0318 (size: 0x4)
    bool _checkAllowedSurfaces;                                                       // 0x031C (size: 0x1)
    bool _allowFallbackSpawns;                                                        // 0x031D (size: 0x1)
    bool _useComplexFallbackSpawns;                                                   // 0x031E (size: 0x1)
    float _deadCharacterRemovalTimeMinutes;                                           // 0x0320 (size: 0x4)
    int32 _maxDeadCharacters;                                                         // 0x0324 (size: 0x4)
    float _aggressiveSpawnChance;                                                     // 0x0328 (size: 0x4)
    float _aggressiveSpawnChanceForRespawnedCharacters;                               // 0x032C (size: 0x4)
    TMap<EEncounterPostExternalMoveAction, float> _postExternalMoveToActionsMap;      // 0x0330 (size: 0x50)
    float _aiNoiseResponseRadius;                                                     // 0x0380 (size: 0x4)
    float _periodicSpawnedCharacterAggravationCheckNoiseThreshold;                    // 0x0384 (size: 0x4)
    float _periodicSpawnedCharacterAggravationCheckTime;                              // 0x0388 (size: 0x4)
    float _periodicSpawnedCharacterAggravationChance;                                 // 0x038C (size: 0x4)
    float _periodicSpawnedCharacterAggravationChancePerCharacter;                     // 0x0390 (size: 0x4)
    bool _canEverRemoveLowPriorityCharacters;                                         // 0x0394 (size: 0x1)
    float _initialAreLowPriorityCharatersKilledTime;                                  // 0x0398 (size: 0x4)
    float _resetAreLowPriorityCharatersKilledTime;                                    // 0x039C (size: 0x4)
    bool _allowDifferentSubZoneSpawn;                                                 // 0x03A0 (size: 0x1)
    float _spawnPreciseLocationRaycastUpOffset;                                       // 0x03A4 (size: 0x4)
    float _spawnPreciseLocationRaycastDownOffset;                                     // 0x03A8 (size: 0x4)
    float _raycastSpawnCheckHeight;                                                   // 0x03AC (size: 0x4)
    bool _canRelocateEncounterOnVirtualization;                                       // 0x03B0 (size: 0x1)

    void OnCharacterKilled(class AConZCharacter* ConZCharacter);
    void OnCharacterAboutToBeDestroyed(class AConZCharacter* ConZCharacter);
}; // Size: 0x460

class UEncounterZoneData : public UDataAsset
{
    float EncounterSpawnChance;                                                       // 0x0030 (size: 0x4)
    TArray<FPossibleEncounterData> EncounterData;                                     // 0x0038 (size: 0x10)
    FFloatInterval InitialEncounterSpawnDelay;                                        // 0x0048 (size: 0x8)
    FFloatInterval EncounterSpawnCheckInterval;                                       // 0x0050 (size: 0x8)
    FFloatInterval EncounterCooldownInterval;                                         // 0x0058 (size: 0x8)
    FFloatInterval EncounterCooldownGlobalInterval;                                   // 0x0060 (size: 0x8)
    float SubzoneDirectionRelevanceMaxDistance;                                       // 0x0068 (size: 0x4)
    bool AllowParentZoneEncounterSpawn;                                               // 0x006C (size: 0x1)
    FFloatInterval CharacterSpawnDistanceRange;                                       // 0x0070 (size: 0x8)
    FFloatInterval CharacterFallbackSpawnDistanceRange;                               // 0x0078 (size: 0x8)
    FFloatInterval CharacterFallbackSpawnMoveToLocationRange;                         // 0x0080 (size: 0x8)
    float ForcedStimulusKeepAliveTimePer100mDistance;                                 // 0x0088 (size: 0x4)
    float MinForcedStimulusKeepAliveTime;                                             // 0x008C (size: 0x4)
    float ForcedStimulusTrackOwnerTimePer100mDistance;                                // 0x0090 (size: 0x4)
    float MinForcedStimulusTrackOwnerTime;                                            // 0x0094 (size: 0x4)
    float MovementDirectionSpawnHalfAngle;                                            // 0x0098 (size: 0x4)
    float MovementDirectionSpawnVerticalHalfAngle;                                    // 0x009C (size: 0x4)
    float InteriorSpawnPointsViewCheckDistance;                                       // 0x00A0 (size: 0x4)
    float ExteriorSpawnPointsViewCheckDistance;                                       // 0x00A4 (size: 0x4)
    float SpawnPointViewCheckHalfAngle;                                               // 0x00A8 (size: 0x4)
    float FallbackLocationZCheckDistance;                                             // 0x00AC (size: 0x4)
    bool UseFastSightCheck;                                                           // 0x00B0 (size: 0x1)
    bool UseVisitedPointSpawnProhibition;                                             // 0x00B1 (size: 0x1)
    float VisitedPointsLockRadiusXY;                                                  // 0x00B4 (size: 0x4)
    float VisitedPointsLockDistanceZ;                                                 // 0x00B8 (size: 0x4)
    float VisitedPointOffsetDistance;                                                 // 0x00BC (size: 0x4)
    float VisitedPointsRemovalTime;                                                   // 0x00C0 (size: 0x4)
    bool EverSubjectToSpawnPreventionAreasSpawnOnCharacterDeath;                      // 0x00C4 (size: 0x1)
    float OnCharacterDeathVisitedPointsLockRadiusXY;                                  // 0x00C8 (size: 0x4)
    float OnCharacterDeathVisitedPointsLockDistanceZ;                                 // 0x00CC (size: 0x4)

}; // Size: 0xD0

class UEncounterZoneSubZoneBoxComponent : public UBoxComponent
{
}; // Size: 0x480

class UEnduranceSkill : public UConstitutionSkill
{
    FEnduranceSkillExperienceAwards NoSkillExperienceAwards;                          // 0x00C8 (size: 0xC)
    FEnduranceSkillExperienceAwards BasicSkillExperienceAwards;                       // 0x00D4 (size: 0xC)
    FEnduranceSkillExperienceAwards MediumSkillExperienceAwards;                      // 0x00E0 (size: 0xC)
    FEnduranceSkillExperienceAwards AdvancedSkillExperienceAwards;                    // 0x00EC (size: 0xC)
    FEnduranceSkillExperienceAwards AboveAdvancedSkillExperienceAwards;               // 0x00F8 (size: 0xC)
    FEnduranceSkillParametersPerSkillLevel NoSkillParameters;                         // 0x0104 (size: 0x18)
    FEnduranceSkillParametersPerSkillLevel BasicSkillParameters;                      // 0x011C (size: 0x18)
    FEnduranceSkillParametersPerSkillLevel MediumSkillParameters;                     // 0x0134 (size: 0x18)
    FEnduranceSkillParametersPerSkillLevel AdvancedSkillParameters;                   // 0x014C (size: 0x18)

}; // Size: 0x170

class UEngineeringSkill : public UIntelligenceSkill
{
    FEngineeringSkillExperienceAwards NoSkillExperienceAwards;                        // 0x00B0 (size: 0x10)
    FEngineeringSkillExperienceAwards BasicSkillExperienceAwards;                     // 0x00C0 (size: 0x10)
    FEngineeringSkillExperienceAwards MediumSkillExperienceAwards;                    // 0x00D0 (size: 0x10)
    FEngineeringSkillExperienceAwards AdvancedSkillExperienceAwards;                  // 0x00E0 (size: 0x10)
    FEngineeringSkillExperienceAwards AboveAdvancedSkillExperienceAwards;             // 0x00F0 (size: 0x10)
    FEngineeringSkillParametersPerSkillLevel NoSkillParameters;                       // 0x0100 (size: 0x1C)
    FEngineeringSkillParametersPerSkillLevel BasicSkillParameters;                    // 0x011C (size: 0x1C)
    FEngineeringSkillParametersPerSkillLevel MediumSkillParameters;                   // 0x0138 (size: 0x1C)
    FEngineeringSkillParametersPerSkillLevel AdvancedSkillParameters;                 // 0x0154 (size: 0x1C)
    FEngineeringSkillParametersPerSkillLevel AboveAdvancedSkillParameters;            // 0x0170 (size: 0x1C)

}; // Size: 0x190

class UEntityComponentSetup : public UEntitySystemObjectSetup
{
    float BoundsRadius;                                                               // 0x0040 (size: 0x4)

}; // Size: 0x48

class UEntityDebuggerEntitySetup : public UEntitySetup
{
    bool DrawQuerySphere;                                                             // 0x0080 (size: 0x1)
    bool DrawTopLevelEntitiesOnly;                                                    // 0x0081 (size: 0x1)
    bool DrawEntityBounds;                                                            // 0x0082 (size: 0x1)
    bool DrawEntityDebugStrings;                                                      // 0x0083 (size: 0x1)
    bool DrawEntityComponentDebugStrings;                                             // 0x0084 (size: 0x1)
    int32 DebugStringLineBreak;                                                       // 0x0088 (size: 0x4)

}; // Size: 0x90

class UEntityLifeTimeComponentSetup : public UEntityComponentSetup
{
}; // Size: 0x48

class UEntityOverlapDetectionComponent : public UActorComponent
{
    TArray<class TSubclassOf<UEntitySetup>> _observedEntitySetupClasses;              // 0x00E0 (size: 0x10)
    float _narrowPhaseRadius;                                                         // 0x00F0 (size: 0x4)

}; // Size: 0x180

class UEntitySetup : public UEntitySystemObjectSetup
{
    bool Transient;                                                                   // 0x0040 (size: 0x1)
    bool Hidden;                                                                      // 0x0041 (size: 0x1)
    float BoundsRadius;                                                               // 0x0044 (size: 0x4)
    TSoftClassPtr<AActor> Actor;                                                      // 0x0048 (size: 0x28)
    TArray<FEntitySetup_Component> Components;                                        // 0x0070 (size: 0x10)

}; // Size: 0x80

class UEntitySystem : public UObject
{
    class UEntitySystemSettings* _settings;                                           // 0x0038 (size: 0x8)
    TMap<UObject*, int32> _uobjectReferences;                                         // 0x0700 (size: 0x50)

}; // Size: 0x7A0

class UEntitySystemObjectSetup : public ULWObjectSetup
{
    bool TickEnabled;                                                                 // 0x0030 (size: 0x1)
    float TickInterval;                                                               // 0x0034 (size: 0x4)
    bool CanEverTickOnServer;                                                         // 0x0038 (size: 0x1)
    bool CanEverTickOnClient;                                                         // 0x0039 (size: 0x1)

}; // Size: 0x40

class UEntitySystemSettings : public UObject
{
    TArray<FEntityToCreateOnStartupParams> EntitiesToCreateOnStartup;                 // 0x0028 (size: 0x10)
    TMap<class FName, class TSubclassOf<UEntitySetup>> EntitiesToDestroyOnDisabledSetting; // 0x0038 (size: 0x50)

}; // Size: 0x88

class UEnvironmentDescriptionComponent : public UStaticMeshComponent
{
    EEnvironmentClass EnvironmentClass;                                               // 0x04F8 (size: 0x1)
    bool IsUnderground;                                                               // 0x04F9 (size: 0x1)
    bool IsAbandonedBunker;                                                           // 0x04FA (size: 0x1)
    bool ShouldBlockWeatherEffects;                                                   // 0x04FB (size: 0x1)

}; // Size: 0x500

class UEventInsertCartridge : public UWeaponActionReloadSequence
{
    FName MontageEndSectionName;                                                      // 0x0090 (size: 0x8)

    int32 GetMaxCartridgesCount();
}; // Size: 0xA0

class UEventInsertMagazine : public UWeaponActionReloadSequence
{
    bool _addAmmoOnBegin;                                                             // 0x0090 (size: 0x1)

    void AddAmmo();
}; // Size: 0x98

class UExamineAction : public UInteractionAction
{
}; // Size: 0xA8

class UExamineAssetData : public UInteractionAssetData
{
    FExamineItemSpawnerData ExamineData;                                              // 0x0030 (size: 0xB0)
    FItemSpawnerPresetWithOverrides SpawnerPreset;                                    // 0x00E0 (size: 0xB8)
    class UAkAudioEvent* StartExamineAudioEvent;                                      // 0x0198 (size: 0x8)
    class UAkAudioEvent* StopExamineAudioEvent;                                       // 0x01A0 (size: 0x8)
    ENoiseLevel noiseLevel;                                                           // 0x01A8 (size: 0x1)
    TArray<class TSubclassOf<UExamineMeshNotify>> ExamineMeshNotifies;                // 0x01B0 (size: 0x10)
    bool CanStore;                                                                    // 0x01C0 (size: 0x1)
    bool CanSave;                                                                     // 0x01C1 (size: 0x1)

}; // Size: 0x200

class UExamineMeshNotify : public UObject
{
}; // Size: 0x28

class UExamineMeshNotify_BoundToAbandonedBunkerActivation : public UExamineMeshNotify
{
}; // Size: 0x28

class UExaminePrisonerAction : public UExamineAction
{
}; // Size: 0xB0

class UExpandableContainer : public UUserWidget
{
    class UTextBlock* _titleText;                                                     // 0x0278 (size: 0x8)
    class UNamedSlot* _contentNamedSlot;                                              // 0x0280 (size: 0x8)

    void InvokeExpansionChanged(bool maximized);
}; // Size: 0x288

class UExpirableEntityComponentSetup : public UEntityComponentSetup
{
    float ExpirationTimeHours;                                                        // 0x0048 (size: 0x4)

}; // Size: 0x50

class UExpirableItemComponent : public UItemComponent
{
    int64 _expirationTimeSeconds;                                                     // 0x00C8 (size: 0x8)
    double _repCreatedAtPlayTime;                                                     // 0x00D0 (size: 0x8)
    float _repExpirationTimeHours;                                                    // 0x00D8 (size: 0x4)

    void OnRep_ExpirationTime();
    void OnRep_CreatedAtPlayTime();
}; // Size: 0xE0

class UExplosionDamageType : public UDamageType
{
}; // Size: 0x40

class UExplosionFailurePenalty : public UFailurePenalty
{
    float _explosionBaseDamage;                                                       // 0x0030 (size: 0x4)
    FTargetTypeDamageMultiplier _targetTypeMultiplier;                                // 0x0038 (size: 0x10)
    float _minimumDamage;                                                             // 0x0048 (size: 0x4)
    float _damageInnerRadius;                                                         // 0x004C (size: 0x4)
    float _damageOuterRadius;                                                         // 0x0050 (size: 0x4)
    float _damageFalloff;                                                             // 0x0054 (size: 0x4)
    class UParticleSystem* _explosionPS;                                              // 0x0058 (size: 0x8)
    class UAkAudioEvent* _explosionAudioEvent;                                        // 0x0060 (size: 0x8)

}; // Size: 0x68

class UExplosiveAmmunitionArrowSpawningParams : public UAmmunitionArrowSpawningParams
{
    TEnumAsByte<EPhysicalSurface> HitPhysicalSurface;                                 // 0x0038 (size: 0x1)

}; // Size: 0x40

class UExplosiveProtectionItemComponent : public UItemComponent
{
    TSubclassOf<class AMinigame> _minigameClass;                                      // 0x00D0 (size: 0x8)
    TSubclassOf<class UBaseItemTag> _minigameToolTag;                                 // 0x00D8 (size: 0x8)
    class ULockItemTag* _lockItem;                                                    // 0x00E0 (size: 0x8)
    class ULockData* _lockData;                                                       // 0x00E8 (size: 0x8)
    class UParticleSystem* _explosionParticles;                                       // 0x00F0 (size: 0x8)
    FVector _explosionParticlesLocation;                                              // 0x00F8 (size: 0xC)
    class UAkAudioEvent* _explosionAudioEvent;                                        // 0x0108 (size: 0x8)
    float _explosionBaseDamage;                                                       // 0x0110 (size: 0x4)
    float _explosionMinimalDamage;                                                    // 0x0114 (size: 0x4)
    float _explosionDamagePositionOffset;                                             // 0x0118 (size: 0x4)
    float _explosionDamageFalloff;                                                    // 0x011C (size: 0x4)
    float _explosionInnerRadius;                                                      // 0x0120 (size: 0x4)
    float _explosionOuterRadius;                                                      // 0x0124 (size: 0x4)
    FTargetTypeDamageMultiplier _targetTypeMultiplier;                                // 0x0128 (size: 0x10)
    float _hearingDamageRadius;                                                       // 0x0138 (size: 0x4)
    TSubclassOf<class UMatineeCameraShake> _explosionCameraShakeClass;                // 0x0140 (size: 0x8)
    bool _isArmed;                                                                    // 0x0148 (size: 0x1)

    void NetMulticast_PlayDetonationEffects();
}; // Size: 0x150

class UExplosiveProtectionItemComponentState : public UItemComponentStateBase
{
    bool IsArmed;                                                                     // 0x0040 (size: 0x1)

}; // Size: 0x48

class UExtendedRichTextBlock : public URichTextBlock
{
}; // Size: 0x680

class UExteriorCharacterSpawnerComponent : public UCharacterSpawnerComponent
{
}; // Size: 0x210

class UExternalMountPath : public UMountPath
{
    FTransform DestinationTransform;                                                  // 0x0060 (size: 0x30)
    bool OverrideDestinationAcceptanceRadius;                                         // 0x0090 (size: 0x1)
    float DestinationAcceptanceRadius;                                                // 0x0094 (size: 0x4)
    bool OverrideDestinationMinAcceptanceRadius;                                      // 0x0098 (size: 0x1)
    float MinDestinationAcceptanceRadius;                                             // 0x009C (size: 0x4)
    bool AllowMountingInsideVolumeOnly;                                               // 0x00A0 (size: 0x1)
    FBox AllowMountingVolume;                                                         // 0x00A4 (size: 0x1C)
    bool DisallowMountingInsideVolumeOnly;                                            // 0x00C0 (size: 0x1)
    FBox DisallowMountingVolume;                                                      // 0x00C4 (size: 0x1C)
    float AccesibilityCheck_MountSocketVerticalCorrection;                            // 0x00E0 (size: 0x4)
    float AccesibilityCheck_CapsuleRadius;                                            // 0x00E4 (size: 0x4)
    float AccesibilityCheck_OverlapCapsuleRadius;                                     // 0x00E8 (size: 0x4)
    float AccesibilityCheck_SweepCapsuleHalfHeight;                                   // 0x00EC (size: 0x4)
    float AccesibilityCheck_OverlapCapsuleHalfHeight;                                 // 0x00F0 (size: 0x4)
    bool AlignAccessibilityChecksToVehicle;                                           // 0x00F4 (size: 0x1)
    class UAnimMontage* UnmountingMontage;                                            // 0x00F8 (size: 0x8)
    class UAnimMontage* UnmountingMontageFP;                                          // 0x0100 (size: 0x8)
    float FallbackUnmountTime;                                                        // 0x0108 (size: 0x4)
    FFloatInterval EnabledAtVehicleSpeed;                                             // 0x010C (size: 0x8)
    FFloatInterval EnabledAtVehicleAngle;                                             // 0x0114 (size: 0x8)
    bool AlternateExitOnly;                                                           // 0x011C (size: 0x1)
    EMotionIntensity UnmountingMotionIntensity;                                       // 0x011D (size: 0x1)

}; // Size: 0x120

class UFadeMinigameAnimator : public UBaseMinigameAnimator
{
    class UCurveFloat* _fadeCurve;                                                    // 0x0028 (size: 0x8)
    bool _shouldFlipCurve;                                                            // 0x0030 (size: 0x1)

}; // Size: 0x38

class UFailurePenalty : public UObject
{
    bool _shouldExecuteOnClients;                                                     // 0x0028 (size: 0x1)

}; // Size: 0x30

class UFamePointDebugComponent : public UActorComponent
{
    TSubclassOf<class UFamePointDebugWidget> _widgetClass;                            // 0x00B0 (size: 0x8)
    class UFamePointDebugWidget* _widget;                                             // 0x00B8 (size: 0x8)
    float _famePoints;                                                                // 0x00C0 (size: 0x4)

    void OnRep_FamePoints();
}; // Size: 0xC8

class UFamePointDebugWidget : public UUserWidget
{
    class UTextBlock* _famePointsText;                                                // 0x0268 (size: 0x8)

}; // Size: 0x270

class UFamePointSettings : public UDataAsset
{
    FFamePointAwards Awards;                                                          // 0x0030 (size: 0x138)
    FFamePointPenalties Penalties;                                                    // 0x0168 (size: 0x1C)
    class UFamePointTagSettings* FamePointTagSettings;                                // 0x0188 (size: 0x8)
    class UCurveFloat* FameGainCurve;                                                 // 0x0190 (size: 0x8)

}; // Size: 0x198

class UFamePointStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UFamePointTagSettings : public UDataAsset
{
    TMap<FGameplayTag, float> _famePointAmountWhenLootedForTag;                       // 0x0030 (size: 0x50)
    TMap<FGameplayTag, float> _famePointAmountWhenSellingForTag;                      // 0x0080 (size: 0x50)
    TMap<FGameplayTag, float> _famePointAmountWhenBuyingForTag;                       // 0x00D0 (size: 0x50)

}; // Size: 0x120

class UFarmingSkill : public UIntelligenceSkill
{
    FFarmingSkillParametersPerSkillLevel NoSkillParameters;                           // 0x00B0 (size: 0x70)
    FFarmingSkillParametersPerSkillLevel BasicSkillParameters;                        // 0x0120 (size: 0x70)
    FFarmingSkillParametersPerSkillLevel MediumSkillParameters;                       // 0x0190 (size: 0x70)
    FFarmingSkillParametersPerSkillLevel AdvancedSkillParameters;                     // 0x0200 (size: 0x70)
    FFarmingSkillParametersPerSkillLevel AboveAdvancedSkillParameters;                // 0x0270 (size: 0x70)

}; // Size: 0x2E8

class UFertilizerItemComponent : public UItemComponent
{
    EFertilizerType _type;                                                            // 0x00C8 (size: 0x1)
    class UAnimMontage* _addFertilizerMontage;                                        // 0x00D0 (size: 0x8)

}; // Size: 0xD8

class UFillItemWithReplenishableResourceAssetData : public UInteractionAssetData
{
    FFillItemWithReplenishableResourceInteractionData InteractionData;                // 0x0030 (size: 0x40)

}; // Size: 0x70

class UFillWaterAction : public UInteractionAction
{
}; // Size: 0xD0

class UFireFanningItemTag : public UBaseItemTag
{
    class UAnimMontage* BlowAirIntoFireMontage;                                       // 0x0030 (size: 0x8)
    class UAnimMontage* BlowAirIntoLowFireMontage;                                    // 0x0038 (size: 0x8)
    class UAnimMontage* ItemSwingAnimOpen;                                            // 0x0040 (size: 0x8)
    FName ItemSwingAnimOpenSection;                                                   // 0x0048 (size: 0x8)
    class UAnimMontage* ItemSwingAnimClose;                                           // 0x0050 (size: 0x8)
    FName ItemSwingAnimCloseSection;                                                  // 0x0058 (size: 0x8)
    float AirAmountMultiplier;                                                        // 0x0060 (size: 0x4)

}; // Size: 0x68

class UFireSourceItemTag : public UBaseItemTag
{
}; // Size: 0x30

class UFishInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{
}; // Size: 0x5A0

class UFishSpawningPreset : public UDataAsset
{
    float SpawningChance;                                                             // 0x0030 (size: 0x4)

}; // Size: 0x38

class UFishSpeciesData : public UDataAsset
{
    EFishSpecies fishSpecies;                                                         // 0x0030 (size: 0x1)
    class UStaticMesh* SingleFishStaticMesh;                                          // 0x0038 (size: 0x8)
    class USkeletalMesh* SingleFishSkeletalMesh;                                      // 0x0040 (size: 0x8)
    class UMaterialInterface* MaterialOverride;                                       // 0x0048 (size: 0x8)
    class UAnimSequence* CaughtFishAnimSequence;                                      // 0x0050 (size: 0x8)
    TSubclassOf<class AFishSchoolActor> SchoolClass;                                  // 0x0058 (size: 0x8)
    TSubclassOf<class AActor> CaughtFishClass;                                        // 0x0060 (size: 0x8)
    bool Predator;                                                                    // 0x0068 (size: 0x1)
    float MinDepth;                                                                   // 0x006C (size: 0x4)
    float MaxDepth;                                                                   // 0x0070 (size: 0x4)
    float MinMass;                                                                    // 0x0074 (size: 0x4)
    float MaxMass;                                                                    // 0x0078 (size: 0x4)
    float MaxLength;                                                                  // 0x007C (size: 0x4)
    class UCurveFloat* TimeOfDayPercentageCurve;                                      // 0x0080 (size: 0x8)

}; // Size: 0x88

class UFishSpeciesPreset : public UDataAsset
{
    TArray<FFishSpawnData> FishSpawnData;                                             // 0x0030 (size: 0x10)

}; // Size: 0x40

class UFishingBarWidget : public UUserWidget
{
    FLinearColor TopSegmentGradientColorBottom;                                       // 0x0268 (size: 0x10)
    FLinearColor TopSegmentGradientColorTop;                                          // 0x0278 (size: 0x10)
    float BarBoxesTotalHeight;                                                        // 0x0288 (size: 0x4)
    float BarSegmentsTotalHeight;                                                     // 0x028C (size: 0x4)
    int32 BarSegmentNum;                                                              // 0x0290 (size: 0x4)
    FSlateBrush ProgressBarBackgroundBoxBrush;                                        // 0x0298 (size: 0x88)
    FLinearColor ProgressBarBackgroundBoxColorAndOpacity;                             // 0x0320 (size: 0x10)
    float ProgressBarBackgroundBoxPadding;                                            // 0x0330 (size: 0x4)
    FSlateBrush ProgressBarSegmentBrush;                                              // 0x0338 (size: 0x88)
    FLinearColor ProgressBarSegmentColorAndOpacity;                                   // 0x03C0 (size: 0x10)
    float ProgressBarSegmentPadding;                                                  // 0x03D0 (size: 0x4)
    class UVerticalBox* _progressBarSegmentBackgroundBoxesContainer;                  // 0x03D8 (size: 0x8)
    class UVerticalBox* _progressBarSegmentsContainer;                                // 0x03E0 (size: 0x8)
    class USizeBox* _simulatedProgressBar;                                            // 0x03E8 (size: 0x8)

    void SetSegmentBarNum(int32 numOfSegments);
    void SetProgressPercentage(float Value);
    float GetProgressPercentage();
}; // Size: 0x438

class UFishingContainerWidget : public UUserWidget
{
    class UFishingBarWidget* _castingBarWidget;                                       // 0x0268 (size: 0x8)
    class UFishingBarWidget* _fishingBarWidget;                                       // 0x0270 (size: 0x8)
    float _tensionBarInterpSpeed;                                                     // 0x0278 (size: 0x4)

}; // Size: 0x280

class UFishingReelAnimInstance : public UAnimInstance
{
    float _reelHandleRotationAnimationExplicitTime;                                   // 0x02B8 (size: 0x4)
    EPrisonerGroundStance _owningPrisonerStance;                                      // 0x02BC (size: 0x1)
    bool _isOwningPrisonerInFirstPersonView;                                          // 0x02BD (size: 0x1)
    bool _isLocked;                                                                   // 0x02BE (size: 0x1)
    bool _isCasting;                                                                  // 0x02BF (size: 0x1)

    class UAnimSequenceBase* GetReelingAnimSequence();
}; // Size: 0x2C0

class UFishingRodAnimInstance : public UAnimInstance
{
    bool IsInMinigame;                                                                // 0x02B8 (size: 0x1)
    FVector RodTipLocation;                                                           // 0x02BC (size: 0xC)
    FVector BentRodTipLocation;                                                       // 0x02C8 (size: 0xC)
    FVector BendDirection;                                                            // 0x02D4 (size: 0xC)
    float BendAmount;                                                                 // 0x02E0 (size: 0x4)

}; // Size: 0x2F0

class UFishingTrophyWidget : public UUserWidget
{
    class UTextBlock* _fishNameText;                                                  // 0x0298 (size: 0x8)
    class UTextBlock* _fishWeightText;                                                // 0x02A0 (size: 0x8)
    class UTextBlock* _fishSizeText;                                                  // 0x02A8 (size: 0x8)
    class UTextBlock* _keepFishHotkeyText;                                            // 0x02B0 (size: 0x8)
    class UTextBlock* _releaseFishHotkeyText;                                         // 0x02B8 (size: 0x8)
    class UButton* _keepButton;                                                       // 0x02C0 (size: 0x8)
    class UButton* _releaseButton;                                                    // 0x02C8 (size: 0x8)

    void OnReleasedPressed();
    void OnKeepPressed();
}; // Size: 0x2D0

class UFishingWireComponent : public UVDRopeComponent
{
}; // Size: 0x770

class UFlamethrowerComponent : public UActorComponent
{
    class UNiagaraSystem* _flamethrowerParticleSystem;                                // 0x00B0 (size: 0x8)
    float _particleSpawnRate;                                                         // 0x00B8 (size: 0x4)
    FFloatInterval _particleSpeed;                                                    // 0x00BC (size: 0x8)
    int32 _translucencySortPriority;                                                  // 0x00C4 (size: 0x4)
    class UNiagaraComponent* _flamethrowerNiagaraComponent;                           // 0x00C8 (size: 0x8)
    class UStaticMesh* _lightSourceMesh;                                              // 0x00D0 (size: 0x8)
    class UMaterialInterface* _lightSourceMaterial;                                   // 0x00D8 (size: 0x8)
    class UStaticMeshComponent* _lightSourceMeshComponent;                            // 0x00E0 (size: 0x8)
    FVector _lightSourceScale;                                                        // 0x00E8 (size: 0xC)
    float _maxLightSourceIntensity;                                                   // 0x00F4 (size: 0x4)
    float _lightSourceIntensityChangeTime;                                            // 0x00FC (size: 0x4)
    FLinearColor _lightSourceColor;                                                   // 0x0100 (size: 0x10)
    float _lightSourceOcclusionDistanceChangeTime;                                    // 0x0120 (size: 0x4)
    bool _automaticallyAttachToParentsMesh;                                           // 0x0128 (size: 0x1)
    int32 _meshComponentId;                                                           // 0x012C (size: 0x4)
    FName _socketName;                                                                // 0x0138 (size: 0x8)
    FVector _effectScale;                                                             // 0x0140 (size: 0xC)
    FTargetTypeDamageMultiplier _targetTypeMultiplier;                                // 0x0150 (size: 0x10)
    float _coneHalfAngle;                                                             // 0x01A0 (size: 0x4)
    float _coneLength;                                                                // 0x01AC (size: 0x4)
    FFloatInterval _temperature;                                                      // 0x01B0 (size: 0x8)
    float _offcenterTemperatureFalloffExp;                                            // 0x01B8 (size: 0x4)
    bool _useWeaponItemOverlap;                                                       // 0x01BC (size: 0x1)
    FVector _weaponItemOverlapBoxExtent;                                              // 0x01C0 (size: 0xC)
    FVector _weaponItemOverlapBoxCenter;                                              // 0x01CC (size: 0xC)
    float _rotationalInertia;                                                         // 0x01D8 (size: 0x4)
    float _turnRateStallThreshold;                                                    // 0x0210 (size: 0x4)
    float _stallRecoveryTime;                                                         // 0x0218 (size: 0x4)
    bool _ignoreSelf;                                                                 // 0x0221 (size: 0x1)
    bool _deflectedFlameDealsDamage;                                                  // 0x0222 (size: 0x1)
    float _deflectedFlameThreshold;                                                   // 0x0224 (size: 0x4)
    float _deflectedFlameRadius;                                                      // 0x0228 (size: 0x4)
    class UAkAudioEvent* _activeAudioEvent;                                           // 0x0238 (size: 0x8)
    class UAkAudioEvent* _stopAudioEvent;                                             // 0x0240 (size: 0x8)
    class UNiagaraSystem* _firePointsEffect;                                          // 0x0250 (size: 0x8)
    FFloatInterval _firePointsLifetime;                                               // 0x0258 (size: 0x8)
    FVector2D _firePointsBaseSize;                                                    // 0x0260 (size: 0x8)
    FFloatInterval _firePointsSizeScale;                                              // 0x0268 (size: 0x8)
    int32 _maxFirePointsNumPerObject;                                                 // 0x0270 (size: 0x4)

}; // Size: 0x450

class UFlareItemComponent : public UIgnitableItemComponent
{
    FLinearColor _pointLightColor;                                                    // 0x01A0 (size: 0x10)
    class UMaterialInterface* _pointLightMaterial;                                    // 0x01B0 (size: 0x8)

}; // Size: 0x1B8

class UFloatingWidgetCanvas : public UCanvasPanel
{
}; // Size: 0x148

class UFoliageAssetData : public UAssetUserData
{
    EFoliageType Type;                                                                // 0x0028 (size: 0x1)
    FFoliageGeneralData GeneralData;                                                  // 0x002C (size: 0x14)
    FFoliageEffectsData EffectsData;                                                  // 0x0040 (size: 0x18)
    FFoliageAIPerceptionData AIPerceptionData;                                        // 0x0058 (size: 0x4)
    FFoliageCanopyData CanopyData;                                                    // 0x005C (size: 0x40)

}; // Size: 0xA0

class UFoliageInstanceCache : public UObject
{
}; // Size: 0xD0

class UFoliageInstancedBush : public UFoliageInstancedComponent
{
}; // Size: 0x6C0

class UFoliageInstancedComponent : public UFoliageInstancedStaticMeshComponent
{
}; // Size: 0x6C0

class UFoliageInstancedGrass : public UFoliageInstancedComponent
{
}; // Size: 0x6C0

class UFoliageInstancedTree : public UFoliageInstancedComponent
{
}; // Size: 0x6C0

class UFoodItemEntitySetup : public UItemEntitySetup
{
}; // Size: 0x90

class UForceUnlockItemTag : public UBaseItemTag
{
}; // Size: 0x30

class UForeignSubstance : public UObject
{
    FText _name;                                                                      // 0x0028 (size: 0x18)
    EDisposition _disposition;                                                        // 0x0040 (size: 0x1)
    float _absorptionCapacity;                                                        // 0x0044 (size: 0x4)
    float _absorptionRate;                                                            // 0x0048 (size: 0x4)
    float _baseDiscardRate;                                                           // 0x004C (size: 0x4)
    TMap<class TSubclassOf<UForeignSubstance>, class FRuntimeFloatCurve> _discardRateMultiplierPerOtherSubstance; // 0x0050 (size: 0x50)
    float _amountToDiscardPerWaterTransferredToBladder;                               // 0x00A0 (size: 0x4)

}; // Size: 0xA8

class UFortificationComponent : public UStaticMeshComponent
{
    class UParticleSystem* _destructionParticles;                                     // 0x0528 (size: 0x8)
    class UAkAudioEvent* _destructionAudio;                                           // 0x0530 (size: 0x8)
    float _health;                                                                    // 0x0538 (size: 0x4)
    FRepairableParams _repairableParams;                                              // 0x0540 (size: 0x38)
    float _collisionEnergyResistance;                                                 // 0x0578 (size: 0x4)
    float _explosionResistance;                                                       // 0x057C (size: 0x4)
    float _hardness;                                                                  // 0x0580 (size: 0x4)

}; // Size: 0x590

class UFortificationEntityComponentSave : public UObject
{
    FFortificationData FortificationData;                                             // 0x0028 (size: 0x28)

}; // Size: 0x50

class UFortificationEntityComponentSetup : public UEntityComponentSetup
{
}; // Size: 0x48

class UFortificationManager : public UActorComponent
{

    void NetMulticast_UpdateFortification(int32 dataVersion, FVector fortifiableLocation, const FFortificationData& fortificationRepData);
    void NetMulticast_RemoveAllFortifications(int32 dataVersion, FVector fortifiableLocation);
    void NetMulticast_DestroyFortification(int32 dataVersion, FVector fortifiableLocation, FVector fortificationLocation);
    void NetMulticast_AddFortifications(int32 dataVersion, FVector fortifiableLocation, const TArray<FFortificationData>& fortificationsRepData);
    void NetMulticast_AddFortification(int32 dataVersion, FVector fortifiableLocation, const FFortificationData& fortificationRepData);
}; // Size: 0x1C8

class UFuelItemTag : public UBaseItemTag
{
    FCombustibleItemParams CombustionParams;                                          // 0x0030 (size: 0x8)

}; // Size: 0x38

class UFueledHeatSource : public UObject
{
    FHeatSourceParameters _heatSourceParams;                                          // 0x0030 (size: 0x24)
    class UStaticMeshComponent* _interactionHitComponent;                             // 0x0058 (size: 0x8)
    class UParticleSystemComponent* _fireParticlesComponent;                          // 0x0068 (size: 0x8)
    class UNiagaraComponent* _niagaraFireParticlesComponent;                          // 0x0070 (size: 0x8)
    TArray<FParameterInt32> _particleParametersInt32;                                 // 0x0078 (size: 0x10)
    TArray<FParameterFloat> _particleParametersFloat;                                 // 0x0088 (size: 0x10)
    TArray<FParameterVector> _particleParametersVector;                               // 0x0098 (size: 0x10)
    TArray<FParameterVector4> _particleParametersVector4;                             // 0x00A8 (size: 0x10)
    class UPointLightComponent* _fireLightComponent;                                  // 0x00B8 (size: 0x8)
    float _maxFireLightIntensity;                                                     // 0x00C0 (size: 0x4)
    class UAkAudioEvent* _startBurningAudioEvent;                                     // 0x00C8 (size: 0x8)
    class UAkAudioEvent* _stopBurningAudioEvent;                                      // 0x00D0 (size: 0x8)
    class UAkComponent* _fireAudioComponent;                                          // 0x00D8 (size: 0x8)
    FTransform _fireTransform;                                                        // 0x00E0 (size: 0x30)
    class UStaticMeshComponent* _meshComponent;                                       // 0x0118 (size: 0x8)
    TArray<class UStaticMesh*> _swapMeshes;                                           // 0x0120 (size: 0x10)
    int32 _materialSwitchIndex;                                                       // 0x0130 (size: 0x4)
    class UMaterialInterface* _litMaterial;                                           // 0x0138 (size: 0x8)
    class UMaterialInterface* _unlitMaterial;                                         // 0x0140 (size: 0x8)
    FTransform _meshTransform;                                                        // 0x0150 (size: 0x30)
    float _fireDamageProcessingPeriod;                                                // 0x0184 (size: 0x4)
    float _fireBaseDamageToItemsPerSecond;                                            // 0x018C (size: 0x4)
    uint16 _repTemperature;                                                           // 0x0190 (size: 0x2)
    uint8 _isAvailableForCooking;                                                     // 0x0198 (size: 0x1)
    bool _yieldStateControlToDisableableComponent;                                    // 0x0199 (size: 0x1)
    float _temperatureReplicationInterval;                                            // 0x01A4 (size: 0x4)
    float _temperatureReplicationRadius;                                              // 0x01AC (size: 0x4)

    void OnRep_Temperature();
}; // Size: 0x220

class UFundsOverviewUIController : public UObject
{
}; // Size: 0x30

class UFuseItemTag : public UBaseItemTag
{
    float MaximumLoad;                                                                // 0x0030 (size: 0x4)
    float BaseHealthLossRate;                                                         // 0x0034 (size: 0x4)
    float AdditionalHealthLossRatePer100A;                                            // 0x0038 (size: 0x4)

}; // Size: 0x40

class UGameEventCardWidget : public UUserWidget
{
    class AGameEventBase* _gameEvent;                                                 // 0x0268 (size: 0x8)
    class UPrimaryButton* _joinButton;                                                // 0x0270 (size: 0x8)
    FText _joinEventTooltipText;                                                      // 0x0278 (size: 0x18)
    FText _registerForEventTooltipText;                                               // 0x0290 (size: 0x18)
    FText _cancelTooltipText;                                                         // 0x02A8 (size: 0x18)
    class UPrimaryButton* _joinBlueButton;                                            // 0x02C0 (size: 0x8)
    FText _joinBlueTeamTooltipText;                                                   // 0x02C8 (size: 0x18)
    class UPrimaryButton* _joinRedButton;                                             // 0x02E0 (size: 0x8)
    FText _joinRedTeamTooltipText;                                                    // 0x02E8 (size: 0x18)
    class UPrimaryButton* _switchTeamButton;                                          // 0x0300 (size: 0x8)
    FText _switchTeamTooltipText;                                                     // 0x0308 (size: 0x18)
    class UGameEventInfoWidget* _gameEventInfoWidget;                                 // 0x0320 (size: 0x8)
    class UOverlay* _scoreboardSlot;                                                  // 0x0328 (size: 0x8)
    class UTextBlock* _eventName;                                                     // 0x0330 (size: 0x8)
    class UTextBlock* _numberOfPlayersText;                                           // 0x0338 (size: 0x8)
    class UTextBlock* _roundsText;                                                    // 0x0340 (size: 0x8)
    class UTextBlock* _statusText;                                                    // 0x0348 (size: 0x8)
    class UTextBlock* _timeText;                                                      // 0x0350 (size: 0x8)
    class UImage* _screenshot;                                                        // 0x0358 (size: 0x8)
    class UTextBlock* _entryFeeTag;                                                   // 0x0360 (size: 0x8)
    class UOverlay* _buttons;                                                         // 0x0368 (size: 0x8)
    class UPrimaryButton* _leaveButton;                                               // 0x0370 (size: 0x8)
    FText _leaveEventTooltipText;                                                     // 0x0378 (size: 0x18)
    class UBorder* _joinDisabledMsgBorder;                                            // 0x0390 (size: 0x8)
    class UBorder* _cooldownThrobber;                                                 // 0x0398 (size: 0x8)
    FSlateBrush _defaultScreenshotBrush;                                              // 0x03A0 (size: 0x88)
    class UAkAudioEvent* _menuButtonClick;                                            // 0x0428 (size: 0x8)
    TSubclassOf<class UTextOnlyTooltip> _tooltipClass;                                // 0x0430 (size: 0x8)

    void OnSwitchTeamButtonClicked();
    void OnLeaveButtonClicked();
    void OnJoinRedButtonClicked();
    void OnJoinButtonClicked();
    void OnJoinBlueButtonClicked();
    class AGameEventBase* GetGameEvent();
}; // Size: 0x488

class UGameEventInfoWidget : public UUserWidget
{
    class UTextBlock* RespawnText;                                                    // 0x0268 (size: 0x8)
    class UTextBlock* MinPlayersText;                                                 // 0x0270 (size: 0x8)
    class UTextBlock* NumTeamsText;                                                   // 0x0278 (size: 0x8)
    class UTextBlock* DescriptionText;                                                // 0x0280 (size: 0x8)
    class UTextBlock* PrerequisitesText;                                              // 0x0288 (size: 0x8)
    class UTextBlock* WeaponsText;                                                    // 0x0290 (size: 0x8)
    class UTextBlock* RewardsText;                                                    // 0x0298 (size: 0x8)

}; // Size: 0x2A0

class UGameEventLeaderboardRow : public UUserWidget
{
    class UBorder* Background;                                                        // 0x0270 (size: 0x8)
    class UTextBlock* Player;                                                         // 0x0278 (size: 0x8)
    class UTextBlock* Fame;                                                           // 0x0280 (size: 0x8)
    class UTextBlock* Score;                                                          // 0x0288 (size: 0x8)
    class UTextBlock* KDA;                                                            // 0x0290 (size: 0x8)
    class UTextBlock* RankText;                                                       // 0x0298 (size: 0x8)
    FLinearColor BackgroundColor;                                                     // 0x02A0 (size: 0x10)

}; // Size: 0x2B0

class UGameEventLeaderboardWidget : public UUserWidget
{
    TSubclassOf<class UGameEventLeaderboardRow> _leaderboardRowClass;                 // 0x0298 (size: 0x8)
    int32 MaxStats;                                                                   // 0x02A0 (size: 0x4)
    class UVerticalBox* TopPlayers;                                                   // 0x02A8 (size: 0x8)
    class UVerticalBox* PlayerRanking;                                                // 0x02B0 (size: 0x8)
    class UCircularThrobber* CircularThrobber_Ranking;                                // 0x02B8 (size: 0x8)
    class UCircularThrobber* CircularThrobber_TopPlayers;                             // 0x02C0 (size: 0x8)

}; // Size: 0x2C8

class UGameEventLeftPanel : public UTabMenuPanel
{
    class UComboBoxWrapper* AllEventsComboBox;                                        // 0x0268 (size: 0x8)
    class UOverlay* EventArea;                                                        // 0x0270 (size: 0x8)
    class UVerticalBox* VerticalBox_4;                                                // 0x0278 (size: 0x8)
    class USizeBox* _eventSizeBox;                                                    // 0x0280 (size: 0x8)
    TArray<class AGameEventBase*> _allEvents;                                         // 0x0288 (size: 0x10)
    TArray<class AGameEventBase*> _currentEvents;                                     // 0x0298 (size: 0x10)
    TArray<class AGameEventBase*> _nextEvents;                                        // 0x02A8 (size: 0x10)

    void OnEventComboBoxSelectionChanged(FString SelectedItem, TEnumAsByte<ESelectInfo::Type> SelectionType);
    void OnEventComboBoxOpened();
}; // Size: 0x2B8

class UGameEventLoadoutMenuWidget : public UUserWidget
{
    TArray<class UItemSelection*> _mandatoryGear;                                     // 0x0270 (size: 0x10)
    class UItemSelectionSlotWidget* _primarySelection;                                // 0x0280 (size: 0x8)
    class UItemSelectionSlotWidget* _secondarySelection;                              // 0x0288 (size: 0x8)
    class UItemSelectionSlotWidget* _tertiarySelection;                               // 0x0290 (size: 0x8)
    class UItemSelectionSlotWidget* _outfitSelection;                                 // 0x0298 (size: 0x8)

    void SetGameEvent(class AGameEventBase* gameEvent);
    class AGameEventBase* GetGameEvent();
    void CreateLoadout(const TSubclassOf<class AItem>& primary, const TSubclassOf<class AItem>& secondary, const TSubclassOf<class AItem>& tertiary, const TArray<class TSubclassOf<AItem>>& outfit, const TArray<class TSubclassOf<AItem>>& support, class UPrisonerLoadout* loadout);
}; // Size: 0x2A0

class UGameEventNotificationPanel : public UUserWidget
{
    class UBorder* _nextEventBox;                                                     // 0x0270 (size: 0x8)
    class UTextBlock* _nextEventText;                                                 // 0x0278 (size: 0x8)
    class UTextBlock* _nextEventCountdown;                                            // 0x0280 (size: 0x8)
    class UBorder* _eventCancelBox;                                                   // 0x0288 (size: 0x8)
    class UTextBlock* _eventCancelTime;                                               // 0x0290 (size: 0x8)
    class UBorder* _eventTimeBox;                                                     // 0x0298 (size: 0x8)
    class UTextBlock* _eventTimeText;                                                 // 0x02A0 (size: 0x8)
    FLinearColor _nonAlertedColor;                                                    // 0x02A8 (size: 0x10)
    FLinearColor _alertedColor;                                                       // 0x02B8 (size: 0x10)

}; // Size: 0x2C8

class UGameEventNotificationUIController : public UObject
{
}; // Size: 0x30

class UGameEventParticipantInfoCardWidget : public UUserWidget
{
    class UTextBlock* Name;                                                           // 0x0268 (size: 0x8)
    class UTextBlock* SteamID;                                                        // 0x0270 (size: 0x8)
    class UTextBlock* Ping;                                                           // 0x0278 (size: 0x8)
    class UTextBlock* FameLevel;                                                      // 0x0280 (size: 0x8)
    class UTextBlock* Kills;                                                          // 0x0288 (size: 0x8)
    class UTextBlock* Deaths;                                                         // 0x0290 (size: 0x8)
    class UTextBlock* Assists;                                                        // 0x0298 (size: 0x8)
    class UTextBlock* Revenges;                                                       // 0x02A0 (size: 0x8)
    class UTextBlock* Headshots;                                                      // 0x02A8 (size: 0x8)

}; // Size: 0x2B0

class UGameEventParticipantStats : public UObject
{
    float _score;                                                                     // 0x0028 (size: 0x4)

    int32 GetTeamKills();
    int32 GetSuicides();
    float GetScore();
    int32 GetHeadshots();
    int32 GetEnemyKills();
    int32 GetDeaths();
    int32 GetAssists();
}; // Size: 0x48

class UGameEventParticipantStatsWidget : public UUserWidget
{
    class AGameEventBase* _gameEvent;                                                 // 0x0268 (size: 0x8)
    int32 _index;                                                                     // 0x0270 (size: 0x4)
    class UGameEventScoreboardWidget* _scoreboard;                                    // 0x0278 (size: 0x8)
    int32 _teamIndex;                                                                 // 0x0280 (size: 0x4)

}; // Size: 0x310

class UGameEventParticipantStatsWidgetCTF : public UGameEventParticipantStatsWidget
{
    class UTextBlock* Assists;                                                        // 0x0310 (size: 0x8)
    class UTextBlock* Captures;                                                       // 0x0318 (size: 0x8)
    class UTextBlock* Deaths;                                                         // 0x0320 (size: 0x8)
    class UTextBlock* Headshots;                                                      // 0x0328 (size: 0x8)
    class UTextBlock* Kills;                                                          // 0x0330 (size: 0x8)
    class UTextBlock* Number;                                                         // 0x0338 (size: 0x8)
    class UTextBlock* PlayerName;                                                     // 0x0340 (size: 0x8)
    class UTextBlock* Score;                                                          // 0x0348 (size: 0x8)
    class UBorder* NumberBorder;                                                      // 0x0350 (size: 0x8)
    class UBorder* SelectedOverlay;                                                   // 0x0358 (size: 0x8)
    class UBorder* InactiveOverlay;                                                   // 0x0360 (size: 0x8)
    class UBorder* Border_383;                                                        // 0x0368 (size: 0x8)
    class UBorder* Border_386;                                                        // 0x0370 (size: 0x8)
    class UBorder* Border_0;                                                          // 0x0378 (size: 0x8)
    class UBorder* Border_385;                                                        // 0x0380 (size: 0x8)
    class UBorder* Border_388;                                                        // 0x0388 (size: 0x8)
    class UBorder* Border_387;                                                        // 0x0390 (size: 0x8)
    class UBorder* Border_1;                                                          // 0x0398 (size: 0x8)

}; // Size: 0x3A0

class UGameEventParticipantStatsWidgetCTFMini : public UGameEventParticipantStatsWidget
{
    class UTextBlock* Captures;                                                       // 0x0310 (size: 0x8)
    class UTextBlock* Kills;                                                          // 0x0318 (size: 0x8)
    class UTextBlock* Number;                                                         // 0x0320 (size: 0x8)
    class UTextBlock* PlayerName;                                                     // 0x0328 (size: 0x8)
    class UTextBlock* Score;                                                          // 0x0330 (size: 0x8)
    class UTextBlock* Deaths;                                                         // 0x0338 (size: 0x8)
    class UBorder* Border_86;                                                         // 0x0340 (size: 0x8)

}; // Size: 0x348

class UGameEventParticipantStatsWidgetDeathmatch : public UGameEventParticipantStatsWidget
{
    class UTextBlock* Assists;                                                        // 0x0310 (size: 0x8)
    class UTextBlock* Deaths;                                                         // 0x0318 (size: 0x8)
    class UTextBlock* Headshots;                                                      // 0x0320 (size: 0x8)
    class UTextBlock* Kills;                                                          // 0x0328 (size: 0x8)
    class UTextBlock* Number;                                                         // 0x0330 (size: 0x8)
    class UTextBlock* PlayerName;                                                     // 0x0338 (size: 0x8)
    class UTextBlock* Score;                                                          // 0x0340 (size: 0x8)
    class UTextBlock* Suicides;                                                       // 0x0348 (size: 0x8)
    class UBorder* NumberBorder;                                                      // 0x0350 (size: 0x8)
    class UBorder* SelectedOverlay;                                                   // 0x0358 (size: 0x8)
    class UBorder* InactiveOverlay;                                                   // 0x0360 (size: 0x8)
    class UBorder* Border_383;                                                        // 0x0368 (size: 0x8)
    class UBorder* Border_384;                                                        // 0x0370 (size: 0x8)
    class UBorder* Border_385;                                                        // 0x0378 (size: 0x8)
    class UBorder* Border_386;                                                        // 0x0380 (size: 0x8)
    class UBorder* Border_387;                                                        // 0x0388 (size: 0x8)
    class UBorder* Border_388;                                                        // 0x0390 (size: 0x8)
    class UBorder* Border_0;                                                          // 0x0398 (size: 0x8)

}; // Size: 0x3A0

class UGameEventParticipantStatsWidgetDeathmatchMini : public UGameEventParticipantStatsWidget
{
    class UTextBlock* Deaths;                                                         // 0x0310 (size: 0x8)
    class UTextBlock* Kills;                                                          // 0x0318 (size: 0x8)
    class UTextBlock* Number;                                                         // 0x0320 (size: 0x8)
    class UTextBlock* PlayerName;                                                     // 0x0328 (size: 0x8)
    class UTextBlock* Score;                                                          // 0x0330 (size: 0x8)
    class UBorder* Border_86;                                                         // 0x0338 (size: 0x8)

}; // Size: 0x340

class UGameEventParticipantStatsWidgetDropZone : public UGameEventParticipantStatsWidget
{
    class UTextBlock* Assists;                                                        // 0x0310 (size: 0x8)
    class UTextBlock* Captures;                                                       // 0x0318 (size: 0x8)
    class UTextBlock* Deaths;                                                         // 0x0320 (size: 0x8)
    class UTextBlock* Headshots;                                                      // 0x0328 (size: 0x8)
    class UTextBlock* Kills;                                                          // 0x0330 (size: 0x8)
    class UTextBlock* Number;                                                         // 0x0338 (size: 0x8)
    class UTextBlock* PlayerName;                                                     // 0x0340 (size: 0x8)
    class UTextBlock* Suicides;                                                       // 0x0348 (size: 0x8)
    class UTextBlock* Score;                                                          // 0x0350 (size: 0x8)
    class UBorder* NumberBorder;                                                      // 0x0358 (size: 0x8)
    class UBorder* SelectedOverlay;                                                   // 0x0360 (size: 0x8)
    class UBorder* InactiveOverlay;                                                   // 0x0368 (size: 0x8)
    class UBorder* Border_383;                                                        // 0x0370 (size: 0x8)
    class UBorder* Border_0;                                                          // 0x0378 (size: 0x8)
    class UBorder* Border_386;                                                        // 0x0380 (size: 0x8)
    class UBorder* Border_385;                                                        // 0x0388 (size: 0x8)
    class UBorder* Border_388;                                                        // 0x0390 (size: 0x8)
    class UBorder* Border_2;                                                          // 0x0398 (size: 0x8)
    class UBorder* Border_387;                                                        // 0x03A0 (size: 0x8)
    class UBorder* Border_1;                                                          // 0x03A8 (size: 0x8)

}; // Size: 0x3B0

class UGameEventParticipantStatsWidgetDropZoneMini : public UGameEventParticipantStatsWidget
{
    class UTextBlock* Captures;                                                       // 0x0310 (size: 0x8)
    class UTextBlock* Deaths;                                                         // 0x0318 (size: 0x8)
    class UTextBlock* Kills;                                                          // 0x0320 (size: 0x8)
    class UTextBlock* Number;                                                         // 0x0328 (size: 0x8)
    class UTextBlock* PlayerName;                                                     // 0x0330 (size: 0x8)
    class UTextBlock* Score;                                                          // 0x0338 (size: 0x8)
    class UBorder* Border_86;                                                         // 0x0340 (size: 0x8)

}; // Size: 0x348

class UGameEventParticipantStatsWidgetTeamDeathmatch : public UGameEventParticipantStatsWidget
{
    class UTextBlock* Assists;                                                        // 0x0310 (size: 0x8)
    class UTextBlock* Deaths;                                                         // 0x0318 (size: 0x8)
    class UTextBlock* Headshots;                                                      // 0x0320 (size: 0x8)
    class UTextBlock* Kills;                                                          // 0x0328 (size: 0x8)
    class UTextBlock* Number;                                                         // 0x0330 (size: 0x8)
    class UTextBlock* PlayerName;                                                     // 0x0338 (size: 0x8)
    class UTextBlock* Score;                                                          // 0x0340 (size: 0x8)
    class UTextBlock* Suicides;                                                       // 0x0348 (size: 0x8)
    class UBorder* NumberBorder;                                                      // 0x0350 (size: 0x8)
    class UBorder* SelectedOverlay;                                                   // 0x0358 (size: 0x8)
    class UBorder* InactiveOverlay;                                                   // 0x0360 (size: 0x8)
    class UBorder* Border_383;                                                        // 0x0368 (size: 0x8)
    class UBorder* Border_0;                                                          // 0x0370 (size: 0x8)
    class UBorder* Border_385;                                                        // 0x0378 (size: 0x8)
    class UBorder* Border_388;                                                        // 0x0380 (size: 0x8)
    class UBorder* Border_2;                                                          // 0x0388 (size: 0x8)
    class UBorder* Border_387;                                                        // 0x0390 (size: 0x8)
    class UBorder* Border_1;                                                          // 0x0398 (size: 0x8)

}; // Size: 0x3A0

class UGameEventParticipantStatsWidgetTeamDeathmatchMini : public UGameEventParticipantStatsWidget
{
    class UTextBlock* Deaths;                                                         // 0x0310 (size: 0x8)
    class UTextBlock* Kills;                                                          // 0x0318 (size: 0x8)
    class UTextBlock* Number;                                                         // 0x0320 (size: 0x8)
    class UTextBlock* PlayerName;                                                     // 0x0328 (size: 0x8)
    class UTextBlock* Score;                                                          // 0x0330 (size: 0x8)
    class UBorder* Border_86;                                                         // 0x0338 (size: 0x8)

}; // Size: 0x340

class UGameEventRightPanel : public UTabMenuPanel
{
}; // Size: 0x268

class UGameEventRoundInfoWidget : public UUserWidget
{
    class AGameEventBase* _gameEvent;                                                 // 0x0268 (size: 0x8)
    class UTextBlock* TimeLeft;                                                       // 0x0270 (size: 0x8)
    class UTextBlock* TimeLeftLabel;                                                  // 0x0278 (size: 0x8)
    class UTextBlock* RoundStatus;                                                    // 0x0280 (size: 0x8)
    class UHorizontalBox* TimeLeftBox;                                                // 0x0288 (size: 0x8)

}; // Size: 0x290

class UGameEventRoundInfoWidgetDeathmatch : public UGameEventRoundInfoWidget
{
    class UTextBlock* KillLimit;                                                      // 0x0290 (size: 0x8)

}; // Size: 0x298

class UGameEventRoundInfoWidgetDropZone : public UGameEventRoundInfoWidget
{
    class UTextBlock* TextBlock_0;                                                    // 0x0290 (size: 0x8)
    class UTextBlock* Objective;                                                      // 0x0298 (size: 0x8)

}; // Size: 0x2A0

class UGameEventRoundInfoWidgetTeamDeathmatch : public UGameEventRoundInfoWidget
{
    class UTextBlock* KillLimit;                                                      // 0x0290 (size: 0x8)

}; // Size: 0x298

class UGameEventScoreboardWidget : public UUserWidget
{
    TSubclassOf<class UGameEventTeamInfoWidget> TeamInfoWidgetClass;                  // 0x0268 (size: 0x8)
    TArray<class UGameEventParticipantStatsWidget*> StatWidgets;                      // 0x0288 (size: 0x10)
    TArray<FGameEventTeamColours> TeamColours;                                        // 0x0298 (size: 0x10)
    class AGameEventBase* _gameEvent;                                                 // 0x02A8 (size: 0x8)
    int32 _selected;                                                                  // 0x02B0 (size: 0x4)
    class UBorder* RoundInfo;                                                         // 0x02B8 (size: 0x8)
    class UTextBlock* TextBlock_0;                                                    // 0x02C0 (size: 0x8)
    class UGameEventParticipantInfoCardWidget* UI_GameEventParticipantInfoCardWidget; // 0x02C8 (size: 0x8)
    class UUniformGridPanel* TeamGrid;                                                // 0x02D0 (size: 0x8)
    TArray<class UGameEventTeamInfoWidget*> TeamWidgets_0;                            // 0x02D8 (size: 0x10)
    TArray<FText> TeamNames;                                                          // 0x02E8 (size: 0x10)

}; // Size: 0x2F8

class UGameEventScoreboardWidgetMini : public UGameEventScoreboardWidget
{
    class UBorder* Header;                                                            // 0x02F8 (size: 0x8)
    class UScrollBox* Rows;                                                           // 0x0300 (size: 0x8)
    class UUniformGridPanel* Info;                                                    // 0x0308 (size: 0x8)
    class UTextBlock* EmptyMsg;                                                       // 0x0310 (size: 0x8)

}; // Size: 0x318

class UGameEventTeamHeaderWidget : public UUserWidget
{
}; // Size: 0x270

class UGameEventTeamHeaderWidgetCTF : public UGameEventTeamHeaderWidget
{
    TSubclassOf<class UWinCounterWidget> WinCounterWidgetClass;                       // 0x0270 (size: 0x8)
    class UTextBlock* TeamNameLeft;                                                   // 0x0278 (size: 0x8)
    class UTextBlock* TeamNameRight;                                                  // 0x0280 (size: 0x8)
    class UImage* BackgroundImage;                                                    // 0x0288 (size: 0x8)
    class UHorizontalBox* LeftSideLayoutBox;                                          // 0x0290 (size: 0x8)
    class UHorizontalBox* RightSideLayoutBox;                                         // 0x0298 (size: 0x8)
    class UHorizontalBox* LeftStarBox;                                                // 0x02A0 (size: 0x8)
    class UHorizontalBox* RightStarBox;                                               // 0x02A8 (size: 0x8)
    class UTextBlock* LeftTeamScore;                                                  // 0x02B0 (size: 0x8)
    class UTextBlock* RightTeamScore;                                                 // 0x02B8 (size: 0x8)
    class UTextBlock* PlayerTextLeft;                                                 // 0x02C0 (size: 0x8)
    class UTextBlock* PlayerTextRight;                                                // 0x02C8 (size: 0x8)
    class AGameEventBase* _gameEvent;                                                 // 0x02D0 (size: 0x8)

}; // Size: 0x2D8

class UGameEventTeamHeaderWidgetDropZone : public UGameEventTeamHeaderWidget
{
    TSubclassOf<class UWinCounterWidget> WinCounterWidgetClass;                       // 0x0270 (size: 0x8)
    class UTextBlock* TeamNameLeft;                                                   // 0x0278 (size: 0x8)
    class UTextBlock* TeamNameRight;                                                  // 0x0280 (size: 0x8)
    class UImage* BackgroundImage;                                                    // 0x0288 (size: 0x8)
    class UHorizontalBox* LeftSideLayoutBox;                                          // 0x0290 (size: 0x8)
    class UHorizontalBox* RightSideLayoutBox;                                         // 0x0298 (size: 0x8)
    class UHorizontalBox* LeftStarBox;                                                // 0x02A0 (size: 0x8)
    class UHorizontalBox* RightStarBox;                                               // 0x02A8 (size: 0x8)
    class UTextBlock* LeftTeamScore;                                                  // 0x02B0 (size: 0x8)
    class UTextBlock* RightTeamScore;                                                 // 0x02B8 (size: 0x8)
    class UTextBlock* PlayerTextLeft;                                                 // 0x02C0 (size: 0x8)
    class UTextBlock* PlayerTextRight;                                                // 0x02C8 (size: 0x8)
    class AGameEventBase* _gameEvent;                                                 // 0x02D0 (size: 0x8)

}; // Size: 0x2D8

class UGameEventTeamHeaderWidgetTeamDeathmatch : public UGameEventTeamHeaderWidget
{
    TSubclassOf<class UWinCounterWidget> WinCounterWidgetClass;                       // 0x0270 (size: 0x8)
    class UTextBlock* TeamNameLeft;                                                   // 0x0278 (size: 0x8)
    class UTextBlock* TeamNameRight;                                                  // 0x0280 (size: 0x8)
    class UImage* BackgroundImage;                                                    // 0x0288 (size: 0x8)
    class UHorizontalBox* LeftSideLayoutBox;                                          // 0x0290 (size: 0x8)
    class UHorizontalBox* RightSideLayoutBox;                                         // 0x0298 (size: 0x8)
    class UHorizontalBox* LeftStarBox;                                                // 0x02A0 (size: 0x8)
    class UHorizontalBox* RightStarBox;                                               // 0x02A8 (size: 0x8)
    class UTextBlock* LeftTeamScore;                                                  // 0x02B0 (size: 0x8)
    class UTextBlock* RightTeamScore;                                                 // 0x02B8 (size: 0x8)
    class UTextBlock* PlayerTextLeft;                                                 // 0x02C0 (size: 0x8)
    class UTextBlock* PlayerTextRight;                                                // 0x02C8 (size: 0x8)
    class AGameEventBase* _gameEvent;                                                 // 0x02D0 (size: 0x8)

}; // Size: 0x2D8

class UGameEventTeamInfoWidget : public UUserWidget
{
    class UPanelWidget* StatTextContainer;                                            // 0x0268 (size: 0x8)
    class UBorder* TeamHeader;                                                        // 0x0270 (size: 0x8)
    class UScrollBox* TeamRows;                                                       // 0x0278 (size: 0x8)
    class UGameEventTeamHeaderWidget* HeaderWidget;                                   // 0x0288 (size: 0x8)

}; // Size: 0x2F0

class UGameEventsUIController : public UObject
{
}; // Size: 0x40

class UGamePaymentTransactionRequest : public UPlayerRpcChannelServerRequest
{
}; // Size: 0x40

class UGamePaymentTransactionResponse : public UPlayerRpcChannelServerResponse
{
}; // Size: 0x30

class UGameResourceConsumptionData : public UObject
{
    EGameResourceConsumptionMethod ConsumptionMethod;                                 // 0x0028 (size: 0x1)
    FGameplayTag ConsumptionDuration;                                                 // 0x002C (size: 0x8)
    FGameplayTag DigestionDuration;                                                   // 0x0034 (size: 0x8)
    float Density;                                                                    // 0x003C (size: 0x4)
    float TotalCarbohydrate;                                                          // 0x0040 (size: 0x4)
    float Fiber;                                                                      // 0x0044 (size: 0x4)
    float Starch;                                                                     // 0x0048 (size: 0x4)
    float Sugars;                                                                     // 0x004C (size: 0x4)
    float TotalFat;                                                                   // 0x0050 (size: 0x4)
    float SaturatedFat;                                                               // 0x0054 (size: 0x4)
    float Protein;                                                                    // 0x0058 (size: 0x4)
    float VitaminA;                                                                   // 0x005C (size: 0x4)
    float VitaminC;                                                                   // 0x0060 (size: 0x4)
    float VitaminD;                                                                   // 0x0064 (size: 0x4)
    float VitaminE;                                                                   // 0x0068 (size: 0x4)
    float VitaminK;                                                                   // 0x006C (size: 0x4)
    float VitaminB1;                                                                  // 0x0070 (size: 0x4)
    float VitaminB2;                                                                  // 0x0074 (size: 0x4)
    float VitaminB3;                                                                  // 0x0078 (size: 0x4)
    float VitaminB6;                                                                  // 0x007C (size: 0x4)
    float VitaminB9;                                                                  // 0x0080 (size: 0x4)
    float VitaminB12;                                                                 // 0x0084 (size: 0x4)
    float VitaminB5;                                                                  // 0x0088 (size: 0x4)
    float VitaminB4;                                                                  // 0x008C (size: 0x4)
    float Calcium;                                                                    // 0x0090 (size: 0x4)
    float Iron;                                                                       // 0x0094 (size: 0x4)
    float Magnesium;                                                                  // 0x0098 (size: 0x4)
    float Phosphorus;                                                                 // 0x009C (size: 0x4)
    float Potassium;                                                                  // 0x00A0 (size: 0x4)
    float Sodium;                                                                     // 0x00A4 (size: 0x4)
    float Zinc;                                                                       // 0x00A8 (size: 0x4)
    float Copper;                                                                     // 0x00AC (size: 0x4)
    float Manganese;                                                                  // 0x00B0 (size: 0x4)
    float Selenium;                                                                   // 0x00B4 (size: 0x4)
    float Alcohol;                                                                    // 0x00B8 (size: 0x4)
    float Water;                                                                      // 0x00BC (size: 0x4)
    TArray<FGameResourceConsumptionDataForeignSubstance> ForeignSubstances;           // 0x00C0 (size: 0x10)
    float DisgustAmountPerGramOfRawFood;                                              // 0x00D0 (size: 0x4)
    TArray<class UConsumableDigestionHandler*> DigestionHandlers;                     // 0x00D8 (size: 0x10)

}; // Size: 0xE8

class UGameResourceContainerEntityComponentSave : public UObject
{
    TSubclassOf<class UGameResourceType> ResourceType;                                // 0x0028 (size: 0x8)
    float ResourceAmount;                                                             // 0x0030 (size: 0x4)
    float MaxResourceAmount;                                                          // 0x0034 (size: 0x4)
    float ResourceUsageRate;                                                          // 0x0038 (size: 0x4)
    bool ResourceUsageEnabled;                                                        // 0x003C (size: 0x1)

}; // Size: 0x40

class UGameResourceContainerEntityComponentSetup : public UEntityComponentSetup
{
    TSubclassOf<class UGameResourceType> AcceptedResourceType;                        // 0x0048 (size: 0x8)
    TSubclassOf<class UGameResourceType> DefaultResourceType;                         // 0x0050 (size: 0x8)
    float MaxResourceAmount;                                                          // 0x0058 (size: 0x4)
    float ResourceAmount;                                                             // 0x005C (size: 0x4)
    float ResourceUsageRate;                                                          // 0x0060 (size: 0x4)
    float MinTickInterval;                                                            // 0x0064 (size: 0x4)
    float MinResourceAmountRatioChangeToTick;                                         // 0x0068 (size: 0x4)
    bool ShouldRemoveResourceTypeWhenEmptied;                                         // 0x006C (size: 0x1)

}; // Size: 0x70

class UGameResourceContainerProxyForInfiniteResource : public UObject
{
    TSubclassOf<class UGameResourceType> _resourceType;                               // 0x0030 (size: 0x8)
    TArray<class UBaseItemTag*> _requiredItemTagsForFilling;                          // 0x0078 (size: 0x10)

}; // Size: 0x88

class UGameResourceContainerProxyForReplenishableResource : public UObject
{
}; // Size: 0x48

class UGameResourceContainerProxyRegistry : public UActorComponent
{
}; // Size: 0x150

class UGameResourceItemTag : public UBaseItemTag
{
    TSubclassOf<class UGameResourceType> ResourceType;                                // 0x0030 (size: 0x8)
    FGameplayTagContainer SocketTypes;                                                // 0x0038 (size: 0x20)
    float ResourceAmountPerUse;                                                       // 0x0058 (size: 0x4)
    TArray<class UBaseItemTag*> RequiredItemTagsForFueling;                           // 0x0060 (size: 0x10)

}; // Size: 0x70

class UGameResourceSlotEntityComponentSave : public UObject
{
    FEntityComponentId ResourceComponentId;                                           // 0x0028 (size: 0x10)

}; // Size: 0x38

class UGameResourceSlotEntityComponentSetup : public UEntityComponentSetup
{
    TSubclassOf<class UGameResourceType> ResourceType;                                // 0x0048 (size: 0x8)
    FGameplayTagContainer ResourceSocketTypes;                                        // 0x0050 (size: 0x20)
    float RequiredResourceAmount;                                                     // 0x0070 (size: 0x4)
    TSubclassOf<class UEntitySetup> ResourceToSpawn;                                  // 0x0078 (size: 0x8)
    FName ComponentNameToAttach;                                                      // 0x0080 (size: 0x8)

}; // Size: 0x88

class UGameResourceType : public UObject
{
    FText ResourceName;                                                               // 0x0028 (size: 0x18)
    FString ConfigSectionName;                                                        // 0x0040 (size: 0x10)
    class UGameResourceWashData* WashData;                                            // 0x0050 (size: 0x8)
    bool CanPutOutFireWith;                                                           // 0x0058 (size: 0x1)
    bool CanDisinfectWith;                                                            // 0x0059 (size: 0x1)
    FGameplayTag CookingIngredientTag;                                                // 0x005C (size: 0x8)
    TSoftObjectPtr<UTexture2D> ResourceImage;                                         // 0x0068 (size: 0x28)
    FLinearColor Color;                                                               // 0x0090 (size: 0x10)
    class UGameResourceConsumptionData* ConsumptionData;                              // 0x00A0 (size: 0x8)
    TArray<class UBaseItemTag*> ItemTags;                                             // 0x00A8 (size: 0x10)

}; // Size: 0xB8

class UGameResourceType_Alcohol : public UGameResourceType_Liquid
{
}; // Size: 0xB8

class UGameResourceType_Liquid : public UGameResourceType
{
}; // Size: 0xB8

class UGameResourceType_Money : public UGameResourceType
{
}; // Size: 0xB8

class UGameResourceType_SoftDrink : public UGameResourceType_Water
{
}; // Size: 0xC0

class UGameResourceType_Solid : public UGameResourceType
{
}; // Size: 0xB8

class UGameResourceType_Water : public UGameResourceType_Liquid
{
    float Salinity;                                                                   // 0x00B8 (size: 0x4)

}; // Size: 0xC0

class UGameResourceWashData : public UDataAsset
{
    bool CanWashItemsWith;                                                            // 0x0030 (size: 0x1)
    TSubclassOf<class UWashEyesHandler> WashEyesHandler;                              // 0x0038 (size: 0x8)

}; // Size: 0x40

class UGameplayLog : public UObject
{
}; // Size: 0x40

class UGasMaskTag : public UBaseItemTag
{
}; // Size: 0x30

class UGaugeAssetData : public UAssetUserData
{
    FGameplayTag GaugeTag;                                                            // 0x0028 (size: 0x8)
    float MinimumValue;                                                               // 0x0030 (size: 0x4)
    float MaximumValue;                                                               // 0x0034 (size: 0x4)
    FTransform MinimumRelativeTransform;                                              // 0x0040 (size: 0x30)
    FTransform MaximumRelativeTransform;                                              // 0x0070 (size: 0x30)
    float TransitionDuration;                                                         // 0x00A0 (size: 0x4)

}; // Size: 0xE0

class UGaugeClusterComponent : public UActorComponent
{
}; // Size: 0x1F0

class UGaugeLightAssetData : public UAssetUserData
{
    FGameplayTag GaugeTag;                                                            // 0x0028 (size: 0x8)
    FVector UnderTheLimitLightColor;                                                  // 0x0030 (size: 0xC)
    FVector OverTheLimitLightColor;                                                   // 0x003C (size: 0xC)

}; // Size: 0x48

class UGeigerCounterAnimInstance : public UAnimInstance
{
    float _radiationRatio;                                                            // 0x02C0 (size: 0x4)
    bool _isTurnedOn;                                                                 // 0x02C4 (size: 0x1)

}; // Size: 0x2D0

class UGenericTooltip : public UUserWidget
{
    FTextBlockStyle TextStyle;                                                        // 0x0268 (size: 0x270)
    class UExtendedRichTextBlock* DescriptionText;                                    // 0x04D8 (size: 0x8)

}; // Size: 0x4E0

class UGhostTrailComponent : public UActorComponent
{

    void SetTrailActive(bool Active);
    bool GetTrailActive();
}; // Size: 0xB0

class UGlobalUIData : public UObject
{
    TSubclassOf<class UModularTooltip> DefaultModularTooltipClass;                    // 0x0028 (size: 0x8)
    TMap<class TSubclassOf<UModularTooltipElementData>, class TSubclassOf<UModularTooltipElement>> ModularTooltipElementClassMapping; // 0x0030 (size: 0x50)
    TMap<class TSubclassOf<UModularCodexEntryElementData>, class TSubclassOf<UModularCodexEntryElement>> ModularCodexEntryElementClassMapping; // 0x0080 (size: 0x50)
    TMap<class ECodexCategory, class FSlateBrush> CodexCategoryIconTypeMap;           // 0x00D0 (size: 0x50)
    TMap<class ESurvivalTipCodexCategory, class FSlateBrush> SurvivalTipCodexCategoryIconTypeMap; // 0x0120 (size: 0x50)
    TSubclassOf<class UManualEnhancedImageWidget> ManualEnhancedImageWidgetClass;     // 0x0170 (size: 0x8)
    TSubclassOf<class UManualEnhancedImageTextWidget> ManualEnhancedImageTextWidgetClass; // 0x0178 (size: 0x8)
    TSubclassOf<class UMessageBox> MessageBox;                                        // 0x0180 (size: 0x8)
    TSubclassOf<class UMessageBoxWithNote> MessageBoxWithNote;                        // 0x0188 (size: 0x8)
    TSubclassOf<class ULogoutMessageBox> LogoutMessageBox;                            // 0x0190 (size: 0x8)
    TSubclassOf<class UMessageBoxWithList> MessageBoxWithList;                        // 0x0198 (size: 0x8)
    TSubclassOf<class UMessageBoxWithEditableText> MessageBoxWithEditableText;        // 0x01A0 (size: 0x8)
    TSubclassOf<class UMessageBoxWithCheckBox> MessageBoxWithCheckBox;                // 0x01A8 (size: 0x8)
    TSubclassOf<class UMessageBox> PartialPriceSellConfirmation;                      // 0x01B0 (size: 0x8)
    TSubclassOf<class UUserWidget> MessageBoxButton;                                  // 0x01B8 (size: 0x8)
    TSubclassOf<class UUserWidget> LabeledSliderWithNumber;                           // 0x01C0 (size: 0x8)
    TSubclassOf<class UUserWidget> LabeledCarousel;                                   // 0x01C8 (size: 0x8)
    TSubclassOf<class UUserWidget> LabeledDropdown;                                   // 0x01D0 (size: 0x8)
    TSubclassOf<class UUserWidget> LabeledTextBlock;                                  // 0x01D8 (size: 0x8)
    TSubclassOf<class UUserWidget> LabeledControlMapping;                             // 0x01E0 (size: 0x8)
    TSubclassOf<class UUIRepresentableObjectWidget> UIRepresentableObjectWidgetSubtype; // 0x01E8 (size: 0x8)
    TMap<class EButtonType, class FButtonIcons> ButtonIconTypeMap;                    // 0x01F0 (size: 0x50)
    class UUISoundsData* UISoundsData;                                                // 0x0240 (size: 0x8)
    class UQuestUIData* QuestUIData;                                                  // 0x0248 (size: 0x8)
    TMap<class TSoftClassPtr<USkill>, class FGameplayTag> SkillClassToWidgetHighlightMap; // 0x0250 (size: 0x50)

}; // Size: 0x2A0

class UGloveStatsTag : public UBaseItemTag
{
    float ElectricalDamageModifier;                                                   // 0x0030 (size: 0x4)
    float LockpkickingPressureModifier;                                               // 0x0034 (size: 0x4)
    bool PreventsHandAbrasions;                                                       // 0x0038 (size: 0x1)
    float DecayMultiplierWhileDoingAbrasiveActions;                                   // 0x003C (size: 0x4)

}; // Size: 0x40

class UGradedArcedProgressBar : public UUserWidget
{
    class UImage* _fillImage;                                                         // 0x0268 (size: 0x8)
    class UMaterialInstanceConstant* _fillMaterial;                                   // 0x0270 (size: 0x8)
    FLinearColor _fillColorStart;                                                     // 0x0278 (size: 0x10)
    FLinearColor _fillColorMiddle;                                                    // 0x0288 (size: 0x10)
    FLinearColor _fillColorEnd;                                                       // 0x0298 (size: 0x10)
    float _maxRateOfChangePerSecond;                                                  // 0x02A8 (size: 0x4)

}; // Size: 0x2C0

class UGraph2DWidget : public UWidget
{
    FSlateBrush Brush;                                                                // 0x0110 (size: 0x88)
    FGraph2DWidgetBrushDelegate BrushDelegate;                                        // 0x0198 (size: 0x10)
    FSlateBrush GetSlateBrush();
    FLinearColor ColorAndOpacity;                                                     // 0x01A8 (size: 0x10)
    FGraph2DWidgetColorAndOpacityDelegate ColorAndOpacityDelegate;                    // 0x01B8 (size: 0x10)
    FLinearColor GetLinearColor();
    float GraphLineThickness;                                                         // 0x01C8 (size: 0x4)
    float GraphLineSpriteSpacing;                                                     // 0x01CC (size: 0x4)
    FVector2D GraphSize;                                                              // 0x01D0 (size: 0x8)
    bool InitializeGraphWithDefaultValue;                                             // 0x01D8 (size: 0x1)
    int32 SampleMax;                                                                  // 0x01DC (size: 0x4)
    float DefaultSampleValue;                                                         // 0x01E0 (size: 0x4)
    bool UseLineAntialiasing;                                                         // 0x01E4 (size: 0x1)

}; // Size: 0x1F8

class UGraphicsSettingsManager : public UObject
{
}; // Size: 0x28

class UGrappleActionComponent : public UActorComponent
{
    class AConZCharacter* _grappler;                                                  // 0x00B0 (size: 0x8)
    class APrisoner* _prisonerVictim;                                                 // 0x00B8 (size: 0x8)
    class UGrappleActionParameters* _grappleActionParameters;                         // 0x00C0 (size: 0x8)
    bool _isReleaseInProgress;                                                        // 0x00C8 (size: 0x1)

    void OnRep_IsReleaseInProgress();
    void NetMulticast_PlayReleaseMontagePairAtIndex(int32 Index);
    void NetMulticast_PlayMontagePairAtIndex(int32 Index);
    void Client_OnVictimDamaged(class APrisoner* Prisoner, float damageAmount, const FDamageEvent& DamageEvent, class AController* eventInstigator, class AActor* damageObject);
}; // Size: 0x110

class UGrappleActionParameters : public UDataAsset
{
    bool IsGrappleAttackInWater;                                                      // 0x0030 (size: 0x1)
    bool ShouldVictimGoToRagdoll;                                                     // 0x0031 (size: 0x1)
    EGrappleActionMeshDetachmentRule MeshDetachmentRule;                              // 0x0032 (size: 0x1)
    FTransform MeshDetachmentOffsetTransform;                                         // 0x0040 (size: 0x30)
    FTransform MeshReatttachmentRelativeTransform;                                    // 0x0070 (size: 0x30)
    EGrappleActionPerspectiveSwitchType PerspectiveSwitchType;                        // 0x00A0 (size: 0x1)
    bool ShouldIgnoreTurnInput;                                                       // 0x00A1 (size: 0x1)
    bool ShouldTurnOffPanini;                                                         // 0x00A2 (size: 0x1)
    bool ShouldUseGrappleAnimInstance;                                                // 0x00A3 (size: 0x1)
    bool ShouldOverrideCameraFOV;                                                     // 0x00A4 (size: 0x1)
    float CameraFOVOverride;                                                          // 0x00A8 (size: 0x4)
    bool CanEverApplyWallProximityAnimationOffset;                                    // 0x00AC (size: 0x1)
    float WallProximityAnimationOffset;                                               // 0x00B0 (size: 0x4)
    class UAnimSequence* GrapplerIdleAnimation;                                       // 0x00B8 (size: 0x8)
    class UAnimSequence* GrapplerIdleFPAnimation;                                     // 0x00C0 (size: 0x8)
    class UAnimMontage* GrapplerInitialGrabMontage;                                   // 0x00C8 (size: 0x8)
    float GrappleAttackMaxExpectedDistance;                                           // 0x00D0 (size: 0x4)
    class UAnimMontage* VictimInitialGrabMontage;                                     // 0x00D8 (size: 0x8)
    TArray<FGrappleActionMontagePair> GrappleActionMontagePairs;                      // 0x00E0 (size: 0x10)
    TArray<FGrappleActionMontagePair> GrappleActionReleaseMontagePairs;               // 0x00F0 (size: 0x10)
    class UAnimMontage* GrappleActionVictimGetUpMontageAfterGrapplerDeath;            // 0x0100 (size: 0x8)
    class UAkAudioEvent* StartGrappleAudioEvent;                                      // 0x0108 (size: 0x8)
    class UAkAudioEvent* StopGrappleAudioEvent;                                       // 0x0110 (size: 0x8)
    FName AttackerAttachSocketName;                                                   // 0x0118 (size: 0x8)
    bool ShouldSetAttackerLocationToVictimLocation;                                   // 0x0120 (size: 0x1)
    FVector AttackerLocationToVictimLocationOffset;                                   // 0x0124 (size: 0xC)
    bool ShouldOffsetAttacker;                                                        // 0x0130 (size: 0x1)
    float AttackerReleaseOffset;                                                      // 0x0134 (size: 0x4)
    class UAnimSequence* DefenderIdleAnimation;                                       // 0x0138 (size: 0x8)
    class UAnimSequence* DefenderIdleFPAnimation;                                     // 0x0140 (size: 0x8)
    FName DefenderAttachBoneName;                                                     // 0x0148 (size: 0x8)
    bool ShouldOffsetDefender;                                                        // 0x0150 (size: 0x1)
    float DefenderReleaseOffset;                                                      // 0x0154 (size: 0x4)
    float DefenderReleaseOffsetOnServerAfterRelease;                                  // 0x0158 (size: 0x4)
    float DefensePercentageIncreasePerInput;                                          // 0x015C (size: 0x4)
    float DefensePercentageDecreasePerSecond;                                         // 0x0160 (size: 0x4)
    float DefensePercentageDecreasePerDamageTaken;                                    // 0x0164 (size: 0x4)
    FTransform CameraSpringArmOffset;                                                 // 0x0170 (size: 0x30)

}; // Size: 0x1A0

class UGrapplingWidget : public UUserWidget
{
    class UImage* _grapplingValue;                                                    // 0x0268 (size: 0x8)
    class UTextBlock* _instructionText;                                               // 0x0270 (size: 0x8)

}; // Size: 0x280

class UGrenadeAnimInstance : public UAnimInstance
{
    EPrisonerGroundStance _owningPrisonerStance;                                      // 0x02C0 (size: 0x1)
    bool _isOwningPrisonerInFirstPersonView;                                          // 0x02C1 (size: 0x1)
    bool _isPinPulled;                                                                // 0x02C2 (size: 0x1)

}; // Size: 0x2D0

class UGroupedCharacterSpawnerComponent : public UCharacterSpawnerComponent
{
    ESpawnType _spawnType;                                                            // 0x0208 (size: 0x1)
    uint8 _allowedGroupSpawnPointsType;                                               // 0x0209 (size: 0x1)

}; // Size: 0x210

class UHUDHighlightingWidget : public UUserWidget
{
    float _invisibleTickRate;                                                         // 0x0268 (size: 0x4)
    float _fadeDuration;                                                              // 0x026C (size: 0x4)
    FRuntimeFloatCurve _fadeCurve;                                                    // 0x0270 (size: 0x88)
    class UImage* _image;                                                             // 0x02F8 (size: 0x8)

}; // Size: 0x370

class UHUDNotification : public UConZNotification
{
}; // Size: 0x30

class UHUDNotificationDescription : public UNotificationDescription
{
    FText Message;                                                                    // 0x0040 (size: 0x18)
    class UAkAudioEvent* AudioEvent;                                                  // 0x0058 (size: 0x8)

}; // Size: 0x60

class UHaircutAndMakeupService : public UTraderService
{
}; // Size: 0x38

class UHandPanel3 : public UTabMenuPanel
{
    class UHandsHolstersWidget2* _handInventory;                                      // 0x0268 (size: 0x8)
    class UHandsHolstersWidget2* _holsterInventory0;                                  // 0x0270 (size: 0x8)
    class UHandsHolstersWidget2* _holsterInventory1;                                  // 0x0278 (size: 0x8)
    class UQuickAccessItemSwitcher3* _quickAccessItemSwitcher0;                       // 0x0280 (size: 0x8)
    class UQuickAccessItemSwitcher3* _quickAccessItemSwitcher3;                       // 0x0288 (size: 0x8)
    class UQuickAccessItemSwitcher3* _quickAccessItemSwitcher4;                       // 0x0290 (size: 0x8)
    class UQuickAccessItemSwitcher3* _quickAccessItemSwitcher5;                       // 0x0298 (size: 0x8)
    class UQuickAccessItemSwitcher3* _quickAccessItemSwitcher6;                       // 0x02A0 (size: 0x8)
    class UQuickAccessItemSwitcher3* _quickAccessItemSwitcher7;                       // 0x02A8 (size: 0x8)
    class UQuickAccessItemSwitcher3* _quickAccessItemSwitcher8;                       // 0x02B0 (size: 0x8)
    class UQuickAccessItemSwitcher3* _quickAccessItemSwitcher9;                       // 0x02B8 (size: 0x8)
    class USizeBox* _mainSizeBox;                                                     // 0x02C0 (size: 0x8)
    class UTextBlock* _famePointsText;                                                // 0x02C8 (size: 0x8)
    class UTextBlock* _accountBalanceText;                                            // 0x02D0 (size: 0x8)
    class UTextBlock* _goldBalanceText;                                               // 0x02D8 (size: 0x8)
    float _mainPanelWidth;                                                            // 0x02E0 (size: 0x4)

}; // Size: 0x2F0

class UHandgunSkill : public URangedWeaponsSkill
{
}; // Size: 0x218

class UHandheldLightItemAnimInstance : public UAnimInstance
{
    float _lightAngle;                                                                // 0x02B8 (size: 0x4)

}; // Size: 0x2C0

class UHandsCorrectionsData : public UDataAsset
{
    FHandsPoseCorrections Corrections;                                                // 0x0030 (size: 0xC0)
    FHandsPoseCorrections FirstPersonCorrections;                                     // 0x00F0 (size: 0xC0)
    bool OverrideFingersOnlyInProne;                                                  // 0x01B0 (size: 0x1)

}; // Size: 0x1B8

class UHandsHolstersWidget2 : public UInventoryContainerWidget2
{
    class UTextBlock* _slotTypeText;                                                  // 0x0268 (size: 0x8)
    class UInventoryContainer2D* _container;                                          // 0x0270 (size: 0x8)
    class UInventoryContainerHandsHolsters* _handsHolstersContainer;                  // 0x0278 (size: 0x8)
    class UTextBlock* _nameText;                                                      // 0x0280 (size: 0x8)
    class UInventorySlotUserWidget* _itemSlotWidget;                                  // 0x0288 (size: 0x8)
    class UItemWidget2* _itemWidget;                                                  // 0x0290 (size: 0x8)
    class UTextBlock* _price;                                                         // 0x0298 (size: 0x8)
    class UOverlay* _priceOverlay;                                                    // 0x02A0 (size: 0x8)
    class UExpandableContainer* _expandableContainer;                                 // 0x02A8 (size: 0x8)
    class UGridPanel* _inventoryGrid;                                                 // 0x02B0 (size: 0x8)
    class UInventorySlotUserWidget* _attachmentSlotWidget;                            // 0x02B8 (size: 0x8)
    TArray<class UInventorySlotUserWidget*> _slotsWidgets;                            // 0x02C0 (size: 0x10)
    TArray<class UItemWidget2*> _attachmentWidgets;                                   // 0x02D0 (size: 0x10)
    EHandsHolstersType _type;                                                         // 0x02E0 (size: 0x1)
    TScriptInterface<class IInventoryNode> _item;                                     // 0x02E8 (size: 0x10)
    FName _conzMappingName;                                                           // 0x02F8 (size: 0x8)
    FText _slotName;                                                                  // 0x0300 (size: 0x18)

    void OnFishingAttachmentRemoved(class AFishingRod* FishingRod, class AFishingAttachment* Attachment);
    void OnFishingAttachmentDestroyed(class AActor* Attachment);
    void OnFishingAttachmentAdded(class AFishingRod* FishingRod, class AFishingAttachment* Attachment);
    void OnAttachmentRemoved(class AWeapon* Weapon, class AWeaponAttachment* Attachment);
    void OnAttachmentDestroyed(class AActor* Attachment);
    void OnAttachmentAdded(class AWeapon* Weapon, class AWeaponAttachment* Attachment);
}; // Size: 0x330

class UHazmatSuitTag : public UBaseItemTag
{
}; // Size: 0x30

class UHealthWidget : public UWaypointWidgetBase
{

    void SetMaxHealthPercentage(float Value);
    void SetHealthPercentage(float Value);
}; // Size: 0x340

class UHeatSourceDebuggerEntitySetup : public UEntitySetup
{
}; // Size: 0x80

class UHeatSourceEntityComponentSetup : public UEntityComponentSetup
{
    TSubclassOf<class UGameResourceType> ResourceType;                                // 0x0048 (size: 0x8)
    float MaxTemperature;                                                             // 0x0050 (size: 0x4)
    float InnerRadius;                                                                // 0x0054 (size: 0x4)
    float OuterRadius;                                                                // 0x0058 (size: 0x4)
    bool AutoFindResourceSupplier;                                                    // 0x005C (size: 0x1)
    FName ResourceSupplierName;                                                       // 0x0060 (size: 0x8)
    FRuntimeFloatCurve ResourceSupplierUsageRateVsHeatIntensity;                      // 0x0068 (size: 0x88)
    FRuntimeFloatCurve MaxHeatIntensityVsSupplierResourceAmountRatio;                 // 0x00F0 (size: 0x88)

}; // Size: 0x178

class UHeatSourceEntityComponentState : public UObject
{
    TSubclassOf<class UGameResourceType> ResourceType;                                // 0x0028 (size: 0x8)
    float DesiredHeatIntensity;                                                       // 0x0030 (size: 0x4)

}; // Size: 0x38

class UHeatSourceItemComponent : public UItemComponent
{
    TArray<class UFueledHeatSource*> HeatSources;                                     // 0x00C8 (size: 0x10)
    bool HasUses;                                                                     // 0x00D8 (size: 0x1)

}; // Size: 0xE0

class UHeatSourceItemTag : public UBaseItemTag
{
    FHeatSource HeatSource;                                                           // 0x0030 (size: 0xA8)

}; // Size: 0xE8

class UHeatSourceLinkUserData : public UAssetUserData
{
    int32 _heatSourceIndex;                                                           // 0x0028 (size: 0x4)
    int32 _cookingSlotIndex;                                                          // 0x002C (size: 0x4)
    bool _sameHeatSourceCookingSlotIndex;                                             // 0x0030 (size: 0x1)
    bool _linkAllCookingSlotsToHeatSource;                                            // 0x0031 (size: 0x1)

}; // Size: 0x38

class UHeatSourceMarkersComponent : public USceneComponent
{
    TArray<FHeatSource> _heatSources;                                                 // 0x01F8 (size: 0x10)

}; // Size: 0x210

class UHitReactComponent : public UActorComponent
{
    TArray<class UHitReactMapping*> HitReactMappings;                                 // 0x00C8 (size: 0x10)
    FPhysicalHitReactData PhysicalHitReactData;                                       // 0x00D8 (size: 0x18)
    FName RagdollConstraintProfileName;                                               // 0x00F0 (size: 0x8)
    float RagdollRestThresholdSingleBodyMax;                                          // 0x00F8 (size: 0x4)
    float RagdollRestThresholdAverageBodyMax;                                         // 0x00FC (size: 0x4)
    FName _pelvisBoneName;                                                            // 0x0128 (size: 0x8)
    FName _rootBoneName;                                                              // 0x0130 (size: 0x8)
    class UAnimMontage* _getUpFromFaceMontage;                                        // 0x0138 (size: 0x8)
    class UAnimMontage* _getUpFromBackMontage;                                        // 0x0140 (size: 0x8)
    bool _shouldSnapToServerLocation;                                                 // 0x0148 (size: 0x1)
    ERagdollTransitionState _ragdollTransitionState;                                  // 0x01BE (size: 0x1)
    FVector _serverRagdollLocation;                                                   // 0x01C0 (size: 0xC)
    bool _buoyancyEnabled;                                                            // 0x01F8 (size: 0x1)
    FBuoyancy _serverBuoyancy;                                                        // 0x0200 (size: 0x70)
    FBuoyancy _buoyancy;                                                              // 0x0270 (size: 0x70)

    void RecoverFromRagdollImmediately();
    void RecoverFromRagdoll();
    void OnRep_ServerRagdollLocation();
    void OnRep_RagdollTransitionState();
    void OnMontageBlendingOut(class UAnimMontage* Montage, bool interrupted);
    void NetMulticast_RecoverFromRagdoll(bool immediately);
    void NetMulticast_HandleHit(FName HitReactType, EDetectHitCollisionType detectHitCollisionType, EDamageMagnitudeType hitMagnitude, EHitDirectionType hitDirectionType);
    void NetMulticast_GoToRagdollNoImpulse(ERagdollTransitionState transitionState, FName ConstraintProfileName, EGoToRagdollCaller caller, ERagdollSpawnType creationType, FVector serverLocation);
    void NetMulticast_GoToRagdoll(ERagdollTransitionState transitionState, FName ConstraintProfileName, EGoToRagdollCaller caller, ERagdollSpawnType creationType, FVector serverLocation, float impulseIntensity, FVector Location, FVector Direction, FName Bone);
    void MoveRagdollMesh(class UPrimitiveComponent* MeshComponent, const FVector& currentLocation, const FVector& TargetLocation);
    bool IsRagdollAtRest();
    bool IsPlayingGetUpMontage();
    bool IsInRagdoll();
    bool IsCapsuleOverlapped();
    bool IsBlendingRagdoll();
    void GoToRagdoll(ERagdollSpawnType creationType, float impulseIntensity, FVector Location, FVector Direction, FName Bone);
    FQuat GetPelvisRotation();
    FName GetPelvisBoneName();
    bool CanRecoverFromRagdoll();
    void ApplyPhysicalAnimationData(const FPhysicalAnimationDesc& desc);
}; // Size: 0x2E0

class UHitReactLandingParams : public UDataAsset
{
    class UAnimMontage* MontageToPlay;                                                // 0x0030 (size: 0x8)
    float RegainControlDurationMultiplier;                                            // 0x0038 (size: 0x4)
    FFloatInterval RagdollImpactSpeedRange;                                           // 0x003C (size: 0x8)
    FFloatInterval RagdollDuration;                                                   // 0x0044 (size: 0x8)
    class UCurveFloat* LandingDamageCurve;                                            // 0x0050 (size: 0x8)
    class UCurveFloat* WaterImpactDamageCurve;                                        // 0x0058 (size: 0x8)

}; // Size: 0x60

class UHitReactMapping : public UDataAsset
{
    FGameplayTagContainer HitReactTypes;                                              // 0x0030 (size: 0x20)
    float RegainControlMultiplier;                                                    // 0x0050 (size: 0x4)
    FHitReactMagnitudeData HeadHit;                                                   // 0x0058 (size: 0x120)
    FHitReactMagnitudeData BodyHit;                                                   // 0x0178 (size: 0x120)
    FHitReactMagnitudeData LegsHit;                                                   // 0x0298 (size: 0x120)
    FHitReactLandingData LandingHit;                                                  // 0x03B8 (size: 0x28)

}; // Size: 0x3E0

class UHoverPanelWidget : public UUserWidget
{

    void SetWorldPosition(FVector position);
    void SetScreenPosition(FVector2D position);
    class UVerticalBox* GetContentBox();
    void ClearPanel();
}; // Size: 0x268

class UHudWidget : public UUserWidget
{
    class UCanvasPanel* _mainCanvasPanel;                                             // 0x0268 (size: 0x8)
    class USizeBox* _quickAccessBarSizeBox;                                           // 0x0270 (size: 0x8)
    class UQuickAccessBarWidget* _quickAccessBar;                                     // 0x0278 (size: 0x8)
    class UThrowingQuickAccessItemWidget* _throwingAccess;                            // 0x0280 (size: 0x8)
    class UQuickAccessItemWidget* _handQuickAccessItemWidget;                         // 0x0288 (size: 0x8)
    class UChatWidget* _chatWidget;                                                   // 0x0290 (size: 0x8)
    class UDialogueSystemContainerWidget* _dialogueSystemContainerWidget;             // 0x0298 (size: 0x8)
    class UQuestTrackingWidget* _questTrackingWidget;                                 // 0x02A0 (size: 0x8)
    bool _chatOpen;                                                                   // 0x02A8 (size: 0x1)
    class UMessageContainer* _messages;                                               // 0x02B0 (size: 0x8)
    class UWarning* _warningMessage;                                                  // 0x02B8 (size: 0x8)
    class UMicInputIndicator* _micInputIndicator;                                     // 0x02C0 (size: 0x8)
    class UVerticalBox* _warningsVerticalBox;                                         // 0x02C8 (size: 0x8)
    class UVerticalBox* _killNotificationVerticalBox;                                 // 0x02D0 (size: 0x8)
    TSubclassOf<class UWarningSignWidget> _warningSignWidgetClass;                    // 0x02D8 (size: 0x8)
    TSubclassOf<class UKillNotificationWidget> _killNotificationWidgetClass;          // 0x02E0 (size: 0x8)
    class UTabMenu* _tabMenuReborn;                                                   // 0x02F8 (size: 0x8)
    class UPrisonerLifeIndicatorsSprite* _prisonerLifeIndicatorsSprite;               // 0x0300 (size: 0x8)
    class UCompassWidget* _compassWidget;                                             // 0x0308 (size: 0x8)
    class UScreenSpaceHealthWidget* _screenSpaceHealthWidget;                         // 0x0310 (size: 0x8)
    class UResourceIndicatorWidget* _nightVisionGogglesBatteryWidget;                 // 0x0318 (size: 0x8)
    class UShotsFiredTrackerWidget* _shotsFiredTrackerWidget;                         // 0x0320 (size: 0x8)
    class UFishingContainerWidget* _fishingContainerWidget;                           // 0x0328 (size: 0x8)
    class UGrapplingWidget* _grapplingWidget;                                         // 0x0330 (size: 0x8)
    class UMusicPlayerDisplayWidget* _musicPlayerDisplayWidget;                       // 0x0338 (size: 0x8)
    class UFishingTrophyWidget* _fishingTrophyWidget;                                 // 0x0340 (size: 0x8)
    class UVehicleHudWidget* _vehicleHUD;                                             // 0x0348 (size: 0x8)
    class UPlasticSurgeryMenuWidget* _plasticSurgeryPanel;                            // 0x0350 (size: 0x8)
    class UBarberShopMenuWidget* _barberShopPanel;                                    // 0x0358 (size: 0x8)
    class UCanvasPanel* _chatCanvas;                                                  // 0x0360 (size: 0x8)
    class UFloatingWidgetCanvas* _floatingWidgetCanvas;                               // 0x0368 (size: 0x8)
    class UGameEventNotificationPanel* _gameEventNotificationPanel;                   // 0x0370 (size: 0x8)
    class UNotificationPanelWidget* _notificationPanelWidget;                         // 0x0378 (size: 0x8)
    class ULevelUpNotificationWidget* _levelUpNotification;                           // 0x0380 (size: 0x8)
    TSubclassOf<class UNotificationWidget> _notificationWidgetClass;                  // 0x0388 (size: 0x8)
    class UNotificationWidget* _updateableNotification;                               // 0x0390 (size: 0x8)
    class UHUDHighlightingWidget* _hudHighlightingWidget;                             // 0x0398 (size: 0x8)
    FMargin _adjustmentPaddingForVicinityWhenTrading;                                 // 0x03A0 (size: 0x10)
    float _notificationSoundCooldownInMinutes;                                        // 0x03B4 (size: 0x4)
    class UTextBlock* _debugInfo;                                                     // 0x0410 (size: 0x8)
    class UInteractionContextMenuBase* _contextMenuBase;                              // 0x0420 (size: 0x8)
    class UInteractionContextMenuSide* _contextMenuSide;                              // 0x0428 (size: 0x8)

}; // Size: 0x430

class UIgnitableExplosiveItemComponent : public UIgnitableItemComponent
{
    float _explosionDamage;                                                           // 0x0198 (size: 0x4)
    float _explosionOuterRadius;                                                      // 0x019C (size: 0x4)
    float _explosionInnerRadius;                                                      // 0x01A0 (size: 0x4)
    float _explosionFalloff;                                                          // 0x01A4 (size: 0x4)
    float _explosionForce;                                                            // 0x01A8 (size: 0x4)
    FTargetTypeDamageMultiplier _targetTypeMultiplier;                                // 0x01B0 (size: 0x10)
    class UParticleSystem* _explosionParticle;                                        // 0x01C8 (size: 0x8)
    class UAkAudioEvent* _explosionAudioEvent;                                        // 0x01D0 (size: 0x8)
    TSubclassOf<class UMatineeCameraShake> _explosionCameraShakeClass;                // 0x01D8 (size: 0x8)
    float _hearingDamageRadius;                                                       // 0x01E0 (size: 0x4)
    float _minExternalDamageForDetonation;                                            // 0x01E4 (size: 0x4)
    float _activeNetCullDistanceSquaredMeters;                                        // 0x01E8 (size: 0x4)
    bool _canExplodeUnderwater;                                                       // 0x01EC (size: 0x1)

    void Multicast_OnDetonate(const FVector& zeroBasedLocation);
}; // Size: 0x210

class UIgnitableItemComponent : public UItemComponent
{
    bool _canBurnUnderwater;                                                          // 0x00C8 (size: 0x1)
    bool _canBeIgnitedUnderwater;                                                     // 0x00C9 (size: 0x1)
    bool _canBeIgnitedWet;                                                            // 0x00CA (size: 0x1)
    bool _canBeIgnitedOnGround;                                                       // 0x00CB (size: 0x1)
    bool _canBePutOut;                                                                // 0x00CC (size: 0x1)
    float _autoDestroyTimeOnUse;                                                      // 0x00D0 (size: 0x4)
    FName _effectsSocket;                                                             // 0x00D4 (size: 0x8)
    class UAnimMontage* _prisonerIgniteMontage;                                       // 0x00E0 (size: 0x8)
    class UAkAudioEvent* _ignitionAudioEvent;                                         // 0x00E8 (size: 0x8)
    class UAkAudioEvent* _extinguishAudioEvent;                                       // 0x00F0 (size: 0x8)
    class UParticleSystem* _ignitionParticle;                                         // 0x00F8 (size: 0x8)
    class UParticleSystem* _burningParticle;                                          // 0x0100 (size: 0x8)
    class UParticleSystem* _extinguishParticle;                                       // 0x0108 (size: 0x8)
    class UNiagaraSystem* _ignitionNiagaraParticle;                                   // 0x0110 (size: 0x8)
    class UNiagaraSystem* _burningNiagaraParticle;                                    // 0x0118 (size: 0x8)
    class UNiagaraSystem* _extinguishNiagaraParticle;                                 // 0x0120 (size: 0x8)
    float _ignitionParticleDuration;                                                  // 0x0128 (size: 0x4)
    float _particlesLoopDuration;                                                     // 0x012C (size: 0x4)
    float _extinguishParticleDuration;                                                // 0x0130 (size: 0x4)
    EIgnitableItemState _repState;                                                    // 0x0135 (size: 0x1)
    bool _wasEverIgnited;                                                             // 0x0136 (size: 0x1)
    float _particlesLoopStartBlend;                                                   // 0x0140 (size: 0x4)
    float _noiseLoudnessWhileIgnited;                                                 // 0x0144 (size: 0x4)
    float _noiseLoudnessUpdateFrequencyPerHour;                                       // 0x0148 (size: 0x4)
    TArray<FIgnitableItemIgnitionRequirements> _ignitionRequirements;                 // 0x0150 (size: 0x10)
    float _ignitionDurationOnTheGround;                                               // 0x0160 (size: 0x4)
    bool _shouldControlUsage;                                                         // 0x0164 (size: 0x1)

    void OnRep_WasEverIgnited();
    void OnRep_State();
}; // Size: 0x198

class UImageSlotWidget : public UUserWidget
{
    class UImage* _availabilityGrid;                                                  // 0x02B0 (size: 0x8)
    class UImage* _backgroundImage;                                                   // 0x02B8 (size: 0x8)
    class UImage* _displayedImage;                                                    // 0x02C0 (size: 0x8)
    FSlateBrush _defaultImageBrush;                                                   // 0x02C8 (size: 0x88)
    FLinearColor _regularColor;                                                       // 0x0358 (size: 0x10)
    FLinearColor _dropUnavailableColor;                                               // 0x0368 (size: 0x10)
    FLinearColor _dropAvailableColor;                                                 // 0x0378 (size: 0x10)
    float _defaultBackgroundOpacity;                                                  // 0x0388 (size: 0x4)
    float _slottedBackgroundOpacity;                                                  // 0x038C (size: 0x4)
    FSlateColor _defaultIconTint;                                                     // 0x0390 (size: 0x28)
    FSlateColor _slottedIconTint;                                                     // 0x03B8 (size: 0x28)

}; // Size: 0x3E0

class UIndexedHierarchicalInstancedStaticMeshComponent : public UHierarchicalInstancedStaticMeshComponent
{
}; // Size: 0x740

class UInfiniteResourceAssetData : public UInteractionAssetData
{
    TSubclassOf<class UGameResourceType> ResourceType;                                // 0x0030 (size: 0x8)
    FGameplayTagContainer InSocketTypes;                                              // 0x0038 (size: 0x20)
    FGameplayTagContainer OutSocketTypes;                                             // 0x0058 (size: 0x20)
    TArray<class UBaseItemTag*> RequiredItemTagsForFilling;                           // 0x0078 (size: 0x10)
    float FillBaseActionDuration;                                                     // 0x0088 (size: 0x4)
    float FillActionDurationPerAmountFilled;                                          // 0x008C (size: 0x4)
    float FillResourceFillingExperiencePerAmount;                                     // 0x0090 (size: 0x4)
    class UAnimMontage* FillMontage;                                                  // 0x0098 (size: 0x8)
    class UAkAudioEvent* FillStartAudioEvent;                                         // 0x00A0 (size: 0x8)
    class UAkAudioEvent* FillStopAudioEvent;                                          // 0x00A8 (size: 0x8)

}; // Size: 0xB0

class UIngredientsForRecipeWidget : public UUserWidget
{
    class UWrapBox* _ingredientsWrapBox;                                              // 0x0270 (size: 0x8)
    TSubclassOf<class UInteractiveIngredientWidget> _interactiveIngredientWidgetClass; // 0x0278 (size: 0x8)

}; // Size: 0x288

class UInsertCartridge : public UWeaponActionReloadSequence
{
    FName MontageEndSectionName;                                                      // 0x0090 (size: 0x8)

}; // Size: 0xA0

class UInsertCartridgeIntoMagazine : public UWeaponActionReloadSequence
{
    FName MontageEndSectionName;                                                      // 0x0090 (size: 0x8)

}; // Size: 0xA0

class UInsertMagazine : public UWeaponActionReloadSequence
{

    bool IsMagazineToLoadEmpty(const FWeaponReloadData& Data);
}; // Size: 0x90

class UInsertMagazineInsertCartridge : public UWeaponActionReloadSequence
{
    FName MontageEndSectionName;                                                      // 0x0090 (size: 0x8)

}; // Size: 0xA0

class UInspectedItemWidget : public UUserWidget
{
    class UItemClassWidget* ItemWidget;                                               // 0x0268 (size: 0x8)
    class UTextBlock* SkillText;                                                      // 0x0270 (size: 0x8)
    class UTextBlock* SkillLevelText;                                                 // 0x0278 (size: 0x8)

}; // Size: 0x280

class UIntelligenceSkill : public USkill
{
}; // Size: 0xB0

class UInteractionAction : public UObject
{

    void OnActionFinished();
    void OnActionCanceled();
}; // Size: 0xA8

class UInteractionAssetData : public UAssetUserData
{
}; // Size: 0x30

class UInteractionComponent : public UActorComponent
{
    float ExamineActionDuration;                                                      // 0x00B8 (size: 0x4)
    float ExamineReplicationDelay;                                                    // 0x00BC (size: 0x4)
    float PickupItemActionDuration;                                                   // 0x00C0 (size: 0x4)
    float PickupItemReplicationDelay;                                                 // 0x00C4 (size: 0x4)
    float StoreItemActionDuration;                                                    // 0x00C8 (size: 0x4)
    float TickFrequency;                                                              // 0x00CC (size: 0x4)
    float MinLandscapeInteractionDistanceSquared;                                     // 0x00D0 (size: 0x4)
    int32 SavedGroundSearchLocationsCount;                                            // 0x00D4 (size: 0x4)
    TSubclassOf<class AActor> GhostActorToSpawnAfterExamine;                          // 0x00D8 (size: 0x8)
    int32 InitialMinNumEmptyContainersToSearchToSpawnGhostActor;                      // 0x00E8 (size: 0x4)
    int32 InitialMaxNumEmptyContainersToSearchToSpawnGhostActor;                      // 0x00EC (size: 0x4)
    int32 MinNumEmptyContainersToSearchToSpawnGhostActor;                             // 0x00F0 (size: 0x4)
    int32 MaxNumEmptyContainersToSearchToSpawnGhostActor;                             // 0x00F4 (size: 0x4)
    bool ShouldSpawnGhostActorRelativeToExaminer;                                     // 0x00F8 (size: 0x1)
    float GhostActorSpawnDistanceToExaminer;                                          // 0x00FC (size: 0x4)
    int64 ExamineGhostSpawnEndTime;                                                   // 0x0100 (size: 0x8)
    TArray<class UInteractionAction*> _actions;                                       // 0x0108 (size: 0x10)
    FSpawnedItems _replicatedExamineSpawnedItems;                                     // 0x0208 (size: 0x18)
    FSpawnedItems _replicatedPickupSpawnedItem;                                       // 0x0220 (size: 0x18)
    float _drinkAllowedThreshold;                                                     // 0x0264 (size: 0x4)
    float _reexamineFrequency;                                                        // 0x0268 (size: 0x4)

    void UseItemOnServer(class AItem* Item, int32 Usage, float UsageWeight, bool Eat);
    void UpdateExistenceOnClient(bool Exists);
    void UnspawnExaminedItemsOnServer(bool destroyItems);
    void UnexamineItemOnServer(class AItem* Item);
    void UnexamineItemOnClient(class AItem* Item);
    void StopExamining();
    void Server_UpdateLockHPOnServer(class UObject* Lockpickable, float lockHP);
    void Server_UncraftItem(class AItem* Item);
    void Server_RemoveLockOnServer(class UObject* Lockpickable);
    void Server_InteractWithBaseElement(EInteractionType interactionType, const FConZBaseInteractionData& baseData, const FConZBaseElementInteractionData& elementData);
    void Server_FindOrCreateGardenSlotMeshComponentForInteraction(class UStaticMesh* PlantMesh);
    void Server_CraftItem(const class UItemCraftingRecipe* recipe, const TArray<class AItem*>& Ingredients);
    void PickupItemOnServer(class UMeshComponent* MeshComponent, FMeshInstanceId InstanceId, class UStaticMesh* StaticMesh, FVector pickupLocation, EPickupItemOperation Operation);
    void PickupItemOnClients(class UMeshComponent* MeshComponent, FMeshInstanceId InstanceId, class UStaticMesh* StaticMesh, FVector pickupLocation);
    void OpenItemOnServer(class AFoodItem* FoodItem, class AItem* openingItem);
    void OnRep_PickupSpawnedItem();
    void OnRep_ExamineSpawnedItems();
    void NetMulticast_UpdateLockHPOnClients(class UObject* Lockpickable, float lockHP);
    void FinishPickupItemOnServer();
    void FinishExaminePrisonerOnServer(class APrisoner* Prisoner);
    void FinishExamineObjectOnServer();
    void FillWaterOnServer(class AItem* Item, float Ratio, float Salinity, TSubclassOf<class UGameResourceType> ResourceType);
    void ExaminePrisonerOnServer(class APrisoner* Prisoner);
    void ExamineObjectOnServer(class UMeshComponent* MeshComponent, FMeshInstanceId InstanceId, FVector instanceLocation, class UObject* Spawner);
    void CutObjectOnServer(class UMeshComponent* MeshComponent, FMeshInstanceId InstanceId, bool collectOnly);
    void CutObjectOnClients(class UMeshComponent* MeshComponent, FMeshInstanceId InstanceId);
    void Client_SendGroundSearchLocation(FVector Location);
    void ChopOnServer(class UObject* choppedObject);
    void CheckExistenceOnServer(class UMeshComponent* MeshComponent, FMeshInstanceId InstanceId);
}; // Size: 0x280

class UInteractionContextMenuBase : public UUserWidget
{
    class UVerticalBox* _interactionListPanel;                                        // 0x0268 (size: 0x8)
    int32 _maximumInteractionsInGroupWithoutSideMenu;                                 // 0x0270 (size: 0x4)
    TSubclassOf<class UInteractionContextMenuLeaf> _leafSubclass;                     // 0x0278 (size: 0x8)
    TSubclassOf<class UInteractionContextMenuGroupHeader> _categoryHeaderSubclass;    // 0x0280 (size: 0x8)
    TSubclassOf<class UInteractionContextMenuLeafGroup> _leafGroupSubclass;           // 0x0288 (size: 0x8)

}; // Size: 0x290

class UInteractionContextMenuGroupHeader : public UUserWidget
{
    class UTextBlock* _name;                                                          // 0x0268 (size: 0x8)

}; // Size: 0x270

class UInteractionContextMenuLeaf : public UUserWidget
{
    class UTextBlock* _nameBlock;                                                     // 0x0268 (size: 0x8)
    class UButton* _visualButton;                                                     // 0x0270 (size: 0x8)

    void OnUnhovered();
    void OnHovered();
    void OnClick();
}; // Size: 0x2A0

class UInteractionContextMenuLeafGroup : public UUserWidget
{
    class UTextBlock* _nameBlock;                                                     // 0x0288 (size: 0x8)
    class UButton* _visualButton;                                                     // 0x0290 (size: 0x8)

    void OnUnhovered();
    void OnHovered();
}; // Size: 0x2B0

class UInteractionContextMenuSide : public UUserWidget
{
    class UVerticalBox* _interactionListPanel;                                        // 0x0298 (size: 0x8)
    TSubclassOf<class UInteractionContextMenuLeaf> _leafSubclass;                     // 0x02A0 (size: 0x8)

}; // Size: 0x2A8

class UInteractionContextMenuUIController : public UObject
{
}; // Size: 0x188

class UInteractiveIngredientWidget : public UUserWidget
{
    class UWidgetSwitcher* _mainSwitcher;                                             // 0x02A0 (size: 0x8)
    class UImage* _ingredientIcon;                                                    // 0x02A8 (size: 0x8)
    class UImage* _overlayHighlight;                                                  // 0x02B0 (size: 0x8)
    class UWidgetSwitcher* _quantitySwitcher;                                         // 0x02B8 (size: 0x8)
    class UTextBlock* _useAmountText;                                                 // 0x02C0 (size: 0x8)
    class UTextBlock* _currentVolumeTextBlock;                                        // 0x02C8 (size: 0x8)
    class UTextBlock* _requiredVolumeTextBlock;                                       // 0x02D0 (size: 0x8)
    class UImage* _mainIngredientIndication;                                          // 0x02D8 (size: 0x8)
    FLinearColor _unacceptableItemDraggedColor;                                       // 0x02E4 (size: 0x10)
    FLinearColor _acceptableItemDraggedColor;                                         // 0x02F4 (size: 0x10)
    FLinearColor _defaultBorderColor;                                                 // 0x0304 (size: 0x10)
    float _uncoloredVignetteExponent;                                                 // 0x0314 (size: 0x4)
    float _coloredVignetteExponent;                                                   // 0x0318 (size: 0x4)
    FLinearColor _mainIngredientTriangleColor;                                        // 0x031C (size: 0x10)
    FLinearColor _optionalIngredientTriangleColor;                                    // 0x032C (size: 0x10)

}; // Size: 0x340

class UInteriorCharacterSpawnerComponent : public UCharacterSpawnerComponent
{
}; // Size: 0x210

class UInteriorStaticMeshComponent : public UStaticMeshComponent
{
}; // Size: 0x500

class UInternalMountPath : public UMountPath
{
    FGameplayTag DestinationSlotId;                                                   // 0x0060 (size: 0x8)

}; // Size: 0x68

class UIntroVideoMenu : public UBaseMenu
{
    class UCutsceneWidget* _cutsceneWidget;                                           // 0x0268 (size: 0x8)

}; // Size: 0x270

class UInventoryCentralPanel : public UTabMenuPanel
{
    class UVicinityPanel3* _vicinityPanel;                                            // 0x0268 (size: 0x8)
    class UVicinityContainer3* _vicinityContainer;                                    // 0x0270 (size: 0x8)

}; // Size: 0x280

class UInventoryContainer2D : public UActorComponent
{
    FInventoryContainer2DRepData _data;                                               // 0x00B8 (size: 0x20)
    FInventoryContainer2DRepData _oldData;                                            // 0x00D8 (size: 0x20)
    TScriptInterface<class IInventoryNode> _parent;                                   // 0x00F8 (size: 0x10)
    TArray<class UInventoryContainerWidget2*> _widgets;                               // 0x0108 (size: 0x10)
    TArray<bool> _grid;                                                               // 0x0118 (size: 0x10)
    TArray<bool> _gridDamaged;                                                        // 0x0128 (size: 0x10)

    void OnRep_Parent();
    void OnRep_Items(TArray<class UObject*> _oldItems);
    void OnRep_Data();
    void OnActorItemDestroyed(class AActor* Actor);
}; // Size: 0x140

class UInventoryContainer2DLight : public UInventoryContainer2D
{
}; // Size: 0x140

class UInventoryContainerClothes : public UObject
{
    class UInventoryContainerWidget2* _widget;                                        // 0x0030 (size: 0x8)
    FInventoryContainerClothesData _data;                                             // 0x0048 (size: 0x20)
    FInventoryContainerClothesData _oldData;                                          // 0x0068 (size: 0x20)

    void OnRep_Data();
}; // Size: 0x90

class UInventoryContainerGrid : public UUserWidget
{
    TSubclassOf<class UUIRepresentableObjectWidget> _uiroWidgetClass;                 // 0x0270 (size: 0x8)
    class USizeBox* _mainSizeBox;                                                     // 0x0278 (size: 0x8)
    class UInventoryGridWidget* _backgroundGrid;                                      // 0x0280 (size: 0x8)
    class UCanvasPanel* _mainCanvas;                                                  // 0x0288 (size: 0x8)
    class URetainerBox* _retainerBoxDeadCells;                                        // 0x0290 (size: 0x8)

}; // Size: 0x2A0

class UInventoryContainerHandsHolsters : public UObject
{
    class UInventoryContainerWidget2* _handWidget;                                    // 0x0030 (size: 0x8)
    class UInventoryContainerWidget2* _shoulderLeftWidget;                            // 0x0038 (size: 0x8)
    class UInventoryContainerWidget2* _shoulderRightWidget;                           // 0x0040 (size: 0x8)
    class UInventoryContainerWidget2* _tradingHandWidget;                             // 0x0048 (size: 0x8)
    class UInventoryContainerWidget2* _tradingShoulderLeftWidget;                     // 0x0050 (size: 0x8)
    class UInventoryContainerWidget2* _tradingShoulderRightWidget;                    // 0x0058 (size: 0x8)
    FInventoryContainerHandsHolstersData _data;                                       // 0x0070 (size: 0x20)
    FInventoryContainerHandsHolstersData _oldData;                                    // 0x0090 (size: 0x20)

    void OnRep_Data();
}; // Size: 0xB8

class UInventoryContainerWidget2 : public UUserWidget
{
}; // Size: 0x268

class UInventoryContainerWidget2Test : public UInventoryContainerWidget2
{
    class UImage* _itemIcon;                                                          // 0x0268 (size: 0x8)
    class UTextBlock* _itemCaption;                                                   // 0x0270 (size: 0x8)
    class UVerticalBox* _itemContainer;                                               // 0x0278 (size: 0x8)

}; // Size: 0x2E0

class UInventoryContainerWidgetReborn : public UUserWidget
{
    class UOverlay* _genericWidgetOverlay;                                            // 0x0270 (size: 0x8)
    class UUIRepresentableObjectWidget* _uiroWidget;                                  // 0x0278 (size: 0x8)
    class UTextBlock* _nameTextBlock;                                                 // 0x0280 (size: 0x8)
    class UTextBlock* _temperatureTextBlock;                                          // 0x0288 (size: 0x8)
    class UTextBlock* _wetnessWeightTextBlock;                                        // 0x0290 (size: 0x8)
    class URichTextBlock* _weightRatio;                                               // 0x0298 (size: 0x8)
    class UCheckBox* _expandToggle;                                                   // 0x02A0 (size: 0x8)
    class UHorizontalBox* _contentBox;                                                // 0x02A8 (size: 0x8)
    class UInventoryContainerGrid* _inventoryContainerGrid;                           // 0x02B0 (size: 0x8)

    void OnExpandToggled(bool toggled);
}; // Size: 0x2B8

class UInventoryGridWidget : public UUserWidget
{
    class UImage* _image;                                                             // 0x0268 (size: 0x8)

}; // Size: 0x270

class UInventoryItemWidget2Test : public UUserWidget
{
    class UImage* _itemIcon;                                                          // 0x0268 (size: 0x8)
    class UTextBlock* _itemCaption;                                                   // 0x0270 (size: 0x8)

}; // Size: 0x278

class UInventoryPanel : public UTabMenuPanel
{
    TSubclassOf<class UInventoryContainerWidgetReborn> _inventoryContainerWidgetClass; // 0x0270 (size: 0x8)
    class UImage* _availabilityOverlayImage;                                          // 0x0278 (size: 0x8)
    class UWidgetSwitcher* _titleTabsSwitcher;                                        // 0x0280 (size: 0x8)
    class UTextBlock* _playerName;                                                    // 0x0288 (size: 0x8)
    class UTabContainer* _tabRow;                                                     // 0x0290 (size: 0x8)
    class UWidgetSwitcher* _inventoryAndHolstersSwitcher;                             // 0x0298 (size: 0x8)
    class UVerticalBox* _inventoryPage;                                               // 0x02A0 (size: 0x8)
    class UScrollBox* _inventoryScrollBox;                                            // 0x02A8 (size: 0x8)
    class UVerticalBox* _handsHolstersPage;                                           // 0x02B0 (size: 0x8)
    class UHandsHolstersWidget2* _leftHolster;                                        // 0x02B8 (size: 0x8)
    class UHandsHolstersWidget2* _rightHolster;                                       // 0x02C0 (size: 0x8)
    class UHandsHolstersWidget2* _hands;                                              // 0x02C8 (size: 0x8)
    class UVerticalBox* _equipmentVerticalBox;                                        // 0x02D0 (size: 0x8)

}; // Size: 0x2D8

class UInventoryPanelSideLayerWidget : public UUserWidget
{
    class UItemWidget2* _itemWidget;                                                  // 0x0268 (size: 0x8)

}; // Size: 0x270

class UInventoryPanelThirdIteration : public UTabMenuPanel
{
    class UHandsHolstersWidget2* Hands;                                               // 0x0268 (size: 0x8)
    class UHandsHolstersWidget2* LeftHolster;                                         // 0x0270 (size: 0x8)
    class UHandsHolstersWidget2* RightHolster;                                        // 0x0278 (size: 0x8)
    TWeakObjectPtr<class ACharacter> _displayedCharacter;                             // 0x0280 (size: 0x8)
    class UTabContainer* _tabRow;                                                     // 0x0288 (size: 0x8)
    class UScrollBox* _inventoriesScrollBox;                                          // 0x0290 (size: 0x8)
    class UVerticalBox* _nonContainerBox;                                             // 0x0298 (size: 0x8)
    class UVerticalBox* _nonTradingBits;                                              // 0x02A0 (size: 0x8)
    class UVerticalBox* _tradingBits;                                                 // 0x02A8 (size: 0x8)
    class UWidgetSwitcher* _inventoryAndHolstersSwitcher;                             // 0x02B0 (size: 0x8)
    class UWidgetSwitcher* _inventoryTradingSwitcher;                                 // 0x02B8 (size: 0x8)
    class UTextBlock* _playerName;                                                    // 0x02C0 (size: 0x8)
    class UImage* _availabilityOverlayImage;                                          // 0x02C8 (size: 0x8)
    TMap<class TWeakObjectPtr<UObject>, class UItemInventoryWidget2*> _inventories;   // 0x02D0 (size: 0x50)
    TMap<class TWeakObjectPtr<UObject>, class UInventoryPanelSideLayerWidget*> _sideLayers; // 0x0320 (size: 0x50)
    TMap<class TWeakObjectPtr<UObject>, class UItemWidget2*> _nonContainerItems;      // 0x0370 (size: 0x50)
    FMargin _nonContainerItemsPadding;                                                // 0x03C0 (size: 0x10)

}; // Size: 0x3E8

class UInventoryPanelWidget2 : public UUserWidget
{
}; // Size: 0x268

class UInventoryPanelWidget2Test : public UInventoryContainerWidget2
{
    class UScrollBox* _itemContainer;                                                 // 0x0268 (size: 0x8)

}; // Size: 0x2C0

class UInventoryPositionData : public UObject
{
}; // Size: 0x28

class UInventoryPositionData2D : public UInventoryPositionData
{
    int32 PositionX;                                                                  // 0x0028 (size: 0x4)
    int32 PositionY;                                                                  // 0x002C (size: 0x4)
    uint8 Rotation;                                                                   // 0x0030 (size: 0x1)
    bool IsLoading;                                                                   // 0x0031 (size: 0x1)

}; // Size: 0x38

class UInventoryPositionDataClothes : public UInventoryPositionData
{
}; // Size: 0x30

class UInventoryPositionDataHandsHolsters : public UInventoryPositionData
{
}; // Size: 0x30

class UInventorySizeData : public UObject
{
}; // Size: 0x28

class UInventorySizeData2D : public UInventorySizeData
{
    int32 SizeX;                                                                      // 0x0028 (size: 0x4)
    int32 SizeY;                                                                      // 0x002C (size: 0x4)
    TArray<bool> Bitmask;                                                             // 0x0030 (size: 0x10)

}; // Size: 0x40

class UInventorySlotUserWidget : public UUserWidget
{
    bool HasItem;                                                                     // 0x0268 (size: 0x1)
    class UImage* ImageWidget;                                                        // 0x0270 (size: 0x8)
    class USizeBox* SizeBoxWrapper;                                                   // 0x0278 (size: 0x8)
    class UBaseItemContainerWidget* ParentContainerWidget;                            // 0x0280 (size: 0x8)
    FLinearColor BaseColor;                                                           // 0x0288 (size: 0x10)
    FLinearColor RedColor;                                                            // 0x0298 (size: 0x10)
    FLinearColor GreenColor;                                                          // 0x02A8 (size: 0x10)

    void OnDraggedItemPreRotated(class UItemWidget2* Widget);
    void OnDraggedItemPostRotated(class UItemWidget2* Widget);
}; // Size: 0x2B8

class UInventoryUIController : public UObject
{
}; // Size: 0x188

class UInventoryUIControllerReborn : public UObject
{
}; // Size: 0x70

class UIsUnmountedOrMountedOnGroundCondition : public UObject
{
}; // Size: 0x30

class UItemAction : public UObject
{
    class UItemActionDescription* _description;                                       // 0x0040 (size: 0x8)

    bool IsStandAloneOrOwningClient();
    class AItem* GetItem();
    void End(bool Regular);
    bool CanBeSelected(const class UItemActionDescription* Description);
    bool CanBegin();
    float Begin();
}; // Size: 0x50

class UItemActionDescription : public UObject
{
}; // Size: 0x28

class UItemActionDescriptionLoadMagazine : public UItemActionSequenceDescription
{
    int32 RequestedAmmoCount;                                                         // 0x0030 (size: 0x4)
    class AAmmunitionItem* ammoItem;                                                  // 0x0038 (size: 0x8)
    float PlayRate;                                                                   // 0x0040 (size: 0x4)

}; // Size: 0x48

class UItemActionSequence : public UItemAction
{
    bool _canBeCanceled;                                                              // 0x0050 (size: 0x1)
    FCharacterAndItemAnimation _animations;                                           // 0x0058 (size: 0x10)

    void StopAnimation();
    void SetNextAnimationSectionFromPrevious(const FName& previousSection, const FName& NextSection);
    void SetNextAnimationSection(const FName& Section, bool allowLoop);
    float PlayAnimation(class ACharacter* Character, float PlayRate, const FName& startSection, bool assignCallbacks);
    void OnMontageEnded(class UAnimMontage* Montage, bool interrupted);
    void OnMontageBlendingOutStarted(class UAnimMontage* Montage, bool interrupted);
    void OnAnimNotify(ECharacterActionNotifyType notifyType);
    void JumpToAnimationSection(const FName& Section);
    bool IsPlayingAnimation();
    FCharacterActionAnimationDescription GetPlayingAnimations();
    int32 GetNumberOfPendingNotifiesInCurrentSection(ECharacterActionNotifyType notifyType);
    FCharacterAndItemAnimation GetAnimations();
    bool CanEverBeCanceled();
    void Cancel(bool Regular);
    bool CanBeCanceled();
}; // Size: 0x88

class UItemActionSequenceDescription : public UItemActionDescription
{
}; // Size: 0x30

class UItemActionSequenceLoadMagazine : public UItemActionSequence
{
    int32 _loadedAmmoCount;                                                           // 0x0088 (size: 0x4)

    FName GetEndSectionName();
}; // Size: 0x90

class UItemActionSequenceLoadMagazine_M1Clip : public UItemActionSequenceLoadMagazine
{
}; // Size: 0x90

class UItemActionSequenceLoadMagazine_RPKDrum : public UItemActionSequenceLoadMagazine
{
}; // Size: 0x98

class UItemAnimInstance : public UAnimInstance
{
    EPrisonerGroundStance _owningPrisonerStance;                                      // 0x02C0 (size: 0x1)
    bool _isOwningPrisonerInFirstPersonView;                                          // 0x02C1 (size: 0x1)

}; // Size: 0x2D0

class UItemClassWidget : public UUserWidget
{
    class UImage* BackgroundImage;                                                    // 0x0268 (size: 0x8)
    class UImage* MainImage;                                                          // 0x0270 (size: 0x8)
    bool BackgroundVisible;                                                           // 0x0278 (size: 0x1)

}; // Size: 0x2B0

class UItemComponent : public UActorComponent
{
}; // Size: 0xC8

class UItemComponentStateBase : public UObject
{
    FDbIntegerId ID;                                                                  // 0x0028 (size: 0x8)
    FString ComponentName;                                                            // 0x0030 (size: 0x10)

}; // Size: 0x40

class UItemCraftingRecipe : public UCraftingRecipe
{
    TSoftClassPtr<AItem> Product;                                                     // 0x0098 (size: 0x28)
    int32 ProductQuantity;                                                            // 0x00C0 (size: 0x4)
    TSubclassOf<class UCraftingProductSpawningMethod> ProductSpawningMethod;          // 0x00C8 (size: 0x8)
    TSubclassOf<class UCraftingProductQualityApplicationMethod> ProductQualityApplicationMethod; // 0x00D0 (size: 0x8)
    TArray<class TSubclassOf<UCraftingPropertyTracker>> PropertyTrackers;             // 0x00D8 (size: 0x10)
    FText InteractionName;                                                            // 0x00E8 (size: 0x18)
    FPerSkillLevelFloatData Duration;                                                 // 0x0100 (size: 0x14)
    class UAnimMontage* CustomCraftingMontage;                                        // 0x0118 (size: 0x8)
    class UAkAudioEvent* StartCraftingAudioEvent;                                     // 0x0120 (size: 0x8)
    class UAkAudioEvent* StopCraftingAudioEvent;                                      // 0x0128 (size: 0x8)

}; // Size: 0x130

class UItemDropCircumstancesItemTag : public UBaseItemTag
{
    bool ShouldDropOnSwimmingStarted;                                                 // 0x0030 (size: 0x1)
    bool ShouldDropOnTeleportStarted;                                                 // 0x0031 (size: 0x1)

}; // Size: 0x38

class UItemEntitySetup : public UEntitySetup
{
    float MaxHealth;                                                                  // 0x0080 (size: 0x4)
    float MaxHealthRatioAfterReachingBadQuality;                                      // 0x0084 (size: 0x4)
    bool ShouldCarryStopOnOwnerLeavingGame;                                           // 0x0088 (size: 0x1)

}; // Size: 0x90

class UItemEntitySpawnerRegistrySetup : public UEntitySetup
{
}; // Size: 0x80

class UItemFirstPersonAnimationsDataAsset : public UDataAsset
{
    FItemFirstPersonUpperBodyAnimationsData UpperBody;                                // 0x0030 (size: 0x50)
    class UBlendSpace* AimOffsetStanding;                                             // 0x0080 (size: 0x8)
    class UBlendSpace* AimOffsetCrouching;                                            // 0x0088 (size: 0x8)
    class UBlendSpace* AimOffsetProne;                                                // 0x0090 (size: 0x8)

}; // Size: 0x98

class UItemGroup : public UDataAsset
{
    TArray<class TSubclassOf<AItem>> Items;                                           // 0x0030 (size: 0x10)

}; // Size: 0x40

class UItemInventoryDepotWidget2 : public UInventoryContainerWidget2
{
    class UInventoryContainer2D* _container;                                          // 0x0268 (size: 0x8)
    class UCanvasPanel* _inventoryCanvas;                                             // 0x0270 (size: 0x8)
    TScriptInterface<class IInventoryNode> _item;                                     // 0x0280 (size: 0x10)
    class UGridPanel* _inventoryGrid;                                                 // 0x0290 (size: 0x8)
    class UWidget* _loadingWidget;                                                    // 0x0298 (size: 0x8)
    class UInventoryGridWidget* _inventoryGridWidget;                                 // 0x02A0 (size: 0x8)
    class UHorizontalBox* _contentBox;                                                // 0x02A8 (size: 0x8)
    TArray<class UInventorySlotUserWidget*> _slotsWidgets;                            // 0x02B0 (size: 0x10)
    class UWidgetAnimation* BlinkAnim;                                                // 0x02C0 (size: 0x8)
    class URetainerBox* RetainerBoxDeadCells;                                         // 0x02C8 (size: 0x8)
    bool _canMinimize;                                                                // 0x02D0 (size: 0x1)

    void OnExpandToggleClicked(bool checked);
}; // Size: 0x2E0

class UItemInventoryWidget2 : public UInventoryContainerWidget2
{
    class UInventoryContainer2D* _container;                                          // 0x0268 (size: 0x8)
    class UCanvasPanel* _inventoryCanvas;                                             // 0x0270 (size: 0x8)
    TScriptInterface<class IInventoryNode> _item;                                     // 0x0280 (size: 0x10)
    class UTextBlock* _nameText;                                                      // 0x0290 (size: 0x8)
    class UItemWidget2* _itemWidget;                                                  // 0x0298 (size: 0x8)
    class UGridPanel* _inventoryGrid;                                                 // 0x02A0 (size: 0x8)
    class UWidget* _loadingWidget;                                                    // 0x02A8 (size: 0x8)
    class UInventoryGridWidget* _inventoryGridWidget;                                 // 0x02B0 (size: 0x8)
    class UHorizontalBox* _contentBox;                                                // 0x02B8 (size: 0x8)
    class UCheckBox* _expandToggle;                                                   // 0x02C0 (size: 0x8)
    TArray<class UInventorySlotUserWidget*> _slotsWidgets;                            // 0x02C8 (size: 0x10)
    class UWidgetAnimation* BlinkAnim;                                                // 0x02D8 (size: 0x8)
    class URetainerBox* RetainerBoxDeadCells;                                         // 0x02E0 (size: 0x8)
    bool _canMinimize;                                                                // 0x02E8 (size: 0x1)

    void OnExpandToggleClicked(bool checked);
}; // Size: 0x2F8

class UItemLightDisplay : public UUserWidget
{
    class UImage* _itemImage;                                                         // 0x0280 (size: 0x8)
    class UImage* _emptySlotBackground;                                               // 0x0288 (size: 0x8)
    class USizeBox* _sizeBox;                                                         // 0x0290 (size: 0x8)
    class UTextBlock* _durability;                                                    // 0x0298 (size: 0x8)
    class UTextBlock* _uses;                                                          // 0x02A0 (size: 0x8)
    class UBorder* _selectionBorder;                                                  // 0x02A8 (size: 0x8)
    class UOverlay* _itemDataOverlay;                                                 // 0x02B0 (size: 0x8)
    class UProgressBar* _durabilityProgressBar;                                       // 0x02B8 (size: 0x8)
    class UProgressBar* _usesProgressBar;                                             // 0x02C0 (size: 0x8)
    float _width;                                                                     // 0x02C8 (size: 0x4)
    float _height;                                                                    // 0x02CC (size: 0x4)

}; // Size: 0x2E8

class UItemMainTooltipPanel : public UItemTooltipPanel
{
    class UOverlay* DebugOverlay;                                                     // 0x02B8 (size: 0x8)

}; // Size: 0x2C0

class UItemObstructionStatics : public UBlueprintFunctionLibrary
{

    bool OverlapClosestBlocking(const class ACharacter* Character, const FTransform& obstructionTestCapsulesWorldTransform, const TArray<FItemObstructionTestCapsule>& obstructionTestCapsules, FHitResult& HitResult, float& PenetrationDepth);
    bool OverlapBlocking(const class ACharacter* Character, const FTransform& obstructionTestCapsuleWorldTransform, const FItemObstructionTestCapsule& obstructionTestCapsule, FHitResult& HitResult, float& PenetrationDepth);
    float ChooseItemObstructionSide(const class ACharacter* Character, float existingSide);
}; // Size: 0x28

class UItemObstructionTestCapsuleComponent : public UCapsuleComponent
{
}; // Size: 0x480

class UItemOpenerTag : public UBaseItemTag
{
}; // Size: 0x30

class UItemPostSpawnAction : public UObject
{
    bool _appliesOnlyToSomeItems;                                                     // 0x0028 (size: 0x1)
    TArray<FPrimaryAssetId> _appliesToItemAssetIds;                                   // 0x0030 (size: 0x10)

}; // Size: 0x40

class UItemPostSpawnAction_AbandonedBunkerKeycard : public UItemPostSpawnAction
{
    bool _overrideFloorNumber;                                                        // 0x0040 (size: 0x1)
    int32 _floorNumberOverride;                                                       // 0x0044 (size: 0x4)

}; // Size: 0x48

class UItemPostSpawnAction_Bedroll : public UItemPostSpawnAction
{
}; // Size: 0x40

class UItemPostSpawnAction_KillboxKeycard : public UItemPostSpawnAction
{
    FGameplayTag SpawnReason;                                                         // 0x0040 (size: 0x8)

}; // Size: 0x48

class UItemPostSpawnAction_SetAmmoAmount : public UItemPostSpawnAction
{
    bool _useAbsoluteAmount;                                                          // 0x0040 (size: 0x1)
    FInt32Interval _absoluteAmount;                                                   // 0x0044 (size: 0x8)
    bool _useAmountRatio;                                                             // 0x004C (size: 0x1)
    FFloatInterval _amountRatio;                                                      // 0x0050 (size: 0x8)

}; // Size: 0x58

class UItemPostSpawnAction_SetCashAmount : public UItemPostSpawnAction
{
    bool _useAbsoluteAmount;                                                          // 0x0040 (size: 0x1)
    FInt32Interval _absoluteAmount;                                                   // 0x0044 (size: 0x8)
    bool _useAmountRatio;                                                             // 0x004C (size: 0x1)
    FFloatInterval _amountRatio;                                                      // 0x0050 (size: 0x8)

}; // Size: 0x58

class UItemPostSpawnAction_SetClothesDirtiness : public UItemPostSpawnAction
{
    FFloatInterval _dirtiness;                                                        // 0x0040 (size: 0x8)

}; // Size: 0x48

class UItemPostSpawnAction_SetResourceAmount : public UItemPostSpawnAction
{
    bool _useAbsoluteAmount;                                                          // 0x0040 (size: 0x1)
    FFloatInterval _absoluteAmount;                                                   // 0x0044 (size: 0x8)
    bool _useAmountRatio;                                                             // 0x004C (size: 0x1)
    FFloatInterval _amountRatio;                                                      // 0x0050 (size: 0x8)

}; // Size: 0x58

class UItemPostSpawnAction_SetUsage : public UItemPostSpawnAction
{
    bool _useAbsoluteUsage;                                                           // 0x0040 (size: 0x1)
    FInt32Interval _absoluteUsage;                                                    // 0x0044 (size: 0x8)
    bool _useUsageRatio;                                                              // 0x004C (size: 0x1)
    FFloatInterval _usageRatio;                                                       // 0x0050 (size: 0x8)

}; // Size: 0x58

class UItemRackSlotComponent : public USceneComponent
{
    class AItem* _placedItem;                                                         // 0x0200 (size: 0x8)
    TArray<class TSubclassOf<UPlaceableOnRackItemTag>> _acceptableTags;               // 0x0210 (size: 0x10)
    class UAkAudioEvent* _placeItemAudioEvent;                                        // 0x0220 (size: 0x8)

    void OnRep_PlacedItem();
}; // Size: 0x230

class UItemRegistry : public UActorComponent
{
}; // Size: 0x100

class UItemRequirementMountPathBlocker : public UBaseMountPathBlocker
{
    TSubclassOf<class UBaseItemTag> _requiredItemTagClass;                            // 0x0030 (size: 0x8)
    EVehicleMountType _mountTypeToBlock;                                              // 0x0038 (size: 0x1)

}; // Size: 0x40

class UItemRootComponent : public USceneComponent
{
}; // Size: 0x210

class UItemSelection : public UDataAsset
{
    TSubclassOf<class AItem> MainItem;                                                // 0x0030 (size: 0x8)
    TArray<class TSubclassOf<AItem>> SupportItems;                                    // 0x0038 (size: 0x10)
    TArray<class TSubclassOf<AItem>> Attachments;                                     // 0x0048 (size: 0x10)
    class UTexture2D* UnselectedIcon;                                                 // 0x0058 (size: 0x8)
    class UTexture2D* SelectedIcon;                                                   // 0x0060 (size: 0x8)
    class UTexture2D* DisabledIcon;                                                   // 0x0068 (size: 0x8)
    FText SelectionName;                                                              // 0x0070 (size: 0x18)
    float SizeX;                                                                      // 0x0088 (size: 0x4)
    float SizeY;                                                                      // 0x008C (size: 0x4)
    int32 TeamIndex;                                                                  // 0x0090 (size: 0x4)

}; // Size: 0x98

class UItemSelectionSlotWidget : public UUserWidget
{
    class UScrollBox* _selectionScrollBox;                                            // 0x0268 (size: 0x8)
    class UTextBlock* TextBlock_0;                                                    // 0x0270 (size: 0x8)
    class UVerticalBox* VerticalBox_0;                                                // 0x0278 (size: 0x8)
    FText Name;                                                                       // 0x0280 (size: 0x18)
    TSubclassOf<class UItemSelectionWidget> _selectionWidgetClass;                    // 0x0298 (size: 0x8)

}; // Size: 0x2A8

class UItemSelectionWidget : public UUserWidget
{
    class UImage* _selection;                                                         // 0x0268 (size: 0x8)
    class UTextBlock* _itemName;                                                      // 0x0270 (size: 0x8)
    class UItemSelection* _itemData;                                                  // 0x0280 (size: 0x8)
    class UTexture2D* _cancelTexture;                                                 // 0x0288 (size: 0x8)
    class UAkAudioEvent* _selectionAudioEvent;                                        // 0x0290 (size: 0x8)
    FSlateColor _selectedColor;                                                       // 0x0298 (size: 0x28)
    FSlateColor _notSelectedColor;                                                    // 0x02C0 (size: 0x28)

}; // Size: 0x2F0

class UItemSpawnerComponent : public USceneComponent
{
    int32 ItemSpawnLimit;                                                             // 0x01F8 (size: 0x4)
    TArray<FItemSpawnerMarker> SpawnerMarkers;                                        // 0x0200 (size: 0x10)
    FString SpawnerGroupName;                                                         // 0x0210 (size: 0x10)

}; // Size: 0x220

class UItemSpawnerEvaluationResultEntityComponentSetup : public UEntityComponentSetup
{
}; // Size: 0x48

class UItemSpawnerPreset : public UObject
{
    FItemSpawnerData SpawnerData;                                                     // 0x0028 (size: 0x70)

}; // Size: 0x98

class UItemSpawnerPreset2 : public UObject
{
    TArray<FItemSpawnerPreset_Node> Nodes;                                            // 0x0028 (size: 0x10)
    TArray<FItemSpawnerPreset_Item> Items;                                            // 0x0038 (size: 0x10)
    TArray<FItemSpawnerPreset_Subpreset> Subpresets;                                  // 0x0048 (size: 0x10)
    TArray<TSoftClassPtr<AItem>> FixedItems;                                          // 0x0058 (size: 0x10)
    bool AlwaysSpawn;                                                                 // 0x0068 (size: 0x1)
    float Probability;                                                                // 0x006C (size: 0x4)
    FInt32Interval Quantity;                                                          // 0x0070 (size: 0x8)
    bool AllowDuplicates;                                                             // 0x0078 (size: 0x1)
    bool ShouldFilterItemsByZone;                                                     // 0x0079 (size: 0x1)
    bool ShouldApplyLocationSpecificDamageModifier;                                   // 0x007A (size: 0x1)
    bool ShouldApplyLocationSpecificProbabilityModifier;                              // 0x007B (size: 0x1)
    float InitialDamage;                                                              // 0x007C (size: 0x4)
    float RandomDamage;                                                               // 0x0080 (size: 0x4)
    float InitialUsage;                                                               // 0x0084 (size: 0x4)
    float RandomUsage;                                                                // 0x0088 (size: 0x4)
    TArray<TSoftClassPtr<UItemPostSpawnAction>> PostSpawnActions;                     // 0x0090 (size: 0x10)

}; // Size: 0xA0

class UItemSpawningDataRegistry : public UObject
{
}; // Size: 0x240

class UItemSplitWidget : public UUserWidget
{
    class UEditableTextBox* _currentItemStackAmount;                                  // 0x0268 (size: 0x8)
    class UTextBlock* _newItemStackAmount;                                            // 0x0270 (size: 0x8)
    class USlider* _valueSlider;                                                      // 0x0278 (size: 0x8)
    class UButton* _splitButton;                                                      // 0x0280 (size: 0x8)

    void OnStackAmountBoxTextChanged(const FText& newText);
    void OnSplitButtonClicked();
    void OnSliderValueUpdated(float Value);
    void OnExitRequested();
}; // Size: 0x2A8

class UItemStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UItemStatusWidget : public UWaypointWidgetBase
{

    void SetTitleText(FString Text);
    void SetNameText(FString Text);
}; // Size: 0x340

class UItemTooltip : public UUserWidget
{
    class UItemTooltipPanel* _mainPanel;                                              // 0x0268 (size: 0x8)
    class UItemTooltipTab* _overviewPanels;                                           // 0x0270 (size: 0x8)
    class UItemTooltipTab* _additionalPanels;                                         // 0x0278 (size: 0x8)
    class UImage* _pageIndicatorBar;                                                  // 0x0280 (size: 0x8)
    class UTextBlock* _expandHintText;                                                // 0x0288 (size: 0x8)
    class UUserWidget* UI_Border;                                                     // 0x0290 (size: 0x8)
    class UGridPanel* _pageIndicatorGrid;                                             // 0x0298 (size: 0x8)

}; // Size: 0x2B8

class UItemTooltipPanel : public UUserWidget
{
}; // Size: 0x2B8

class UItemTooltipPanelElement : public UUserWidget
{
    FName _elementName;                                                               // 0x0268 (size: 0x8)

}; // Size: 0x270

class UItemTooltipPanelElement_Overview : public UItemTooltipPanelElement
{
    class UImage* IconImage;                                                          // 0x0270 (size: 0x8)
    class UExtendedRichTextBlock* ExtendedRichTextBlock_0;                            // 0x0278 (size: 0x8)
    class UTexture2D* Icon_;                                                          // 0x0280 (size: 0x8)
    int32 MinimumIntegralDigits_;                                                     // 0x0288 (size: 0x4)
    int32 MaximumIntegralDigits_;                                                     // 0x028C (size: 0x4)
    int32 MinimumFractionalDigits_;                                                   // 0x0290 (size: 0x4)
    int32 MaximumFractionalDigits_;                                                   // 0x0294 (size: 0x4)
    FText TextFormat_;                                                                // 0x0298 (size: 0x18)
    FTextBlockStyle TextStyle_;                                                       // 0x02B0 (size: 0x270)
    FSlateColor Color_;                                                               // 0x0520 (size: 0x28)

}; // Size: 0x548

class UItemTooltipPanelElement_OverviewText : public UItemTooltipPanelElement
{
    class UExtendedRichTextBlock* ExtendedRichTextBlock_0;                            // 0x0270 (size: 0x8)
    int32 MinimumIntegralDigits_;                                                     // 0x0278 (size: 0x4)
    int32 MaximumIntegralDigits_;                                                     // 0x027C (size: 0x4)
    int32 MinimumFractionalDigits_;                                                   // 0x0280 (size: 0x4)
    int32 MaximumFractionalDigits_;                                                   // 0x0284 (size: 0x4)
    FText TextFormat_;                                                                // 0x0288 (size: 0x18)
    FTextBlockStyle TextStyle_;                                                       // 0x02A0 (size: 0x270)
    FSlateColor Color_;                                                               // 0x0510 (size: 0x28)

}; // Size: 0x538

class UItemTooltipPanelElement_OverviewTextParameter : public UItemTooltipPanelElement
{
    class UTextBlock* TextBlock_0;                                                    // 0x0270 (size: 0x8)
    class UTextBlock* TextBlock_46;                                                   // 0x0278 (size: 0x8)
    FSlateFontInfo Font_;                                                             // 0x0280 (size: 0x58)
    FText TextFormat_;                                                                // 0x02D8 (size: 0x18)
    FText ParameterText_;                                                             // 0x02F0 (size: 0x18)
    int32 MinimumIntegralDigits_;                                                     // 0x0308 (size: 0x4)
    int32 MaximumIntegralDigits_;                                                     // 0x030C (size: 0x4)
    int32 MinimumFractionalDigits_;                                                   // 0x0310 (size: 0x4)
    int32 MaximumFractionalDigits_;                                                   // 0x0314 (size: 0x4)

}; // Size: 0x318

class UItemTooltipTab : public UWidgetSwitcher
{
    TArray<class UPanelWidget*> _panels;                                              // 0x0140 (size: 0x10)

}; // Size: 0x150

class UItemUnpackingAmmunitionSpawnMethod : public UItemUnpackingSpawnMethod
{
}; // Size: 0x28

class UItemUnpackingSpawnMethod : public UObject
{
}; // Size: 0x28

class UItemUserWidget : public UBaseItemWidget
{
    FItemUserWidgetOnClicked OnClicked;                                               // 0x0288 (size: 0x10)
    void OnClicked(class UItemUserWidget* clickedWidget);
    class UUserWidget* _uiBorder;                                                     // 0x0298 (size: 0x8)
    bool _isSelected;                                                                 // 0x02A0 (size: 0x1)
    bool _isHovered;                                                                  // 0x02A1 (size: 0x1)

    void UpdateHighlightStatus();
    void SetItem(class AItem* Item);
    void SetImage(class UTexture2D* Image);
    void OnItemSelectionChanged(bool selected);
    void OnClicked__DelegateSignature(class UItemUserWidget* clickedWidget);
    void MarkAsWeaponWidget();
    void ItemPickedUpStateChanged(class AItem* Item, bool pickedUp);
    void InteractableDestroyed(class AActor* interactable);
    class AItem* GetItem();
    class UItemUserWidget* CreateFromItem(class AItem* Item);
    void BlinkItemContainer();
}; // Size: 0x2A8

class UItemVirtualizationVisitorComponent : public UActorComponent
{
    float _visitorBounds;                                                             // 0x00B0 (size: 0x4)

}; // Size: 0xB8

class UItemWidget2 : public UUserWidget
{
    class UTextBlock* LowerLeftTextFirst;                                             // 0x02A0 (size: 0x8)
    class UTextBlock* LowerLeftTextSecond;                                            // 0x02A8 (size: 0x8)
    class UProgressBar* ProgressBarDurability;                                        // 0x0300 (size: 0x8)
    class UProgressBar* ProgressBarUses;                                              // 0x0308 (size: 0x8)
    class UImage* BackgroundHighlight;                                                // 0x0310 (size: 0x8)
    TScriptInterface<class IInventoryNode> _item;                                     // 0x0320 (size: 0x10)
    TScriptInterface<class IInventoryContainer> _container;                           // 0x0330 (size: 0x10)
    class UImage* _icon;                                                              // 0x0340 (size: 0x8)
    class USizeBox* _iconSizeBox;                                                     // 0x0348 (size: 0x8)
    class UImage* _background;                                                        // 0x0350 (size: 0x8)
    class UInvalidationBox* _mainInvalidationBox;                                     // 0x0358 (size: 0x8)
    class UOverlay* _priceOverlay;                                                    // 0x0360 (size: 0x8)
    class UTextBlock* _priceText;                                                     // 0x0368 (size: 0x8)
    class UUniformGridPanel* _backgroundGrid;                                         // 0x0370 (size: 0x8)
    class UUniformGridPanel* _foregroundGrid;                                         // 0x0378 (size: 0x8)
    class UOverlay* _selectionOverlay;                                                // 0x0380 (size: 0x8)
    class UVerticalBox* _healthPercentageProgressBarVBox;                             // 0x0390 (size: 0x8)
    class UImage* _irreparableIcon;                                                   // 0x0398 (size: 0x8)
    class UImage* _disabledOverlay;                                                   // 0x03A0 (size: 0x8)
    class UImage* _radiationIcon;                                                     // 0x03A8 (size: 0x8)
    FLinearColor _defaultBackgroundColour;                                            // 0x03B0 (size: 0x10)
    FLinearColor _hoveredBackgroundColour;                                            // 0x03C0 (size: 0x10)
    FLinearColor _selectedBackgroundColour;                                           // 0x03D0 (size: 0x10)
    FLinearColor _selectedHoveredBackgroundColour;                                    // 0x03E0 (size: 0x10)
    class UHorizontalBox* _lowerLeftBox;                                              // 0x0410 (size: 0x8)
    class UImage* _additionalIcon;                                                    // 0x0418 (size: 0x8)
    class USizeBox* _additionalIconSizeBox;                                           // 0x0420 (size: 0x8)
    TArray<class UTexture2D*> _temperatureLevelImages;                                // 0x0460 (size: 0x10)
    TArray<class UTexture2D*> _wetnessLevelImages;                                    // 0x0470 (size: 0x10)
    class USizeBox* MainSizeBox;                                                      // 0x0480 (size: 0x8)
    class UImage* Temperature;                                                        // 0x0488 (size: 0x8)
    class UImage* Wetness;                                                            // 0x0490 (size: 0x8)
    class UTextBlock* UsageSeparator;                                                 // 0x0498 (size: 0x8)
    class UImage* UsesBackground;                                                     // 0x04A0 (size: 0x8)
    class UImage* HealthBackground;                                                   // 0x04A8 (size: 0x8)
    class UTextBlock* LowerRightText;                                                 // 0x04B0 (size: 0x8)
    class UImage* UpperRightBackground;                                               // 0x04B8 (size: 0x8)
    class UTextBlock* UpperRightText;                                                 // 0x04C0 (size: 0x8)
    class UImage* UpperLeftBackground;                                                // 0x04C8 (size: 0x8)
    class UTextBlock* UpperLeftText;                                                  // 0x04D0 (size: 0x8)
    class UImage* MiddleBackground;                                                   // 0x04D8 (size: 0x8)
    class UTextBlock* MiddleText;                                                     // 0x04E0 (size: 0x8)
    class UImage* UpperBackground;                                                    // 0x04E8 (size: 0x8)
    class UImage* LowerBackground;                                                    // 0x04F0 (size: 0x8)
    class UWidgetAnimation* LowerLeftBoxFadeIn;                                       // 0x04F8 (size: 0x8)
    class UWidgetAnimation* LowerLeftBoxFadeOut;                                      // 0x0500 (size: 0x8)
    class UWidgetAnimation* AdditionalIconFadeIn;                                     // 0x0508 (size: 0x8)
    class UWidgetAnimation* AdditionalIconFadeOut;                                    // 0x0510 (size: 0x8)
    class UWidgetAnimation* LowerLeftBoxShow;                                         // 0x0518 (size: 0x8)

    void OnDropOperation(class UDragDropOperation* Operation);
    void OnDragOperationCancelled(class UDragDropOperation* Operation);
}; // Size: 0x520

class UItemWidgetDragDropOperation : public UDragDropOperation
{
}; // Size: 0x90

class UItemsCraftingDetailsPanel : public UUserWidget
{
    class UBigItemCraftingButton* _bigItemCraftingButton;                             // 0x0270 (size: 0x8)
    class UTextBlock* _descriptionTextBlock;                                          // 0x0278 (size: 0x8)
    class UCheckBox* _ingredientsExpandCheckBox;                                      // 0x0280 (size: 0x8)
    class UWrapBox* _recipeIngredientButtonsWrapBox;                                  // 0x0288 (size: 0x8)
    class UOverlay* _possibleIngredientsOverlay;                                      // 0x0290 (size: 0x8)
    class UWrapBox* _possibleRecipeIngredientButtonsWrapBox;                          // 0x0298 (size: 0x8)
    class UVerticalBox* _linksVerticalBox;                                            // 0x02A0 (size: 0x8)
    class UButton* _dlcStoreLinkButton;                                               // 0x02A8 (size: 0x8)
    class UTextBlock* _dlcText;                                                       // 0x02B0 (size: 0x8)
    class UButton* _twitchDropLinkButton;                                             // 0x02B8 (size: 0x8)
    class UTextBlock* _twitchDropText;                                                // 0x02C0 (size: 0x8)
    TSubclassOf<class URecipeIngredientButton> _recipeIngredientButtonClass;          // 0x02C8 (size: 0x8)
    TSubclassOf<class URecipeIngredientButton> _possibleRecipeIngredientButtonClass;  // 0x02D0 (size: 0x8)

    void OnDropdownStateChanged(bool isCollapsed);
}; // Size: 0x388

class UItemsCraftingPanel : public UUserWidget
{
    class UCraftingCategoriesTabButtonsContainer* _craftingCategoriesTabButtonsContainer; // 0x0270 (size: 0x8)
    class USearchBox* _searchBox;                                                     // 0x0278 (size: 0x8)
    class UWidgetSwitcher* _categoriesDetailsSwitcher;                                // 0x0280 (size: 0x8)
    class UTextBlock* _selectedCategoryTitle;                                         // 0x0288 (size: 0x8)
    class UScrollBox* _categoriesScrollBox;                                           // 0x0290 (size: 0x8)
    class UItemsCraftingDetailsPanel* _craftingDetailsPanel;                          // 0x0298 (size: 0x8)
    class UPrimaryButton* _detailsAndBackButton;                                      // 0x02A0 (size: 0x8)
    FText _detailsTooltipText;                                                        // 0x02A8 (size: 0x18)
    FText _backTooltipText;                                                           // 0x02C0 (size: 0x18)
    class UPrimaryButton* _autoCraftButton;                                           // 0x02D8 (size: 0x8)
    FText _autoCraftTooltipText;                                                      // 0x02E0 (size: 0x18)
    class UPrimaryButton* _craftButton;                                               // 0x02F8 (size: 0x8)
    FText _craftTooltipText;                                                          // 0x0300 (size: 0x18)
    class UWidget* _examinedItemContainer;                                            // 0x0318 (size: 0x8)
    class UTextBlock* _examinedItemName;                                              // 0x0320 (size: 0x8)
    class UImage* _examinedItemIcon;                                                  // 0x0328 (size: 0x8)
    class UConZCustomInteractionButton* _collapseAllButton;                           // 0x0330 (size: 0x8)
    class UConZCustomInteractionButton* _expandAllButton;                             // 0x0338 (size: 0x8)
    class UTextBlock* _examinedItemDescription;                                       // 0x0340 (size: 0x8)
    TSubclassOf<class UCraftingRecipeButtonsContainer> _craftingRecipeButtonsContainerClass; // 0x0348 (size: 0x8)
    TSubclassOf<class UTextOnlyTooltip> _tooltipClass;                                // 0x0350 (size: 0x8)
    FMargin _categoriesPadding;                                                       // 0x03A8 (size: 0x10)
    TSubclassOf<class AItem> _examinedItem;                                           // 0x03D0 (size: 0x8)

    void OnItemManuallySelected(class UItemWidget2* Widget);
    void OnDetailsAndBackButtonClicked();
    void OnCraftButtonClicked();
    void OnAutoCraftButtonClicked();
    void OnAnyButtonHovered();
    void HandleOnExpandAllClicked();
    void HandleOnCollapseAllClicked();
}; // Size: 0x3E8

class UItemsCraftingUIContext : public UUIContext
{
}; // Size: 0x28

class UItemsCraftingUIController : public UCraftingUIControllerBase
{
}; // Size: 0x3F0

class UJournalPanelWidget : public UTabMenuPanel
{
    class UTabContainer* _tabContainer;                                               // 0x0268 (size: 0x8)
    class UWidgetSwitcher* _leftPanelSwitcher;                                        // 0x0270 (size: 0x8)
    class UWidgetSwitcher* _rightPanelSwitcher;                                       // 0x0278 (size: 0x8)
    class UQuestEntriesPanelWidget* _questEntriesLeftPanel;                           // 0x0280 (size: 0x8)
    class UQuestEntryDetailsPanelWidget* _questEntryDetailsRightPanel;                // 0x0288 (size: 0x8)
    class UOutpostTraderDetailsPanelWidget* _outpostTraderEntryDetailsRightPanel;     // 0x0290 (size: 0x8)
    class USizeBox* _rightPanelSizeBox;                                               // 0x0298 (size: 0x8)
    class UOutpostEntriesPanelWidget* _outpostEntriesLeftPanel;                       // 0x02A0 (size: 0x8)

}; // Size: 0x2B8

class UJournalUIController : public UObject
{
}; // Size: 0x3A8

class UKeyBinding : public UUserWidget
{
    class UTextBlock* ActionNameText;                                                 // 0x0298 (size: 0x8)
    class UTextBlock* ActionKeyText;                                                  // 0x02A0 (size: 0x8)
    FText UserFriendlyName;                                                           // 0x02A8 (size: 0x18)
    FName Name;                                                                       // 0x02C0 (size: 0x8)
    bool IsAxis;                                                                      // 0x02C8 (size: 0x1)
    float AxisScale;                                                                  // 0x02CC (size: 0x4)
    FName GroupName;                                                                  // 0x02D0 (size: 0x8)
    bool CheckOnlySameKeyWithinGroup;                                                 // 0x02D8 (size: 0x1)
    FName SameKeyBlockerGroupName;                                                    // 0x02DC (size: 0x8)

}; // Size: 0x300

class UKeyCardItemEntitySetup : public UItemEntitySetup
{
    FGameplayTag SpawnReason;                                                         // 0x0090 (size: 0x8)
    TMap<FGameplayTag, float> ExpirationTimeOverrideHours;                            // 0x0098 (size: 0x50)

}; // Size: 0xE8

class UKeyboardIllumination : public UObject
{
}; // Size: 0x28

class UKillBoxTimerWidget : public UUserWidget
{
    class UTextBlock* _remainingTimeMinutes1;                                         // 0x0268 (size: 0x8)
    class UTextBlock* _remainingTimeMinutes2;                                         // 0x0270 (size: 0x8)
    class UTextBlock* _remainingTimeSeconds1;                                         // 0x0278 (size: 0x8)
    class UTextBlock* _remainingTimeSeconds2;                                         // 0x0280 (size: 0x8)

    void SetTime(int32 Minutes, int32 Seconds);
}; // Size: 0x288

class UKillFeedNotification : public UConZNotification
{
}; // Size: 0x30

class UKillFeedNotificationDescription : public UNotificationDescription
{
    FString Prefix;                                                                   // 0x0040 (size: 0x10)
    FString characterName;                                                            // 0x0050 (size: 0x10)
    FString suffix;                                                                   // 0x0060 (size: 0x10)
    bool Ping;                                                                        // 0x0070 (size: 0x1)

}; // Size: 0x78

class UKillNotificationWidget : public UUserWidget
{
    class UTextBlock* _prefix;                                                        // 0x0268 (size: 0x8)
    class UTextBlock* _name;                                                          // 0x0270 (size: 0x8)
    class UTextBlock* _suffix;                                                        // 0x0278 (size: 0x8)
    class UHorizontalBox* HorizontalBox_57;                                           // 0x0280 (size: 0x8)

}; // Size: 0x288

class UKillboxComponent : public UActorComponent
{
    bool _isActivated;                                                                // 0x00B0 (size: 0x1)
    bool _isFinale;                                                                   // 0x00B1 (size: 0x1)
    float _killBoxDuration;                                                           // 0x00B4 (size: 0x4)
    float _lockdownDuration;                                                          // 0x00B8 (size: 0x4)
    float _reductionTimeCap;                                                          // 0x00BC (size: 0x4)
    float _reductionTimePenalty;                                                      // 0x00C0 (size: 0x4)
    float _saveStateInterval;                                                         // 0x00C4 (size: 0x4)
    float _gasEntranceTime;                                                           // 0x00C8 (size: 0x4)
    TSubclassOf<class UPrisonerBodyCondition_KillBoxGasPoisoning> _gasPoisoningCondition; // 0x00D0 (size: 0x8)
    float _panicModeTimeCut;                                                          // 0x00D8 (size: 0x4)
    float _laserEntranceTime;                                                         // 0x00DC (size: 0x4)
    float _finaleEntranceCloseTime;                                                   // 0x00E0 (size: 0x4)
    float _difficultyCalibrationTime;                                                 // 0x00E4 (size: 0x4)
    int32 _calibrationPrisonerThreshold;                                              // 0x00E8 (size: 0x4)
    float _zapperDamageModifierPerPrisoner;                                           // 0x00EC (size: 0x4)
    float _maxZapperDamageModifier;                                                   // 0x00F0 (size: 0x4)
    TArray<FRoomDifficultyConfiguration> _availableDifficultyConfigurations;          // 0x00F8 (size: 0x10)
    int32 _maxSpawnedZombies;                                                         // 0x0108 (size: 0x4)
    int32 _maxSpawnedZombiesPerMistake;                                               // 0x010C (size: 0x4)
    int32 _prisonerNumPerGoldDoorZapper;                                              // 0x0110 (size: 0x4)
    int32 _maxGoldDoorZappers;                                                        // 0x0114 (size: 0x4)
    float _specialPauseCountdownDuration;                                             // 0x0118 (size: 0x4)
    int32 _pauseMaxPrisonerCount;                                                     // 0x011C (size: 0x4)
    int32 _spawnMinPrisonerCount;                                                     // 0x0120 (size: 0x4)
    float _specialEventInterval;                                                      // 0x0124 (size: 0x4)
    float _laserQuoteTimeRemainingTrigger;                                            // 0x0128 (size: 0x4)
    float _gasQuoteTimeRemainingTrigger;                                              // 0x012C (size: 0x4)
    float _randomQuoteInterval;                                                       // 0x0130 (size: 0x4)
    float _timedHostBlockTime;                                                        // 0x0134 (size: 0x4)
    TArray<class UAkAudioEvent*> _killBoxOpeningQuotes;                               // 0x0138 (size: 0x10)
    TArray<class UAkAudioEvent*> _killBoxLaserAnnouncementQuotes;                     // 0x0148 (size: 0x10)
    TArray<class UAkAudioEvent*> _killBoxDescriptionQuotes;                           // 0x0158 (size: 0x10)
    TArray<class UAkAudioEvent*> _killBoxRandomnQuotes;                               // 0x0168 (size: 0x10)
    TArray<class UAkAudioEvent*> _killBoxFailureQuotes;                               // 0x0178 (size: 0x10)
    TArray<class UAkAudioEvent*> _killBoxGasAnnouncementQuotes;                       // 0x0188 (size: 0x10)
    TArray<class UAkAudioEvent*> _killBoxZombieSpawnQuotes;                           // 0x0198 (size: 0x10)
    TArray<class UAkAudioEvent*> _killBoxTimePauseQuotes;                             // 0x01A8 (size: 0x10)
    TArray<class UAkAudioEvent*> _difficultyCalibrationQuote;                         // 0x01B8 (size: 0x10)
    class UAkAudioEvent* KillBoxMusicStart;                                           // 0x01C8 (size: 0x8)
    class UAkAudioEvent* _killBoxMusicStop;                                           // 0x01D0 (size: 0x8)
    class UAkAudioEvent* _killBoxGasSound;                                            // 0x01D8 (size: 0x8)
    class UAkAudioEvent* KillBox30SecondsMark;                                        // 0x01E0 (size: 0x8)
    class UAkAudioEvent* KillBox10SecondsMark;                                        // 0x01E8 (size: 0x8)
    class UAkAudioEvent* KillBox5SecondsMark;                                         // 0x01F0 (size: 0x8)
    class UAkAudioEvent* KillBox4SecondsMark;                                         // 0x01F8 (size: 0x8)
    class UAkAudioEvent* KillBox3SecondsMark;                                         // 0x0200 (size: 0x8)
    class UAkAudioEvent* KillBox2SecondsMark;                                         // 0x0208 (size: 0x8)
    class UAkAudioEvent* KillBox1SecondsMark;                                         // 0x0210 (size: 0x8)
    class UAkAudioEvent* KillBoxBuzzerSound;                                          // 0x0218 (size: 0x8)
    class ADoor* _killBoxEntrance;                                                    // 0x0220 (size: 0x8)
    class AKillBoxDetectionField* _detectionField;                                    // 0x0228 (size: 0x8)
    class UMovableCollisionFieldComponent* _laserComponent;                           // 0x0230 (size: 0x8)
    TArray<class AKillBoxSpawnPoint*> _spawnPoints;                                   // 0x0238 (size: 0x10)
    TArray<class AKillBoxSpawnPoint*> _hardSpawnPoints;                               // 0x0248 (size: 0x10)
    TArray<class AZombie2*> _spawnedZombies;                                          // 0x0258 (size: 0x10)
    class UAkComponent* _currentAudioComponent;                                       // 0x0268 (size: 0x8)
    class UAkComponent* _musicComponent;                                              // 0x0270 (size: 0x8)
    float _remainingTime;                                                             // 0x0278 (size: 0x4)
    float _unlockFailureAssistanceBonus;                                              // 0x027C (size: 0x4)
    TArray<class UAkAudioEvent*> _queuedQuotes;                                       // 0x02E0 (size: 0x10)
    TArray<class ADoor*> _electricalDoors;                                            // 0x02F0 (size: 0x10)
    TArray<FRoomDefinition> _roomDefinitions;                                         // 0x0300 (size: 0x10)
    TArray<class UKillBoxTimerWidget*> _timerWidgets;                                 // 0x0310 (size: 0x10)
    TArray<class UParticleSystemComponent*> _gasEmitters;                             // 0x0320 (size: 0x10)
    class UParticleSystemComponent* _gasMist;                                         // 0x0330 (size: 0x8)
    class ASwitch* _panicButton;                                                      // 0x0338 (size: 0x8)

    void SetPanicbutton(class ASwitch* panicButton);
    void SetMusicComponent(class UAkComponent* musicComponent);
    void SetLaserComponent(class UMovableCollisionFieldComponent* laserComponent);
    void SetKillBoxEntrance(class ADoor* entrance);
    void SetDetectionField(class AKillBoxDetectionField* detectionField);
    void OnRep_KillBoxActivation();
    void OnKillBoxSetup();
    void OnInnerDoorUnlockedDelegate(class ADoor* Door);
    void OnEntranceUnlockedDelegate(class ADoor* Door);
    void OnEntranceOpenedDelegate();
    void OnEntranceCloseFinishedDelegate();
    void OnElectricDoorsDefusedDelegate(class ADoor* Door);
    void NetMulticast_StopMusic();
    void NetMulticast_StopAllQuotes();
    void NetMulticast_ReportKillBoxDeactivation();
    void NetMulticast_ReportKillActivation();
    void NetMulticast_QueueHostQuote(class UAkAudioEvent* Sound, bool playOnlyIfInstant, bool stopPreviousQuote);
    void NetMulticast_PlaySound(class UAkAudioEvent* Sound);
    void NetMulticast_ActivateGasSound();
    void NetMulticast_ActivateGasParticles(bool Activate);
    void InitiatePanicMode();
    void InitiateKillBoxFailure();
    void AddTimerWidget(class UKillBoxTimerWidget* timerWidget);
    void AddSpawnPoint(class ADoor* holeDoor, class AKillBoxSpawnPoint* Spawner);
    void AddRoomDefinition(class ADoor* RoomDoor, class UStaticMeshComponent* Locker, class AKillBoxC4SpawnPoint* C4);
    void AddHardSpawnPoint(class ADoor* holeDoor, class AKillBoxSpawnPoint* Spawner);
    void AddGasMist(class UParticleSystemComponent* gasMist);
    void AddGasEmitter(class UParticleSystemComponent* gasEmitter);
    void AddElectricalDoor(class ADoor* electricalDoor);
}; // Size: 0x360

class ULWObjectSetup : public UObject
{
}; // Size: 0x30

class ULadderMarkersComponent : public USceneComponent
{
    TArray<FLadderMarker> _ladderMarkers;                                             // 0x01F8 (size: 0x10)

}; // Size: 0x220

class ULadderStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class ULandingDamageCustomization : public UDamageCustomization
{
    float PrisonerAnkleSprainEnergyThreshold;                                         // 0x0028 (size: 0x4)

}; // Size: 0x30

class ULandingEffects : public UDataAsset
{
    float MinImpactSpeedForLightEffects;                                              // 0x0030 (size: 0x4)
    float MinImpactSpeedForMediumEffects;                                             // 0x0034 (size: 0x4)
    float MinImpactSpeedForHeavyEffects;                                              // 0x0038 (size: 0x4)
    class UAkAudioEvent* ImpactAudioEvent;                                            // 0x0040 (size: 0x8)
    FLandingEffectDataPerPhysicalSurface Default;                                     // 0x0048 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface grass;                                       // 0x0078 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface ForrestGroundCoastal;                        // 0x00A8 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface ForrestGroundContinental;                    // 0x00D8 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Rock;                                        // 0x0108 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Stone;                                       // 0x0138 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Gravel;                                      // 0x0168 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface GravelBeach;                                 // 0x0198 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Pebbles;                                     // 0x01C8 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Snow;                                        // 0x01F8 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Ice;                                         // 0x0228 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Sand;                                        // 0x0258 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Asphalt;                                     // 0x0288 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Dirt;                                        // 0x02B8 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Water;                                       // 0x02E8 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface WaterOcean;                                  // 0x0318 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Cloth;                                       // 0x0348 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Metal;                                       // 0x0378 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Aluminium;                                   // 0x03A8 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Concrete;                                    // 0x03D8 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Brick;                                       // 0x0408 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Wood;                                        // 0x0438 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Plastic;                                     // 0x0468 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Rubber;                                      // 0x0498 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Glass;                                       // 0x04C8 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Folliage;                                    // 0x04F8 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Bark;                                        // 0x0528 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Flesh;                                       // 0x0558 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface RoofTile;                                    // 0x0588 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface CeramicsTiles;                               // 0x05B8 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Scrap;                                       // 0x05E8 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Trunk;                                       // 0x0618 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Leaves;                                      // 0x0648 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Plaster;                                     // 0x0678 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Kevlar;                                      // 0x06A8 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface ForceField;                                  // 0x06D8 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface NoEffect;                                    // 0x0708 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface WhiteGravel;                                 // 0x0738 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface Mud;                                         // 0x0768 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface RiverSand;                                   // 0x0798 (size: 0x30)
    FLandingEffectDataPerPhysicalSurface GrassContinental;                            // 0x07C8 (size: 0x30)

}; // Size: 0x7F8

class ULargeAquaticAnimalSpeciesData : public UDataAsset
{
    TSubclassOf<class ALargeAquaticAnimal> AnimalClass;                               // 0x0030 (size: 0x8)
    float RequiredDepthForSpawning;                                                   // 0x0038 (size: 0x4)
    EConZWaterSplineType SpawningWaterType;                                           // 0x003C (size: 0x1)

}; // Size: 0x40

class ULaserTriggerComponent : public UTriggerComponent
{
    class UBoxComponent* BoxCollisionComponent;                                       // 0x04E0 (size: 0x8)
    class UStaticMeshComponent* VisualizationMeshComponent;                           // 0x04E8 (size: 0x8)
    FVector _laserDirection;                                                          // 0x04F0 (size: 0xC)
    float _maxLaserLength;                                                            // 0x04FC (size: 0x4)
    float _laserThickness;                                                            // 0x0500 (size: 0x4)
    float _laserHeight;                                                               // 0x0504 (size: 0x4)
    class UStaticMesh* _visualizationMesh;                                            // 0x0508 (size: 0x8)
    FTransform _laserMeshTransform;                                                   // 0x0510 (size: 0x30)

    void BoxComponent_OnComponentEndOverlap(class UPrimitiveComponent* activatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
    void BoxComponent_OnComponentBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
}; // Size: 0x550

class ULevelQuadTree : public UWorldSubsystem
{
}; // Size: 0x38

class ULevelUpNotification : public UConZNotification
{
}; // Size: 0x30

class ULevelUpNotificationDescription : public UNotificationDescription
{
    TSubclassOf<class USkill> Skill;                                                  // 0x0040 (size: 0x8)
    ESkillLevel skillLevel;                                                           // 0x0048 (size: 0x1)

}; // Size: 0x50

class ULevelUpNotificationWidget : public UUserWidget
{
    class UOverlay* _overlay;                                                         // 0x0268 (size: 0x8)
    class UImage* _backgroundImage;                                                   // 0x0270 (size: 0x8)
    class UImage* _arrowImage;                                                        // 0x0278 (size: 0x8)
    class UTextBlock* _skillLevelText;                                                // 0x0280 (size: 0x8)
    class UTextBlock* _skillNameText;                                                 // 0x0288 (size: 0x8)
    class UAkAudioEvent* _levelUpNotificationAudioEvent;                              // 0x0290 (size: 0x8)
    float _displayTime;                                                               // 0x029C (size: 0x4)
    float _slideInTime;                                                               // 0x02A0 (size: 0x4)
    float _slideOutTime;                                                              // 0x02A4 (size: 0x4)

    class UWidgetAnimation* GetLevelUpAnimation();
}; // Size: 0x2D0

class ULiftComponent : public USceneComponent
{
    FVector PropellerLocation;                                                        // 0x01F8 (size: 0xC)
    float AirDensity;                                                                 // 0x0204 (size: 0x4)
    float MaxForceMagnitude;                                                          // 0x0208 (size: 0x4)
    float WindInfluenceMultiplier;                                                    // 0x020C (size: 0x4)
    TArray<FAerodynamicSurface> _aerodynamicSurfaces;                                 // 0x0210 (size: 0x10)

}; // Size: 0x230

class ULoadingIconWidget : public UUserWidget
{
}; // Size: 0x268

class ULoadingScreen : public UUserWidget
{
}; // Size: 0x270

class ULockBombData : public ULockData
{
    float Duration;                                                                   // 0x00B8 (size: 0x4)

}; // Size: 0xC0

class ULockBombDefusalMinigameConfiguration : public ULockpickingMinigameConfiguration
{
}; // Size: 0x70

class ULockData : public UObject
{
    TSubclassOf<class AMinigame> LockMinigameClass;                                   // 0x0028 (size: 0x8)
    TSubclassOf<class ULockpickingMinigameConfiguration> LockMinigameConfigurationClass; // 0x0030 (size: 0x8)
    TSubclassOf<class UFailurePenalty> FailurePenaltyClass;                           // 0x0038 (size: 0x8)
    bool AreFamePointsRequired;                                                       // 0x0040 (size: 0x1)
    bool IgnoreLockProtection;                                                        // 0x0041 (size: 0x1)
    bool CanBeForceUnlocked;                                                          // 0x0042 (size: 0x1)
    float ForceUnlockTime;                                                            // 0x0044 (size: 0x4)
    float TotalCrowbarDamage;                                                         // 0x0048 (size: 0x4)
    ELockDifficulty LockDifficulty;                                                   // 0x004C (size: 0x1)
    FText LockedMessage;                                                              // 0x0050 (size: 0x18)
    FText LockpickMessage;                                                            // 0x0068 (size: 0x18)
    int32 NumberOfNeutralizationAttempts;                                             // 0x0080 (size: 0x4)
    int32 NumRemainingNeutralizationAttempts;                                         // 0x0084 (size: 0x4)
    float lockHP;                                                                     // 0x0088 (size: 0x4)
    FThieverySkillExperienceAwards NoSkillExperienceAwards;                           // 0x008C (size: 0x8)
    FThieverySkillExperienceAwards BasicSkillExperienceAwards;                        // 0x0094 (size: 0x8)
    FThieverySkillExperienceAwards MediumSkillExperienceAwards;                       // 0x009C (size: 0x8)
    FThieverySkillExperienceAwards AdvancedSkillExperienceAwards;                     // 0x00A4 (size: 0x8)
    FThieverySkillExperienceAwards AboveAdvancedSkillExperienceAwards;                // 0x00AC (size: 0x8)

}; // Size: 0xB8

class ULockItemTag : public UUpgradeItemTag
{
    class ULockData* LockData;                                                        // 0x0038 (size: 0x8)

}; // Size: 0x40

class ULockProtectionTag : public UUpgradeItemTag
{
    class UParticleSystem* FailureParticles;                                          // 0x0038 (size: 0x8)
    class UAkAudioEvent* FailureAudio;                                                // 0x0040 (size: 0x8)
    class UParticleSystem* FailureParticlesInWorld;                                   // 0x0048 (size: 0x8)
    class UAkAudioEvent* FailureAudioInWorld;                                         // 0x0050 (size: 0x8)
    FVector FailureParticlesScaleInWorld;                                             // 0x0058 (size: 0xC)
    float _baseDamage;                                                                // 0x0064 (size: 0x4)

    void SetModifiedDamage(float Damage);
    void ResetDamage();
    float GetTotalDamage();
    float GetBaseDamage();
}; // Size: 0x70

class ULockableItemComponent : public UItemComponent
{
    TArray<class ULockData*> _staticLocks;                                            // 0x00D0 (size: 0x10)
    TArray<class ULockItemTag*> _lockItems;                                           // 0x00E0 (size: 0x10)
    EAccessLevel _activeAccessLevel;                                                  // 0x00F0 (size: 0x1)

}; // Size: 0xF8

class ULockpickItemTag : public UBaseItemTag
{
    class UStaticMesh* Mesh;                                                          // 0x0030 (size: 0x8)
    float LockpickingDurability;                                                      // 0x0038 (size: 0x4)

}; // Size: 0x40

class ULockpickableLocksVisualComponent : public USceneComponent
{
    TArray<FString> _lockStaticMeshComponentNames;                                    // 0x0208 (size: 0x10)
    class UStaticMesh* _lockMeshPerLockDifficulty;                                    // 0x0218 (size: 0x28)

}; // Size: 0x240

class ULockpickingMinigameConfiguration : public UMinigameConfiguration
{
    class ULockData* LockData;                                                        // 0x0058 (size: 0x8)

}; // Size: 0x70

class ULockpickingMinigameValidationParams : public UMinigameValidationParams
{
}; // Size: 0x30

class ULockpickingStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class ULockpickingTensionToolItemTag : public UBaseItemTag
{
    class UStaticMesh* Mesh;                                                          // 0x0030 (size: 0x8)
    FTransform TensionToolTransform;                                                  // 0x0040 (size: 0x30)

}; // Size: 0x70

class ULockpickingWidget : public UMinigameWidget
{

    void ShowInfo();
    void SetLockPickingDifficulty(ELockPickingDifficulty Value);
    void OnSuccess();
    void OnFailure();
    void HideInfo();
    int32 GetTensionToolCount();
    float GetRemainingTime();
    int32 GetLockpicksCount();
    int32 GetFamePoints();
    float GetDuration();
}; // Size: 0x288

class ULogoutMessageBox : public UMessageBox
{
    class UTextBlock* _countdown;                                                     // 0x02D0 (size: 0x8)

}; // Size: 0x2D8

class UMainMenu : public UBaseMenu
{
    class UConZStandardButton* _continueButton;                                       // 0x0268 (size: 0x8)
    class UConZStandardButton* _multiplayerButton;                                    // 0x0270 (size: 0x8)
    class UConZStandardButton* _singleplayerButton;                                   // 0x0278 (size: 0x8)
    class UConZStandardButton* _optionsButton;                                        // 0x0280 (size: 0x8)
    class UConZStandardButton* _creditsButton;                                        // 0x0288 (size: 0x8)
    class UConZStandardButton* _quitButton;                                           // 0x0290 (size: 0x8)
    class UTextBlock* _selectedCharacter;                                             // 0x0298 (size: 0x8)
    class UTextBlock* _gameVersionText;                                               // 0x02A0 (size: 0x8)
    class UTwitchDropsMainMenuButtonWidget* _twitchDropsButton;                       // 0x02A8 (size: 0x8)
    FText _createOrSelectCharacterText;                                               // 0x02B0 (size: 0x18)
    FText _quitMessageBoxText;                                                        // 0x02C8 (size: 0x18)
    FText _survivalTipLevelWelcomingMessage;                                          // 0x02E8 (size: 0x18)
    FText _survivalTipLevelWelcomingMessageNote;                                      // 0x0300 (size: 0x18)
    TSubclassOf<class UTelemetryMenu> _telemetryMenuWidgetClass;                      // 0x0318 (size: 0x8)

    void OnSingleplayerClicked();
    void OnQuitClicked();
    void OnOptionsClicked();
    void OnMultiplayerClicked();
    void OnCreditsClicked();
    void OnContinueClicked();
}; // Size: 0x320

class UMalfunctionWidget : public UUserWidget
{
    class UTextBlock* _descriptionWidget;                                             // 0x0270 (size: 0x8)

    void ExecuteAction();
}; // Size: 0x278

class UMalfunctionsContainerWidget : public UUserWidget
{
    FSlateColor HotkeyTextColorUnhovered;                                             // 0x0268 (size: 0x28)
    FSlateColor HotkeyTextColorHovered;                                               // 0x0290 (size: 0x28)
    class UCircularMenuWidget* _malfunctionsCircularMenu;                             // 0x02B8 (size: 0x8)
    class UWidgetSwitcher* _hotkeyDisplaySwitcher;                                    // 0x02C0 (size: 0x8)
    class UTextBlock* _twoOp_1;                                                       // 0x02C8 (size: 0x8)
    class UTextBlock* _twoOp_2;                                                       // 0x02D0 (size: 0x8)
    class UTextBlock* _threeOp_1;                                                     // 0x02D8 (size: 0x8)
    class UTextBlock* _threeOp_2;                                                     // 0x02E0 (size: 0x8)
    class UTextBlock* _threeOp_3;                                                     // 0x02E8 (size: 0x8)
    class UTextBlock* _fourOp_1;                                                      // 0x02F0 (size: 0x8)
    class UTextBlock* _fourOp_2;                                                      // 0x02F8 (size: 0x8)
    class UTextBlock* _fourOp_3;                                                      // 0x0300 (size: 0x8)
    class UTextBlock* _fourOp_4;                                                      // 0x0308 (size: 0x8)

}; // Size: 0x310

class UManualEnhancedImageTextWidget : public UUserWidget
{
    class USizeBox* _sizeBox;                                                         // 0x0268 (size: 0x8)
    class URichTextBlock* _richTextBlock;                                             // 0x0270 (size: 0x8)

}; // Size: 0x278

class UManualEnhancedImageWidget : public UUserWidget
{
    class UOverlay* _imageContainer;                                                  // 0x0268 (size: 0x8)
    class UImage* _image;                                                             // 0x0270 (size: 0x8)

}; // Size: 0x278

class UManualEntriesDropdownWidget : public UUserWidget
{
    class UImage* _background;                                                        // 0x0268 (size: 0x8)
    class UTextBlock* _categoryNameTextBlock;                                         // 0x0270 (size: 0x8)
    class UCheckBox* _chbSwitchDropdownState;                                         // 0x0278 (size: 0x8)
    class UVerticalBox* _entriesContainer;                                            // 0x0280 (size: 0x8)
    int32 _unopenedFontSize;                                                          // 0x0288 (size: 0x4)
    int32 _openedFontSize;                                                            // 0x028C (size: 0x4)
    FLinearColor _unopenedBackgroundColorAndOpacity;                                  // 0x0290 (size: 0x10)
    FLinearColor _openedBackgroundColorAndOpacity;                                    // 0x02A0 (size: 0x10)

    void OnDropdownStateChanged(bool isCollapsed);
}; // Size: 0x2B0

class UManualEntry : public UPrimaryDataAsset
{
    FText Title;                                                                      // 0x0030 (size: 0x18)
    FText Description;                                                                // 0x0048 (size: 0x18)

}; // Size: 0x60

class UManualEntryWidget : public UUserWidget
{
    class UImage* _backgroundImage;                                                   // 0x0278 (size: 0x8)
    class UTextBlock* _entryName;                                                     // 0x0280 (size: 0x8)
    class UTextBlock* _entryDescription;                                              // 0x0288 (size: 0x8)
    FName _pixelSizeMaterialParameterName;                                            // 0x0290 (size: 0x8)
    FName _dpiMaterialParameterName;                                                  // 0x0298 (size: 0x8)
    class UMaterialInstance* _inactiveMaterialInstance;                               // 0x02A0 (size: 0x8)
    class UMaterialInstance* _inactiveHoveredMaterialInstance;                        // 0x02A8 (size: 0x8)
    class UMaterialInstance* _activeMaterialInstance;                                 // 0x02B0 (size: 0x8)

}; // Size: 0x2C0

class UManualPanelWidget : public UTabMenuPanel
{
    class UTabContainer* _tabContainer;                                               // 0x0268 (size: 0x8)
    class UWidgetSwitcher* _leftPanelSwitcher;                                        // 0x0270 (size: 0x8)
    class UWidgetSwitcher* _rightPanelSwitcher;                                       // 0x0278 (size: 0x8)
    class UCodexEntriesPanelWidget* _codexEntriesLeftPanel;                           // 0x0280 (size: 0x8)
    class UCodexEntryDetailsPanelWidget* _codexEntryDetailsRightPanel;                // 0x0288 (size: 0x8)
    class UTaskEntriesPanelWidget* _taskEntriesLeftPanel;                             // 0x0290 (size: 0x8)
    class UTaskEntryDetailsPanelWidget* _taskEntryDetailsRightPanel;                  // 0x0298 (size: 0x8)
    class USizeBox* _rightPanelSizeBox;                                               // 0x02A0 (size: 0x8)

}; // Size: 0x2C0

class UManualStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UManualUIController : public UObject
{
    TArray<class UCodexEntry*> _codexEntries;                                         // 0x0070 (size: 0x10)

}; // Size: 0x88

class UMasterMenu : public UUserWidget
{
    class UWidgetSwitcher* _menuSwitcher;                                             // 0x0298 (size: 0x8)
    TMap<class EConZMenu, class TSubclassOf<UBaseMenu>> _menuClasses;                 // 0x02A0 (size: 0x50)
    EConZMenu _menuToPreview;                                                         // 0x02F0 (size: 0x1)

}; // Size: 0x358

class UMasterWidget : public UUserWidget
{
    class UWidgetSwitcher* _hudMenuSwitcher;                                          // 0x0268 (size: 0x8)
    class UUserWidget* _hud;                                                          // 0x0270 (size: 0x8)
    class UMasterMenu* _masterMenu;                                                   // 0x0278 (size: 0x8)
    class UWidgetSwitcher* _messageBoxSwitcher;                                       // 0x0280 (size: 0x8)
    class UOverlay* _messageBoxOverlay;                                               // 0x0288 (size: 0x8)

}; // Size: 0x2A0

class UMasterWidgetMainMenu : public UMasterWidget
{
    class UImage* _droneModeIndicator;                                                // 0x02A0 (size: 0x8)

}; // Size: 0x2A8

class UMathStatics : public UBlueprintFunctionLibrary
{

    FRotator NormalizeRotator(const FRotator& Rotator);
    bool LineBoxIntersection(FVector& HitLocation, const FBox& Box, const FVector& Start, const FVector& End, const FVector& startToEnd);
    bool IsPointWithinCircle(FVector2D Point, FVector2D circleCenter, float circleRadius);
    FVector2D GetRandomPointWithinTwoCircles(FVector2D centerA, float radiusA, FVector2D centerB, float radiusB);
    FVector GetRandomPointWithinOrientedBox(FBox Box, FTransform boxTransform);
    FVector2D GetRandomPointWithinEllipse(FVector2D Center, float Radius1, float radius2);
    FVector2D GetRandomPointWithinDonutCone(FVector2D Center, FVector forwardVector, float halfAngle, float radiusLarger, float radiusSmaller);
    FVector2D GetRandomPointWithinDonut(FVector2D Center, float radiusLarger, float radiusSmaller);
    FVector2D GetRandomPointWithinCircle(FVector2D Center, float Radius);
    float GetCircleYForX(float X, FVector2D Center, float Radius, bool Up);
    bool AreCirclesIntersecting(FVector2D centerA, float radiusA, FVector2D centerB, float radiusB, bool onlyEdge);
    bool AreBoxAndSphereIntersecting(FBox Box, FTransform boxTransform, FVector sphereCenter, float SphereRadius);
}; // Size: 0x28

class UMechanicCommonData : public UDataAsset
{
    TMap<class TSoftClassPtr<UObject>, class FVehicleAttachmentAssociatedTradeables> VehicleAttachmentAssociatedTradeablesMap; // 0x0030 (size: 0x50)
    TMap<class FSoftObjectPath, class FSoftObjectPath> VehicleAttachmentToTradeableInStockClassPathRedirectors; // 0x0080 (size: 0x50)

}; // Size: 0xD0

class UMechanicInstallationService : public UTraderService
{
}; // Size: 0x38

class UMechanicRepairService : public UTraderService
{
}; // Size: 0x38

class UMedicalItemTag : public UBaseItemTag
{
}; // Size: 0x30

class UMedicalService : public UTraderService
{
}; // Size: 0x38

class UMedicalSkill : public UIntelligenceSkill
{
    FMedicalSkillParametersPerSkillLevel _noSkillParameters;                          // 0x00B0 (size: 0x8)
    FMedicalSkillParametersPerSkillLevel _basicParameters;                            // 0x00B8 (size: 0x8)
    FMedicalSkillParametersPerSkillLevel _mediumParameters;                           // 0x00C0 (size: 0x8)
    FMedicalSkillParametersPerSkillLevel _advancedParameters;                         // 0x00C8 (size: 0x8)
    FMedicalSkillParametersPerSkillLevel _aboveAdvancedParameters;                    // 0x00D0 (size: 0x8)

}; // Size: 0xD8

class UMeleeAttackCollisionCapsule : public UCapsuleComponent
{
    FGameplayTag _attachment;                                                         // 0x0478 (size: 0x8)
    FDataTableRowHandle _weaponDescRef;                                               // 0x0480 (size: 0x10)

}; // Size: 0x490

class UMeleeCombatComponent : public UActorComponent
{

    void Server_StartMeleeAttack(const FMeleeAction& action);
    void Server_EnablePendingBlockOrDodge(bool Value);
    void Server_Dodge(const FMeleeAction& action);
    void NetMulticast_ExecuteMeleeAction(const FMeleeAction& action);
    bool IsHoldingBlock();
}; // Size: 0x1B8

class UMeleeDetectHitCollisionCapsule : public UCapsuleComponent
{
    EDetectHitCollisionType detectHitCollisionType;                                   // 0x0478 (size: 0x1)

}; // Size: 0x480

class UMeleeSkill : public UStrengthSkill
{
    class UMeleeSkillAnimationsPreset* AnimationsPreset;                              // 0x00B0 (size: 0x8)
    FMeleeSkillExperienceAwards _noSkillExperienceAwards;                             // 0x00B8 (size: 0x10)
    FMeleeSkillExperienceAwards _basicSkillExperienceAwards;                          // 0x00C8 (size: 0x10)
    FMeleeSkillExperienceAwards _mediumSkillExperienceAwards;                         // 0x00D8 (size: 0x10)
    FMeleeSkillExperienceAwards _advancedSkillExperienceAwards;                       // 0x00E8 (size: 0x10)
    FMeleeSkillExperienceAwards _aboveAdvancedSkillExperienceAwards;                  // 0x00F8 (size: 0x10)

    class UAnimSequenceBase* GetWalkingIdleAnimationTP();
    class UAnimSequenceBase* GetWalkingIdleAnimationFP();
    class UAnimSequenceBase* GetTiredIdleAnimationTP();
    class UAnimSequenceBase* GetTiredIdleAnimationFP();
    float GetStaminaMultiplier(float excessGearWeight);
    class UAnimSequenceBase* GetPrimaryIdleAnimationTP();
    class UAnimSequenceBase* GetPrimaryIdleAnimationFP();
    class UAnimMontage* GetLeaveCombatModeMontage();
    TArray<class UAnimSequenceBase*> GetInactivityIdleAnimations();
    float GetIdleToBlockBlendDuration();
    class UAnimMontage* GetEnterCombatModeMontage();
    float GetBlockToIdleBlendDuration();
    class UAnimSequenceBase* GetBlockIdleAnimationTP();
    class UAnimSequenceBase* GetBlockIdleAnimationFP();
    class UBlendSpace* GetAimOffsetBlendSpaceTP();
    class UBlendSpace* GetAimOffsetBlendSpaceFP();
}; // Size: 0x108

class UMeleeSkillAnimationsPreset : public UDataAsset
{
    FMeleeSkillAnimations NoSkillAnimations;                                          // 0x0030 (size: 0x98)
    FMeleeSkillAnimations BasicSkillAnimations;                                       // 0x00C8 (size: 0x98)
    FMeleeSkillAnimations MediumSkillAnimations;                                      // 0x0160 (size: 0x98)
    FMeleeSkillAnimations AdvancedSkillAnimations;                                    // 0x01F8 (size: 0x98)
    FMeleeSkillParametersPerSkillLevel NoSkillParameters;                             // 0x0290 (size: 0x88)
    FMeleeSkillParametersPerSkillLevel BasicSkillParameters;                          // 0x0318 (size: 0x88)
    FMeleeSkillParametersPerSkillLevel MediumSkillParameters;                         // 0x03A0 (size: 0x88)
    FMeleeSkillParametersPerSkillLevel AdvancedSkillParameters;                       // 0x0428 (size: 0x88)
    float NoSkillDamageMultiplier;                                                    // 0x04B0 (size: 0x4)
    float BasicSkillDamageMultiplier;                                                 // 0x04B4 (size: 0x4)
    float MediumSkillDamageMultiplier;                                                // 0x04B8 (size: 0x4)
    float AdvancedSkillDamageMultiplier;                                              // 0x04BC (size: 0x4)
    float AboveAdvancedSkillDamageMultiplier;                                         // 0x04C0 (size: 0x4)

}; // Size: 0x4C8

class UMeleeWeaponItemTag : public UBaseItemTag
{
    float CombatAnimationPlayRateModifier;                                            // 0x0030 (size: 0x4)
    float StrengthBelowWhichCombatPerformanceBeginsToDrop;                            // 0x0034 (size: 0x4)

}; // Size: 0x38

class UMeleeWeaponsSkill : public UMeleeSkill
{
}; // Size: 0x108

class UMenuButton : public UUserWidget
{
    bool PreviewSelectedState;                                                        // 0x02B8 (size: 0x1)
    class UImage* _backgroundFocusImage;                                              // 0x02C0 (size: 0x8)
    class UTextBlock* _text;                                                          // 0x02C8 (size: 0x8)
    class USizeBox* _sizeBox;                                                         // 0x02D0 (size: 0x8)
    FText _initialTitle;                                                              // 0x02D8 (size: 0x18)
    FTabTextStyle _selectedTextStyle;                                                 // 0x02F0 (size: 0x98)
    FTabTextStyle _deselectedTextStyle;                                               // 0x0388 (size: 0x98)

}; // Size: 0x420

class UMenuHelpers : public UDataAsset
{
    TSubclassOf<class UUserWidget> MainMenuClass;                                     // 0x0030 (size: 0x8)
    TSubclassOf<class UUserWidget> ServerBrowserClass;                                // 0x0038 (size: 0x8)
    TSubclassOf<class UUserWidget> OptionsClass;                                      // 0x0040 (size: 0x8)
    TSubclassOf<class UUserWidget> AdvancedOptionsClass;                              // 0x0048 (size: 0x8)
    TSubclassOf<class UUserWidget> CharacterCreationClass;                            // 0x0050 (size: 0x8)
    TSubclassOf<class UUserWidget> CharacterSelectionClass;                           // 0x0058 (size: 0x8)
    TSubclassOf<class UUserWidget> CharacterCreationSecondIterationClass;             // 0x0060 (size: 0x8)

}; // Size: 0x68

class UMeshHitZones : public UActorComponent
{
    class UMaterialInterface* _deactivationMaterial;                                  // 0x00C0 (size: 0x8)

    bool IsHitZoneActive(int32 zoneIndex);
}; // Size: 0xD0

class UMessage : public UUserWidget
{
    class UTextBlock* _text;                                                          // 0x0268 (size: 0x8)

}; // Size: 0x280

class UMessageBox : public UUserWidget
{
    class UTextBlock* _message;                                                       // 0x0278 (size: 0x8)
    class UHorizontalBox* _buttonRow;                                                 // 0x0280 (size: 0x8)
    FMargin _buttonsMargin;                                                           // 0x0288 (size: 0x10)

}; // Size: 0x2C0

class UMessageBoxWithCheckBox : public UMessageBox
{
    class UCheckBox* _checkBox;                                                       // 0x02D0 (size: 0x8)
    class UTextBlock* _checkBoxMessage;                                               // 0x02D8 (size: 0x8)

    void OnCheckBoxStateChanged(bool checked);
}; // Size: 0x2E0

class UMessageBoxWithEditableText : public UMessageBox
{
    class UTextBlock* _noteMessage;                                                   // 0x02D0 (size: 0x8)
    class UEditableText* _editableText;                                               // 0x02D8 (size: 0x8)
    class UTextBlock* _warningMessage;                                                // 0x02E0 (size: 0x8)

    void OnEditableTextCommitted(const FText& committedText, TEnumAsByte<ETextCommit::Type> Type);
}; // Size: 0x2E8

class UMessageBoxWithList : public UMessageBox
{
    class UScrollBox* _listScrollBox;                                                 // 0x02C0 (size: 0x8)
    TSubclassOf<class UMessageBoxWithListEntry> _listEntryClass;                      // 0x02C8 (size: 0x8)

}; // Size: 0x2D0

class UMessageBoxWithListEntry : public UUserWidget
{
    class UTextBlock* _entry;                                                         // 0x0268 (size: 0x8)

}; // Size: 0x270

class UMessageBoxWithNote : public UMessageBox
{
    class UTextBlock* _noteText;                                                      // 0x02C0 (size: 0x8)

}; // Size: 0x2C8

class UMessageContainer : public UUserWidget
{
    class UVerticalBox* _messages;                                                    // 0x0268 (size: 0x8)
    TSubclassOf<class UMessage> _messageClass;                                        // 0x0270 (size: 0x8)

}; // Size: 0x278

class UMetabolism : public UObject
{
    FMetabolismConfiguration _configuration;                                          // 0x0CA8 (size: 0x460)

}; // Size: 0x1108

class UMetabolismAdvancedProgressBar : public UUserWidget
{
    FText Title;                                                                      // 0x0268 (size: 0x18)
    class URetainerBox* _progressBarEffect;                                           // 0x0280 (size: 0x8)
    class UScrollingSizeBox* _titleScrollingBox;                                      // 0x0288 (size: 0x8)
    class UTextBlock* _titleText;                                                     // 0x0290 (size: 0x8)
    class UTextBlock* _valueText;                                                     // 0x0298 (size: 0x8)
    class USizeBox* _apbSize;                                                         // 0x02A0 (size: 0x8)
    class UImage* _progressBarBackground;                                             // 0x02A8 (size: 0x8)
    FText _defaultValue;                                                              // 0x02B0 (size: 0x18)
    FMetabolismAPBFontStyle _fontStyle;                                               // 0x02C8 (size: 0x48)
    FMargin _progressBarPadding;                                                      // 0x0310 (size: 0x10)
    FVector2D _size;                                                                  // 0x0320 (size: 0x8)
    FSlateBrush _backgroundImageBrush;                                                // 0x0328 (size: 0x88)
    FDataTableRowHandle _normalBackgroundColor;                                       // 0x03B0 (size: 0x10)
    FDataTableRowHandle _normalForegroundColor;                                       // 0x03C0 (size: 0x10)
    FDataTableRowHandle _normalTextColorEmpty;                                        // 0x03D0 (size: 0x10)
    FDataTableRowHandle _normalTextColorFilled;                                       // 0x03E0 (size: 0x10)
    FDataTableRowHandle _alertedBackgroundColor;                                      // 0x03F0 (size: 0x10)
    FDataTableRowHandle _alertedForegroundColor;                                      // 0x0400 (size: 0x10)
    FDataTableRowHandle _alertedTextColorEmpty;                                       // 0x0410 (size: 0x10)
    FDataTableRowHandle _alertedTextColorFilled;                                      // 0x0420 (size: 0x10)
    FDataTableRowHandle _badBackgroundColor;                                          // 0x0430 (size: 0x10)
    FDataTableRowHandle _badForegroundColor;                                          // 0x0440 (size: 0x10)
    FDataTableRowHandle _badTextColorEmpty;                                           // 0x0450 (size: 0x10)
    FDataTableRowHandle _badTextColorFilled;                                          // 0x0460 (size: 0x10)
    FDataTableRowHandle _goodBackgroundColor;                                         // 0x0470 (size: 0x10)
    FDataTableRowHandle _goodForegroundColor;                                         // 0x0480 (size: 0x10)
    FDataTableRowHandle _goodTextColorEmpty;                                          // 0x0490 (size: 0x10)
    FDataTableRowHandle _goodTextColorFilled;                                         // 0x04A0 (size: 0x10)

}; // Size: 0x4C0

class UMetabolismBasicInfoPanel : public UUserWidget
{
    class UMetabolismCurrentStatLight* _stat_Age;                                     // 0x0268 (size: 0x8)
    class UMetabolismCurrentStatLight* _stat_Teeth;                                   // 0x0270 (size: 0x8)
    class UMetabolismCurrentStatLight* _stat_Lifetime;                                // 0x0278 (size: 0x8)
    class UMetabolismCurrentStatLight* _stat_BloodType;                               // 0x0280 (size: 0x8)
    class UMetabolismCurrentStatLight* _stat_Weight;                                  // 0x0288 (size: 0x8)
    class UMetabolismCurrentStatLight* _stat_BloodVolume;                             // 0x0290 (size: 0x8)
    class UMetabolismCurrentStatLight* _stat_Health;                                  // 0x0298 (size: 0x8)
    class UMetabolismCurrentStatLight* _stat_Temperature;                             // 0x02A0 (size: 0x8)

}; // Size: 0x2B0

class UMetabolismBodyEffectProgressBar : public UConZUserWidget
{
    class UMetabolismAdvancedProgressBar* _apb;                                       // 0x02C0 (size: 0x8)
    class UWidget* _lifeThreateningSymbol;                                            // 0x02C8 (size: 0x8)
    class UImage* _infectedSymbol;                                                    // 0x02D0 (size: 0x8)
    class UImage* _circularProgressBar;                                               // 0x02D8 (size: 0x8)
    class UCheckBox* _interactionButton;                                              // 0x02E0 (size: 0x8)
    FDataTableRowHandle _circularProgressBarColorFront;                               // 0x02E8 (size: 0x10)
    FDataTableRowHandle _circularProgressBarColorBack;                                // 0x02F8 (size: 0x10)
    float _hoveredOpacity;                                                            // 0x0308 (size: 0x4)
    float _unhoveredOpacity;                                                          // 0x030C (size: 0x4)
    float _otherIsSelectedUnhoveredOpacity;                                           // 0x0310 (size: 0x4)
    float _otherIsSelectedHoveredOpacity;                                             // 0x0314 (size: 0x4)
    float _infectedOpacity;                                                           // 0x0318 (size: 0x4)

    void InteractionButtonClicked(bool IsChecked);
    class UWidget* GetToolTipWidget();
}; // Size: 0x368

class UMetabolismBodyOverviewPanel : public UUserWidget
{
    class UScrollBox* _symptomsScrollBox;                                             // 0x0268 (size: 0x8)
    class UMetabolismHumanBodyPanel* _humanBodyPanel;                                 // 0x0270 (size: 0x8)
    class URichTextBlock* _symptomsBreadcrumb;                                        // 0x0278 (size: 0x8)
    class UMetabolismTissueGroupCheckbox* _checkboxMuscles;                           // 0x0280 (size: 0x8)
    class UMetabolismTissueGroupCheckbox* _checkboxBones;                             // 0x0288 (size: 0x8)
    class UMetabolismTissueGroupCheckbox* _checkboxOrgans;                            // 0x0290 (size: 0x8)
    class UMetabolismRadialProgressBar* _rpb_Hitpoints;                               // 0x0298 (size: 0x8)
    class UMetabolismRadialProgressBar* _rpb_Blood;                                   // 0x02A0 (size: 0x8)
    class UOverlay* _treatmentMainOverlay;                                            // 0x02A8 (size: 0x8)
    class UButton* _clearSelectionButton;                                             // 0x02B0 (size: 0x8)
    class UOverlay* _selectedItemsOverlay;                                            // 0x02B8 (size: 0x8)
    class UOverlay* _itemSelectionReminderOverlay;                                    // 0x02C0 (size: 0x8)
    class UMetabolismLightItemDisplayPanel* _selectedItemsPanel;                      // 0x02C8 (size: 0x8)
    class UMetabolismBodyEffectProgressBar* _activeConditionProgressBar;              // 0x02D0 (size: 0x8)
    class UPrimaryButton* _treatButton;                                               // 0x02D8 (size: 0x8)
    FText _treatTooltipText;                                                          // 0x02E0 (size: 0x18)
    TSubclassOf<class UTextOnlyTooltip> _tooltipClass;                                // 0x02F8 (size: 0x8)
    TSubclassOf<class UMetabolismSymptomTitle> _symptomWidgetClass;                   // 0x0300 (size: 0x8)
    FMetabolismRadialProgressBarColorScheme _lowHPColorScheme;                        // 0x0308 (size: 0x80)
    FMetabolismRadialProgressBarColorScheme _midHPColorScheme;                        // 0x0388 (size: 0x80)
    FMetabolismRadialProgressBarColorScheme _highHPColorScheme;                       // 0x0408 (size: 0x80)
    FMetabolismRadialProgressBarColorScheme _lowBloodOxygenationColorScheme;          // 0x0488 (size: 0x80)
    FMetabolismRadialProgressBarColorScheme _highBloodOxygenationColorScheme;         // 0x0508 (size: 0x80)

    void OnTreat();
    void OnClearSelection();
}; // Size: 0x598

class UMetabolismBodyReservesPanel : public UUserWidget
{
    class UMetabolismRadialProgressBar* _rpb_Muscle;                                  // 0x0268 (size: 0x8)
    class UMetabolismRadialProgressBar* _rpb_Fat;                                     // 0x0270 (size: 0x8)

}; // Size: 0x280

class UMetabolismBodyStatsPanel : public UUserWidget
{
    class UMetabolismTitleAndAPB* _tapb_NutrientAbsorption_Protein;                   // 0x0268 (size: 0x8)
    class UMetabolismTitleAndAPB* _tapb_NutrientAbsorption_Carbs;                     // 0x0270 (size: 0x8)
    class UMetabolismTitleAndAPB* _tapb_NutrientAbsorption_Fat;                       // 0x0278 (size: 0x8)
    class UMetabolismTitleAndAPB* _tapb_NutrientAbsorption_Minerals;                  // 0x0280 (size: 0x8)
    class UMetabolismTitleAndAPB* _tapb_NutrientAbsorption_Vitamins;                  // 0x0288 (size: 0x8)
    class UMetabolismTitleAndAPB* _tapb_NutrientAbsorption_Water;                     // 0x0290 (size: 0x8)
    class UMetabolismTitleAndAPB* _tapb_NutrientAbsorption_Alcohol;                   // 0x0298 (size: 0x8)
    class UMetabolismTitleAndAPB* _tapb_BodyMassDistribution_Bones;                   // 0x02A0 (size: 0x8)
    class UMetabolismTitleAndAPB* _tapb_BodyMassDistribution_Blood;                   // 0x02A8 (size: 0x8)
    class UMetabolismTitleAndAPB* _tapb_BodyMassDistribution_Intestines;              // 0x02B0 (size: 0x8)
    class UMetabolismTitleAndAPB* _tapb_BodyMassDistribution_Skin;                    // 0x02B8 (size: 0x8)
    class UMetabolismTitleAndAPB* _tapb_BodyMassDistribution_Organs;                  // 0x02C0 (size: 0x8)
    class UMetabolismTitleAndAPB* _tapb_BodyMassDistribution_Fat;                     // 0x02C8 (size: 0x8)
    class UMetabolismTitleAndAPB* _tapb_BodyMassDistribution_Muscle;                  // 0x02D0 (size: 0x8)

}; // Size: 0x2E0

class UMetabolismCurrentStatDark : public UUserWidget
{
    FText Title;                                                                      // 0x0268 (size: 0x18)
    class UImage* _titleBackground;                                                   // 0x0280 (size: 0x8)
    class UTextBlock* _title;                                                         // 0x0288 (size: 0x8)
    class UImage* _valueBackground;                                                   // 0x0290 (size: 0x8)
    class UTextBlock* _value;                                                         // 0x0298 (size: 0x8)
    FDataTableRowHandle _titleBackgroundColor;                                        // 0x02A0 (size: 0x10)
    FDataTableRowHandle _titleForegroundColor;                                        // 0x02B0 (size: 0x10)
    FDataTableRowHandle _valueBackgroundColor;                                        // 0x02C0 (size: 0x10)
    FDataTableRowHandle _valueForegroundColor;                                        // 0x02D0 (size: 0x10)

}; // Size: 0x2E8

class UMetabolismCurrentStatLight : public UUserWidget
{
    FText Title;                                                                      // 0x0268 (size: 0x18)
    class UImage* _valueBackground;                                                   // 0x0280 (size: 0x8)
    class UTextBlock* _title;                                                         // 0x0288 (size: 0x8)
    class URichTextBlock* _value;                                                     // 0x0290 (size: 0x8)
    FDataTableRowHandle _normalBackgroundColor;                                       // 0x0298 (size: 0x10)
    FDataTableRowHandle _alertedBackgroundColor;                                      // 0x02A8 (size: 0x10)

}; // Size: 0x2C0

class UMetabolismDigestionPanel : public UUserWidget
{
    TSubclassOf<class UUserWidget> FoodWidgetClass;                                   // 0x0268 (size: 0x8)
    class UMetabolismRadialProgressBar* _rpb_Stomach;                                 // 0x0270 (size: 0x8)
    class UMetabolismRadialProgressBar* _rpb_Intestine;                               // 0x0278 (size: 0x8)
    class UMetabolismRadialProgressBar* _rpb_Colon;                                   // 0x0280 (size: 0x8)
    class UMetabolismRadialProgressBar* _rpb_Bladder;                                 // 0x0288 (size: 0x8)
    class UWrapBox* _foods;                                                           // 0x0290 (size: 0x8)

}; // Size: 0x2A0

class UMetabolismHealthPanel : public UTabMenuPanel
{
    class UMetabolism_BCU_ICU_Monitor* _icuMonitor;                                   // 0x0268 (size: 0x8)
    class UMetabolismBodyOverviewPanel* _bodyOverviewPanel;                           // 0x0270 (size: 0x8)
    class UMetabolismTreatmentPanel* _treatmentPanel;                                 // 0x0278 (size: 0x8)
    class UButton* _resetHealthPanelToSelf;                                           // 0x0280 (size: 0x8)
    class UPanelWidget* _healthPanelNormal;                                           // 0x0288 (size: 0x8)
    class UPanelWidget* _healthPanelOutOfRange;                                       // 0x0290 (size: 0x8)
    class UWidgetSwitcher* _healthPanelSwitcher;                                      // 0x0298 (size: 0x8)
    class UTextBlock* _patientName;                                                   // 0x02A0 (size: 0x8)
    TSubclassOf<class UTextOnlyTooltip> _tooltipClass;                                // 0x02A8 (size: 0x8)

    void OnResetHealthPanelToSelf();
}; // Size: 0x2D8

class UMetabolismHumanBodyPanel : public UUserWidget
{
    FLinearColor ColdBodyColor;                                                       // 0x0268 (size: 0x10)
    FLinearColor HotBodyColor;                                                        // 0x0278 (size: 0x10)
    float BodyTemperaturePreview;                                                     // 0x0288 (size: 0x4)
    class UImage* _img_BodyGlow_Male;                                                 // 0x0290 (size: 0x8)
    class UImage* _img_BodyScan_Male;                                                 // 0x0298 (size: 0x8)
    class UImage* _img_BodyGlow_Female;                                               // 0x02A0 (size: 0x8)
    class UImage* _img_BodyScan_Female;                                               // 0x02A8 (size: 0x8)
    class UImage* _img_Head_Male;                                                     // 0x02B0 (size: 0x8)
    class UImage* _img_Ear_Left_Male;                                                 // 0x02B8 (size: 0x8)
    class UImage* _img_Ear_Right_Male;                                                // 0x02C0 (size: 0x8)
    class UImage* _img_Neck_Male;                                                     // 0x02C8 (size: 0x8)
    class UImage* _img_Trapezius_Male;                                                // 0x02D0 (size: 0x8)
    class UImage* _img_Shoulder_Left_Male;                                            // 0x02D8 (size: 0x8)
    class UImage* _img_Shoulder_Right_Male;                                           // 0x02E0 (size: 0x8)
    class UImage* _img_Chest_Male;                                                    // 0x02E8 (size: 0x8)
    class UImage* _img_Arm_Left_Male;                                                 // 0x02F0 (size: 0x8)
    class UImage* _img_Arm_Right_Male;                                                // 0x02F8 (size: 0x8)
    class UImage* _img_Forearm_Left_Male;                                             // 0x0300 (size: 0x8)
    class UImage* _img_Forearm_Right_Male;                                            // 0x0308 (size: 0x8)
    class UImage* _img_Hand_Left_Male;                                                // 0x0310 (size: 0x8)
    class UImage* _img_Hand_Right_Male;                                               // 0x0318 (size: 0x8)
    class UImage* _img_Umbilicus_Male;                                                // 0x0320 (size: 0x8)
    class UImage* _img_Abdomen_Male;                                                  // 0x0328 (size: 0x8)
    class UImage* _img_Thigh_Left_Male;                                               // 0x0330 (size: 0x8)
    class UImage* _img_Thigh_Right_Male;                                              // 0x0338 (size: 0x8)
    class UImage* _img_Kneecap_Left_Male;                                             // 0x0340 (size: 0x8)
    class UImage* _img_Kneecap_Right_Male;                                            // 0x0348 (size: 0x8)
    class UImage* _img_Leg_Left_Male;                                                 // 0x0350 (size: 0x8)
    class UImage* _img_Leg_Right_Male;                                                // 0x0358 (size: 0x8)
    class UImage* _img_Foot_Left_Male;                                                // 0x0360 (size: 0x8)
    class UImage* _img_Foot_Right_Male;                                               // 0x0368 (size: 0x8)
    class UImage* _img_Footbones_Left_Male;                                           // 0x0370 (size: 0x8)
    class UImage* _img_Footbones_Right_Male;                                          // 0x0378 (size: 0x8)
    class UImage* _img_Legbones_Left_Male;                                            // 0x0380 (size: 0x8)
    class UImage* _img_Legbones_Right_Male;                                           // 0x0388 (size: 0x8)
    class UImage* _img_Thighbone_Left_Male;                                           // 0x0390 (size: 0x8)
    class UImage* _img_Thighbone_Right_Male;                                          // 0x0398 (size: 0x8)
    class UImage* _img_Pelvis_Male;                                                   // 0x03A0 (size: 0x8)
    class UImage* _img_Spine_Male;                                                    // 0x03A8 (size: 0x8)
    class UImage* _img_Handbones_Left_Male;                                           // 0x03B0 (size: 0x8)
    class UImage* _img_Handbones_Right_Male;                                          // 0x03B8 (size: 0x8)
    class UImage* _img_Forearmbones_Left_Male;                                        // 0x03C0 (size: 0x8)
    class UImage* _img_Forearmbones_Right_Male;                                       // 0x03C8 (size: 0x8)
    class UImage* _img_Armbone_Left_Male;                                             // 0x03D0 (size: 0x8)
    class UImage* _img_Armbone_Right_Male;                                            // 0x03D8 (size: 0x8)
    class UImage* _img_Scapula_Left_Male;                                             // 0x03E0 (size: 0x8)
    class UImage* _img_Scapula_Right_Male;                                            // 0x03E8 (size: 0x8)
    class UImage* _img_Ribcage_Male;                                                  // 0x03F0 (size: 0x8)
    class UImage* _img_Skull_Male;                                                    // 0x03F8 (size: 0x8)
    class UImage* _img_Head_Female;                                                   // 0x0400 (size: 0x8)
    class UImage* _img_Ear_Left_Female;                                               // 0x0408 (size: 0x8)
    class UImage* _img_Ear_Right_Female;                                              // 0x0410 (size: 0x8)
    class UImage* _img_Neck_Female;                                                   // 0x0418 (size: 0x8)
    class UImage* _img_Trapezius_Female;                                              // 0x0420 (size: 0x8)
    class UImage* _img_Shoulder_Left_Female;                                          // 0x0428 (size: 0x8)
    class UImage* _img_Shoulder_Right_Female;                                         // 0x0430 (size: 0x8)
    class UImage* _img_Chest_Female;                                                  // 0x0438 (size: 0x8)
    class UImage* _img_Arm_Left_Female;                                               // 0x0440 (size: 0x8)
    class UImage* _img_Arm_Right_Female;                                              // 0x0448 (size: 0x8)
    class UImage* _img_Forearm_Left_Female;                                           // 0x0450 (size: 0x8)
    class UImage* _img_Forearm_Right_Female;                                          // 0x0458 (size: 0x8)
    class UImage* _img_Hand_Left_Female;                                              // 0x0460 (size: 0x8)
    class UImage* _img_Hand_Right_Female;                                             // 0x0468 (size: 0x8)
    class UImage* _img_Umbilicus_Female;                                              // 0x0470 (size: 0x8)
    class UImage* _img_Abdomen_Female;                                                // 0x0478 (size: 0x8)
    class UImage* _img_Thigh_Left_Female;                                             // 0x0480 (size: 0x8)
    class UImage* _img_Thigh_Right_Female;                                            // 0x0488 (size: 0x8)
    class UImage* _img_Kneecap_Left_Female;                                           // 0x0490 (size: 0x8)
    class UImage* _img_Kneecap_Right_Female;                                          // 0x0498 (size: 0x8)
    class UImage* _img_Leg_Left_Female;                                               // 0x04A0 (size: 0x8)
    class UImage* _img_Leg_Right_Female;                                              // 0x04A8 (size: 0x8)
    class UImage* _img_Foot_Left_Female;                                              // 0x04B0 (size: 0x8)
    class UImage* _img_Foot_Right_Female;                                             // 0x04B8 (size: 0x8)
    class UImage* _img_Footbones_Left_Female;                                         // 0x04C0 (size: 0x8)
    class UImage* _img_Footbones_Right_Female;                                        // 0x04C8 (size: 0x8)
    class UImage* _img_Legbones_Left_Female;                                          // 0x04D0 (size: 0x8)
    class UImage* _img_Legbones_Right_Female;                                         // 0x04D8 (size: 0x8)
    class UImage* _img_Thighbone_Left_Female;                                         // 0x04E0 (size: 0x8)
    class UImage* _img_Thighbone_Right_Female;                                        // 0x04E8 (size: 0x8)
    class UImage* _img_Pelvis_Female;                                                 // 0x04F0 (size: 0x8)
    class UImage* _img_Spine_Female;                                                  // 0x04F8 (size: 0x8)
    class UImage* _img_Handbones_Left_Female;                                         // 0x0500 (size: 0x8)
    class UImage* _img_Handbones_Right_Female;                                        // 0x0508 (size: 0x8)
    class UImage* _img_Forearmbones_Left_Female;                                      // 0x0510 (size: 0x8)
    class UImage* _img_Forearmbones_Right_Female;                                     // 0x0518 (size: 0x8)
    class UImage* _img_Armbone_Left_Female;                                           // 0x0520 (size: 0x8)
    class UImage* _img_Armbone_Right_Female;                                          // 0x0528 (size: 0x8)
    class UImage* _img_Scapula_Left_Female;                                           // 0x0530 (size: 0x8)
    class UImage* _img_Scapula_Right_Female;                                          // 0x0538 (size: 0x8)
    class UImage* _img_Ribcage_Female;                                                // 0x0540 (size: 0x8)
    class UImage* _img_Skull_Female;                                                  // 0x0548 (size: 0x8)
    class UImage* _img_SpinalCord;                                                    // 0x0550 (size: 0x8)
    class UImage* _img_Lungs;                                                         // 0x0558 (size: 0x8)
    class UImage* _img_RespiratorySystem;                                             // 0x0560 (size: 0x8)
    class UImage* _img_CirculatorySystem;                                             // 0x0568 (size: 0x8)
    class UImage* _img_Colon;                                                         // 0x0570 (size: 0x8)
    class UImage* _img_Intestine;                                                     // 0x0578 (size: 0x8)
    class UImage* _img_Bladder;                                                       // 0x0580 (size: 0x8)
    class UImage* _img_Liver;                                                         // 0x0588 (size: 0x8)
    class UImage* _img_Kidneys;                                                       // 0x0590 (size: 0x8)
    class UImage* _img_AdrenalGlands;                                                 // 0x0598 (size: 0x8)
    class UImage* _img_Gallbladder;                                                   // 0x05A0 (size: 0x8)
    class UImage* _img_Pancreas;                                                      // 0x05A8 (size: 0x8)
    class UImage* _img_Stomach;                                                       // 0x05B0 (size: 0x8)
    class UImage* _img_Heart;                                                         // 0x05B8 (size: 0x8)
    class UImage* _img_Spleen;                                                        // 0x05C0 (size: 0x8)
    class UImage* _img_Brain;                                                         // 0x05C8 (size: 0x8)
    class UImage* _img_Reproductive_Male;                                             // 0x05D0 (size: 0x8)
    class UImage* _img_Reproductive_Female;                                           // 0x05D8 (size: 0x8)
    class UButton* _btn_EntireBody;                                                   // 0x05E0 (size: 0x8)
    class UButton* _btn_HeadRegion;                                                   // 0x05E8 (size: 0x8)
    class UButton* _btn_RightLegRegion;                                               // 0x05F0 (size: 0x8)
    class UButton* _btn_LeftLegRegion;                                                // 0x05F8 (size: 0x8)
    class UButton* _btn_TorsoRegion;                                                  // 0x0600 (size: 0x8)
    class UButton* _btn_RightArmRegion;                                               // 0x0608 (size: 0x8)
    class UButton* _btn_LeftArmRegion;                                                // 0x0610 (size: 0x8)
    class UOverlay* _mainOverlay;                                                     // 0x0618 (size: 0x8)
    class UOverlay* _maleOverlay;                                                     // 0x0620 (size: 0x8)
    class UOverlay* _femaleOverlay;                                                   // 0x0628 (size: 0x8)
    class UOverlay* _bothOverlay;                                                     // 0x0630 (size: 0x8)
    class UWidgetAnimation* _focusBodyRegion_Head;                                    // 0x0638 (size: 0x8)
    class UWidgetAnimation* _focusBodyRegion_Torso;                                   // 0x0640 (size: 0x8)
    class UWidgetAnimation* _focusBodyRegion_LeftArm;                                 // 0x0648 (size: 0x8)
    class UWidgetAnimation* _focusBodyRegion_RightArm;                                // 0x0650 (size: 0x8)
    class UWidgetAnimation* _focusBodyRegion_LeftLeg;                                 // 0x0658 (size: 0x8)
    class UWidgetAnimation* _focusBodyRegion_RightLeg;                                // 0x0660 (size: 0x8)
    class UImage* _vignette;                                                          // 0x0668 (size: 0x8)

    void OnClickRegion_Torso();
    void OnClickRegion_RightLeg();
    void OnClickRegion_RightArm();
    void OnClickRegion_LeftLeg();
    void OnClickRegion_LeftArm();
    void OnClickRegion_Head();
    void OnClickRegion_EntireBody();
    void OnAnimationFinished_EntireBody();
    void OnAnimationFinished_BodyRegion();
}; // Size: 0x700

class UMetabolismLightItemDisplayPanel : public UUserWidget
{
    class UPanelWidget* _itemDisplayContainer;                                        // 0x0280 (size: 0x8)
    TSubclassOf<class UItemLightDisplay> _itemDisplayClass;                           // 0x0288 (size: 0x8)
    float _interChildDistrance;                                                       // 0x0290 (size: 0x4)

}; // Size: 0x2A8

class UMetabolismMacronutrientReserve : public UUserWidget
{
    FText Title;                                                                      // 0x0268 (size: 0x18)
    class UTextBlock* _title;                                                         // 0x0280 (size: 0x8)
    class UTextBlock* _value;                                                         // 0x0288 (size: 0x8)
    class UMetabolismSegmentedProgressBar* _spb_ReservesBar;                          // 0x0290 (size: 0x8)

}; // Size: 0x2A0

class UMetabolismMacronutrientReservesPanel : public UUserWidget
{
    class UMetabolismMacronutrientReserve* _reserve_Protein;                          // 0x0268 (size: 0x8)
    class UMetabolismMacronutrientReserve* _reserve_Carbs;                            // 0x0270 (size: 0x8)
    class UMetabolismMacronutrientReserve* _reserve_Fat;                              // 0x0278 (size: 0x8)
    class UMetabolismMacronutrientReserve* _reserve_Fiber;                            // 0x0280 (size: 0x8)
    class UMetabolismMacronutrientReserve* _reserve_Sugar;                            // 0x0288 (size: 0x8)
    class UMetabolismMacronutrientReserve* _reserve_SaturatedFat;                     // 0x0290 (size: 0x8)
    class UMetabolismMacronutrientReserve* _reserve_Alcohol;                          // 0x0298 (size: 0x8)

}; // Size: 0x2A8

class UMetabolismMineralsPanel : public UUserWidget
{
    class UMetabolismVitaminAndMineralReserve* _mineral_Ca;                           // 0x0268 (size: 0x8)
    class UMetabolismVitaminAndMineralReserve* _mineral_Fe;                           // 0x0270 (size: 0x8)
    class UMetabolismVitaminAndMineralReserve* _mineral_Mg;                           // 0x0278 (size: 0x8)
    class UMetabolismVitaminAndMineralReserve* _mineral_P;                            // 0x0280 (size: 0x8)
    class UMetabolismVitaminAndMineralReserve* _mineral_K;                            // 0x0288 (size: 0x8)
    class UMetabolismVitaminAndMineralReserve* _mineral_Zn;                           // 0x0290 (size: 0x8)
    class UMetabolismVitaminAndMineralReserve* _mineral_Cu;                           // 0x0298 (size: 0x8)
    class UMetabolismVitaminAndMineralReserve* _mineral_Mn;                           // 0x02A0 (size: 0x8)
    class UMetabolismVitaminAndMineralReserve* _mineral_Se;                           // 0x02A8 (size: 0x8)
    class UMetabolismVitaminAndMineralReserve* _mineral_Na;                           // 0x02B0 (size: 0x8)

}; // Size: 0x2C0

class UMetabolismNutritionPanel : public UUserWidget
{
    class UMetabolismRadialProgressBar* _rpb_Calories;                                // 0x0268 (size: 0x8)
    class UMetabolismRadialProgressBar* _rpb_Water;                                   // 0x0270 (size: 0x8)

}; // Size: 0x280

class UMetabolismPerformanceDataPanel : public UUserWidget
{
    class UMetabolismAdvancedProgressBar* _apb_Stamina;                               // 0x0268 (size: 0x8)
    class UMetabolismAdvancedProgressBar* _apb_WeightLoad;                            // 0x0270 (size: 0x8)
    class UMetabolismAdvancedProgressBar* _apb_WalkSpeed;                             // 0x0278 (size: 0x8)
    class UMetabolismAdvancedProgressBar* _apb_JogSpeed;                              // 0x0280 (size: 0x8)
    class UMetabolismAdvancedProgressBar* _apb_RunSpeed;                              // 0x0288 (size: 0x8)
    class UMetabolismAdvancedProgressBar* _apb_HealingSpeed;                          // 0x0290 (size: 0x8)
    class UMetabolismAdvancedProgressBar* _apb_BloodRecoveryRate;                     // 0x0298 (size: 0x8)
    class UMetabolismAdvancedProgressBar* _apb_ImmuneSystem;                          // 0x02A0 (size: 0x8)
    class UMetabolismAdvancedProgressBar* _apb_PerformanceScore;                      // 0x02A8 (size: 0x8)
    class UMetabolismAdvancedProgressBar* _apb_StealthFactor;                         // 0x02B0 (size: 0x8)
    class UMetabolismAdvancedProgressBar* _apb_MeleeDamage;                           // 0x02B8 (size: 0x8)
    class UMetabolismCurrentStatDark* _csd_ConsumptionRecoveryResting;                // 0x02C0 (size: 0x8)
    class UMetabolismCurrentStatDark* _csd_ConsumptionRecoveryIdle;                   // 0x02C8 (size: 0x8)
    class UMetabolismCurrentStatDark* _csd_ConsumptionRecoveryEasy;                   // 0x02D0 (size: 0x8)
    class UMetabolismCurrentStatDark* _csd_ConsumptionRecoveryDemanding;              // 0x02D8 (size: 0x8)
    class UMetabolismCurrentStatDark* _csd_ConsumptionRecoveryVeryDemanding;          // 0x02E0 (size: 0x8)
    class UMetabolismCurrentStatDark* _csd_ConsumptionRecoveryExtremelyDemanding;     // 0x02E8 (size: 0x8)
    class UMetabolismCurrentStatDark* _csd_OverloadPenaltyEnergy;                     // 0x02F0 (size: 0x8)
    class UMetabolismCurrentStatDark* _csd_OverloadPenaltyWater;                      // 0x02F8 (size: 0x8)

}; // Size: 0x308

class UMetabolismRadialAttributeProgressBar : public UUserWidget
{
    FMetabolismRadialAttributeProgressBarColor BackgroundColor;                       // 0x0268 (size: 0x30)
    FMetabolismRadialAttributeProgressBarColor BarColor;                              // 0x0298 (size: 0x30)
    FMetabolismRadialAttributeProgressBarColor BarGlowColor;                          // 0x02C8 (size: 0x30)
    FMetabolismRadialAttributeProgressBarColor InnerGlowColor;                        // 0x02F8 (size: 0x30)
    FMetabolismRadialAttributeProgressBarColor OuterGlowColor;                        // 0x0328 (size: 0x30)
    FMetabolismRadialAttributeProgressBarColor FontColor;                             // 0x0358 (size: 0x30)
    EDisposition PreviewState;                                                        // 0x0388 (size: 0x1)
    class UImage* _coloredBackground;                                                 // 0x0390 (size: 0x8)
    class UImage* _radialProgressBar;                                                 // 0x0398 (size: 0x8)
    class URetainerBox* _fontEffectPass1;                                             // 0x03A0 (size: 0x8)
    class URetainerBox* _fontEffectPass2;                                             // 0x03A8 (size: 0x8)
    class UTextBlock* _attributeValueTextBlock;                                       // 0x03B0 (size: 0x8)

}; // Size: 0x3C8

class UMetabolismRadialProgressBar : public UUserWidget
{
    bool PreviewedAlertedState;                                                       // 0x0268 (size: 0x1)
    float PrimaryPercentageMinDisplayedValue;                                         // 0x026C (size: 0x4)
    float PrimaryPercentageMaxDisplayedValue;                                         // 0x0270 (size: 0x4)
    class UScaleBox* _scaleBox;                                                       // 0x0288 (size: 0x8)
    class UImage* _coloredBackground;                                                 // 0x0290 (size: 0x8)
    class UImage* _radialProgressBar;                                                 // 0x0298 (size: 0x8)
    class URetainerBox* _fontEffectPass1;                                             // 0x02A0 (size: 0x8)
    class URetainerBox* _fontEffectPass2;                                             // 0x02A8 (size: 0x8)
    class URichTextBlock* _percentage;                                                // 0x02B0 (size: 0x8)
    class UTextBlock* _value;                                                         // 0x02B8 (size: 0x8)
    class UTextBlock* _title;                                                         // 0x02C0 (size: 0x8)
    FMetabolismRadialProgressBarColorScheme _defaultColorScheme;                      // 0x02C8 (size: 0x80)
    FMetabolismRadialProgressBarColorScheme _alertedColorScheme;                      // 0x0348 (size: 0x80)
    FMetabolismRadialProgressBarFontSettings _percentageFontSettings;                 // 0x03C8 (size: 0x14)
    float _widgetScale;                                                               // 0x03DC (size: 0x4)
    bool _isTitleVisible;                                                             // 0x03E0 (size: 0x1)

    class UWidget* GetToolTipWidget();
}; // Size: 0x478

class UMetabolismRightPanel : public UTabMenuPanel
{
    class UMetabolismNutritionPanel* _nutritionPanel;                                 // 0x0268 (size: 0x8)
    class UMetabolismMacronutrientReservesPanel* _macronutrientReservesPanel;         // 0x0270 (size: 0x8)
    class UMetabolismBodyReservesPanel* _bodyReservesPanel;                           // 0x0278 (size: 0x8)
    class UMetabolismVitaminsPanel* _vitaminsPanel;                                   // 0x0280 (size: 0x8)
    class UMetabolismMineralsPanel* _mineralsPanel;                                   // 0x0288 (size: 0x8)
    class UMetabolismDigestionPanel* _digestionPanel;                                 // 0x0290 (size: 0x8)

}; // Size: 0x2A0

class UMetabolismSave : public UObject
{
    float LeanBodyMass;                                                               // 0x0028 (size: 0x4)
    TArray<FDigestionItemSave> DigestionItems;                                        // 0x0030 (size: 0x10)
    TArray<FForeignSubstanceSave> ForeignSubstances;                                  // 0x0040 (size: 0x10)
    FSubstancesData AbsorbedSubstances;                                               // 0x0050 (size: 0xD0)
    FSubstancesData FecesVolumeInIntestine;                                           // 0x0120 (size: 0xD0)
    FSubstancesData FecesVolumeInColon;                                               // 0x01F0 (size: 0xD0)
    float UrineVolumeInBladder;                                                       // 0x02C0 (size: 0x4)

}; // Size: 0x2C8

class UMetabolismSegmentedProgressBar : public UUserWidget
{
    TArray<FMetabolismSPBColorScheme> ColorSchemes;                                   // 0x0268 (size: 0x10)
    FSlateBrush BrushOverride;                                                        // 0x0278 (size: 0x88)
    class UImage* _progressBarImage;                                                  // 0x0300 (size: 0x8)

}; // Size: 0x320

class UMetabolismSkillProgressBar : public UConZUserWidget
{
    TArray<FSlateBrush> SkillRankIcons;                                               // 0x0290 (size: 0x10)
    FText SkillTitle;                                                                 // 0x02A0 (size: 0x18)
    class UImage* _skillRankIcon;                                                     // 0x02C8 (size: 0x8)
    class UMetabolismAdvancedProgressBar* _apb_SkillProgress;                         // 0x02D0 (size: 0x8)
    TSubclassOf<class USkill> _skillClass;                                            // 0x02D8 (size: 0x8)

    class UWidget* GetToolTipWidget();
}; // Size: 0x2E0

class UMetabolismSkillProgressionPanel : public UUserWidget
{
    TSubclassOf<class UUserWidget> SkillProgressBarWidgetClass;                       // 0x0268 (size: 0x8)
    class UTabGroup* _tabRow;                                                         // 0x0270 (size: 0x8)
    TSubclassOf<class UTabButton> _tabButtonClass;                                    // 0x0278 (size: 0x8)
    class UWidgetSwitcher* _attributeSwitcher;                                        // 0x0280 (size: 0x8)
    class UMetabolismSkillProgressionTab* _STR_tab;                                   // 0x0288 (size: 0x8)
    class UMetabolismSkillProgressionTab* _CON_tab;                                   // 0x0290 (size: 0x8)
    class UMetabolismSkillProgressionTab* _DEX_tab;                                   // 0x0298 (size: 0x8)
    class UMetabolismSkillProgressionTab* _INT_tab;                                   // 0x02A0 (size: 0x8)

}; // Size: 0x2B0

class UMetabolismSkillProgressionTab : public UUserWidget
{
    TSubclassOf<class UUserWidget> SkillProgressBarWidgetClass;                       // 0x0268 (size: 0x8)
    class UWrapBox* _skillsWrapBox;                                                   // 0x0270 (size: 0x8)
    ESkillAttribute _skillType;                                                       // 0x0280 (size: 0x1)
    FText _skillAttributeName;                                                        // 0x0288 (size: 0x18)

}; // Size: 0x2A0

class UMetabolismStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UMetabolismStatsPanel : public UTabMenuPanel
{
    class UMetabolismRadialAttributeProgressBar* _str_progressWidget;                 // 0x0268 (size: 0x8)
    class UMetabolismRadialAttributeProgressBar* _con_progressWidget;                 // 0x0270 (size: 0x8)
    class UMetabolismRadialAttributeProgressBar* _dex_progressWidget;                 // 0x0278 (size: 0x8)
    class UMetabolismRadialAttributeProgressBar* _int_progressWidget;                 // 0x0280 (size: 0x8)
    class UMetabolismSkillProgressionPanel* _skillProgressionPanel;                   // 0x0288 (size: 0x8)
    class UMetabolismBasicInfoPanel* _basicInfoPanel;                                 // 0x0290 (size: 0x8)
    class UMetabolismPerformanceDataPanel* _performanceDataPanel;                     // 0x0298 (size: 0x8)
    class UMetabolismBodyStatsPanel* _bodyStatsPanel;                                 // 0x02A0 (size: 0x8)

}; // Size: 0x2D8

class UMetabolismSymptomTitle : public UUserWidget
{
    class UTextBlock* _title;                                                         // 0x0278 (size: 0x8)

    class UWidget* GetToolTipWidget();
}; // Size: 0x280

class UMetabolismTissueGroupCheckbox : public UUserWidget
{
    FText Title;                                                                      // 0x0268 (size: 0x18)
    bool IsCheckdByDefault;                                                           // 0x0280 (size: 0x1)
    class UTextBlock* _title;                                                         // 0x0288 (size: 0x8)
    class UCheckBox* _checkBox;                                                       // 0x0290 (size: 0x8)

}; // Size: 0x298

class UMetabolismTitleAndAPB : public UUserWidget
{
    FText Title;                                                                      // 0x0268 (size: 0x18)
    class UTextBlock* _titleText;                                                     // 0x0280 (size: 0x8)
    class UImage* _background;                                                        // 0x0288 (size: 0x8)
    class UMetabolismAdvancedProgressBar* _apb_ValueAndProgress;                      // 0x0290 (size: 0x8)
    FDataTableRowHandle _backgroundColor;                                             // 0x0298 (size: 0x10)
    FDataTableRowHandle _titleTextColor;                                              // 0x02A8 (size: 0x10)

}; // Size: 0x2B8

class UMetabolismTreatmentPanel : public UUserWidget
{
    class UVerticalBox* _untreatedColumn;                                             // 0x0268 (size: 0x8)
    class UVerticalBox* _stabilizationColumn;                                         // 0x0270 (size: 0x8)
    class UVerticalBox* _recoveryColumn;                                              // 0x0278 (size: 0x8)
    class UImage* _untreatedBackground;                                               // 0x0280 (size: 0x8)
    class UImage* _stabilizationBackground;                                           // 0x0288 (size: 0x8)
    class UImage* _recoveryBackground;                                                // 0x0290 (size: 0x8)
    TSubclassOf<class UMetabolismBodyEffectProgressBar> _progressBarClass;            // 0x0298 (size: 0x8)
    TSubclassOf<class UTextOnlyTooltip> _tooltipClass;                                // 0x02A0 (size: 0x8)

}; // Size: 0x2C0

class UMetabolismVitaminAndMineralReserve : public UUserWidget
{
    FText Title;                                                                      // 0x0268 (size: 0x18)
    class UTextBlock* _title;                                                         // 0x0280 (size: 0x8)
    class UTextBlock* _value;                                                         // 0x0288 (size: 0x8)
    class UMetabolismSegmentedProgressBar* _spb_ReservesBar;                          // 0x0290 (size: 0x8)

}; // Size: 0x2A0

class UMetabolismVitaminsPanel : public UUserWidget
{
    class UMetabolismVitaminAndMineralReserve* _vitamin_A;                            // 0x0268 (size: 0x8)
    class UMetabolismVitaminAndMineralReserve* _vitamin_B1;                           // 0x0270 (size: 0x8)
    class UMetabolismVitaminAndMineralReserve* _vitamin_B2;                           // 0x0278 (size: 0x8)
    class UMetabolismVitaminAndMineralReserve* _vitamin_B3;                           // 0x0280 (size: 0x8)
    class UMetabolismVitaminAndMineralReserve* _vitamin_B4;                           // 0x0288 (size: 0x8)
    class UMetabolismVitaminAndMineralReserve* _vitamin_B5;                           // 0x0290 (size: 0x8)
    class UMetabolismVitaminAndMineralReserve* _vitamin_B6;                           // 0x0298 (size: 0x8)
    class UMetabolismVitaminAndMineralReserve* _vitamin_B9;                           // 0x02A0 (size: 0x8)
    class UMetabolismVitaminAndMineralReserve* _vitamin_B12;                          // 0x02A8 (size: 0x8)
    class UMetabolismVitaminAndMineralReserve* _vitamin_C;                            // 0x02B0 (size: 0x8)
    class UMetabolismVitaminAndMineralReserve* _vitamin_D;                            // 0x02B8 (size: 0x8)
    class UMetabolismVitaminAndMineralReserve* _vitamin_E;                            // 0x02C0 (size: 0x8)
    class UMetabolismVitaminAndMineralReserve* _vitamin_K;                            // 0x02C8 (size: 0x8)

}; // Size: 0x2D8

class UMetabolism_BCU_ICU_Monitor : public UUserWidget
{
    class UCurveFloat* TimeStretchCurveCurve;                                         // 0x0268 (size: 0x8)
    class UCheckBox* _chbSwitchICUState;                                              // 0x0270 (size: 0x8)
    class UWidgetSwitcher* _icu_Switcher;                                             // 0x0278 (size: 0x8)
    class UMetabolism_BCU_ICU_StatsPanel* _icu_Collapsed;                             // 0x0280 (size: 0x8)
    class UMetabolism_BCU_ICU_StatsPanel* _icu_Expanded;                              // 0x0288 (size: 0x8)

    void OnICUStateChanged(bool isCollapsed);
}; // Size: 0x2A8

class UMetabolism_BCU_ICU_StatsPanel : public UUserWidget
{
    class UMetabolism_ICU_EKG_Stats* Stats_EKG;                                       // 0x0268 (size: 0x8)
    class UMetabolism_ICU_ST_Stats* Stats_ST;                                         // 0x0270 (size: 0x8)
    class UMetabolism_ICU_SPO2_Stats* Stats_SPO2;                                     // 0x0278 (size: 0x8)
    class UMetabolism_ICU_RR_Stats* Stats_RR;                                         // 0x0280 (size: 0x8)
    class UMetabolism_ICU_TEMP_Stats* Stats_TEMP;                                     // 0x0288 (size: 0x8)

}; // Size: 0x290

class UMetabolism_ICU_EKG_Stats : public UMetabolism_ICU_Expandable_Stats
{
    class UTextBlock* _heartPulseBPM;                                                 // 0x0288 (size: 0x8)
    class UTextBlock* _ekg;                                                           // 0x0290 (size: 0x8)
    class UTextBlock* _stPlus;                                                        // 0x0298 (size: 0x8)
    class UTextBlock* _bpm;                                                           // 0x02A0 (size: 0x8)
    class UTextBlock* _miliVolts;                                                     // 0x02A8 (size: 0x8)
    FText _ekgDescription;                                                            // 0x02B0 (size: 0x18)
    FText _stPlusDescription;                                                         // 0x02C8 (size: 0x18)
    FText _bpmDescription;                                                            // 0x02E0 (size: 0x18)
    FText _miliVoltsDescription;                                                      // 0x02F8 (size: 0x18)

}; // Size: 0x310

class UMetabolism_ICU_Expandable_Stats : public UUserWidget
{
    bool DisplayGraph;                                                                // 0x0268 (size: 0x1)
    class UMetabolism_ICU_GraphWidget* _graph2D;                                      // 0x0270 (size: 0x8)
    class UImage* _graph2D_Background;                                                // 0x0278 (size: 0x8)
    TSubclassOf<class UTextOnlyTooltip> _tooltipClass;                                // 0x0280 (size: 0x8)

}; // Size: 0x288

class UMetabolism_ICU_GraphWidget : public UGraph2DWidget
{
    class UCurveFloat* BaseCurve;                                                     // 0x01F8 (size: 0x8)
    float CurvePeriodBaseDuration;                                                    // 0x0200 (size: 0x4)
    int32 MinSamplesForSingleCurvePeriod;                                             // 0x0204 (size: 0x4)

}; // Size: 0x220

class UMetabolism_ICU_GraphWidget_EKG : public UMetabolism_ICU_GraphWidget
{
    class UCurveFloat* TimeStretchCurveCurve;                                         // 0x0220 (size: 0x8)
    class UCurveFloat* HeartbeatIrregularitiesCurve;                                  // 0x0228 (size: 0x8)

}; // Size: 0x250

class UMetabolism_ICU_GraphWidget_RR : public UMetabolism_ICU_GraphWidget
{
}; // Size: 0x228

class UMetabolism_ICU_GraphWidget_SPO2 : public UMetabolism_ICU_GraphWidget
{
    class UCurveFloat* TimeStretchCurveCurve;                                         // 0x0220 (size: 0x8)

}; // Size: 0x238

class UMetabolism_ICU_GraphWidget_ST : public UMetabolism_ICU_GraphWidget
{
    class UCurveFloat* TimeStretchCurveCurve;                                         // 0x0220 (size: 0x8)

}; // Size: 0x240

class UMetabolism_ICU_GraphWidget_TEMP : public UMetabolism_ICU_GraphWidget
{
}; // Size: 0x228

class UMetabolism_ICU_RR_Stats : public UMetabolism_ICU_Expandable_Stats
{
    class UTextBlock* _rrMinMax;                                                      // 0x0288 (size: 0x8)
    class UTextBlock* _rrTextValue;                                                   // 0x0290 (size: 0x8)
    class URichTextBlock* _rr;                                                        // 0x0298 (size: 0x8)
    class URichTextBlock* _co2;                                                       // 0x02A0 (size: 0x8)
    FText _rrDescription;                                                             // 0x02A8 (size: 0x18)
    FText _co2Description;                                                            // 0x02C0 (size: 0x18)

}; // Size: 0x2E0

class UMetabolism_ICU_SPO2_Stats : public UMetabolism_ICU_Expandable_Stats
{
    class UTextBlock* _spo2MinMax;                                                    // 0x0288 (size: 0x8)
    class UTextBlock* _spo2TextValue;                                                 // 0x0290 (size: 0x8)
    class UProgressBar* _spo2ProgBar;                                                 // 0x0298 (size: 0x8)
    class URichTextBlock* _spo2;                                                      // 0x02A0 (size: 0x8)
    FText _spo2Description;                                                           // 0x02A8 (size: 0x18)

}; // Size: 0x2C0

class UMetabolism_ICU_ST_Stats : public UMetabolism_ICU_Expandable_Stats
{
    class UTextBlock* _bloodPressure_mmHg;                                            // 0x0288 (size: 0x8)
    class UTextBlock* _bloodPressure_kPa;                                             // 0x0290 (size: 0x8)
    class UTextBlock* _st;                                                            // 0x0298 (size: 0x8)
    class UTextBlock* _nibp;                                                          // 0x02A0 (size: 0x8)
    class UTextBlock* _mmHg;                                                          // 0x02A8 (size: 0x8)
    class UTextBlock* _kPa;                                                           // 0x02B0 (size: 0x8)
    FText _stDescription;                                                             // 0x02B8 (size: 0x18)
    FText _nibpDescription;                                                           // 0x02D0 (size: 0x18)
    FText _mmHgDescription;                                                           // 0x02E8 (size: 0x18)
    FText _kPaDescription;                                                            // 0x0300 (size: 0x18)

}; // Size: 0x318

class UMetabolism_ICU_TEMP_Stats : public UMetabolism_ICU_Expandable_Stats
{
    class UTextBlock* _tempMinMax;                                                    // 0x0288 (size: 0x8)
    class UTextBlock* _tempDeviation;                                                 // 0x0290 (size: 0x8)
    class UTextBlock* _temp;                                                          // 0x0298 (size: 0x8)
    class UTextBlock* _td;                                                            // 0x02A0 (size: 0x8)
    class UTextBlock* _tempHalf;                                                      // 0x02A8 (size: 0x8)
    class UTextBlock* _degreesCelsius;                                                // 0x02B0 (size: 0x8)
    FText _tempDescription;                                                           // 0x02B8 (size: 0x18)
    FText _tempDeviationDescription;                                                  // 0x02D0 (size: 0x18)
    FText _tempHalfDescription;                                                       // 0x02E8 (size: 0x18)
    FText _degreesCelsiusDescription;                                                 // 0x0300 (size: 0x18)

}; // Size: 0x318

class UMicInputIndicator : public UUserWidget
{
    class UOverlay* RingsOverlay;                                                     // 0x0268 (size: 0x8)

}; // Size: 0x298

class UMinigameConfiguration : public UObject
{
    TSubclassOf<class AMinigame> minigameClass;                                       // 0x0028 (size: 0x8)

}; // Size: 0x50

class UMinigameValidationParams : public UObject
{
}; // Size: 0x28

class UMinigameWidget : public UUserWidget
{
}; // Size: 0x280

class UMiscStatics : public UBlueprintFunctionLibrary
{

    FDateTime UtcToLocalDateTime(FDateTime utc);
    void Test_ProcessAdminCommand(const class UObject* WorldContextObject, FString commandText);
    void SortSkillsByLevelAndExperience(TArray<class USkill*>& Skills);
    void SendChatLineToPlayer(const class AConZPlayerController* PlayerController, FString Text, EChatType ChatType, bool ShouldCopyToClientClipboard);
    FSoftObjectPath ResolveObjectPathForPIE(const TSoftObjectPtr<UObject>& Asset, class UObject* WorldContext);
    bool PasteLocationAndRotationFromClipboard(FVector& Location, FRotator& Rotation);
    bool ParseVectorFromString(FString String, FVector& outVector);
    bool ParseTransformFromString(FString String, FTransform& Transform);
    FDateTime LocalToUtcDateTime(FDateTime Local);
    bool IsUserDeveloper(const class UObject* WorldContextObject, FString UserId);
    class ULineBatchComponent* GetLineBatcher(const class UObject* WorldContextObject, bool bPersistentLines, float LifeTime, bool bDepthIsForeground);
    FString GetGameVersion();
    TArray<FConZDeveloperId> GetDeveloperUsers(const class UObject* WorldContextObject);
    class UObject* GetClassDefaultObject(UClass* ObjectClass);
    void DrawLine(const class UObject* WorldContextObject, const FVector& LineStart, const FVector& LineEnd, const FColor& Color, bool persistentLines, float LifeTime, uint8 DepthPriority, float Thickness);
    void DrawDebugNumber(const class UObject* WorldContextObject, float Number, FVector Location, FColor Color, float Size, float Duration, float Thickness, bool autoSize);
    void DrawDebugDigit(const class UObject* WorldContextObject, int32 digit, FVector Location, FRotator Rotation, FColor Color, float Size, float Duration, float Thickness);
    void DrawCircle(const class UObject* WorldContextObject, const FVector& Center, const FVector& X, const FVector& Y, float Radius, float numberOfSides, const FColor& Color, bool persistentLines, float LifeTime, uint8 DepthPriority, float Thickness);
    void CopyLocationAndRotationToClipboard(const FVector& Location, const FRotator& Rotation);
    void BroadcastChatLine(const class UObject* WorldContextObject, FString Text, EChatType ChatType);
}; // Size: 0x28

class UMobilePhoneAvailableQuestsPanel : public UUserWidget
{
    class UVerticalBox* _availableQuestsContainer;                                    // 0x0278 (size: 0x8)
    TSubclassOf<class UMobilePhoneQuestEntryWidget> _questEntryWidgetClass;           // 0x0280 (size: 0x8)

}; // Size: 0x290

class UMobilePhoneItemComponent : public UItemComponent
{
    TSubclassOf<class AMobilePhoneMinigame> _minigameClass;                           // 0x00C8 (size: 0x8)

}; // Size: 0xD0

class UMobilePhoneMainPanel : public UUserWidget
{
    FMobilePhoneMainPanelOnMouseMoveEvent OnMouseMoveEvent;                           // 0x0268 (size: 0x10)
    FEventReply OnPointerEvent(FGeometry MyGeometry, const FPointerEvent& MouseEvent);
    class UWidget* _virtualMouseCursorWidget;                                         // 0x0278 (size: 0x8)
    class UWidgetSwitcher* _panelSwitcher;                                            // 0x0298 (size: 0x8)
    class UMobilePhoneAvailableQuestsPanel* _availableQuestsPanel;                    // 0x02A0 (size: 0x8)
    class UMobilePhoneQuestDetailsWidget* _questDetailsPanel;                         // 0x02A8 (size: 0x8)
    class UWidgetSwitcher* _signalStrengthWidgetSwitcher;                             // 0x02B0 (size: 0x8)
    class UTextBlock* _batteryPercentageText;                                         // 0x02B8 (size: 0x8)
    class UProgressBar* _batteryProgressBar;                                          // 0x02C0 (size: 0x8)

}; // Size: 0x2D0

class UMobilePhoneMinigameConfiguration : public UMinigameConfiguration
{
}; // Size: 0x50

class UMobilePhoneQuestDetailsWidget : public UUserWidget
{
    class UTextBlock* _questTraderTitle;                                              // 0x0278 (size: 0x8)
    class UTextBlock* _questTier;                                                     // 0x0280 (size: 0x8)
    class UTextBlock* _questTitle;                                                    // 0x0288 (size: 0x8)
    class UTextBlock* _questDescription;                                              // 0x0290 (size: 0x8)
    class UTextBlock* _questTrader;                                                   // 0x0298 (size: 0x8)
    class UVerticalBox* _questRequirementsContainer;                                  // 0x02A0 (size: 0x8)
    class UTextBlock* _questTimeLimit;                                                // 0x02A8 (size: 0x8)
    class UTextBlock* _questRewardTitle;                                              // 0x02B0 (size: 0x8)
    class UVerticalBox* _questRewardsContainer;                                       // 0x02B8 (size: 0x8)
    class UOverlay* _playerResponseOverlay;                                           // 0x02C0 (size: 0x8)
    class UOverlay* _mainMessageOverlay;                                              // 0x02C8 (size: 0x8)
    class UTextBlock* _playerResponseText;                                            // 0x02D0 (size: 0x8)
    class UOverlay* _traderResponseOverlay;                                           // 0x02D8 (size: 0x8)
    class UTextBlock* _traderResponseText;                                            // 0x02E0 (size: 0x8)
    class URetainerBox* _traderIconRetainer1;                                         // 0x02E8 (size: 0x8)
    class UImage* _traderIcon1;                                                       // 0x02F0 (size: 0x8)
    class URetainerBox* _traderIconRetainer2;                                         // 0x02F8 (size: 0x8)
    class UImage* _traderIcon2;                                                       // 0x0300 (size: 0x8)
    class UOverlay* _questAcceptedOverlay;                                            // 0x0308 (size: 0x8)
    class UTextBlock* _playerInitials;                                                // 0x0310 (size: 0x8)
    class URetainerBox* _playerRetainerBox;                                           // 0x0318 (size: 0x8)
    class UConZCustomInteractionButton* _buttonBack;                                  // 0x0320 (size: 0x8)
    class UConZCustomInteractionButton* _buttonAccept;                                // 0x0328 (size: 0x8)
    class UConZCustomInteractionButton* _buttonOk;                                    // 0x0330 (size: 0x8)

    void OnOKButtonClicked();
    void OnBackButtonClicked();
    void OnAnyButtonHovered();
    void OnAcceptButtonClicked();
}; // Size: 0x3C0

class UMobilePhoneQuestEntryWidget : public UUserWidget
{
    class UTextBlock* _entrySector;                                                   // 0x0288 (size: 0x8)
    class UTextBlock* _entryTier;                                                     // 0x0290 (size: 0x8)
    class UTextBlock* _entryTrader;                                                   // 0x0298 (size: 0x8)
    class UImage* _entryTraderIcon;                                                   // 0x02A0 (size: 0x8)
    class URetainerBox* _entryTraderIconRetainer;                                     // 0x02A8 (size: 0x8)
    class UTextBlock* _entryStatus;                                                   // 0x02B0 (size: 0x8)
    class UTextBlock* _entryTitle;                                                    // 0x02B8 (size: 0x8)
    class UTextBlock* _entryTimeLimit;                                                // 0x02C0 (size: 0x8)
    class UWidgetSwitcher* _timeLimitWidgetSwitcher;                                  // 0x02C8 (size: 0x8)
    class UQuestTimerTextBlock* _entryQuestTimer;                                     // 0x02D0 (size: 0x8)
    class UImage* _entryUpdateIcon;                                                   // 0x02D8 (size: 0x8)
    class UImage* _customQuestIcon;                                                   // 0x02E0 (size: 0x8)
    FSlateColor _questCompletedColor;                                                 // 0x02E8 (size: 0x28)
    FSlateColor _questFailedColor;                                                    // 0x0310 (size: 0x28)
    FSlateColor _questInProgressColor;                                                // 0x0338 (size: 0x28)
    FSlateColor _questRelevantFontColor;                                              // 0x0360 (size: 0x28)

}; // Size: 0x3C0

class UMobilePhoneUIController : public UObject
{
}; // Size: 0x60

class UModularBaseBuildingComponent : public UBaseBuildingComponent
{
    TArray<FRotator> _availableOrientations;                                          // 0x0750 (size: 0x10)
    float MinStabilityForPlacement;                                                   // 0x0760 (size: 0x4)
    TArray<FElementQueryMarker> _elementStabilityMarkers;                             // 0x0768 (size: 0x10)
    TArray<FModularElementSnapMarker> _modularElementSnapMarkers;                     // 0x0778 (size: 0x10)
    TArray<FElementMorphQuery> _elementMorphQueries;                                  // 0x0788 (size: 0x10)
    TArray<FVector> _floatingCheckLocations;                                          // 0x0798 (size: 0x10)
    bool _adjustSnappingLocation;                                                     // 0x07A8 (size: 0x1)
    bool _canBePlacedOverOtherModularElement;                                         // 0x07A9 (size: 0x1)

    TArray<FName> GetModularMarkerNameOptions();
}; // Size: 0x7B0

class UModularBaseBuildingSocketType : public UObject
{
}; // Size: 0x28

class UModularCodexEntryElement : public UUserWidget
{
    class UModularCodexEntryElementData* _data;                                       // 0x0268 (size: 0x8)

}; // Size: 0x278

class UModularCodexEntryElementData : public UObject
{
    FMargin _desiredPadding;                                                          // 0x0028 (size: 0x10)

}; // Size: 0x38

class UModularCodexEntryElementData_BulletPoint : public UModularCodexEntryElementData_Text
{
}; // Size: 0x50

class UModularCodexEntryElementData_HorizontalContainer : public UModularCodexEntryElementData
{
    TArray<class UModularCodexEntryElementData*> _elements;                           // 0x0038 (size: 0x10)
    FMargin _desiredElementsPadding;                                                  // 0x0048 (size: 0x10)

}; // Size: 0x58

class UModularCodexEntryElementData_Image : public UModularCodexEntryElementData
{
    TSoftObjectPtr<UTexture2D> _imageTexture;                                         // 0x0038 (size: 0x28)
    TArray<FManualEnhancedImageTextInformation> _textElements;                        // 0x0060 (size: 0x10)

}; // Size: 0x70

class UModularCodexEntryElementData_Note : public UModularCodexEntryElementData
{
    class UModularCodexEntryElementData* _element;                                    // 0x0038 (size: 0x8)

}; // Size: 0x40

class UModularCodexEntryElementData_Text : public UModularCodexEntryElementData
{
    FText _text;                                                                      // 0x0038 (size: 0x18)

}; // Size: 0x50

class UModularCodexEntryElementData_Title : public UModularCodexEntryElementData_Text
{
}; // Size: 0x50

class UModularCodexEntryElementData_VerticalContainer : public UModularCodexEntryElementData
{
    TArray<class UModularCodexEntryElementData*> _elements;                           // 0x0038 (size: 0x10)
    FMargin _desiredElementsPadding;                                                  // 0x0048 (size: 0x10)

}; // Size: 0x58

class UModularCodexEntryElementData_Video : public UModularCodexEntryElementData
{
    TSoftObjectPtr<UTexture2D> _videoTexture;                                         // 0x0038 (size: 0x28)
    TArray<FManualEnhancedImageTextInformation> _textElements;                        // 0x0060 (size: 0x10)

}; // Size: 0x70

class UModularCodexEntryElement_BulletPoint : public UModularCodexEntryElement
{
    class URichTextBlock* _richTextBlock;                                             // 0x0278 (size: 0x8)

}; // Size: 0x280

class UModularCodexEntryElement_HorizontalContainer : public UModularCodexEntryElement
{
    class UHorizontalBox* _horizontalBox;                                             // 0x0278 (size: 0x8)

}; // Size: 0x280

class UModularCodexEntryElement_Image : public UModularCodexEntryElement
{
    class UOverlay* _imageOverlay;                                                    // 0x0278 (size: 0x8)
    class UImage* _image;                                                             // 0x0280 (size: 0x8)

}; // Size: 0x288

class UModularCodexEntryElement_Note : public UModularCodexEntryElement
{
    class USizeBox* _sizeBox;                                                         // 0x0278 (size: 0x8)

}; // Size: 0x280

class UModularCodexEntryElement_Text : public UModularCodexEntryElement
{
    class URichTextBlock* _richTextBlock;                                             // 0x0278 (size: 0x8)

}; // Size: 0x280

class UModularCodexEntryElement_Title : public UModularCodexEntryElement_Text
{
}; // Size: 0x280

class UModularCodexEntryElement_VerticalContainer : public UModularCodexEntryElement
{
    class UVerticalBox* _verticalBox;                                                 // 0x0278 (size: 0x8)

}; // Size: 0x280

class UModularCodexEntryElement_Video : public UModularCodexEntryElement
{
    class UOverlay* _imageOverlay;                                                    // 0x0278 (size: 0x8)
    class UImage* _image;                                                             // 0x0280 (size: 0x8)

}; // Size: 0x288

class UModularTooltip : public UUserWidget
{
    TSubclassOf<class UModularTooltipSection> _sectionClass;                          // 0x0268 (size: 0x8)
    class URichTextBlock* _descriptionTextBlock;                                      // 0x0270 (size: 0x8)
    class UVerticalBox* _sectionsVerticalBox;                                         // 0x0278 (size: 0x8)
    class UTextBlock* _advancedDisplayHintTextBlock;                                  // 0x0280 (size: 0x8)

    void PrisonerHUD_OnShouldShowExtendedWidgetTooltipChanged(bool Value);
}; // Size: 0x288

class UModularTooltipElement : public UUserWidget
{
    class UModularTooltipElementData* _data;                                          // 0x0268 (size: 0x8)
    FDataTableRowHandle _neutralDispositionColor;                                     // 0x0270 (size: 0x10)
    FDataTableRowHandle _goodDispositionColor;                                        // 0x0280 (size: 0x10)
    FDataTableRowHandle _badDispositionColor;                                         // 0x0290 (size: 0x10)
    TEnumAsByte<EHorizontalAlignment> _desiredHorizontalAlignment;                    // 0x02A0 (size: 0x1)

}; // Size: 0x2F8

class UModularTooltipElementData : public UObject
{
}; // Size: 0x28

class UModularTooltipElementData_AffectedBy : public UModularTooltipElementData
{
    class UModularTooltipElementData* Affect;                                         // 0x0040 (size: 0x8)

}; // Size: 0x48

class UModularTooltipElementData_Affects : public UModularTooltipElementData
{
    class UModularTooltipElementData* Affect;                                         // 0x0040 (size: 0x8)

}; // Size: 0x48

class UModularTooltipElementData_Modifier : public UModularTooltipElementData
{
}; // Size: 0x78

class UModularTooltipElementData_Timer : public UModularTooltipElementData
{
}; // Size: 0x58

class UModularTooltipElementData_Title : public UModularTooltipElementData
{
}; // Size: 0x48

class UModularTooltipElementData_Value : public UModularTooltipElementData
{
}; // Size: 0x60

class UModularTooltipElementData_ValueWithModifier : public UModularTooltipElementData
{
}; // Size: 0x98

class UModularTooltipElementData_ValueWithModifier_Large : public UModularTooltipElementData_ValueWithModifier
{
}; // Size: 0x98

class UModularTooltipElementData_ValueWithModifier_Small : public UModularTooltipElementData_ValueWithModifier
{
}; // Size: 0x98

class UModularTooltipElement_AffectedBy : public UModularTooltipElement
{
    class UTextBlock* _sourceTextBlock;                                               // 0x02F8 (size: 0x8)
    class UOverlay* _affectElementOverlay;                                            // 0x0300 (size: 0x8)

}; // Size: 0x308

class UModularTooltipElement_Affects : public UModularTooltipElement
{
    class UTextBlock* _targetTextBlock;                                               // 0x02F8 (size: 0x8)
    class UOverlay* _affectElementOverlay;                                            // 0x0300 (size: 0x8)

}; // Size: 0x308

class UModularTooltipElement_Modifier : public UModularTooltipElement
{
    class UTextBlock* _modifierTextBlock;                                             // 0x02F8 (size: 0x8)
    class UMetabolismAdvancedProgressBar* _remainingTimeProgressBar;                  // 0x0300 (size: 0x8)

}; // Size: 0x308

class UModularTooltipElement_Timer : public UModularTooltipElement
{
    class UMetabolismAdvancedProgressBar* _remainingTimeProgressBar;                  // 0x02F8 (size: 0x8)

}; // Size: 0x300

class UModularTooltipElement_Title : public UModularTooltipElement
{
    class UTextBlock* _titleTextBlock;                                                // 0x02F8 (size: 0x8)

}; // Size: 0x300

class UModularTooltipElement_Value : public UModularTooltipElement
{
    class UTextBlock* _nameTextBlock;                                                 // 0x02F8 (size: 0x8)
    class UTextBlock* _valueTextBlock;                                                // 0x0300 (size: 0x8)

}; // Size: 0x308

class UModularTooltipElement_ValueWithModifier : public UModularTooltipElement
{
    class UTextBlock* _nameTextBlock;                                                 // 0x02F8 (size: 0x8)
    class UTextBlock* _currentValueTextBlock;                                         // 0x0300 (size: 0x8)
    class UTextBlock* _baseValueTextBlock;                                            // 0x0308 (size: 0x8)
    class UTextBlock* _modifierSignTextBlock;                                         // 0x0310 (size: 0x8)
    class UTextBlock* _modifierTextBlock;                                             // 0x0318 (size: 0x8)

}; // Size: 0x320

class UModularTooltipSection : public UUserWidget
{
    FMargin _sectionElementsPadding;                                                  // 0x0268 (size: 0x10)
    class UImage* _sectionSeparatorImage;                                             // 0x0278 (size: 0x8)
    class UTextBlock* _sectionNameTextBlock;                                          // 0x0280 (size: 0x8)
    class UVerticalBox* _sectionElementsVerticalBox;                                  // 0x0288 (size: 0x8)

}; // Size: 0x298

class UMotionTriggerComponent : public UTriggerComponent
{
    FVector TriggerForwardVector;                                                     // 0x04E0 (size: 0xC)
    float TriggerAngle;                                                               // 0x04EC (size: 0x4)
    float MotionDetectionSensitivity;                                                 // 0x04F0 (size: 0x4)
    float MotionDetectionDepletionSpeed;                                              // 0x04F4 (size: 0x4)
    float _motionDetector;                                                            // 0x04F8 (size: 0x4)
    class UAkAudioEvent* _motionDetectorStartSound;                                   // 0x0500 (size: 0x8)
    class UAkAudioEvent* _motionDetectorEndSound;                                     // 0x0508 (size: 0x8)

}; // Size: 0x530

class UMotorcycleSkill : public UDrivingSkill
{
}; // Size: 0x5D8

class UMountPath : public UObject
{
    FGameplayTag PathTag;                                                             // 0x0028 (size: 0x8)
    class UAnimMontage* MountingMontage;                                              // 0x0030 (size: 0x8)
    class UAnimMontage* MountingMontageFP;                                            // 0x0038 (size: 0x8)
    FGameplayTag StateTagRequiredForAlternativeAnimations;                            // 0x0040 (size: 0x8)
    class UAnimMontage* MountingMontageAlternative;                                   // 0x0048 (size: 0x8)
    class UAnimMontage* MountingMontageAlternativeFP;                                 // 0x0050 (size: 0x8)
    float FallbackMountTime;                                                          // 0x0058 (size: 0x4)
    EMotionIntensity MountingMotionIntensity;                                         // 0x005C (size: 0x1)
    bool ShouldRemoveItemFromHands;                                                   // 0x005D (size: 0x1)

}; // Size: 0x60

class UMovableAudioSpline : public USplineComponent
{
    TArray<FMovingSplineSoundData> _audioEvents;                                      // 0x0550 (size: 0x10)

}; // Size: 0x590

class UMovableCollisionFieldComponent : public UActorComponent
{
    float _collisionCheckInterval;                                                    // 0x00B0 (size: 0x4)
    FMovableCollisionFieldState _currentState;                                        // 0x00B4 (size: 0x3)
    FMovableCollisionFieldMoveInfo _moveInfo;                                         // 0x00D0 (size: 0x10)
    FVector _startRelativeLocation;                                                   // 0x00E0 (size: 0xC)
    FVector _endRelativeLocation;                                                     // 0x00EC (size: 0xC)

    void OnRep_CurrentState();
    void NetMulticast_DeactivateField();
    void NetMulticast_ActivateField();
    void Initialize(const TArray<class UStaticMeshComponent*>& movableMeshes, const TArray<class UStaticMeshComponent*>& collisionMeshes);
}; // Size: 0x118

class UMusicPlayerDisplayWidget : public UUserWidget
{
    class UImage* _shuffleImage;                                                      // 0x0268 (size: 0x8)
    class UImage* _repeatImage;                                                       // 0x0270 (size: 0x8)
    class UImage* _previousImage;                                                     // 0x0278 (size: 0x8)
    class UImage* _pauseImage;                                                        // 0x0280 (size: 0x8)
    class UImage* _playImage;                                                         // 0x0288 (size: 0x8)
    class UImage* _nextImage;                                                         // 0x0290 (size: 0x8)
    class UTextBlock* _songTitleText;                                                 // 0x0298 (size: 0x8)
    float _inactiveOpacity;                                                           // 0x02A0 (size: 0x4)
    float _iconActivityDuration;                                                      // 0x02A4 (size: 0x4)
    float _trackNameDuration;                                                         // 0x02A8 (size: 0x4)
    float _radioStationNameDuration;                                                  // 0x02AC (size: 0x4)
    float _trackNameOffsetStep;                                                       // 0x02B0 (size: 0x4)
    float _trackNameOffsetPadding;                                                    // 0x02B4 (size: 0x4)
    float _trackNameWaitingDuration;                                                  // 0x02B8 (size: 0x4)

    void OnTrackNameChange();
    void OnPreviousTrackIconTimeFinished();
    void OnNextTrackIconTimeFinished();
}; // Size: 0x310

class UMusicPlayerSegmentSubmenuInfo : public UCircularMenuSegmentSubmenuInfo
{
}; // Size: 0xC0

class UNPCControllerState : public UObject
{
}; // Size: 0x30

class UNPCControllerStateArmedNPCBase : public UNPCControllerState
{
}; // Size: 0x30

class UNPCControllerStateArmedNPCBaseAlertedByDamage : public UNPCControllerStateArmedNPCBase
{
    FFloatInterval _stateDurationRange;                                               // 0x0030 (size: 0x8)

}; // Size: 0x40

class UNPCControllerStateArmedNPCBaseAlertedByGunshot : public UNPCControllerStateArmedNPCBase
{
    FFloatInterval _stateDurationRange;                                               // 0x0038 (size: 0x8)

}; // Size: 0x50

class UNPCControllerStateArmedNPCBaseCombat : public UNPCControllerStateArmedNPCBase
{
}; // Size: 0x90

class UNPCControllerStateArmedNPCBaseInvestigateLocation : public UNPCControllerStateArmedNPCBase
{
}; // Size: 0x38

class UNPCControllerStateArmedNPCBaseNone : public UNPCControllerStateArmedNPCBase
{
}; // Size: 0x30

class UNPCControllerStateArmedNPCBaseOpenDoor : public UNPCControllerStateArmedNPCBase
{
}; // Size: 0x58

class UNPCControllerStateBrennerAlerted : public UNPCControllerStateBrennerBase
{
}; // Size: 0x30

class UNPCControllerStateBrennerBase : public UNPCControllerState
{
}; // Size: 0x30

class UNPCControllerStateBrennerCombat : public UNPCControllerStateBrennerBase
{
}; // Size: 0x60

class UNPCControllerStateBrennerHibernate : public UNPCControllerStateBrennerBase
{
}; // Size: 0x40

class UNPCControllerStateBrennerHitReact : public UNPCControllerStateBrennerBase
{
}; // Size: 0x30

class UNPCControllerStateBrennerInvestigateArea : public UNPCControllerStateBrennerBase
{
}; // Size: 0x38

class UNPCControllerStateBrennerOpenDoor : public UNPCControllerStateBrennerBase
{
}; // Size: 0x58

class UNPCControllerStateBrennerRage : public UNPCControllerStateBrennerBase
{
}; // Size: 0x38

class UNPCControllerStateBrennerReturnToHibernation : public UNPCControllerStateBrennerBase
{
}; // Size: 0x30

class UNPCControllerStateDrifterAlertedByDamage : public UNPCControllerStateArmedNPCBaseAlertedByDamage
{
}; // Size: 0x40

class UNPCControllerStateDrifterAlertedByGunshot : public UNPCControllerStateArmedNPCBaseAlertedByGunshot
{
}; // Size: 0x50

class UNPCControllerStateDrifterCombat : public UNPCControllerStateArmedNPCBaseCombat
{
}; // Size: 0x90

class UNPCControllerStateDrifterIdle : public UNPCControllerStateArmedNPCBase
{
}; // Size: 0x38

class UNPCControllerStateDrifterInvestigateLocation : public UNPCControllerStateArmedNPCBaseInvestigateLocation
{
}; // Size: 0x38

class UNPCControllerStateDrifterMoveTowardsTargetLocation : public UNPCControllerStateArmedNPCBase
{
    FFloatInterval _randomLocationRange;                                              // 0x004C (size: 0x8)

}; // Size: 0x58

class UNPCControllerStateDrifterOpenDoor : public UNPCControllerStateArmedNPCBaseOpenDoor
{
}; // Size: 0x58

class UNPCControllerStateGuardAlertedByDamage : public UNPCControllerStateArmedNPCBaseAlertedByDamage
{
}; // Size: 0x40

class UNPCControllerStateGuardAlertedByGunshot : public UNPCControllerStateArmedNPCBaseAlertedByGunshot
{
}; // Size: 0x50

class UNPCControllerStateGuardCombat : public UNPCControllerStateArmedNPCBaseCombat
{
}; // Size: 0x90

class UNPCControllerStateGuardIdle : public UNPCControllerStateArmedNPCBase
{
    FFloatInterval _voiceLineCueueRange;                                              // 0x0038 (size: 0x8)

}; // Size: 0x50

class UNPCControllerStateGuardInvestigateLocation : public UNPCControllerStateArmedNPCBaseInvestigateLocation
{
}; // Size: 0x38

class UNPCControllerStateGuardOpenDoor : public UNPCControllerStateArmedNPCBaseOpenDoor
{
}; // Size: 0x58

class UNPCControllerStateGuardReturnToPost : public UNPCControllerStateArmedNPCBase
{
}; // Size: 0x48

class UNPCInteractionBoxComponent : public UBoxComponent
{
    bool IsAreaForbidden;                                                             // 0x0480 (size: 0x1)

}; // Size: 0x490

class UNPCInventoryComponent : public UActorComponent
{
    TArray<class AItem*> _containedItems;                                             // 0x0108 (size: 0x10)

}; // Size: 0x118

class UNameableItemComponent : public UItemComponent
{
    FString _name;                                                                    // 0x00E8 (size: 0x10)
    TWeakObjectPtr<class UItemStatusWidget> _nameWidget;                              // 0x00F8 (size: 0x8)
    TWeakObjectPtr<class UChangeTextWidget> _editNameWidget;                          // 0x0100 (size: 0x8)

    void OnRep_Name();
    void OnLocalPrisonerHoveredActorChanged(class AActor* hoveredActor);
    void OnEditTextWidgetTextAccepted(class APrisoner* User, const FText& Text);
}; // Size: 0x110

class UNameableItemComponentState : public UItemComponentStateBase
{
    FString Name;                                                                     // 0x0040 (size: 0x10)

}; // Size: 0x50

class UNetworkDataIdAsset : public UDataAsset
{
    TMap<uint32, FPrimaryAssetId> IdToAssetMap;                                       // 0x0030 (size: 0x50)
    TMap<FPrimaryAssetId, uint32> AssetToIdMap;                                       // 0x0080 (size: 0x50)

}; // Size: 0xD0

class UNetworkPredictionComponent : public UActorComponent
{
    float _interpolationBackTime;                                                     // 0x00F0 (size: 0x4)
    float _timeSmoothing;                                                             // 0x00F4 (size: 0x4)
    float _positionLerpSpeed;                                                         // 0x00F8 (size: 0x4)
    float _rotationLerpSpeed;                                                         // 0x00FC (size: 0x4)
    SyncMode _syncPosition;                                                           // 0x0100 (size: 0x1)
    SyncMode _syncRotation;                                                           // 0x0101 (size: 0x1)
    SyncMode _syncVelocity;                                                           // 0x0102 (size: 0x1)
    SyncMode _syncAngularVelocity;                                                    // 0x0103 (size: 0x1)
    bool _isPositionCompressed;                                                       // 0x0104 (size: 0x1)
    bool _isRotationCompressed;                                                       // 0x0105 (size: 0x1)
    bool _isVelocityCompressed;                                                       // 0x0106 (size: 0x1)
    bool _isAngularVelocityCompressed;                                                // 0x0107 (size: 0x1)
    float _sendRate;                                                                  // 0x0108 (size: 0x4)
    float _restSendRate;                                                              // 0x010C (size: 0x4)
    float _atRestPositionThreshold;                                                   // 0x0174 (size: 0x4)
    float _atRestRotationThreshold;                                                   // 0x0178 (size: 0x4)
    float _atRestDeltaTimeThreshold;                                                  // 0x017C (size: 0x4)
    float _distanceThresholdToSnap;                                                   // 0x0180 (size: 0x4)
    float _minTimeToCoverPosition;                                                    // 0x01D0 (size: 0x4)
    float _maxTimeToCoverPosition;                                                    // 0x01D4 (size: 0x4)
    float _minTimeToCoverRotation;                                                    // 0x01D8 (size: 0x4)
    float _maxTimeToCoverRotation;                                                    // 0x01DC (size: 0x4)

    void Server_SendTransform(const TArray<uint8>& PackedState);
    void Multicast_SendTransform(const TArray<uint8>& PackedState);
    void ForceStateSendNextFrame();
}; // Size: 0x1F0

class UNetworkStatics : public UBlueprintFunctionLibrary
{

    void SetComponentNetAddressable(class UActorComponent* Component);
    bool ParseServerIpAndPort(FString Text, FString& Ip, int32& Port);
    FString MakeAuthTokenForUser(const class UUser* User, FString password);
    FString MakeAuthTokenForCurrentUser(const class UObject* WorldContextObject, FString password);
    FString MakeAuthToken(FString UserId, FString password);
    int32 GetDefaultDedicatedServerResponsePort();
    FString GetAuthTokenForUser(const class UUser* User, FString ServerIp, int32 ServerResponsePort);
    FString GetAuthTokenForCurrentUser(const class UObject* WorldContextObject, FString ServerIp, int32 ServerResponsePort);
}; // Size: 0x28

class UNoticeBoardMinigameConfiguration : public UMinigameConfiguration
{
}; // Size: 0x58

class UNoticeBoardMinigameWidget : public UMinigameWidget
{
    class UNoticeBoardPanelWidget* _noticeBoardPanelWidget;                           // 0x0280 (size: 0x8)
    class URichTextBlock* _zoomControlText;                                           // 0x0288 (size: 0x8)
    class URichTextBlock* _acceptQuestControlText;                                    // 0x0290 (size: 0x8)
    class UProgressBar* _acceptQuestProgressBar;                                      // 0x0298 (size: 0x8)
    class URichTextBlock* _exitNoticeBoardControlText;                                // 0x02A0 (size: 0x8)
    class UTextBlock* _detailsText;                                                   // 0x02A8 (size: 0x8)

}; // Size: 0x2C8

class UNoticeBoardPanelWidget : public UUserWidget
{
    class UOverlay* _questEntriesOverlay;                                             // 0x0288 (size: 0x8)
    class UOverlay* _enhancementOverlay;                                              // 0x0290 (size: 0x8)
    class UNoticeBoardQuestEntryWidget* _enhancedQuestEntry;                          // 0x0298 (size: 0x8)

}; // Size: 0x2C0

class UNoticeBoardQuestEntryWidget : public UUserWidget
{
    class UImage* _tierIcon;                                                          // 0x0268 (size: 0x8)
    class UImage* _customQuestIcon;                                                   // 0x0270 (size: 0x8)
    class UTextBlock* _title;                                                         // 0x0278 (size: 0x8)
    class UTextBlock* _description;                                                   // 0x0280 (size: 0x8)
    class UHorizontalBox* _timeLimitHorizontalBox;                                    // 0x0288 (size: 0x8)
    class UTextBlock* _timeLimit;                                                     // 0x0290 (size: 0x8)
    class UTextBlock* _turnIn;                                                        // 0x0298 (size: 0x8)
    class UTextBlock* _requirementsTitle;                                             // 0x02A0 (size: 0x8)
    class UTextBlock* _rewardsTitle;                                                  // 0x02A8 (size: 0x8)
    class UVerticalBox* _requirementsContainer;                                       // 0x02B0 (size: 0x8)
    class UVerticalBox* _rewardsContainer;                                            // 0x02B8 (size: 0x8)
    class UWidgetSwitcher* _tapeSwitcher;                                             // 0x02C0 (size: 0x8)
    class UWidgetSwitcher* _bloodSplatterSwitcherA;                                   // 0x02C8 (size: 0x8)
    class UWidgetSwitcher* _bloodSplatterSwitcherB;                                   // 0x02D0 (size: 0x8)
    class UWidgetSwitcher* _coffeeStainSwitcherA;                                     // 0x02D8 (size: 0x8)
    class UWidgetSwitcher* _coffeeStainSwitcherB;                                     // 0x02E0 (size: 0x8)
    class UWidgetSwitcher* _postItNoteSwitcher;                                       // 0x02E8 (size: 0x8)
    class UTextBlock* _postItNoteWarning;                                             // 0x02F0 (size: 0x8)
    class UOverlay* _postItNoteOverlay;                                               // 0x02F8 (size: 0x8)
    class UOverlay* _rewardsOverlay;                                                  // 0x0300 (size: 0x8)
    float _minPostItNoteAngle;                                                        // 0x0308 (size: 0x4)
    float _maxPostItNoteAngle;                                                        // 0x030C (size: 0x4)

}; // Size: 0x358

class UNoticeBoardUIController : public UObject
{
}; // Size: 0x78

class UNotificationChain : public UObject
{
    TArray<FNotificationAndDelay> _notifications;                                     // 0x0048 (size: 0x10)

}; // Size: 0x58

class UNotificationDescription : public UObject
{
    ENotificationTarget Target;                                                       // 0x0028 (size: 0x1)
    FDbIntegerId TargetUserProfileId;                                                 // 0x0030 (size: 0x8)
    bool ShouldSendIfClientOffline;                                                   // 0x0038 (size: 0x1)

}; // Size: 0x40

class UNotificationPanelWidget : public UUserWidget
{
    class UVerticalBox* _notificationBox;                                             // 0x0268 (size: 0x8)
    class UBorder* _nextEventBox;                                                     // 0x0270 (size: 0x8)
    class UTextBlock* _nextEventCountdown;                                            // 0x0278 (size: 0x8)
    class UTextBlock* _nextEventLocation;                                             // 0x0280 (size: 0x8)
    class UBorder* _eventCancelBox;                                                   // 0x0288 (size: 0x8)
    class UTextBlock* _eventCancelTime;                                               // 0x0290 (size: 0x8)
    class UBorder* _eventTime;                                                        // 0x0298 (size: 0x8)
    class UTextBlock* _eventTimeText;                                                 // 0x02A0 (size: 0x8)

}; // Size: 0x2A8

class UNotificationWidget : public UUserWidget
{
    class USizeBox* _notificationSize;                                                // 0x0268 (size: 0x8)
    class UImage* _icon;                                                              // 0x0270 (size: 0x8)
    class UTextBlock* _text;                                                          // 0x0278 (size: 0x8)
    class UWidgetAnimation* _increaseToMaxSize;                                       // 0x0280 (size: 0x8)

}; // Size: 0x2A8

class UNumberPicker : public UUserWidget
{
    class UButton* _upArrowButton;                                                    // 0x0280 (size: 0x8)
    class UButton* _downArrowButton;                                                  // 0x0288 (size: 0x8)
    class UEditableText* _numberText;                                                 // 0x0290 (size: 0x8)

    void OnUpArrowButtonClicked();
    void OnTextChanged(const FText& Text);
    void OnDownArrowButtonClicked();
}; // Size: 0x2A8

class UObjectStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UObstuctsEyesItemTag : public UBaseItemTag
{
}; // Size: 0x30

class UObstuctsMouthItemTag : public UBaseItemTag
{
}; // Size: 0x30

class UOpenItemAction : public UInteractionAction
{
}; // Size: 0xB8

class UOutpostEntriesPanelWidget : public UUserWidget
{
    class USearchBox* _searchBox;                                                     // 0x0268 (size: 0x8)
    class UVerticalBox* _entryContainer;                                              // 0x0270 (size: 0x8)
    class UConZCustomInteractionButton* _collapseAllButton;                           // 0x0298 (size: 0x8)
    class UConZCustomInteractionButton* _expandAllButton;                             // 0x02A0 (size: 0x8)

    void OnAnyButtonHovered();
    void HandleOnExpandAllClicked();
    void HandleOnCollapseAllClicked();
}; // Size: 0x2A8

class UOutpostInformationDropdownWidget : public UUserWidget
{
    TArray<FOutpostInformationTraderUIData> _outpostInformationTraderUIData;          // 0x0268 (size: 0x10)
    TSubclassOf<class UOutpostTraderEntryWidget> _outpostTraderEntryWidgetClass;      // 0x0278 (size: 0x8)
    class UImage* _background;                                                        // 0x0280 (size: 0x8)
    class UTextBlock* _outpostNameTextBlock;                                          // 0x0288 (size: 0x8)
    class UCheckBox* _chbSwitchDropdownState;                                         // 0x0290 (size: 0x8)
    class UVerticalBox* _entriesContainer;                                            // 0x0298 (size: 0x8)
    class UOverlay* _titleOverlay;                                                    // 0x02A0 (size: 0x8)
    int32 _unopenedFontSize;                                                          // 0x02A8 (size: 0x4)
    int32 _openedFontSize;                                                            // 0x02AC (size: 0x4)
    FLinearColor _unopenedBackgroundColorAndOpacity;                                  // 0x02B0 (size: 0x10)
    FLinearColor _openedBackgroundColorAndOpacity;                                    // 0x02C0 (size: 0x10)
    int32 _sectorRow;                                                                 // 0x02D0 (size: 0x4)
    int32 _sectorColumn;                                                              // 0x02D4 (size: 0x4)

    void OnDropdownStateChanged(bool isCollapsed);
}; // Size: 0x2E8

class UOutpostTraderDetailsPanelWidget : public UUserWidget
{
    class UOverlay* _mainOverlay;                                                     // 0x0268 (size: 0x8)
    class UTextBlock* _entryName;                                                     // 0x0270 (size: 0x8)
    class UImage* _traderImage;                                                       // 0x0278 (size: 0x8)
    class UTextBlock* _lifetimeTotalQuests;                                           // 0x0280 (size: 0x8)
    class UTextBlock* _lifetimeTier1Quests;                                           // 0x0288 (size: 0x8)
    class UTextBlock* _lifetimeTier2Quests;                                           // 0x0290 (size: 0x8)
    class UTextBlock* _lifetimeTier3Quests;                                           // 0x0298 (size: 0x8)
    class UTextBlock* _currentCycleQuests;                                            // 0x02A0 (size: 0x8)
    class UVerticalBox* _availableSpecialDealsBox;                                    // 0x02A8 (size: 0x8)
    class UTextBlock* _availableSpecialDeals;                                         // 0x02B0 (size: 0x8)

}; // Size: 0x2F0

class UOutpostTraderEntryWidget : public UUserWidget
{
    class UImage* _backgroundImage;                                                   // 0x0278 (size: 0x8)
    class UImage* _lockedIcon;                                                        // 0x0280 (size: 0x8)
    class UTextBlock* _traderName;                                                    // 0x0288 (size: 0x8)
    class UTextBlock* _traderStatus;                                                  // 0x0290 (size: 0x8)
    FName _pixelSizeMaterialParameterName;                                            // 0x0298 (size: 0x8)
    FName _dpiMaterialParameterName;                                                  // 0x02A0 (size: 0x8)
    class UMaterialInstance* _inactiveMaterialInstance;                               // 0x02A8 (size: 0x8)
    class UMaterialInstance* _inactiveHoveredMaterialInstance;                        // 0x02B0 (size: 0x8)
    class UMaterialInstance* _activeMaterialInstance;                                 // 0x02B8 (size: 0x8)

}; // Size: 0x300

class UPBCIQR_ApplyBandagesOrDisinfect_ApplyBandages : public UPrisonerBodyConditionInteractionQueryResults
{
}; // Size: 0xC0

class UPBCIQR_ApplyBandagesOrDisinfect_Disinfect : public UPrisonerBodyConditionInteractionQueryResults
{
}; // Size: 0xA8

class UPBCIQR_ApplyGel : public UPrisonerBodyConditionInteractionQueryResults
{
}; // Size: 0xA8

class UPBCTIIT_ApplyBandagesOrDisinfect_ApplyBandages : public UPrisonerBodyConditionTreatInteractionItemTag
{
    TArray<float> TreatmentDurationPerSeverityLevel;                                  // 0x0090 (size: 0x10)
    TArray<float> TreatmentDurationPerUsePerSeverityLevel;                            // 0x00A0 (size: 0x10)
    float StabilizationDurationReduction;                                             // 0x00B0 (size: 0x4)
    float RecoveryDurationReduction;                                                  // 0x00B4 (size: 0x4)
    class UCurveFloat* RecoveryDurationReductionMultiplierVsItemHealthRatio;          // 0x00B8 (size: 0x8)
    FPBCTIIT_ApplyBandagesOrDisinfect_ApplyBandages_PerSkillData SkillData;           // 0x00C0 (size: 0x50)

}; // Size: 0x110

class UPBCTIIT_ApplyBandagesOrDisinfect_Disinfect : public UPrisonerBodyConditionTreatInteractionItemTag
{
    TArray<float> TreatmentDurationPerSeverityLevel;                                  // 0x0090 (size: 0x10)
    TArray<float> TreatmentDurationPerUsePerSeverityLevel;                            // 0x00A0 (size: 0x10)
    FPBCTIIT_ApplyBandagesOrDisinfect_Disinfect_PerSkillData SkillData;               // 0x00B0 (size: 0x50)

}; // Size: 0x100

class UPBCTIIT_ApplyGel : public UPrisonerBodyConditionTreatInteractionItemTag
{
    TArray<float> TreatmentDurationPerSeverityLevel;                                  // 0x0090 (size: 0x10)
    TArray<float> TreatmentDurationPerUsePerSeverityLevel;                            // 0x00A0 (size: 0x10)
    FPBCTIIT_ApplyGel_PerSkillData SkillData;                                         // 0x00B0 (size: 0x50)

}; // Size: 0x100

class UPaddleItemTag : public UBaseItemTag
{
    class UBlendSpace* PaddlingLHandAnimation;                                        // 0x0030 (size: 0x8)
    class UBlendSpace* PaddlingRHandAnimation;                                        // 0x0038 (size: 0x8)
    class UAnimSequence* PaddlingLToRAnimation;                                       // 0x0040 (size: 0x8)
    class UAnimSequence* PaddlingRToLAnimation;                                       // 0x0048 (size: 0x8)

}; // Size: 0x50

class UPaintJobColorsDataAsset : public UDataAsset
{
    TArray<FPaintJobColor> _paintJobColors;                                           // 0x0030 (size: 0x10)

}; // Size: 0x40

class UPaintJobStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UParachuteItemTag : public UBaseItemTag
{
    FPrisonerAerialPoseData Pose;                                                     // 0x0030 (size: 0x18)
    FParachuteAnimParams Animation;                                                   // 0x0048 (size: 0x10)
    FPrisonerAirMovementParameters MovementParameters;                                // 0x0058 (size: 0x18)

}; // Size: 0x70

class UPauseMenu : public UBaseMenu
{
    class UConZStandardButton* _resume;                                               // 0x0310 (size: 0x8)
    class UConZStandardButton* _clientSettings;                                       // 0x0318 (size: 0x8)
    class UConZStandardButton* _serverSettings;                                       // 0x0320 (size: 0x8)
    class UConZStandardButton* _addToFavourites;                                      // 0x0328 (size: 0x8)
    class UConZStandardButton* _commitSuicide;                                        // 0x0330 (size: 0x8)
    class UConZStandardButton* _statistics;                                           // 0x0338 (size: 0x8)
    class UConZStandardButton* _reportIllegalContent;                                 // 0x0340 (size: 0x8)
    class UConZStandardButton* _mainMenu;                                             // 0x0348 (size: 0x8)
    class UConZStandardButton* _quitGame;                                             // 0x0350 (size: 0x8)
    class UTextBlock* _suicideTimeCooldown;                                           // 0x0358 (size: 0x8)
    TSubclassOf<class UTextOnlyTooltip> _serverSettingsLockedTooltipClass;            // 0x0360 (size: 0x8)
    class UTextOnlyTooltip* _serverSettingsLockedTooltip;                             // 0x0368 (size: 0x8)

    void OnStatisticsClicked();
    void OnSettingsClicked();
    void OnServerSettingsClicked();
    void OnResumeClicked();
    void OnReportIllegalContentClicked();
    void OnQuitGameClicked();
    void OnExitToMainMenuClicked();
    void OnCommitSuicideClicked();
    void OnAddToFavouritesClicked();
}; // Size: 0x380

class UPauseMenuUIController : public UObject
{
    class UAkAudioEvent* _resumeAllSounds;                                            // 0x0028 (size: 0x8)
    class UAkAudioEvent* _stopAllSounds;                                              // 0x0030 (size: 0x8)
    class UAkAudioEvent* _pauseAllSounds;                                             // 0x0038 (size: 0x8)

}; // Size: 0x50

class UPersistentInstancedStaticMeshComponent : public UPersistentStaticMeshComponent
{
    TArray<FMatrix> _perInstanceTransform;                                            // 0x0478 (size: 0x10)

}; // Size: 0x4A0

class UPersistentLandscapeHeightfieldComponent : public UPrimitiveComponent
{
    FBox _cachedLocalBox;                                                             // 0x0458 (size: 0x1C)
    int32 _collisionSizeQuads;                                                        // 0x0474 (size: 0x4)
    int32 _simpleCollisionSizeQuads;                                                  // 0x0478 (size: 0x4)
    float _collisionScale;                                                            // 0x047C (size: 0x4)
    TArray<uint8> _cookedCollisionData;                                               // 0x0480 (size: 0x10)
    TArray<class UPhysicalMaterial*> _cookedPhysicalMaterials;                        // 0x0490 (size: 0x10)

}; // Size: 0x4D0

class UPersistentLandscapeMeshComponent : public UPersistentLandscapeHeightfieldComponent
{
}; // Size: 0x4D0

class UPersistentPhysicalMaterial : public UMaterialInterface
{
    class UPhysicalMaterial* PhysicalMaterial;                                        // 0x0088 (size: 0x8)

}; // Size: 0x90

class UPersistentSplineMeshComponent : public UPersistentStaticMeshComponent
{
}; // Size: 0x480

class UPersistentStaticMeshComponent : public UPrimitiveComponent
{
    TArray<int32> _materials;                                                         // 0x0458 (size: 0x10)
    int32 _bodySetupIndex;                                                            // 0x0468 (size: 0x4)

}; // Size: 0x480

class UPhoenixTearsComponent : public UItemComponent
{
    class UAnimMontage* _itemInjectionMontage;                                        // 0x00D0 (size: 0x8)

}; // Size: 0xD8

class UPhotoModeMainPanel : public UUserWidget
{
    class UHorizontalBox* _photoModeUI;                                               // 0x0268 (size: 0x8)
    class UCanvasPanel* _photoModeGrid;                                               // 0x0270 (size: 0x8)
    class UPanelWidget* _mainPanelContainer;                                          // 0x0278 (size: 0x8)
    class UTabGroup* _coreMenuTabButtons;                                             // 0x0280 (size: 0x8)
    class UWidgetSwitcher* _coreMenu;                                                 // 0x0288 (size: 0x8)
    class UOverlay* _inputLegend;                                                     // 0x0290 (size: 0x8)
    class UImage* _gridLine0;                                                         // 0x0298 (size: 0x8)
    class UImage* _gridLine1;                                                         // 0x02A0 (size: 0x8)
    class UImage* _gridLine2;                                                         // 0x02A8 (size: 0x8)
    class UImage* _gridLine3;                                                         // 0x02B0 (size: 0x8)
    class UImage* _frameDisplay;                                                      // 0x02B8 (size: 0x8)
    class UImage* _logoDisplay;                                                       // 0x02C0 (size: 0x8)
    class UTextBlock* _moveCameraBinding;                                             // 0x02C8 (size: 0x8)
    class UTextBlock* _rotateCameraBinding;                                           // 0x02D0 (size: 0x8)
    class UTextBlock* _dollyCameraBinding;                                            // 0x02D8 (size: 0x8)
    class UTextBlock* _takePhotoBinding;                                              // 0x02E0 (size: 0x8)
    class UTextBlock* _showHideUIBinding;                                             // 0x02E8 (size: 0x8)
    class UTextBlock* _cycleGridsBinding;                                             // 0x02F0 (size: 0x8)
    FText _cameraTabTitle;                                                            // 0x02F8 (size: 0x18)
    FText _effectsTabTitle;                                                           // 0x0310 (size: 0x18)
    FText _frameTabTitle;                                                             // 0x0328 (size: 0x18)
    FText _bodyTabTitle;                                                              // 0x0340 (size: 0x18)
    TArray<TSoftObjectPtr<UTexture>> _frames;                                         // 0x0358 (size: 0x10)
    TSubclassOf<class UTabButton> _buttonClass;                                       // 0x0370 (size: 0x8)
    class UCarouselWithLabel* _cameraMode;                                            // 0x0378 (size: 0x8)
    class USliderWithLabelAndNumber* _cameraTilt;                                     // 0x0380 (size: 0x8)
    class USliderWithLabelAndNumber* _fieldOfView;                                    // 0x0388 (size: 0x8)
    class USliderWithLabelAndNumber* _depthOfField;                                   // 0x0390 (size: 0x8)
    class USliderWithLabelAndNumber* _focusDistance;                                  // 0x0398 (size: 0x8)
    class USliderWithLabelAndNumber* _selfieLight;                                    // 0x03A0 (size: 0x8)
    class USliderWithLabelAndNumber* _exposure;                                       // 0x03A8 (size: 0x8)
    class USliderWithLabelAndNumber* _contrast;                                       // 0x03B0 (size: 0x8)
    class USliderWithLabelAndNumber* _vignette;                                       // 0x03B8 (size: 0x8)
    class USliderWithLabelAndNumber* _chromaticAberration;                            // 0x03C0 (size: 0x8)
    class USliderWithLabelAndNumber* _grain;                                          // 0x03C8 (size: 0x8)
    class USliderWithLabelAndNumber* _time;                                           // 0x03D0 (size: 0x8)
    class UCarouselWithLabel* _frame;                                                 // 0x03D8 (size: 0x8)
    class UCarouselWithLabel* _logo;                                                  // 0x03E0 (size: 0x8)
    class UCarouselWithLabel* _aspectRatio;                                           // 0x03E8 (size: 0x8)
    class UCarouselWithLabel* _lookAtCamera;                                          // 0x03F0 (size: 0x8)
    class UCarouselWithLabel* _upperBodyPose;                                         // 0x03F8 (size: 0x8)
    class UCarouselWithLabel* _lowerBodyPose;                                         // 0x0400 (size: 0x8)
    class UCarouselWithLabel* _facialExpression;                                      // 0x0408 (size: 0x8)
    class UTextBlock* _selfieModeNote;                                                // 0x0410 (size: 0x8)
    class UTextBlock* _bodyPoseNote;                                                  // 0x0418 (size: 0x8)

    void UpdateFrame();
    class UWidget* MoveFocusUp(EUINavigation UINavigation);
    class UWidget* MoveFocusDown(EUINavigation UINavigation);
}; // Size: 0x468

class UPhysicalSurfacesData : public UDataAsset
{
    FPhysicalSurfaceData Default;                                                     // 0x0030 (size: 0x28)
    FPhysicalSurfaceData grass;                                                       // 0x0058 (size: 0x28)
    FPhysicalSurfaceData ForrestGroundCoastal;                                        // 0x0080 (size: 0x28)
    FPhysicalSurfaceData ForrestGroundContinental;                                    // 0x00A8 (size: 0x28)
    FPhysicalSurfaceData Rock;                                                        // 0x00D0 (size: 0x28)
    FPhysicalSurfaceData Stone;                                                       // 0x00F8 (size: 0x28)
    FPhysicalSurfaceData Gravel;                                                      // 0x0120 (size: 0x28)
    FPhysicalSurfaceData GravelBeach;                                                 // 0x0148 (size: 0x28)
    FPhysicalSurfaceData Pebbles;                                                     // 0x0170 (size: 0x28)
    FPhysicalSurfaceData Snow;                                                        // 0x0198 (size: 0x28)
    FPhysicalSurfaceData Ice;                                                         // 0x01C0 (size: 0x28)
    FPhysicalSurfaceData Sand;                                                        // 0x01E8 (size: 0x28)
    FPhysicalSurfaceData Asphalt;                                                     // 0x0210 (size: 0x28)
    FPhysicalSurfaceData Dirt;                                                        // 0x0238 (size: 0x28)
    FPhysicalSurfaceData Water;                                                       // 0x0260 (size: 0x28)
    FPhysicalSurfaceData WaterOcean;                                                  // 0x0288 (size: 0x28)
    FPhysicalSurfaceData Cloth;                                                       // 0x02B0 (size: 0x28)
    FPhysicalSurfaceData Metal;                                                       // 0x02D8 (size: 0x28)
    FPhysicalSurfaceData Aluminium;                                                   // 0x0300 (size: 0x28)
    FPhysicalSurfaceData Concrete;                                                    // 0x0328 (size: 0x28)
    FPhysicalSurfaceData Brick;                                                       // 0x0350 (size: 0x28)
    FPhysicalSurfaceData Wood;                                                        // 0x0378 (size: 0x28)
    FPhysicalSurfaceData Plastic;                                                     // 0x03A0 (size: 0x28)
    FPhysicalSurfaceData Rubber;                                                      // 0x03C8 (size: 0x28)
    FPhysicalSurfaceData Glass;                                                       // 0x03F0 (size: 0x28)
    FPhysicalSurfaceData Foliage;                                                     // 0x0418 (size: 0x28)
    FPhysicalSurfaceData Bark;                                                        // 0x0440 (size: 0x28)
    FPhysicalSurfaceData Flesh;                                                       // 0x0468 (size: 0x28)
    FPhysicalSurfaceData RoofTile;                                                    // 0x0490 (size: 0x28)
    FPhysicalSurfaceData CeramicTiles;                                                // 0x04B8 (size: 0x28)
    FPhysicalSurfaceData Scrap;                                                       // 0x04E0 (size: 0x28)
    FPhysicalSurfaceData Trunk;                                                       // 0x0508 (size: 0x28)
    FPhysicalSurfaceData Leaves;                                                      // 0x0530 (size: 0x28)
    FPhysicalSurfaceData Fruit;                                                       // 0x0558 (size: 0x28)
    FPhysicalSurfaceData Cardboard;                                                   // 0x0580 (size: 0x28)
    FPhysicalSurfaceData Plaster;                                                     // 0x05A8 (size: 0x28)
    FPhysicalSurfaceData Kevlar;                                                      // 0x05D0 (size: 0x28)
    FPhysicalSurfaceData ForceField;                                                  // 0x05F8 (size: 0x28)
    FPhysicalSurfaceData NoEffect;                                                    // 0x0620 (size: 0x28)
    FPhysicalSurfaceData WhiteGravel;                                                 // 0x0648 (size: 0x28)
    FPhysicalSurfaceData Mud;                                                         // 0x0670 (size: 0x28)
    FPhysicalSurfaceData RiverSand;                                                   // 0x0698 (size: 0x28)
    FPhysicalSurfaceData GrassContinental;                                            // 0x06C0 (size: 0x28)

}; // Size: 0x6E8

class UPhysicalSurfacesEffectsData : public UDataAsset
{
    FPhysicalSurfaceEffectsData Default;                                              // 0x0030 (size: 0x50)
    FPhysicalSurfaceEffectsData grass;                                                // 0x0080 (size: 0x50)
    FPhysicalSurfaceEffectsData ForrestGroundCoastal;                                 // 0x00D0 (size: 0x50)
    FPhysicalSurfaceEffectsData ForrestGroundContinental;                             // 0x0120 (size: 0x50)
    FPhysicalSurfaceEffectsData Rock;                                                 // 0x0170 (size: 0x50)
    FPhysicalSurfaceEffectsData Stone;                                                // 0x01C0 (size: 0x50)
    FPhysicalSurfaceEffectsData Gravel;                                               // 0x0210 (size: 0x50)
    FPhysicalSurfaceEffectsData GravelBeach;                                          // 0x0260 (size: 0x50)
    FPhysicalSurfaceEffectsData Pebbles;                                              // 0x02B0 (size: 0x50)
    FPhysicalSurfaceEffectsData Snow;                                                 // 0x0300 (size: 0x50)
    FPhysicalSurfaceEffectsData Ice;                                                  // 0x0350 (size: 0x50)
    FPhysicalSurfaceEffectsData Sand;                                                 // 0x03A0 (size: 0x50)
    FPhysicalSurfaceEffectsData Asphalt;                                              // 0x03F0 (size: 0x50)
    FPhysicalSurfaceEffectsData Dirt;                                                 // 0x0440 (size: 0x50)
    FPhysicalSurfaceEffectsData Water;                                                // 0x0490 (size: 0x50)
    FPhysicalSurfaceEffectsData WaterOcean;                                           // 0x04E0 (size: 0x50)
    FPhysicalSurfaceEffectsData Cloth;                                                // 0x0530 (size: 0x50)
    FPhysicalSurfaceEffectsData Metal;                                                // 0x0580 (size: 0x50)
    FPhysicalSurfaceEffectsData Aluminium;                                            // 0x05D0 (size: 0x50)
    FPhysicalSurfaceEffectsData Concrete;                                             // 0x0620 (size: 0x50)
    FPhysicalSurfaceEffectsData Brick;                                                // 0x0670 (size: 0x50)
    FPhysicalSurfaceEffectsData Wood;                                                 // 0x06C0 (size: 0x50)
    FPhysicalSurfaceEffectsData Plastic;                                              // 0x0710 (size: 0x50)
    FPhysicalSurfaceEffectsData Rubber;                                               // 0x0760 (size: 0x50)
    FPhysicalSurfaceEffectsData Glass;                                                // 0x07B0 (size: 0x50)
    FPhysicalSurfaceEffectsData Foliage;                                              // 0x0800 (size: 0x50)
    FPhysicalSurfaceEffectsData Bark;                                                 // 0x0850 (size: 0x50)
    FPhysicalSurfaceEffectsData Flesh;                                                // 0x08A0 (size: 0x50)
    FPhysicalSurfaceEffectsData RoofTile;                                             // 0x08F0 (size: 0x50)
    FPhysicalSurfaceEffectsData CeramicTiles;                                         // 0x0940 (size: 0x50)
    FPhysicalSurfaceEffectsData Scrap;                                                // 0x0990 (size: 0x50)
    FPhysicalSurfaceEffectsData Trunk;                                                // 0x09E0 (size: 0x50)
    FPhysicalSurfaceEffectsData Leaves;                                               // 0x0A30 (size: 0x50)
    FPhysicalSurfaceEffectsData Fruit;                                                // 0x0A80 (size: 0x50)
    FPhysicalSurfaceEffectsData Cardboard;                                            // 0x0AD0 (size: 0x50)
    FPhysicalSurfaceEffectsData Plaster;                                              // 0x0B20 (size: 0x50)
    FPhysicalSurfaceEffectsData Kevlar;                                               // 0x0B70 (size: 0x50)
    FPhysicalSurfaceEffectsData ForceField;                                           // 0x0BC0 (size: 0x50)
    FPhysicalSurfaceEffectsData NoEffect;                                             // 0x0C10 (size: 0x50)
    FPhysicalSurfaceEffectsData WhiteGravel;                                          // 0x0C60 (size: 0x50)
    FPhysicalSurfaceEffectsData Mud;                                                  // 0x0CB0 (size: 0x50)
    FPhysicalSurfaceEffectsData RiverSand;                                            // 0x0D00 (size: 0x50)
    FPhysicalSurfaceEffectsData GrassContinental;                                     // 0x0D50 (size: 0x50)

}; // Size: 0xDA0

class UPhysicsStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UPickupItemAction : public UInteractionAction
{
}; // Size: 0xA8

class UPickupItemAssetData : public UInteractionAssetData
{
    TSubclassOf<class AItem> Item;                                                    // 0x0030 (size: 0x8)

}; // Size: 0x38

class UPlaceableActorBaseBuildingReplicatedState : public UPlaceableActorBaseReplicatedState
{
}; // Size: 0x70

class UPlaceableActorBaseReplicatedState : public UObject
{
}; // Size: 0x50

class UPlaceableActorGardenReplicatedState : public UPlaceableActorBaseReplicatedState
{
}; // Size: 0x68

class UPlaceableCraftingRecipe : public UCraftingRecipe
{
    TSoftClassPtr<UObject> Product;                                                   // 0x0098 (size: 0x28)
    bool IsSubjectToAllowMinesAndTrapsSetting;                                        // 0x00C0 (size: 0x1)
    TSoftObjectPtr<UTexture2D> Icon;                                                  // 0x00C8 (size: 0x28)
    FText Caption;                                                                    // 0x00F0 (size: 0x18)
    FText Description;                                                                // 0x0108 (size: 0x18)
    TSoftClassPtr<APlaceableActorBase> PlaceableActorClass;                           // 0x0120 (size: 0x28)
    float MaxPlacementAngle;                                                          // 0x0148 (size: 0x4)
    bool AdjustRotation;                                                              // 0x014C (size: 0x1)
    float GroundOffsetWhilePlacing;                                                   // 0x0150 (size: 0x4)
    float MaxDistanceFromGroundWhilePlacing;                                          // 0x0154 (size: 0x4)
    float ReachabilityVerticalOffset;                                                 // 0x0158 (size: 0x4)
    float YawStep;                                                                    // 0x015C (size: 0x4)
    bool IgnoreFloatingCheckWhilePlacing;                                             // 0x0160 (size: 0x1)
    FVector PlacementLocationOffset;                                                  // 0x0164 (size: 0xC)
    FVector CollisionMeshScale;                                                       // 0x0170 (size: 0xC)
    FVector BoundsExtensionWhilePlacingMin;                                           // 0x017C (size: 0xC)
    FVector BoundsExtensionWhilePlacingMax;                                           // 0x0188 (size: 0xC)
    FVector PlacementTracesBoundsExtension;                                           // 0x0194 (size: 0xC)
    FVector FloatingTracesBoundsExtension;                                            // 0x01A0 (size: 0xC)
    FVector FloatingTracesCenterOffset;                                               // 0x01AC (size: 0xC)
    float MaxHeightAdjustmentWhilePlacing;                                            // 0x01B8 (size: 0x4)
    float MinHeightAdjustmentWhilePlacing;                                            // 0x01BC (size: 0x4)
    bool CanPlaceOnWater;                                                             // 0x01C0 (size: 0x1)
    bool MustPlaceOnWater;                                                            // 0x01C1 (size: 0x1)
    bool CanPlaceOverItems;                                                           // 0x01C2 (size: 0x1)
    bool CheckBoundsAgainstOtherMarkedBounds;                                         // 0x01C3 (size: 0x1)
    EPlaceableActorMeshCollisionType MeshCollisionType;                               // 0x01C4 (size: 0x1)
    bool UseCollisionBoxForInteractionTrace;                                          // 0x01C5 (size: 0x1)
    bool CheckBaseBuildingPlacementMask;                                              // 0x01C6 (size: 0x1)
    bool CheckMilitaryPOIPlacementMask;                                               // 0x01C7 (size: 0x1)
    EPlacementAlgorithm PlacementAlgorithm;                                           // 0x01C8 (size: 0x1)
    float MaxMissedPlacementTracesPercent;                                            // 0x01CC (size: 0x4)
    FVector PlacementMeshOffset;                                                      // 0x01D0 (size: 0xC)
    FVector PlacementMeshScale;                                                       // 0x01DC (size: 0xC)
    bool OnlyPlaceableInFriendlyFlagArea;                                             // 0x01E8 (size: 0x1)
    bool CanPlaceInEnemyFlagArea;                                                     // 0x01E9 (size: 0x1)
    int32 MaxInstancesPerFlagArea;                                                    // 0x01EC (size: 0x4)
    bool ShowDirectionIndicator;                                                      // 0x01F0 (size: 0x1)
    FVector DirectionIndicatorOffset;                                                 // 0x01F4 (size: 0xC)
    float DirectionIndicatorRotation;                                                 // 0x0200 (size: 0x4)
    float DirectionIndicatorSize;                                                     // 0x0204 (size: 0x4)
    float OutlineMaterialBaseOffset;                                                  // 0x0208 (size: 0x4)
    float OutlineMaterialThinness;                                                    // 0x020C (size: 0x4)
    bool IsOutlineMaterialTwoSided;                                                   // 0x0210 (size: 0x1)

}; // Size: 0x218

class UPlaceableElementWidget : public UUserWidget
{
    class UImage* _icon;                                                              // 0x0268 (size: 0x8)
    class UButton* _destroyButton;                                                    // 0x0270 (size: 0x8)

    void Init(class APlaceableActorBase* PlaceableActor);
    void DestroyPlaceable();
}; // Size: 0x280

class UPlaceableOnRackItemTag : public UBaseItemTag
{
    FName SocketName;                                                                 // 0x0030 (size: 0x8)

}; // Size: 0x38

class UPlaceableOnRackLargeItemTag : public UPlaceableOnRackItemTag
{
}; // Size: 0x38

class UPlaceableOnWallRackItemTag : public UPlaceableOnRackItemTag
{
}; // Size: 0x38

class UPlacedPlaceableWidget : public UUserWidget
{
    class UHorizontalBox* _topRow;                                                    // 0x02B8 (size: 0x8)
    class UHorizontalBox* _bottomRow;                                                 // 0x02C0 (size: 0x8)

}; // Size: 0x2C8

class UPlantDiseaseSpecies : public UDataAsset
{
    FText SpeciesName;                                                                // 0x0030 (size: 0x18)
    float HarvestingReductionPercentage;                                              // 0x0048 (size: 0x4)

}; // Size: 0x50

class UPlantPestSpecies : public UDataAsset
{
    FText SpeciesName;                                                                // 0x0030 (size: 0x18)
    float HarvestingReductionPercentage;                                              // 0x0048 (size: 0x4)

}; // Size: 0x50

class UPlantSeedComponent : public UItemComponent
{
    class UPlantSpecies* _speciesData;                                                // 0x00C8 (size: 0x8)

}; // Size: 0xD0

class UPlantSpecies : public UDataAsset
{
    FText SpeciesName;                                                                // 0x0030 (size: 0x18)
    FFloatInterval SeedsOptimaltemperature;                                           // 0x0048 (size: 0x8)
    FFloatInterval GrowthOptimalTemperature;                                          // 0x0050 (size: 0x8)
    float StageGrowthTimeGameHours;                                                   // 0x0058 (size: 0x4)
    EPlantGrowthStage LastStage;                                                      // 0x005C (size: 0x1)
    float LastStageLifetime;                                                          // 0x0060 (size: 0x4)
    float LastStageDeathStartPercent;                                                 // 0x0064 (size: 0x4)
    TArray<class UPlantPestSpecies*> Pests;                                           // 0x0068 (size: 0x10)
    TArray<class UPlantDiseaseSpecies*> Diseases;                                     // 0x0078 (size: 0x10)
    TSubclassOf<class AItem> Seed;                                                    // 0x0088 (size: 0x8)
    FPlantMeshData PlantMesh;                                                         // 0x0090 (size: 0x70)

}; // Size: 0x100

class UPlantStatusIndicatorUIController : public UObject
{
}; // Size: 0x38

class UPlantStatusIndicatorWidget : public UUserWidget
{
    class UTextBlock* _speciesNameText;                                               // 0x0268 (size: 0x8)
    class UTextBlock* _growthStageText;                                               // 0x0270 (size: 0x8)
    class UTextBlock* _sunEnergyRateText;                                             // 0x0278 (size: 0x8)
    class UTextBlock* _waterAmountText;                                               // 0x0280 (size: 0x8)
    class UTextBlock* _fertilizerText;                                                // 0x0288 (size: 0x8)
    class UVerticalBox* _conditionVerticalBox;                                        // 0x0290 (size: 0x8)
    class UHorizontalBox* _pestHorizontalBox;                                         // 0x0298 (size: 0x8)
    class UImage* _pestStatusIcon;                                                    // 0x02A0 (size: 0x8)
    class UTextBlock* _pestStatusText;                                                // 0x02A8 (size: 0x8)
    class UHorizontalBox* _diseaseHorizontalBox;                                      // 0x02B0 (size: 0x8)
    class UImage* _diseaseStatusIcon;                                                 // 0x02B8 (size: 0x8)
    class UTextBlock* _diseaseStatusText;                                             // 0x02C0 (size: 0x8)
    class UHorizontalBox* _weedsHorizontalBox;                                        // 0x02C8 (size: 0x8)
    class UImage* _weedsStatusIcon;                                                   // 0x02D0 (size: 0x8)
    class UTextBlock* _weedsStatusText;                                               // 0x02D8 (size: 0x8)
    FSlateBrush _pestIconBrush;                                                       // 0x02E0 (size: 0x88)
    FSlateBrush _diseaseIconBrush;                                                    // 0x0368 (size: 0x88)
    FSlateBrush _weedsIconBrush;                                                      // 0x03F0 (size: 0x88)
    FSlateBrush _treatmentIconBrush;                                                  // 0x0478 (size: 0x88)

}; // Size: 0x508

class UPlantingPanel : public UUserWidget
{
    class UImageSlotWidget* _seedSlot;                                                // 0x0268 (size: 0x8)
    class UImageSlotWidget* _fertilizerSlot;                                          // 0x0270 (size: 0x8)
    FSlateBrush _organicFertilizerIcon;                                               // 0x0280 (size: 0x88)
    FSlateBrush _industrialFertilizerIcon;                                            // 0x0308 (size: 0x88)

}; // Size: 0x390

class UPlantingPanelUIController : public UObject
{
}; // Size: 0x50

class UPlasticSurgeryDiscountCondition : public UTradeableDiscountCondition
{
}; // Size: 0x28

class UPlasticSurgeryMenuWidget : public UBaseMenu
{
    class UOverlay* _overlayMenu;                                                     // 0x0270 (size: 0x8)
    class UWidgetSwitcher* _pageSwitcher;                                             // 0x0278 (size: 0x8)
    class UTrashNamedCarouselWidget* _carouselGender;                                 // 0x0280 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderHead;                                       // 0x0288 (size: 0x8)
    class UTrashNamedCarouselWidget* _carouselHairiness;                              // 0x0290 (size: 0x8)
    class UCCGameUpgradeConditionDisplayWidget* _appearanceUpgradeConditionDisplay;   // 0x0298 (size: 0x8)
    class UPresetColorPicker* _presetColorPickerSkinTone;                             // 0x02A0 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderAge;                                        // 0x02A8 (size: 0x8)
    class UTrashNamedCarouselWidget* _carouselConcealedMode;                          // 0x02B0 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderPenisBreastSize;                            // 0x02B8 (size: 0x8)
    class UTrashNamedCarouselWidget* _carouselTattoos;                                // 0x02C0 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderTattooStyle;                                // 0x02C8 (size: 0x8)
    class UCCGameUpgradeConditionDisplayWidget* _tattooUpgradeConditionDisplay;       // 0x02D0 (size: 0x8)
    class UConZStandardButton* _buttonRandomizeCharacter;                             // 0x02D8 (size: 0x8)
    class UConZStandardButton* _buttonNextToFace;                                     // 0x02E0 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderFaceType;                                   // 0x02E8 (size: 0x8)
    class UPresetColorPicker* _presetColorPickerEyeColor;                             // 0x02F0 (size: 0x8)
    class UTrashNamedSliderWidget* _sliderIrisType;                                   // 0x02F8 (size: 0x8)
    class UConZStandardButton* _buttonBackToCharacter;                                // 0x0300 (size: 0x8)
    class UConZStandardButton* _buttonRandomizeFace;                                  // 0x0308 (size: 0x8)
    class UConZStandardButton* _buttonApplyPlasticSurgery;                            // 0x0310 (size: 0x8)
    class UConZStandardButton* _buttonApplyPlasticSurgeryDeluxeCharacters;            // 0x0318 (size: 0x8)
    class UOverlay* _overlayPlasticSurgeryConfirmation;                               // 0x0320 (size: 0x8)
    class UConZStandardButton* _buttonCancelConfirmation;                             // 0x0328 (size: 0x8)
    class UConZStandardButton* _buttonContinueConfirmation;                           // 0x0330 (size: 0x8)
    class UScrollBox* _faceOptionsScrollbox;                                          // 0x0338 (size: 0x8)

    void OnRandomizeFaceClicked();
    void OnRandomizeCharacterClicked();
    void OnNextToFaceClicked();
    void OnContinueClickedInConfirmationPanel();
    void OnCancelClickedInConfirmationPanel();
    void OnBackToCharacterClicked();
    void OnApplyFromFaceClicked();
}; // Size: 0x438

class UPlasticSurgeryMugshot : public UUserWidget
{
    class UImage* _imgSelection;                                                      // 0x02C8 (size: 0x8)
    class UWidgetSwitcher* _mugshotGenderSwitcher;                                    // 0x02D0 (size: 0x8)
    class UWidgetSwitcher* _maleMugshotSwitcher;                                      // 0x02D8 (size: 0x8)
    class UWidgetSwitcher* _femaleMugshotSwitcher;                                    // 0x02E0 (size: 0x8)

}; // Size: 0x2F0

class UPlasticSurgeryService : public UTraderService
{
}; // Size: 0x38

class UPlayEffectsWhenParticleCollides : public UParticleModuleEventSendToGame
{
    class UProjectileImpactEffects* ImpactEffects;                                    // 0x0028 (size: 0x8)

}; // Size: 0x30

class UPlayerManagementActivePlayer : public UUserWidget
{
}; // Size: 0x268

class UPlayerManagementActivePlayersList : public UUserWidget
{
}; // Size: 0x268

class UPlayerManagementMap : public UUserWidget
{
}; // Size: 0x268

class UPlayerManagementMenu : public UBaseMenu
{
    class UButton* _buttonBack;                                                       // 0x0268 (size: 0x8)
    class UButton* _buttonApply;                                                      // 0x0270 (size: 0x8)

    void CloseMenu();
}; // Size: 0x288

class UPlayerManagementUIController : public UObject
{
}; // Size: 0x38

class UPlayerQuestComponent : public UActorComponent
{

    void Server_UpdateTrackingData(FTrackingDataSetId TrackingDataSetId, FTrackingDataId TrackingDataId, const FTrackingDataNetPackedBits& Data);
    void Server_Test_GetMeshInfo(const FTransform& Transform, FSoftObjectPath staticMeshPath);
    void Server_StartTask(FTaskInstanceId ID);
    void Server_StartQuest(const FQuestGiverIdentifier& ID, int32 Index);
    void Server_SetTrackedQuest(FTrackedQuest quest);
    void Server_QuestGiverBecameRelevant(const FQuestGiverIdentifier& ID);
    void Server_AbandonTask(FTaskInstanceId ID);
    void Server_AbandonQuest(FTrackingDataSetId questId);
    void Client_UpdateTrackingData(FTrackingDataSetId TrackingDataSetId, FTrackingDataId TrackingDataId, const FTrackingDataNetPackedBits& Data);
    void Client_UpdateAvailableTaskInfo(const TArray<FTaskInstance>& availableTasks, FTaskInstanceId trackNewTask);
    void Client_UpdateAvailableQuestInfo(const FQuestGiverIdentifier& ID, const TArray<FQuestInstance>& availableQuests);
    void Client_StartTask(FTrackingDataSetId ID, FActiveTask task);
    void Client_StartQuest(FTrackingDataSetId ID, FActiveQuest quest);
    void Client_SendInitialActiveQuestList(const TArray<FActiveQuest>& activeQuests);
    void Client_OnTradeDealRemoved(FSectorId sector, int32 iDeal);
    void Client_OnTradeDealAdded(const FTraderSpecialDeal& deal);
    void Client_OnQuestsReset(double timeOfNextReset);
    void Client_CompleteTasks(const TArray<FTrackingDataSetId>& IDs);
    void Client_CompleteTask(FTrackingDataSetId ID);
    void Client_CompleteQuests(const TArray<FTrackingDataSetId>& IDs);
    void Client_CompleteQuest(FTrackingDataSetId ID);
    void Client_AdvanceTask(FTrackingDataSetId ID);
    void Client_AdvanceQuest(FTrackingDataSetId ID);
}; // Size: 0x5D8

class UPlayerRpcChannel : public UActorComponent
{

    void WeaponBow_Server_InsertArrow(class AWeaponBow* bow, class AAmmunitionArrow* arrow);
    void Vehicle_Server_TakeMeleeDamage(class UVehicleAttachment* Attachment, float damageAmount);
    void Vehicle_Server_TakeCollisionDamage(class AVehicleBase* Vehicle, const TArray<class UVehicleAttachment*>& Attachments, const TArray<float>& collisionDamages);
    void Vehicle_Server_SetPhysicsParameters(class AVehicleBase* VehicleBase, const FVector& comPosition, const FVector& inertiaTensor, float Mass);
    void Vehicle_Server_ProvidePrisonerWithDamage(class AActor* Object, class AActor* Target, const FCollisionPointDamageEvent& DamageEvent, class AController* Instigator);
    void Vehicle_Server_DriverShouldBecomeOwner(class APawn* Vehicle, class ACharacter* Driver, bool IsWorldStreamed);
    void Vehicle_Server_BroadcastElectricalSystemCommands(class UVehicleElectricalSystem* electricalComponent, const TArray<uint16>& tagNetIndexArray);
    void Vehicle_Server_ApplyImpactDamage(class APawn* Vehicle, float Damage, const FHitResult& HitResult, const class AActor* OtherActor);
    void TurretItem_Server_BatchInsertAmmo(class ATurretItem* turret, const TArray<class AItem*>& ammo);
    void TrapItem_Server_SetNumTries(class ATrapItem* TrapItem, int32 numTries);
    void TrapItem_Server_DisarmTrap(const class APrisoner* disarmer, class ATrapItem* TrapItem);
    void TrapItem_Server_ClientAuthoritativeTriggerTrap(class ATrapItem* TrapItem, const FTrapTriggerParams& Params);
    void Switch_Server_Press(class ASwitch* Actor);
    void SurvivalStats_Server_HandlePlayerLogout(class APlayerController* PlayerController);
    void SurvivalStats_Server_HandlePlayerLogin(class APlayerController* PlayerController);
    void Squads_Server_Request(int32 ID, FDbIntegerId squadId, const int32 Count);
    void Squads_Client_Receive(int32 ID, const TArray<FString>& Names, const TArray<FString>& information, const TArray<uint64>& emblems, const TArray<float>& scores, int32 squadRank, int32 squadIndex);
    void Server_UnsubscribePlayer(const FPlayerUnsubscribeData& PlayerUnsubscribeData);
    void Server_UnsubscribeFromUnachievedAchievements(class APlayerController* PlayerController, const TArray<FString>& achievementsIds);
    void Server_UnpackItem(class AItem* Item);
    void Server_UnlockedAchievement(class APlayerController* PlayerController, FString AchievementID);
    void Server_SetSwitchState(const class AActor* Actor, FGameplayTag Tag, bool State);
    void Server_ServerSettingsSendToServer(const TArray<int32>& settingIndices, const TArray<FString>& Settings);
    void Server_ServerSettingsLock_RequestLockRelease();
    void Server_ServerSettingsLock_RequestLockAcquisition(const int32 MessageIndex);
    void Server_RequestServerData_Unreliable(int32 RequestID, FPlayerRpcChannelServerDataRequestNetSerializer request);
    void Server_RequestServerData(int32 RequestID, FPlayerRpcChannelServerDataRequestNetSerializer request);
    void Server_RequestDoorUpdate(class ADoor* Door);
    void Server_ReportUnachievedAchievements(class APlayerController* PlayerController, const TArray<FString>& achievementsIds);
    void Server_ProcessProjectileDamageEvents(const TArray<FNetPackedProjectileDamageEvent>& packedEvents);
    void Server_PlayerSellTradeables(class AConZPlayerController* PlayerController, const TArray<class UObject*>& tradeables, class ATrader* Trader, bool playerWantsCash, ETradeableSellFlags Flags, float clientsidePlayerBasedPriceMultiplier);
    void Server_PlayerPurchaseTradeable(class AConZPlayerController* PlayerController, const TArray<FTradeableClassAndQuantity>& tradeableClassesAndQuantity, class ATrader* Trader, bool isCashPreferred, float clientsidePlayerBasedPriceMultiplier);
    void Server_MakeNoise(class AActor* targetActor, float Loudness, class APawn* Instigator, const FVector& ImpactPoint, const FName& NoiseTag);
    void Server_InteractWithHuntingClue(class AHuntingClue* HuntingClue);
    void Server_HackAbandonedBunkerDoor(class UAbandonedBunkerDoorComponent* doorComponent, bool success);
    void Server_HackAbandonedBunkerDialPad(const class AAbandonedBunkerDialPad* dialPad);
    void Server_DialPadAttemptCombination(class AAbandonedBunkerDialPad* dialPad, FString guessedCombination);
    void Server_DealRadialDamage(class APawn* instigatorPawn, const UClass* WeaponClass, const FVector& zeroLocation, float Damage, float InnerRadius, float OuterRadius, float Falloff, float Force, FTargetTypeDamageMultiplier TargetTypeMultiplier, class AActor* DirectlyHitActor, const FVector& directlyHitActorZeroLocationAtTimeOfHit, const FName& hitBoneName);
    void Server_DealBurnDamageToVehicles(const TArray<class AVehicleBase*>& vehicles, const TArray<float>& temperatures, float Interval, class UObject* dealerOfDamage);
    void Server_DealBurnDamageToPrisoner(class APrisoner* Prisoner, const TArray<EBodyPart>& bodyPart, const TArray<float>& temperatures, float Interval, class UObject* dealerOfDamage);
    void Server_DealBurnDamageToItems(const TArray<class AItem*>& Items, const TArray<float>& temperatures, float Interval, class UObject* dealerOfDamage);
    void Server_DealBurnDamagerToConZCharacters(const TArray<class AConZCharacter*>& characters, const TArray<float>& temperatures, float Interval, class UObject* dealerOfDamage);
    void Server_ApplyBaseDamageInteractionEventToZombie(class AZombie2* Zombie, float Damage, const FHitResult& HitResult);
    void Server_ApplyBaseDamageInteractionEventToArmedNPC(class AArmedNPCBase* npcBase, float Damage, const FHitResult& HitResult);
    void ScopeableItemComponent_Server_SetCurrentZoomLevel(class UScopeableItemComponent* comp, int32 Value);
    void ResourceLockingManager_Server_UnlockResource(const FResourceNetworkGUID& ResourceGUID, int32 ResourceId);
    void ResourceLockingManager_Server_UnlockIntersectingAreas(const FBox& Area);
    void ResourceLockingManager_Server_UnlockArea(const FBox& Area);
    void ResourceLockingManager_Server_LockResource(const FResourceNetworkGUID& LockOwnerGUID, const FResourceNetworkGUID& ResourceGUID, int32 ResourceId);
    void ResourceLockingManager_Server_LockArea(const FResourceNetworkGUID& LockOwnerGUID, FBox Area);
    void RaidProtection_Server_SetFlagProtectionTime(FDbIntegerId FlagId, float Delay, float Duration);
    void RaidProtection_Server_ResetCooldownTime(FDbIntegerId FlagId);
    void RaidProtection_Client_ShowPlayerLoginMessages(const FGlobalRaidProtectionPlayerLoginMessagesData& Data);
    void Prisoner_Server_PushStaminaDrain(class APrisoner* Prisoner, float AmountToDrain, float drainDuration, float RecoveryDelay, float RatioToRecover, float recoveryDuration);
    void Prisoner_Server_Die(class APrisoner* Prisoner);
    void Placeable_Server_FillWithItems(class APlaceableActorBase* placeable, class APrisoner* User, const TArray<class AItem*>& Items);
    void Notifications_RequestNotification(const FNotificationDescriptionReplicationHelper& Description);
    void Misc_Server_LogKill(const class APrisoner* victim, const class APrisoner* killer, FString killerUserProfileId);
    void Misc_Client_PostAudioEventAtLocation(class UAkAudioEvent* akEvent, FVector locationZero, FRotator Orientation);
    void Misc_Client_PostAudioEvent(class UAkAudioEvent* AudioEvent, class AActor* Actor, bool stopWhenAttachedToDestroyed);
    void Mechanic_Server_UnsubscribeFromVehicleServiceData(class AMechanic* Mechanic);
    void Mechanic_Server_SubscribeToVehicleServiceData(class AMechanic* Mechanic);
    void Mechanic_Client_UpdateServiceDataOnClient(class AMechanic* Mechanic, const FVehicleAttachmentPriceDataPerClassMap& Delta);
    void Lockpickable_Server_TriggerFailurePenalty(class UObject* Lockpickable, class APrisoner* triggeringPrisoner);
    void Lockpickable_Server_SetNumTries(class UObject* Lockpickable, int32 numTries);
    void ItemContainer_Server_SetAutoResetLocksTimer(FString runtimeId);
    void ItemContainer_Client_TriggerFailurePenalty(FString runtimeId, class AActor* triggeringActor);
    void InteractWithObjectOnServer(class UObject* interactable, class AController* userController, EInteractionType interactionType, const FInteractionData& InteractionData);
    void InteractItemWithItemOnServer(class AItem* Item, class APlayerController* PlayerController, class AItem* otherItem, EInteractionType interactionType, const FInteractionData& InteractionData);
    void HeatSourceItemComponent_Server_AdjustDial(class UContinuousFuelHeatSource* FueledHeatSource, uint8 dialValue);
    void HasOwningUser_Server_RequestStateUpdate(class UObject* Object);
    void HasOwningUser_Client_UpdateState(class UObject* Object, FString ownerString);
    void Grapple_Server_EndGrappleAttack(class AConZCharacter* grappler, class APrisoner* grapplee, EGrappleEndType grappleEndType);
    void Flamethrower_Server_SetFlamethrowerActive(class AWeaponFlamethrower* flamethrower, bool Active);
    void Door_Client_TriggerFailurePenalty(FString runtimeId, class AActor* triggeringActor);
    void CustomZones_Server_UpdateCustomZoneData(const FCustomZoneConfiguration& globalConfiguration, const TArray<FCustomZoneConfiguration>& configurations, const TArray<FCustomZoneRegion>& Regions);
    void CustomZones_Server_RequestCustomZoneData();
    void CustomZones_Client_ReceiveCustomZoneData(const FCustomZoneConfiguration& globalConfiguration, const TArray<FCustomZoneConfiguration>& configurations, const TArray<FCustomZoneRegion>& Regions);
    void CustomZones_Client_NotifyCustomDataUpdateSuccess();
    void Crafting_Server_RemoveFavoriteRecipe(uint32 recipeNetIndex);
    void Crafting_Server_AddFavoriteRecipe(uint32 recipeNetIndex);
    void Crafting_Client_ItemCrafted(const class APrisoner* Prisoner, const class UItemCraftingRecipe* recipe, const TArray<FString>& ingredientClassNames, const TArray<int32>& ingredientAmounts);
    void Cooking_Server_StopCooking(int32 SlotId, class APrisoner* User);
    void Cooking_Server_RemoveFavoriteRecipe(uint8 recipeId);
    void Cooking_Server_CreateResultItemAndAssignToPrisoner(int32 SlotId, class APrisoner* User);
    void Cooking_Server_BeginCooking(int32 SlotId, class APrisoner* User, const class UCookingRecipe* recipe, const TArray<class AItem*>& MainIngredients, const TArray<class AItem*>& OptionalIngredients);
    void Cooking_Server_AddFavoriteRecipe(uint8 recipeId);
    void Client_UpdateTraderData(const FPriceUpdateData& PriceUpdateData);
    void Client_UnlockAchievement(class APlayerController* PlayerController, FString AchievementID);
    void Client_SquadPenaltyManagerSquadMemberLeftSquad(FDbIntegerId UserProfileId, uint8 numOfSquadmatesLeft);
    void Client_SquadPenaltyManagerSendSquadInfo(const TArray<FDbIntegerId>& userProfileIds, const TArray<FSquadLeaveInfo>& squadLeaveInfos);
    void Client_SquadPenaltyManagerNewMemberJoinedSquad(FDbIntegerId newMemberProfileId, FSquadLeaveInfo newMemberInfo);
    void Client_SetStat(class APlayerController* PlayerController, FString statId, int32 StatValue);
    void Client_SetSpawnGrid(class APlayerController* PlayerController, const TArray<uint32>& Cells, uint16 NumCols, uint16 numRows, float CellSize);
    void Client_ServerSettingsSendToClient(const TArray<int32>& settingIndices, const TArray<FString>& Settings, bool isInitial);
    void Client_ServerSettingsLock_ReceiveLockOwner(FString lockOwnerId, FString lockOwnerName, const int32 MessageIndex, const bool lockIsMine);
    void Client_SendSellErrorMessage(class AConZPlayerController* PlayerController, ETradeErrorMessage errorMessage);
    void Client_SendPreBuyResponse(class AConZPlayerController* PlayerController, ETradeErrorMessage errorMessage);
    void Client_SendPostBuyResponse(class AConZPlayerController* PlayerController, ETradeErrorMessage errorMessage);
    void Client_ResetSubscriptions();
    void Client_ReceiveServerData(int32 RequestID, FPlayerRpcChannelServerDataResponseNetSerializer Response);
    void Client_IncreaseStat(class APlayerController* PlayerController, FString statId, int32 statIncBy);
    void Client_DialPadAttemptResult(class AAbandonedBunkerDialPad* dialPad, bool guessedCorrectly);
    void Client_DebugDrawNearbyEncounterLocations(const TArray<FVector>& Locations);
    void Client_AuthSucceededSync();
    void Chat_Server_ProcessAdminCommand(FString commandText);
    void Chat_Server_BroadcastChatMessage(FString Message, EChatType Channel);
    void Chat_Client_UpdateSquadArgumentCompletionCache(const TArray<FString>& completions);
    void Chat_Client_UpdatePlayerArgumentCompletionCache(const TArray<FString>& completions);
    void Chat_Client_UnmuteUser(FString UserId);
    void Chat_Client_SendMessageToChat(FString Message, class AConZPlayerState* SenderPlayerState, EChatType Channel, bool shouldCopyToClipboard);
    void Chat_Client_ProcessAdminCommand(FString commandText);
    void Chat_Client_MuteUser(FString UserId, FString UserName);
    void BCULockRegistry_Server_RequestSetClientHasActiveBCULock();
    void BCULockRegistry_Client_SetClientHasActiveBCULock(bool clientHasActiveBCULock);
    void BaseBuilding_Server_RequestElementStateUpdate(const FVector& Location, float areaSize);
    void BaseBuilding_Server_OnFlagAreaExited(class AConZCharacter* Character);
    void BaseBuilding_Server_OnFlagAreaEntered(class AConZCharacter* Character);
    void BaseBuilding_Client_UpdateElementState(const FVector& Location, float areaSize, const TArray<FConZOnDemandElementData>& Data);
    void Admin_Server_TeleportTo_VehicleLocation(class AConZPlayerController* Controller, const FTeleportRequest& TeleportRequest, FString vehicleName);
    void Admin_Server_TeleportTo_Location(class AConZPlayerController* Controller, const FTeleportRequest& TeleportRequest);
    void Admin_Server_TeleportTo(class APlayerController* Controller, class AConZPlayerState* teleportToUserPlayerState);
    void Admin_Client_ShowSpawnedVehicles(const class APlayerController* Controller, const TArray<FVehicleInfo>& spawnedVehiclesInfo, bool ShouldCopyToClientClipboard);
    void Admin_Client_SendRespawnTimes(int32 respawnTime, int32 respawnTimeReset);
}; // Size: 0x130

class UPlayerRpcChannelServerRequest : public UObject
{
}; // Size: 0x28

class UPlayerRpcChannelServerResponse : public UObject
{
}; // Size: 0x28

class UPortableVehicleServiceStationSaveObject : public UVehicleServiceStationSaveObject
{
    FPrimaryAssetId AssetId;                                                          // 0x0028 (size: 0x10)
    FGameplayTag ServiceMode;                                                         // 0x0038 (size: 0x8)
    FVector Location;                                                                 // 0x0040 (size: 0xC)
    FRotator Rotation;                                                                // 0x004C (size: 0xC)
    TSoftClassPtr<AItem> OriginalItemClass;                                           // 0x0058 (size: 0x28)
    float HealthRatio;                                                                // 0x0080 (size: 0x4)

}; // Size: 0x88

class UPossibleCookingIngredientWidget : public UUserWidget
{
    class UWidgetSwitcher* _mainSwitcher;                                             // 0x0268 (size: 0x8)
    class UOverlay* _nonEmptyPage;                                                    // 0x0270 (size: 0x8)
    class UImage* _ingredientIcon;                                                    // 0x0278 (size: 0x8)
    class UOverlay* _emptyPage;                                                       // 0x0280 (size: 0x8)
    TSubclassOf<class UTextOnlyTooltip> _cookingTextTooltipClass;                     // 0x0290 (size: 0x8)

}; // Size: 0x298

class UPowerCableMeshSet : public UDataAsset
{
    TArray<FPowerCableMeshInfo> Meshes;                                               // 0x0030 (size: 0x10)

}; // Size: 0x40

class UPresetColorPicker : public UUserWidget
{
    class UPanelWidget* _container;                                                   // 0x0280 (size: 0x8)
    class UTextBlock* _name;                                                          // 0x0288 (size: 0x8)
    class USelectionOverlayWidget* _focusBackground;                                  // 0x0290 (size: 0x8)
    FText _mainLabel;                                                                 // 0x0298 (size: 0x18)
    FSlateFontInfo _defaultFont;                                                      // 0x02B0 (size: 0x58)
    TSubclassOf<class UPresetColorPickerButton> _buttonClass;                         // 0x0308 (size: 0x8)
    FMargin _buttonPadding;                                                           // 0x0310 (size: 0x10)
    TArray<FLinearColor> _palette;                                                    // 0x0320 (size: 0x10)

}; // Size: 0x338

class UPresetColorPickerButton : public UUserWidget
{
    class UWidgetSwitcher* _displaySwitcher;                                          // 0x02C0 (size: 0x8)
    class UImage* _coloredPreviewUnhovered;                                           // 0x02C8 (size: 0x8)
    class UImage* _coloredPreviewHovered;                                             // 0x02D0 (size: 0x8)
    class UImage* _variableOpacityBorder;                                             // 0x02D8 (size: 0x8)

}; // Size: 0x2E0

class UPreviewAnimationComponent : public UActorComponent
{
    TMap<class FGameplayTag, class UAnimationAsset*> _animationsPerTag;               // 0x00B0 (size: 0x50)

}; // Size: 0x110

class UPreviousNextSwitchWidget : public UUserWidget
{
    FPreviousNextSwitchWidgetIndexChanged IndexChanged;                               // 0x0268 (size: 0x10)
    void OnSwitchClickedDelegate(int32 widgetArrayIndex, int32 Index);
    class UButton* PreviousButton;                                                    // 0x0278 (size: 0x8)
    class UButton* NextButton;                                                        // 0x0280 (size: 0x8)
    int32 _index;                                                                     // 0x0290 (size: 0x4)

    void SwitchToPrevious();
    void SwitchToNext();
    void OnSwitchClickedDelegate__DelegateSignature(int32 widgetArrayIndex, int32 Index);
}; // Size: 0x298

class UPriceCategory : public UDataAsset
{
    float Price;                                                                      // 0x0030 (size: 0x4)

}; // Size: 0x38

class UPrimaryButton : public UConZUserWidget
{
    class UButton* _button;                                                           // 0x0290 (size: 0x8)
    class UImage* _icon;                                                              // 0x0298 (size: 0x8)
    bool _overrideButtonStyle;                                                        // 0x02A0 (size: 0x1)
    FButtonStyle _buttonStyle;                                                        // 0x02A8 (size: 0x278)
    EButtonType _buttonType;                                                          // 0x0520 (size: 0x1)

    void OnReleased();
    void OnPressed();
}; // Size: 0x528

class UPrisonerAction : public UCharacterAction
{
}; // Size: 0x120

class UPrisonerActionActivateSlot : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionActivateSlotDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerActionAddFertilizer : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionAddFertilizerDescription : public UPrisonerActionDescription
{
}; // Size: 0x50

class UPrisonerActionAddWeaponAttachment : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionAddWeaponAttachmentDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionAlignTransform : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionAlignTransformDescription : public UPrisonerActionDescription
{
}; // Size: 0x90

class UPrisonerActionAnalyzeAnimalTrack : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionAnalyzeAnimalTrackDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionApplyFlagElementsExpansion : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionApplyFlagElementsExpansionDescription : public UPrisonerActionDescription
{
}; // Size: 0x60

class UPrisonerActionApplyPesticide : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionApplyPesticideDescription : public UPrisonerActionDescription
{
}; // Size: 0x50

class UPrisonerActionAttachItem : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionAttachItemDescription : public UPrisonerActionDescription
{
}; // Size: 0x88

class UPrisonerActionAutoCraft : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionAutoCraftDescription : public UPrisonerActionDescription
{
}; // Size: 0x50

class UPrisonerActionBlowAir : public UPrisonerAction
{
}; // Size: 0x140

class UPrisonerActionBlowAirDescription : public UCharacterActionDescription
{
}; // Size: 0x58

class UPrisonerActionBury : public UPrisonerAction
{
}; // Size: 0x150

class UPrisonerActionBuryDescription : public UCharacterActionDescription
{
}; // Size: 0x70

class UPrisonerActionChangeStance : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionChangeStanceDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerActionChangeStanceWaitEndOnOwningClient : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionChangeStanceWaitEndOnOwningClientDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerActionChangeVehicleWeaponAimingStance : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionChangeVehicleWeaponAimingStanceDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerActionChangeWeaponFiringMode : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionChangeWeaponFiringModeModeDescription : public UPrisonerActionDescription
{
}; // Size: 0x38

class UPrisonerActionChargeVehicleBattery : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionChargeVehicleBatteryDescription : public UPrisonerActionDescription
{
}; // Size: 0x70

class UPrisonerActionCheckChainsawFuelStatus : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionCheckChainsawFuelStatusDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerActionCheckItemFuelStatus : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionCheckItemFuelStatusDescription : public UPrisonerActionDescription
{
    class UAnimMontage* CharacterMontage;                                             // 0x0040 (size: 0x8)
    class UAnimMontage* ItemMontage;                                                  // 0x0048 (size: 0x8)

}; // Size: 0x58

class UPrisonerActionCheckThermalSensor : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionCheckThermalSensorDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerActionCheckTime : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionCheckTimeDescription : public UPrisonerActionDescription
{
}; // Size: 0x38

class UPrisonerActionCheckWeaponAmmo : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionCheckWeaponAmmoDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionCheckWeaponFiringMode : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionCheckWeaponFiringModeDescription : public UPrisonerActionDescription
{
}; // Size: 0x38

class UPrisonerActionChopActor : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionChopActorDescription : public UPrisonerActionDescription
{
}; // Size: 0x58

class UPrisonerActionChopBaseElement : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionChopBaseElementDescription : public UPrisonerActionDescription
{

    class UStaticMesh* GetBaseElementStaticMesh();
}; // Size: 0xA0

class UPrisonerActionClaimKill : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionClaimKillDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionClean : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionClearWeaponMalfunction : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionClearWeaponMalfunctionDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionClimbOntoLadder : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionClimbOntoLadderDescription : public UPrisonerActionDescription
{
}; // Size: 0x50

class UPrisonerActionCollectSeeds : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionCollectSeedsDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionCommitSuicide : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionCommitSuicideDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerActionCraftItem : public UPrisonerAction
{
}; // Size: 0x138

class UPrisonerActionCraftItemDescription : public UPrisonerActionDescription
{
}; // Size: 0x50

class UPrisonerActionCutObject : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionCutObjectDescription : public UPrisonerActionDescription
{
    class AActor* ActorToCut;                                                         // 0x0038 (size: 0x8)
    class UMeshComponent* MeshComponent;                                              // 0x0040 (size: 0x8)

}; // Size: 0x68

class UPrisonerActionDecontaminate : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionDecontaminateDescription : public UPrisonerActionDescription
{
}; // Size: 0x58

class UPrisonerActionDecontaminateWithReplenishableResource : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionDecontaminateWithReplenishableResourceDescription : public UCharacterActionDescription
{
    class UGameResourceContainerProxyForReplenishableResource* ProxyForReplenishableResource; // 0x0080 (size: 0x8)

}; // Size: 0x88

class UPrisonerActionDefecate : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionDefecateDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionDescription : public UCharacterActionDescription
{
}; // Size: 0x38

class UPrisonerActionDestroyGarden : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionDestroyGardenDescription : public UPrisonerActionDescription
{
}; // Size: 0x50

class UPrisonerActionDestroyItem : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionDestroyItemDescription : public UCharacterActionDescription
{
}; // Size: 0x40

class UPrisonerActionDisinfectItem : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionDisinfectItemDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionDismountWeaponFromVehicle : public UPrisonerAction
{
}; // Size: 0x138

class UPrisonerActionDismountWeaponFromVehicleDescription : public UPrisonerActionDescription
{
}; // Size: 0x50

class UPrisonerActionDownloadDataToBCUMemoryModule : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionDownloadDataToBCUMemoryModuleDescription : public UPrisonerActionDescription
{
}; // Size: 0x50

class UPrisonerActionDrainVehicleFuelIntoItem : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionDrainVehicleFuelIntoItemDescription : public UPrisonerActionDescription
{
}; // Size: 0x70

class UPrisonerActionDrinkFromReplenishableResource : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionDrinkFromReplenishableResourceDescription : public UCharacterActionDescription
{
    class UGameResourceContainerProxyForReplenishableResource* ProxyForReplenishableResource; // 0x0078 (size: 0x8)

}; // Size: 0x80

class UPrisonerActionDrinkInteraction : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionDrinkInteractionDescription : public UPrisonerActionDescription
{
    TSubclassOf<class UGameResourceType> ResourceType;                                // 0x0038 (size: 0x8)

}; // Size: 0x58

class UPrisonerActionEatItem : public UPrisonerAction
{
    class UAkAudioEvent* _startEatingAudioEvent;                                      // 0x0120 (size: 0x8)
    class UAkAudioEvent* _stopEatingAudioEvent;                                       // 0x0128 (size: 0x8)
    TSubclassOf<class AFoodItem> _itemClass;                                          // 0x0130 (size: 0x8)

}; // Size: 0x140

class UPrisonerActionEatItemDescription : public UPrisonerActionDescription
{
}; // Size: 0x58

class UPrisonerActionEnterCombatMode : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionEnterCombatModeDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionExecuteBodyConditionInteraction : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionExecuteBodyConditionInteractionDescription : public UPrisonerActionDescription
{
    class UAkAudioEvent* BeginInteractionPatientAudioEvent;                           // 0x0078 (size: 0x8)
    class UAkAudioEvent* EndInteractionPatientAudioEvent;                             // 0x0080 (size: 0x8)

}; // Size: 0x88

class UPrisonerActionExtinguishFire : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionExtinguishFireDescription : public UPrisonerActionDescription
{
}; // Size: 0x58

class UPrisonerActionExtinguishItem : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionExtinguishItemDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerActionExtractBloodSample : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionExtractBloodSampleDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionFillGameResourceContainer : public UPrisonerAction
{
}; // Size: 0x148

class UPrisonerActionFillGameResourceContainerDescription : public UCharacterActionDescription
{
    class UObject* _sourceContainerObj;                                               // 0x0080 (size: 0x8)
    class UObject* _destinationContainerObj;                                          // 0x0088 (size: 0x8)

}; // Size: 0x90

class UPrisonerActionFillGameResourceContainerWithInfiniteResourceDescription : public UPrisonerActionFillGameResourceContainerDescription
{
    TArray<class UBaseItemTag*> RequiredItemTagsForFilling;                           // 0x00D8 (size: 0x10)
    class UGameResourceContainerProxyForInfiniteResource* ProxyForInfiniteResource;   // 0x00E8 (size: 0x8)

}; // Size: 0xF0

class UPrisonerActionFillGameResourceContainerWithReplenishableResource : public UPrisonerActionFillGameResourceContainer
{
}; // Size: 0x150

class UPrisonerActionFillGameResourceContainerWithReplenishableResourceDescription : public UPrisonerActionFillGameResourceContainerDescription
{
    class UGameResourceContainerProxyForReplenishableResource* ProxyForReplenishableResource; // 0x00A0 (size: 0x8)

}; // Size: 0xA8

class UPrisonerActionFillVehicleFuelWithItem : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionFillVehicleFuelWithItemDescription : public UPrisonerActionDescription
{
}; // Size: 0x70

class UPrisonerActionFillVehicleFuelWithReplenishableResource : public UPrisonerAction
{
}; // Size: 0x150

class UPrisonerActionFillVehicleFuelWithReplenishableResourceDescription : public UPrisonerActionDescription
{
}; // Size: 0x88

class UPrisonerActionFillWater : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionFillWaterDescription : public UPrisonerActionDescription
{
}; // Size: 0x60

class UPrisonerActionFishing : public UCharacterAction
{
}; // Size: 0x110

class UPrisonerActionFishingDescription : public UCharacterActionDescription
{
}; // Size: 0x38

class UPrisonerActionFixTire : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionFixTireDescription : public UPrisonerActionDescription
{
}; // Size: 0x80

class UPrisonerActionForceUnlock : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionForceUnlockDescription : public UCharacterActionDescription
{
}; // Size: 0xA0

class UPrisonerActionFuelFire : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionFuelFireDescription : public UPrisonerActionDescription
{
}; // Size: 0x50

class UPrisonerActionGesture : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionGestureDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerActionIgniteItem : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionIgniteItemDescription : public UPrisonerActionDescription
{
}; // Size: 0x58

class UPrisonerActionInjectSubstance : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionInjectSubstanceDescription : public UPrisonerActionDescription
{
}; // Size: 0x68

class UPrisonerActionInsertArrow : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionInsertArrowDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerActionLeaveCombatMode : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionLeaveCombatModeDescription : public UPrisonerActionDescription
{
}; // Size: 0x38

class UPrisonerActionLightFire : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionLightFireDescription : public UPrisonerActionDescription
{
}; // Size: 0x50

class UPrisonerActionLoadAmmoIntoMagazine : public UPrisonerAction
{
    class UItemActionSequenceLoadMagazine* _itemActionSequence;                       // 0x0128 (size: 0x8)

}; // Size: 0x130

class UPrisonerActionLoadAmmoIntoMagazineDescription : public UPrisonerActionDescription
{
}; // Size: 0x60

class UPrisonerActionLootCorpse : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionLootCorpseDescription : public UPrisonerActionDescription
{
}; // Size: 0x50

class UPrisonerActionLootPrisoner : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionLootPrisonerDescription : public UPrisonerActionDescription
{
}; // Size: 0x50

class UPrisonerActionManipulateTrap : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionManipulateTrapDescription : public UPrisonerActionDescription
{
}; // Size: 0x58

class UPrisonerActionManualOpenBlastDoor : public UPrisonerAction
{
}; // Size: 0x140

class UPrisonerActionManualOpenBlastDoorDescription : public UCharacterActionDescription
{
}; // Size: 0xA0

class UPrisonerActionMinigame : public UPrisonerAction
{
}; // Size: 0x158

class UPrisonerActionMinigameDescription : public UPrisonerActionDescription
{
    class UMinigameConfiguration* MinigameConfiguration;                              // 0x0038 (size: 0x8)

}; // Size: 0x40

class UPrisonerActionModifyBaseElementPaintJob : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionModifyBaseElementPaintJobDescription : public UPrisonerActionDescription
{
}; // Size: 0x78

class UPrisonerActionModifyTurretPaintjob : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionModifyTurretPaintjobDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionModifyVehicleAttachmentPaintjob : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionModifyVehicleAttachmentPaintjobDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionModifyWeaponPaintjob : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionModifyWeaponPaintjobDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionMountWeaponToVehicle : public UPrisonerAction
{
}; // Size: 0x138

class UPrisonerActionMountWeaponToVehicleDescription : public UPrisonerActionDescription
{
}; // Size: 0x50

class UPrisonerActionMoveToLocation : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionMoveToLocationDescription : public UPrisonerActionDescription
{
}; // Size: 0x68

class UPrisonerActionOpenItem : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionOpenItemDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerActionOperateBondage : public UPrisonerAction
{
}; // Size: 0x138

class UPrisonerActionOperateBondageDescription : public UPrisonerActionDescription
{
}; // Size: 0x58

class UPrisonerActionPairRemoteKeyAndSensor : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionPairRemoteKeyAndSensorDescription : public UPrisonerActionDescription
{
}; // Size: 0x50

class UPrisonerActionPickUpVehicle2W : public UPrisonerAction
{
}; // Size: 0x148

class UPrisonerActionPickUpVehicle2WDescription : public UPrisonerActionDescription
{
}; // Size: 0xA0

class UPrisonerActionPlaceItemOnRack : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionPlaceItemOnRackDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionPlantSeed : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionPlantSeedDescription : public UPrisonerActionDescription
{
}; // Size: 0x50

class UPrisonerActionPullGrenadePin : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionPullGrenadePinDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionReloadWeapon : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionReloadWeaponDescription : public UPrisonerActionDescription
{
}; // Size: 0x70

class UPrisonerActionRemoveItemFromHands : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionRemoveItemFromHandsDescription : public UPrisonerActionDescription
{
}; // Size: 0x78

class UPrisonerActionRemovePlant : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionRemovePlantDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionRemoveWeaponAttachment : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionRemoveWeaponAttachmentDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionRemoveWeed : public UPrisonerAction
{
}; // Size: 0x138

class UPrisonerActionRemoveWeedDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionRepair : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionRepairBaseElement : public UPrisonerActionRepair
{
}; // Size: 0x130

class UPrisonerActionRepairBaseElementDescription : public UPrisonerActionRepairDescription
{
}; // Size: 0xA8

class UPrisonerActionRepairDescription : public UPrisonerActionDescription
{
}; // Size: 0x50

class UPrisonerActionRepairFortification : public UPrisonerActionRepair
{
}; // Size: 0x130

class UPrisonerActionRepairFortificationDescription : public UPrisonerActionRepairDescription
{
}; // Size: 0x68

class UPrisonerActionRepairItem : public UPrisonerActionRepair
{
}; // Size: 0x130

class UPrisonerActionRepairItemDescription : public UPrisonerActionRepairDescription
{
}; // Size: 0x68

class UPrisonerActionRepairVehicle : public UPrisonerActionRepair
{
}; // Size: 0x130

class UPrisonerActionRepairVehicleDescription : public UPrisonerActionRepairDescription
{
}; // Size: 0x58

class UPrisonerActionResuscitate : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionResuscitateDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerActionRollRevolverDrum : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionRollRevolverDrumDescription : public UPrisonerActionDescription
{
}; // Size: 0x50

class UPrisonerActionRussianRoulette : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionRussianRouletteDescription : public UPrisonerActionDescription
{
}; // Size: 0x50

class UPrisonerActionSearchGardenSlot : public UPrisonerActionSearchObject
{
}; // Size: 0x130

class UPrisonerActionSearchGardenSlotDescription : public UPrisonerActionSearchObjectDescription
{
}; // Size: 0x78

class UPrisonerActionSearchGround : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionSearchGroundDescription : public UPrisonerActionDescription
{
}; // Size: 0x78

class UPrisonerActionSearchObject : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionSearchObjectDescription : public UPrisonerActionDescription
{
}; // Size: 0x70

class UPrisonerActionSearchPrisoner : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionSearchPrisonerDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerActionSpill : public UPrisonerAction
{
}; // Size: 0x168

class UPrisonerActionSpillAtLocation : public UPrisonerActionSpill
{
}; // Size: 0x168

class UPrisonerActionSpillAtLocationDescription : public UPrisonerActionSpillDescription
{
}; // Size: 0xB8

class UPrisonerActionSpillDescription : public UCharacterActionDescription
{
}; // Size: 0x90

class UPrisonerActionStartCarryingItem : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionStartCarryingItemDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerActionStartChainsawEngine : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionStartChainsawEngineDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionStartPlayingInstrument : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionStartPlayingInstrumentDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerActionStartResting : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionStartRestingDescription : public UPrisonerActionDescription
{
}; // Size: 0xF0

class UPrisonerActionStopResting : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionStopRestingDescription : public UPrisonerActionDescription
{
}; // Size: 0x38

class UPrisonerActionTakeItemInHands : public UPrisonerAction
{

    void ReplicationTimedOut();
    void OnItemInHandsChanged(class APrisoner* Prisoner, class AItem* newItem);
}; // Size: 0x138

class UPrisonerActionTakeItemInHandsDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionThrowItem : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionThrowItemDescription : public UPrisonerActionDescription
{
}; // Size: 0x50

class UPrisonerActionTreatPatient : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionTreatPatientDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionTriggerRemoteKey : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionTriggerRemoteKeyDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerActionTuneBow : public UPrisonerAction
{
    class UAkAudioEvent* _tuneBowAudioEvent;                                          // 0x0120 (size: 0x8)

}; // Size: 0x128

class UPrisonerActionTuneBowDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerActionUncraftItem : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionUncraftItemDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerActionUnequipWeapon : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionUnequipWeaponDescription : public UPrisonerActionDescription
{
}; // Size: 0x38

class UPrisonerActionUnloadAmmoFromWeapon : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionUnloadAmmoFromWeaponDescription : public UPrisonerActionDescription
{
}; // Size: 0x50

class UPrisonerActionUpgradeBCU : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionUpgradeBCUDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerActionUrinate : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionUrinateDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerActionVoiceline : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionVoicelineDescription : public UPrisonerActionDescription
{
}; // Size: 0x60

class UPrisonerActionVomit : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerActionVomitDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerActionWashCloth : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerActionWashEyes : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionWashEyesDescription : public UCharacterActionDescription
{
}; // Size: 0x50

class UPrisonerActionWashEyesWithInfiniteResourceDescription : public UPrisonerActionWashEyesDescription
{
    TSubclassOf<class UGameResourceType> ResourceType;                                // 0x0050 (size: 0x8)
    TArray<class UBaseItemTag*> RequiredItemTagsForFilling;                           // 0x0098 (size: 0x10)
    class UGameResourceContainerProxyForInfiniteResource* ResourceProxy;              // 0x00A8 (size: 0x8)

}; // Size: 0xB0

class UPrisonerActionWashEyesWithReplenishableResourceDescription : public UPrisonerActionWashEyesDescription
{
    class UGameResourceContainerProxyForReplenishableResource* ResourceProxy;         // 0x0060 (size: 0x8)

}; // Size: 0x68

class UPrisonerActionWashWithReplenishableResource : public UPrisonerAction
{
}; // Size: 0x138

class UPrisonerActionWashWithReplenishableResourceDescription : public UCharacterActionDescription
{
    class UGameResourceContainerProxyForReplenishableResource* ProxyForReplenishableResource; // 0x0088 (size: 0x8)

}; // Size: 0x90

class UPrisonerActionWhistle : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerActionWhistleDescription : public UPrisonerActionDescription
{
}; // Size: 0x38

class UPrisonerAnimInstance : public UAnimInstance
{
    float SlowPaceLoopAnimSpeeds;                                                     // 0x02B8 (size: 0x58)
    float MediumPaceLoopAnimSpeeds;                                                   // 0x0310 (size: 0x58)
    float FastPaceLoopAnimSpeeds;                                                     // 0x0368 (size: 0x58)
    float MeleeCombatWalkUsageRadius;                                                 // 0x03C0 (size: 0x4)
    float MeleeExhaustionFactorInterpSpeed;                                           // 0x03C4 (size: 0x4)
    bool AutoBlinkEnabled;                                                            // 0x03C8 (size: 0x1)
    class APrisoner* _prisoner;                                                       // 0x03D0 (size: 0x8)
    bool _isPrisonerCompletelyInitialized;                                            // 0x0468 (size: 0x1)
    bool _isShadowMesh;                                                               // 0x0469 (size: 0x1)
    bool _isOwnerLocallyControlled;                                                   // 0x046A (size: 0x1)
    bool _isOwnerPlayerControlled;                                                    // 0x046B (size: 0x1)
    bool _isFemale;                                                                   // 0x046C (size: 0x1)
    bool _isInFirstPersonView;                                                        // 0x046D (size: 0x1)
    bool _shouldOverrideIsInFirstPersonView;                                          // 0x046E (size: 0x1)
    bool _isInFirstPersonViewOverride;                                                // 0x046F (size: 0x1)
    bool _isInFirstPersonViewAndIsFemale;                                             // 0x0470 (size: 0x1)
    bool _isInThirdPersonViewAndIsFemale;                                             // 0x0471 (size: 0x1)
    bool _isAbleToFireWeapon;                                                         // 0x0472 (size: 0x1)
    FVector _supportingHandIKLocation;                                                // 0x0474 (size: 0xC)
    float _weaponAimYaw;                                                              // 0x0480 (size: 0x4)
    float _weaponAimPitch;                                                            // 0x0484 (size: 0x4)
    class UAnimSequenceBase* _meleeSkill_PrimaryIdleAnimationTP;                      // 0x0488 (size: 0x8)
    class UAnimSequenceBase* _meleeSkill_PrimaryIdleAnimationFP;                      // 0x0490 (size: 0x8)
    class UAnimSequenceBase* _meleeSkill_TiredIdleAnimationTP;                        // 0x0498 (size: 0x8)
    class UAnimSequenceBase* _meleeSkill_TiredIdleAnimationFP;                        // 0x04A0 (size: 0x8)
    class UAnimSequenceBase* _meleeSkill_WalkingIdleAnimationTP;                      // 0x04A8 (size: 0x8)
    class UAnimSequenceBase* _meleeSkill_WalkingIdleAnimationFP;                      // 0x04B0 (size: 0x8)
    class UAnimSequenceBase* _meleeSkill_BlockIdleAnimationTP;                        // 0x04B8 (size: 0x8)
    class UAnimSequenceBase* _meleeSkill_BlockIdleAnimationFP;                        // 0x04C0 (size: 0x8)
    class UBlendSpace* _meleeSkill_AimOffsetBlendSpaceTP;                             // 0x04C8 (size: 0x8)
    class UBlendSpace* _meleeSkill_AimOffsetBlendSpaceFP;                             // 0x04D0 (size: 0x8)
    float _meleeSkill_IdleToBlockBlendDuration;                                       // 0x04D8 (size: 0x4)
    float _meleeSkill_BlockToIdleBlendDuration;                                       // 0x04DC (size: 0x4)
    float _meleeSkill_ExhaustionFactor;                                               // 0x04E0 (size: 0x4)
    bool _shouldUseUnarmedCombatWalk;                                                 // 0x04E4 (size: 0x1)
    bool _isHoldingBlock;                                                             // 0x04E5 (size: 0x1)
    float _stamina;                                                                   // 0x04E8 (size: 0x4)
    float _bellyJiggleAmount;                                                         // 0x04EC (size: 0x4)
    float _breastJiggleAmount;                                                        // 0x04F0 (size: 0x4)
    bool _shouldUseWeaponAnimationPose;                                               // 0x04F4 (size: 0x1)
    bool _shouldIgnoreSupportingHandIK;                                               // 0x05A0 (size: 0x1)
    float _firstPersonAimPitch;                                                       // 0x05A4 (size: 0x4)
    float _firstPersonAimYawDelta;                                                    // 0x05A8 (size: 0x4)
    bool _shouldAimDownTheSights;                                                     // 0x05AC (size: 0x1)
    FVector _aimingDownTheSightsLocationOffset;                                       // 0x05B0 (size: 0xC)
    FVector _scopeViewArmDislocationOffset;                                           // 0x05BC (size: 0xC)
    FRotator _armsLagRotation;                                                        // 0x05C8 (size: 0xC)
    float _armsLagPitch;                                                              // 0x05D4 (size: 0x4)
    float _armsLagYaw;                                                                // 0x05D8 (size: 0x4)
    EPrisonerGroundStance _stance;                                                    // 0x05DC (size: 0x1)
    float _crouchStage;                                                               // 0x05E0 (size: 0x4)
    float _targetCrouchStage;                                                         // 0x05E4 (size: 0x4)
    bool _isFreeLookEnabled;                                                          // 0x05E8 (size: 0x1)
    bool _shouldIgnoreHeadTurning;                                                    // 0x05E9 (size: 0x1)
    FRotator _aimOffset;                                                              // 0x05EC (size: 0xC)
    float _leanAmount;                                                                // 0x05F8 (size: 0x4)
    bool _shouldLookAtMeleeTarget;                                                    // 0x05FC (size: 0x1)
    FRotator _lookAtMeleeTargetAimOffset;                                             // 0x0600 (size: 0xC)
    EPrisonerAnimationSet _animationSet;                                              // 0x060C (size: 0x1)
    bool _isInRagdoll;                                                                // 0x060D (size: 0x1)
    bool _isMovingOnGround;                                                           // 0x060E (size: 0x1)
    bool _isFalling;                                                                  // 0x060F (size: 0x1)
    bool _isSwimming;                                                                 // 0x0610 (size: 0x1)
    FVector _acceleration;                                                            // 0x0614 (size: 0xC)
    bool _wantsToMove;                                                                // 0x0620 (size: 0x1)
    bool _wantsToMoveHorizontallyOnly;                                                // 0x0621 (size: 0x1)
    bool _wantsToMoveVerticallyOnly;                                                  // 0x0622 (size: 0x1)
    bool _wantsToWalk;                                                                // 0x0623 (size: 0x1)
    bool _wantsToJog;                                                                 // 0x0624 (size: 0x1)
    bool _wantsToRun;                                                                 // 0x0625 (size: 0x1)
    FVector _velocity;                                                                // 0x0628 (size: 0xC)
    FTransform _handL;                                                                // 0x0640 (size: 0x30)
    FTransform _handR;                                                                // 0x0670 (size: 0x30)
    FTransform _lowerArmL;                                                            // 0x06A0 (size: 0x30)
    FTransform _lowerArmR;                                                            // 0x06D0 (size: 0x30)
    float _speed;                                                                     // 0x0704 (size: 0x4)
    float _speedXY;                                                                   // 0x0708 (size: 0x4)
    float _maxSpeed;                                                                  // 0x070C (size: 0x4)
    float _stoppingDistance;                                                          // 0x0710 (size: 0x4)
    float _leftHandIKAmount;                                                          // 0x0790 (size: 0x4)
    float _courseAngle;                                                               // 0x0794 (size: 0x4)
    float _coursePitchAngle;                                                          // 0x0798 (size: 0x4)
    EPrisonerMovementPace _desiredMovementPace;                                       // 0x079C (size: 0x1)
    EPrisonerMovementPace _clampedDesiredMovementPace;                                // 0x079D (size: 0x1)
    EPrisonerMovementPace _movementPaceBeforeGroundStart;                             // 0x079E (size: 0x1)
    float _groundStartAnimPlayRate;                                                   // 0x07A0 (size: 0x4)
    float _legsPoseBeforeGroundStop;                                                  // 0x07A4 (size: 0x4)
    ECardinalDirection _movementDirectionBeforeGroundStop;                            // 0x07A8 (size: 0x1)
    EPrisonerMovementPace _movementPaceBeforeGroundStop;                              // 0x07A9 (size: 0x1)
    EPrisonerAnimationSet _animationSetBeforeGroundStop;                              // 0x07AA (size: 0x1)
    bool _shouldUseLUGroundStopAnimation;                                             // 0x07AB (size: 0x1)
    EHitReactState _hitReactState;                                                    // 0x07AC (size: 0x1)
    float _weightLoadFactor;                                                          // 0x07B0 (size: 0x4)
    bool _shouldUseJogStartForRunStart;                                               // 0x07B4 (size: 0x1)
    bool _useLocomotionAdditiveAnimations;                                            // 0x07B5 (size: 0x1)
    float _disorientation;                                                            // 0x07B8 (size: 0x4)
    float _disorientationMultiplier;                                                  // 0x07BC (size: 0x4)
    bool _isLimping;                                                                  // 0x07C0 (size: 0x1)
    bool _shouldRotateBonesWithFirstPersonAimPitch;                                   // 0x07C1 (size: 0x1)
    float _jumpApex;                                                                  // 0x07C8 (size: 0x4)
    float _distanceToJumpApex;                                                        // 0x07CC (size: 0x4)
    float _legsPoseBeforeJump;                                                        // 0x07D0 (size: 0x4)
    EPrisonerAnimationSet _animationSetBeforeJump;                                    // 0x07D6 (size: 0x1)
    bool _shouldJumpGoToFallingLoop;                                                  // 0x07D7 (size: 0x1)
    float _waterImmersionDepth;                                                       // 0x07D8 (size: 0x4)
    FVector _meshOffsetWhenInWater;                                                   // 0x07DC (size: 0xC)
    bool _wantsToDiveIn;                                                              // 0x07E8 (size: 0x1)
    bool _isClimbing;                                                                 // 0x08BC (size: 0x1)
    bool _isClimbingAnchoring;                                                        // 0x08BD (size: 0x1)
    class UAnimSequenceBase* _climbAnchoringAnimation;                                // 0x08C0 (size: 0x8)
    float _climbAnchoringAnimationTime;                                               // 0x08C8 (size: 0x4)
    bool _isClimbingLadder;                                                           // 0x08CC (size: 0x1)
    FVector _ladderClimbingRootBoneOffset;                                            // 0x08D0 (size: 0xC)
    float _ladderClimbingLoopState;                                                   // 0x08DC (size: 0x4)
    float _ladderClimbingLoopStateForPeeking;                                         // 0x08E0 (size: 0x4)
    float _ladderClimbingPeekState;                                                   // 0x08E4 (size: 0x4)
    bool _isClimbingWindow;                                                           // 0x08E8 (size: 0x1)
    bool _isClimbingWindowAnchoring;                                                  // 0x08E9 (size: 0x1)
    class UAnimSequenceBase* _windowClimbingAnchoringAnimation;                       // 0x08F0 (size: 0x8)
    float _windowClimbingAnchoringAnimationTime;                                      // 0x08F8 (size: 0x4)
    EWeaponType _weaponType;                                                          // 0x08FC (size: 0x1)
    bool _isDedicatedServer;                                                          // 0x08FD (size: 0x1)
    class UAnimSequenceBase* _itemFirstPersonUpperBodyStandIdle;                      // 0x0C28 (size: 0x8)
    class UBlendSpace1D* _itemFirstPersonUpperBodyStandWalk;                          // 0x0C30 (size: 0x8)
    class UBlendSpace1D* _itemFirstPersonUpperBodyStandWalkLimping;                   // 0x0C38 (size: 0x8)
    class UBlendSpace1D* _itemFirstPersonUpperBodyStandJog;                           // 0x0C40 (size: 0x8)
    class UBlendSpace1D* _itemFirstPersonUpperBodyStandJogLimping;                    // 0x0C48 (size: 0x8)
    class UAnimSequenceBase* _itemFirstPersonUpperBodyStandRun;                       // 0x0C50 (size: 0x8)
    class UAnimSequenceBase* _itemFirstPersonUpperBodyCrouchIdle;                     // 0x0C58 (size: 0x8)
    class UBlendSpace1D* _itemFirstPersonUpperBodyCrouchWalk;                         // 0x0C60 (size: 0x8)
    class UBlendSpace1D* _itemFirstPersonUpperBodyCrouchWalkLimping;                  // 0x0C68 (size: 0x8)
    class UAnimSequenceBase* _itemFirstPersonUpperBodyProneIdle;                      // 0x0C70 (size: 0x8)
    class UAnimSequenceBase* _weaponAimingHipFirstPersonUpperBodyStandIdle;           // 0x0C78 (size: 0x8)
    class UBlendSpace1D* _weaponAimingHipFirstPersonUpperBodyStandWalk;               // 0x0C80 (size: 0x8)
    class UBlendSpace1D* _weaponAimingHipFirstPersonUpperBodyStandWalkLimping;        // 0x0C88 (size: 0x8)
    class UBlendSpace1D* _weaponAimingHipFirstPersonUpperBodyStandJog;                // 0x0C90 (size: 0x8)
    class UBlendSpace1D* _weaponAimingHipFirstPersonUpperBodyStandJogLimping;         // 0x0C98 (size: 0x8)
    class UAnimSequenceBase* _weaponAimingHipFirstPersonUpperBodyStandRun;            // 0x0CA0 (size: 0x8)
    class UAnimSequenceBase* _weaponAimingHipFirstPersonUpperBodyCrouchIdle;          // 0x0CA8 (size: 0x8)
    class UBlendSpace1D* _weaponAimingHipFirstPersonUpperBodyCrouchWalk;              // 0x0CB0 (size: 0x8)
    class UBlendSpace1D* _weaponAimingHipFirstPersonUpperBodyCrouchWalkLimping;       // 0x0CB8 (size: 0x8)
    class UAnimSequenceBase* _weaponAimingHipFirstPersonUpperBodyProneIdle;           // 0x0CC0 (size: 0x8)
    bool _shouldUseItemFirstPersonAimOffsets;                                         // 0x0CC8 (size: 0x1)
    class UBlendSpace* _itemFirstPersonAimOffsetStanding;                             // 0x0CD0 (size: 0x8)
    class UBlendSpace* _itemFirstPersonAimOffsetCrouching;                            // 0x0CD8 (size: 0x8)
    class UBlendSpace* _itemFirstPersonAimOffsetProne;                                // 0x0CE0 (size: 0x8)
    class UAnimSequenceBase* _rightHandCorrectionPoseStanding;                        // 0x0CE8 (size: 0x8)
    class UAnimSequenceBase* _rightHandCorrectionPoseCrouching;                       // 0x0CF0 (size: 0x8)
    class UAnimSequenceBase* _rightHandCorrectionPoseProne;                           // 0x0CF8 (size: 0x8)
    class UAnimSequenceBase* _rightFistCorrectionPoseStanding;                        // 0x0D00 (size: 0x8)
    class UAnimSequenceBase* _rightFistCorrectionPoseStandingInCombatMode;            // 0x0D08 (size: 0x8)
    class UAnimSequenceBase* _rightFistCorrectionPoseCrouching;                       // 0x0D10 (size: 0x8)
    class UAnimSequenceBase* _rightFistCorrectionPoseProne;                           // 0x0D18 (size: 0x8)
    float _rightHandToIdleBlendAlphaStanding;                                         // 0x0D20 (size: 0x4)
    float _rightHandToIdleBlendAlphaCrouching;                                        // 0x0D24 (size: 0x4)
    class UAnimSequenceBase* _leftHandCorrectionPoseStanding;                         // 0x0D28 (size: 0x8)
    class UAnimSequenceBase* _leftHandCorrectionPoseCrouching;                        // 0x0D30 (size: 0x8)
    class UAnimSequenceBase* _leftHandCorrectionPoseProne;                            // 0x0D38 (size: 0x8)
    class UAnimSequenceBase* _leftFistCorrectionPoseStanding;                         // 0x0D40 (size: 0x8)
    class UAnimSequenceBase* _leftFistCorrectionPoseStandingInCombatMode;             // 0x0D48 (size: 0x8)
    class UAnimSequenceBase* _leftFistCorrectionPoseCrouching;                        // 0x0D50 (size: 0x8)
    class UAnimSequenceBase* _leftFistCorrectionPoseProne;                            // 0x0D58 (size: 0x8)
    float _leftHandToIdleBlendAlphaStanding;                                          // 0x0D60 (size: 0x4)
    float _leftHandToIdleBlendAlphaCrouching;                                         // 0x0D64 (size: 0x4)
    bool _hasItemInHands;                                                             // 0x0D70 (size: 0x1)
    FVector _itemInHandsLeftHandLocationInRightHandSpace;                             // 0x0D74 (size: 0xC)
    FRotator _itemInHandsLeftHandRotationInRightHandSpace;                            // 0x0D80 (size: 0xC)
    float _itemInHandsObstructionDepth;                                               // 0x0D8C (size: 0x4)
    float _itemInHandsObstructionDepthSmoothed;                                       // 0x0D90 (size: 0x4)
    bool _isItemInHandsObstructed;                                                    // 0x0D94 (size: 0x1)
    bool _isItemInHandsCompletelyObstructed;                                          // 0x0D95 (size: 0x1)
    float _itemInHandsObstructionSide;                                                // 0x0D98 (size: 0x4)
    class UAnimSequenceBase* _itemInHandsLeftObstructedIdleFP;                        // 0x0DA0 (size: 0x8)
    class UAnimSequenceBase* _itemInHandsRightObstructedIdleFP;                       // 0x0DA8 (size: 0x8)
    class UAnimSequenceBase* _itemInHandsObstructedIdleTP;                            // 0x0DB0 (size: 0x8)
    class UAnimSequenceBase* _itemInHandsObstructedIdleProneTP;                       // 0x0DB8 (size: 0x8)
    EPrisonerCombatMode _combatMode;                                                  // 0x0DC0 (size: 0x1)
    bool _shouldUseHandCorrections;                                                   // 0x0DC1 (size: 0x1)
    bool _shouldUseFistCorrections;                                                   // 0x0DC2 (size: 0x1)
    bool _overrideFingersOnlyInProne;                                                 // 0x0DC3 (size: 0x1)
    bool _ignoreAimOffsets;                                                           // 0x0DC4 (size: 0x1)
    EPrisonerMontageBlendType _prisonerMontageBlendType;                              // 0x0DC5 (size: 0x1)
    bool _isAimingBow;                                                                // 0x0DC6 (size: 0x1)
    float _bowArmsShakeValue;                                                         // 0x0DC8 (size: 0x4)
    bool _isScoping;                                                                  // 0x0DCC (size: 0x1)
    TSet<TSubclassOf<UPrisonerResponseIdle>> _responseIdleClassReferences;            // 0x0E20 (size: 0x50)
    bool _shouldUpperBodyBeUsedAsFullBodyInIdle;                                      // 0x0EA0 (size: 0x1)
    bool _isPlayingInstrument;                                                        // 0x0EA1 (size: 0x1)
    class UAnimSequenceBase* _playingInstrumentIdleAnimation;                         // 0x0EA8 (size: 0x8)
    class UAnimSequenceBase* _playingInstrumentPlayAnimation;                         // 0x0EB0 (size: 0x8)
    EPlayingInstrumentState _playingInstrumentState;                                  // 0x0EB8 (size: 0x1)
    bool _isCarryingItem;                                                             // 0x0EB9 (size: 0x1)
    class UAnimSequenceBase* _carryingItemIdleFPAnimation;                            // 0x0EC0 (size: 0x8)
    class UAnimSequenceBase* _carryingItemIdleTPAnimation;                            // 0x0EC8 (size: 0x8)
    ECarryingItemState _carryingItemState;                                            // 0x0ED0 (size: 0x1)
    bool _isMounted;                                                                  // 0x0ED1 (size: 0x1)
    bool _isFullyMounted;                                                             // 0x0ED2 (size: 0x1)
    class UAnimSequenceBase* _mountedAnimation;                                       // 0x0ED8 (size: 0x8)
    bool _isVehicleDriver;                                                            // 0x0EE0 (size: 0x1)
    class UBlendSpace* _vehicleDriverForwardIdleAnimation;                            // 0x0EE8 (size: 0x8)
    class UAnimSequenceBase* _vehicleDriverForwardSteeringAnimation;                  // 0x0EF0 (size: 0x8)
    class UAnimSequenceBase* _vehicleDriverForwardSteeringAnimationFP;                // 0x0EF8 (size: 0x8)
    class UBlendSpace* _vehicleDriverReverseIdleAnimation;                            // 0x0F00 (size: 0x8)
    class UAnimSequenceBase* _vehicleDriverReverseSteeringAnimation;                  // 0x0F08 (size: 0x8)
    class UAnimSequenceBase* _vehicleDriverReverseSteeringAnimationFP;                // 0x0F10 (size: 0x8)
    class UBlendSpace* _vehiclePassengerIdleAnimation;                                // 0x0F18 (size: 0x8)
    float _vehicleSpeed;                                                              // 0x0F20 (size: 0x4)
    float _vehicleSpeedKph;                                                           // 0x0F24 (size: 0x4)
    float _vehicleBumpiness;                                                          // 0x0F28 (size: 0x4)
    float _vehicleDriverSteeringAnimationTime;                                        // 0x0F2C (size: 0x4)
    float _vehicleDriverSteeringAnimationTimeInterpSpeed;                             // 0x0F30 (size: 0x4)
    bool _isSledgeAcceleratingForward;                                                // 0x0F34 (size: 0x1)
    bool _isSledgeAcceleratingBackward;                                               // 0x0F35 (size: 0x1)
    float _sledgeSlidingThresholdSpeed;                                               // 0x0F38 (size: 0x4)
    bool _isSledgeSliding;                                                            // 0x0F3C (size: 0x1)
    class UAnimSequenceBase* _bowArmsShakeAnimation;                                  // 0x0F40 (size: 0x8)
    float _weaponBreathFactor;                                                        // 0x0F48 (size: 0x4)
    float _weaponAimDownTheSightsStillBlendFactor;                                    // 0x0F4C (size: 0x4)
    bool _areHandsBound;                                                              // 0x0F50 (size: 0x1)
    class UAnimSequenceBase* _handsBoundIdleFPAnimation;                              // 0x0F58 (size: 0x8)
    class UAnimSequenceBase* _handsBoundIdleTPAnimation;                              // 0x0F60 (size: 0x8)
    bool _isResting;                                                                  // 0x0F68 (size: 0x1)
    class UAnimSequenceBase* _restingAnimation;                                       // 0x0F70 (size: 0x8)
    float _restingFeetOffset;                                                         // 0x0F78 (size: 0x4)
    float _cameraToActorRotationDeltaYaw;                                             // 0x0F7C (size: 0x4)
    float _cameraToActorRotationDeltaPitch;                                           // 0x0F80 (size: 0x4)
    EVehicleWeaponAimingStance _vehicleWeaponAimingStance;                            // 0x0F84 (size: 0x1)
    bool _useMountedFirstPersonWeaponAimingParameters;                                // 0x0F85 (size: 0x1)
    FVector _vehicleWAPLocationOffsetDefaultStanceFP;                                 // 0x0F88 (size: 0xC)
    FVector _vehicleWAPLocationOffsetLeaningStanceFP;                                 // 0x0F94 (size: 0xC)
    bool _useMountedThirdPersonWeaponAimingParameters;                                // 0x0FA0 (size: 0x1)
    class UBlendSpace* _vehicleWAPAimOffsetTP;                                        // 0x0FA8 (size: 0x8)
    bool _useVehicleWAPAimOffsetTP;                                                   // 0x0FB0 (size: 0x1)
    class UBlendSpace* _vehicleWAPAimOffsetDefaultStanceTP;                           // 0x0FB8 (size: 0x8)
    bool _useVehicleWAPAimOffsetDefaultStanceTP;                                      // 0x0FC0 (size: 0x1)
    class UBlendSpace* _vehicleWAPAimOffsetLeaningStanceTP;                           // 0x0FC8 (size: 0x8)
    bool _useVehicleWAPAimOffsetLeaningStanceTP;                                      // 0x0FD0 (size: 0x1)
    bool _useVehicleWAPUpperBodyIdleTP;                                               // 0x0FD1 (size: 0x1)
    class UAnimSequenceBase* _vehicleWAPUpperBodyIdleRelaxedTP;                       // 0x0FD8 (size: 0x8)
    class UAnimSequenceBase* _vehicleWAPUpperBodyIdleAimingTP;                        // 0x0FE0 (size: 0x8)
    bool _useVehicleWAPLowerBodyIdleTP;                                               // 0x0FE8 (size: 0x1)
    class UAnimSequenceBase* _vehicleWAPLowerBodyIdleRelaxedTP;                       // 0x0FF0 (size: 0x8)
    class UAnimSequenceBase* _vehicleWAPLowerBodyIdleAimingTP;                        // 0x0FF8 (size: 0x8)
    class UAnimSequenceBase* _vehicleWAPLowerBodyIdleRelaxedDefaultTP;                // 0x1000 (size: 0x8)
    class UAnimSequenceBase* _vehicleWAPLowerBodyIdleAimingDefaultTP;                 // 0x1008 (size: 0x8)
    class UAnimSequenceBase* _vehicleWAPLowerBodyIdleRelaxedLeaningTP;                // 0x1010 (size: 0x8)
    class UAnimSequenceBase* _vehicleWAPLowerBodyIdleAimingLeaningTP;                 // 0x1018 (size: 0x8)
    bool _isPlayingWAPStanceTransitionMontage;                                        // 0x1020 (size: 0x1)
    bool _isActivelyFishing;                                                          // 0x1021 (size: 0x1)
    bool _isBaitingFish;                                                              // 0x1022 (size: 0x1)
    bool _shouldUseGrappleAnimInstance;                                               // 0x1023 (size: 0x1)
    bool _useWeaponAimingDownTheSightsZeroRangeBlendSpace;                            // 0x1024 (size: 0x1)
    class UBlendSpace1D* _weaponAimingDownTheSightsZeroRangeBlendSpace;               // 0x1028 (size: 0x8)
    float _weaponZeroRange;                                                           // 0x1030 (size: 0x4)
    bool _isInPhotoMode;                                                              // 0x1034 (size: 0x1)
    bool _hasHighHeels;                                                               // 0x1035 (size: 0x1)
    bool _isCarryingItemWithTwoHands;                                                 // 0x1036 (size: 0x1)
    FVector _grappledWallOffsetVector;                                                // 0x1040 (size: 0xC)

    void TakePenis();
    void ReleasePenis();
    void OnIdleStateExit(const FAnimNode_StateMachine& Machine, int32 prevStateIndex, int32 nextStateIndex);
    void OnIdleStateEntry(const FAnimNode_StateMachine& Machine, int32 prevStateIndex, int32 nextStateIndex);
    bool IsInCombatMode();
    bool IsCourseAngleSupportedByStartAndStopAnimations(float courseAngle);
    bool IsAnyStanceTransitionActive();
    bool IsAimingWeapon();
    bool IsAimingDownSights();
    float GetWeaponRelatedIdleStateAnimationPlayRateOnGameThread();
    class UAnimSequenceBase* GetWeaponAnimationPoseOnWorkerThread(EWeaponAnimationPose animationPose, EPrisonerGroundStance stance);
    class UBlendSpace* GetWeaponAimOffsetOnGameThread(EPrisonerAimOffsetType prisonerAimOffsetType);
    float GetWeaponAimingNoisePlayRateOnGameThread();
    float GetWeaponAimingNoiseBlendValueOnGameThread();
    float GetVehicleSpeedKph();
    float GetVehicleSpeed();
    class UBlendSpace* GetVehiclePassengerIdleAnimation();
    class UBlendSpace* GetVehicleDriverForwardIdleAnimation();
    float GetVehicleBumpiness();
    float GetStandLookBlendAlpha();
    float GetPlayRateFromSpeed(float speedInAnimation, float MinPlayRate, float MaxPlayRate);
    float GetPenisSize();
    float GetLocomotionStateWeight(EPrisonerAnimationState State);
    void GetLeanBlendWeights(float& Left, float& Right, float Multiplier, const class UCurveFloat* strengthBySpeedCurve);
    float GetKnownCurveValueOnWorkerThread(EPrisonerAnimationCurve Curve);
    bool GetIsVehicleDriver();
    float GetInPlaceTurningElapsedTimeRight(EPrisonerGroundStance stance);
    float GetInPlaceTurningElapsedTimeLeft(EPrisonerGroundStance stance);
    float GetInPlaceTurningDirectionBlendAlpha(EPrisonerGroundStance stance);
    float GetInPlaceTurningBlendAlpha(EPrisonerGroundStance stance);
    FVector GetIKLegsRootOffsetVectorFromCardinalDirection(ECardinalDirection Value);
    float GetFacialExpressionBlendWeightOnWorkerThread(EPrisonerFacialExpression facialExpression);
    float GetFacialExpressionBlendWeightOnGameThread(EPrisonerFacialExpression facialExpression);
    float GetCurrentLocomotionStateElapsedTime();
    EPrisonerAnimationState GetCurrentLocomotionState();
    ECardinalDirection GetCardinalDirectionFromCourseAngle(float Value);
    float GetBoxingTurnAngle();
    float GetBoxingInPlaceTurningElapsedTimeRight();
    float GetBoxingInPlaceTurningElapsedTimeLeft();
    float GetBoxingInPlaceTurningDirectionBlendAlpha();
    float GetBoxingInPlaceTurningBlendAlpha();
    class UAnimSequenceBase* GetBowArmsShakeAnimationOnGameThread(EPrisonerGroundStance stance);
    float FindTimeBeforeJumpApex(const class UAnimSequenceBase* AnimSequence, float distanceToApex);
    float FindTimeAtStoppingDistance(const class UAnimSequenceBase* AnimSequence, float stoppingDistance);
    float FindTimeAfterJumpApex(const class UAnimSequenceBase* AnimSequence, float distanceToApex);
    void DeactivateFacialExpressionOnGameThread(EPrisonerFacialExpression facialExpression);
    void DeactivateAllFacialExpressionsOnGameThread();
    void Blink();
    void AnimNotify_TakePenis();
    void AnimNotify_TakeItemInHands(const class UAnimNotify* Notify);
    void AnimNotify_RFootDown();
    void AnimNotify_RemoveItemFromHands(const class UAnimNotify* Notify);
    void AnimNotify_ReleasePenis();
    void AnimNotify_LFootDown();
    void AnimNotify_EnableCapsuleCollision(const class UAnimNotify* Notify);
    void AnimNotify_DisableCapsuleCollision(const class UAnimNotify* Notify);
    void ActivateFacialExpressionOnGameThread(EPrisonerFacialExpression facialExpression, float BlendInDuration, float Duration, float BlendOutDuration, float blendWeightMultiplier);
}; // Size: 0x1050

class UPrisonerAnimInstance_Aerial : public UAnimInstance
{
    EPrisonerAerialPose _upcomingPose;                                                // 0x02B8 (size: 0x1)
    EPrisonerAerialPose _previousPose;                                                // 0x02B9 (size: 0x1)
    class UAnimSequence* _blendAnimationOverride;                                     // 0x02C0 (size: 0x8)
    float _blendAnimationOverrideTime;                                                // 0x02C8 (size: 0x4)
    float _poseBlendWeight;                                                           // 0x02CC (size: 0x4)
    FVector2D _fallingControl;                                                        // 0x02D0 (size: 0x8)
    float _fallSpeed;                                                                 // 0x02D8 (size: 0x4)
    float _yawRotationRate;                                                           // 0x02DC (size: 0x4)
    bool _isInFirstPersonView;                                                        // 0x02E0 (size: 0x1)
    bool _hasHandBondage;                                                             // 0x02E1 (size: 0x1)
    bool _jumpingAfterApex;                                                           // 0x02E2 (size: 0x1)
    bool _shouldUsePoseSnapshot;                                                      // 0x02E3 (size: 0x1)
    class UAnimSequenceBase* _handsBoundIdleFPAnimation;                              // 0x02E8 (size: 0x8)
    class UAnimSequenceBase* _handsBoundIdleTPAnimation;                              // 0x02F0 (size: 0x8)
    float _distanceToJumpApexNormalized;                                              // 0x02F8 (size: 0x4)
    float _legsPoseBeforeJump;                                                        // 0x02FC (size: 0x4)
    bool _wasMovingBeforeJump;                                                        // 0x0300 (size: 0x1)
    EPrisonerMovementPace _movementPaceBeforeJump;                                    // 0x0301 (size: 0x1)

    float FindJumpTime(const class UAnimSequenceBase* AnimSequence, float distanceToApex, bool afterApex);
}; // Size: 0x330

class UPrisonerAnimInstance_Airplane : public UAnimInstance
{
    bool _isDriver;                                                                   // 0x02B8 (size: 0x1)
    float _pitchAmount;                                                               // 0x02BC (size: 0x4)
    float _rollAmount;                                                                // 0x02C0 (size: 0x4)
    float _yawAmount;                                                                 // 0x02C4 (size: 0x4)
    FTransform _throttleTransform;                                                    // 0x02D0 (size: 0x30)
    FTransform _leftPedalTransform;                                                   // 0x0300 (size: 0x30)
    FTransform _rightPedalTransform;                                                  // 0x0330 (size: 0x30)
    FTransform _stickTransform;                                                       // 0x0360 (size: 0x30)
    class UBlendSpace* _driverIdleAnimation;                                          // 0x0390 (size: 0x8)
    class UBlendSpace* _passengerIdleAnimation;                                       // 0x0398 (size: 0x8)

}; // Size: 0x3A0

class UPrisonerAnimInstance_Bike : public UAnimInstance
{
    float _bikeSpeed;                                                                 // 0x02B8 (size: 0x4)
    float _bikeSpeedKmh;                                                              // 0x02BC (size: 0x4)
    float _steerAmount;                                                               // 0x02C0 (size: 0x4)
    float _brakeAmount;                                                               // 0x02C4 (size: 0x4)
    float _throttleAmount;                                                            // 0x02C8 (size: 0x4)
    bool _isInCombatMode;                                                             // 0x02CC (size: 0x1)
    bool _isDriver;                                                                   // 0x02CD (size: 0x1)
    bool _isBicycle;                                                                  // 0x02CE (size: 0x1)
    float _vehicleRoll;                                                               // 0x02D0 (size: 0x4)
    float _lerpedBrakeThrottle;                                                       // 0x02D4 (size: 0x4)
    float _inAirTimer;                                                                // 0x02D8 (size: 0x4)
    float _driverIdlePlayRate;                                                        // 0x02DC (size: 0x4)
    bool _isStartingEngine;                                                           // 0x02E0 (size: 0x1)
    class UBlendSpace* _driverIdleAnimation;                                          // 0x02E8 (size: 0x8)
    class UBlendSpace* _driverReverseIdleAnimation;                                   // 0x02F0 (size: 0x8)
    FTransform _driverLHandleTransform;                                               // 0x0300 (size: 0x30)
    FTransform _driverRHandleTransform;                                               // 0x0330 (size: 0x30)
    FTransform _driverReverseSeatHandTransform;                                       // 0x0360 (size: 0x30)
    FTransform _driverLFootRestTransform;                                             // 0x0390 (size: 0x30)
    FTransform _driverRFootRestTransform;                                             // 0x03C0 (size: 0x30)
    class UBlendSpace* _passengerIdleAnimation;                                       // 0x03F0 (size: 0x8)
    bool _useVehicleWAPLowerBodyIdleTP;                                               // 0x03F8 (size: 0x1)
    class UAnimSequenceBase* _vehicleWAPLowerBodyIdleAimingTP;                        // 0x0400 (size: 0x8)
    class UAnimSequenceBase* _vehicleWAPLowerBodyIdleRelaxedTP;                       // 0x0408 (size: 0x8)
    class UAnimSequence* _startEngineStartAnimation;                                  // 0x0410 (size: 0x8)
    class UAnimSequence* _startEngineLoopAnimation;                                   // 0x0418 (size: 0x8)
    class UAnimSequence* _startEngineLongLoopAnimation;                               // 0x0420 (size: 0x8)
    class UAnimSequence* _startEngineEndAnimation;                                    // 0x0428 (size: 0x8)
    class UAnimSequence* _standUpStartAnimation;                                      // 0x0430 (size: 0x8)
    class UAnimSequence* _standUpLoopAnimation;                                       // 0x0438 (size: 0x8)
    class UAnimSequence* _standUpEndAnimation;                                        // 0x0440 (size: 0x8)
    bool _hasStandUpAnimations;                                                       // 0x0448 (size: 0x1)
    class UAimOffsetBlendSpace* _turnAimOffset;                                       // 0x0450 (size: 0x8)

}; // Size: 0x460

class UPrisonerAnimInstance_Boat : public UAnimInstance
{
    float _vehicleSpeed;                                                              // 0x02B8 (size: 0x4)
    float _vehicleSpeedKph;                                                           // 0x02BC (size: 0x4)
    bool _isVehicleDriver;                                                            // 0x02C0 (size: 0x1)
    bool _isRowing;                                                                   // 0x02C1 (size: 0x1)
    bool _isPaddling;                                                                 // 0x02C2 (size: 0x1)
    bool _isMotorPropelled;                                                           // 0x02C3 (size: 0x1)
    bool _isSailing;                                                                  // 0x02C4 (size: 0x1)
    float _sailsDeployAmount;                                                         // 0x02C8 (size: 0x4)
    float _sailsSteerAmount;                                                          // 0x02CC (size: 0x4)
    float _sailsTurnAmount;                                                           // 0x02D0 (size: 0x4)
    int32 _paddleCounter;                                                             // 0x02D4 (size: 0x4)
    float _vehicleThrottleAmount;                                                     // 0x02D8 (size: 0x4)
    float _vehicleBrakeAmount;                                                        // 0x02DC (size: 0x4)
    float _vehicleSteerAmount;                                                        // 0x02E0 (size: 0x4)
    int32 _numPaddleSwingsInOneHand;                                                  // 0x02E4 (size: 0x4)
    class UBlendSpace* _vehicleDriverForwardIdleAnimation;                            // 0x02E8 (size: 0x8)
    class UBlendSpace* _vehiclePassengerIdleAnimation;                                // 0x02F0 (size: 0x8)
    class UBlendSpace* _boatDriverPaddleLAnimation;                                   // 0x02F8 (size: 0x8)
    class UBlendSpace* _boatDriverPaddleRAnimation;                                   // 0x0300 (size: 0x8)
    class UAnimSequence* _boatDriverPaddleLToRAnimation;                              // 0x0308 (size: 0x8)
    class UAnimSequence* _boatDriverPaddleRToLAnimation;                              // 0x0310 (size: 0x8)
    float _paddleInHand;                                                              // 0x0318 (size: 0x4)
    FTransform _motorHandleSocketTransform;                                           // 0x0320 (size: 0x30)
    FTransform _sailsHandleSocketTransform;                                           // 0x0350 (size: 0x30)
    FTransform _rudderSocketTransform;                                                // 0x0380 (size: 0x30)
    float _maxSpineLeanAngle;                                                         // 0x03B0 (size: 0x4)
    float _spineLeanAmountForHandlingMotor;                                           // 0x03B4 (size: 0x4)
    EPrisonerMovementPace _movementPace;                                              // 0x03B8 (size: 0x1)
    float _normalizedMovementPace;                                                    // 0x03BC (size: 0x4)
    float _playRateFromMovementPace;                                                  // 0x03C0 (size: 0x4)
    EEngineBlockState _engineState;                                                   // 0x03C4 (size: 0x1)
    bool _useVehicleWAPLowerBodyIdleTP;                                               // 0x03C5 (size: 0x1)
    class UAnimSequenceBase* _vehicleWAPLowerBodyIdleAimingTP;                        // 0x03C8 (size: 0x8)
    class UAnimSequenceBase* _vehicleWAPLowerBodyIdleRelaxedTP;                       // 0x03D0 (size: 0x8)
    bool _isInCombatMode;                                                             // 0x03D8 (size: 0x1)
    class UAnimSequence* _startEngineStartAnimation;                                  // 0x03E0 (size: 0x8)
    class UAnimSequence* _startEngineLoopAnimation;                                   // 0x03E8 (size: 0x8)
    class UAnimSequence* _startEngineLongLoopAnimation;                               // 0x03F0 (size: 0x8)
    class UAnimSequence* _startEngineEndAnimation;                                    // 0x03F8 (size: 0x8)

}; // Size: 0x430

class UPrisonerAnimInstance_FemaleCorrections : public UAnimInstance
{
    FName _correctionsDisabledCurveName;                                              // 0x02B8 (size: 0x8)
    float _correctionsDisabledCurveValue;                                             // 0x02C0 (size: 0x4)
    float _correctionsDisabledCurveValueInverse;                                      // 0x02C4 (size: 0x4)

}; // Size: 0x2D0

class UPrisonerAnimInstance_Fishing : public UAnimInstance
{
    float _aimOffsetYaw;                                                              // 0x02B8 (size: 0x4)
    float _aimOffsetPitch;                                                            // 0x02BC (size: 0x4)
    bool _isActivelyFishing;                                                          // 0x02C0 (size: 0x1)
    bool _castingFinished;                                                            // 0x02C1 (size: 0x1)
    bool _floaterHitWaterSurface;                                                     // 0x02C2 (size: 0x1)
    bool _fishIsHooked;                                                               // 0x02C3 (size: 0x1)
    EPrisonerGroundStance _stance;                                                    // 0x02C4 (size: 0x1)
    bool _isInFirstPersonView;                                                        // 0x02C5 (size: 0x1)
    FRotator _armsLagRotation;                                                        // 0x02C8 (size: 0xC)
    float _armsLagPitch;                                                              // 0x02D4 (size: 0x4)
    float _armsLagYaw;                                                                // 0x02D8 (size: 0x4)

}; // Size: 0x2E0

class UPrisonerAnimInstance_Grappled : public UAnimInstance
{
    class UAnimSequence* _idleAnimation;                                              // 0x02B8 (size: 0x8)

}; // Size: 0x2C0

class UPrisonerAnimInstance_Parachute : public UAnimInstance
{
    class UAnimSequence* _defaultOpeningAnimation;                                    // 0x02B8 (size: 0x8)
    class UAnimSequence* _openingAnimation;                                           // 0x02C0 (size: 0x8)
    float _openingAnimationTime;                                                      // 0x02C8 (size: 0x4)

}; // Size: 0x2E0

class UPrisonerAnimInstance_PrisonerCreation : public UAnimInstance
{
    EConZGender _gender;                                                              // 0x02B8 (size: 0x1)
    bool _isCameraFocusedOnFace;                                                      // 0x02B9 (size: 0x1)
    class UAnimMontage* _femaleCloseUpIdle;                                           // 0x02C0 (size: 0x8)
    class UAnimMontage* _maleCloseUpIdle;                                             // 0x02C8 (size: 0x8)

}; // Size: 0x2E0

class UPrisonerAnimInstance_Quad : public UPrisonerAnimInstance_Bike
{
    float _interpSteer;                                                               // 0x0458 (size: 0x4)
    float _interpSteerLean;                                                           // 0x045C (size: 0x4)
    float _leanInterpSpeed;                                                           // 0x0460 (size: 0x4)

}; // Size: 0x470

class UPrisonerAnimInstance_VehicleBase : public UPrisonerAnimInstance
{
    bool _isDriver;                                                                   // 0x1050 (size: 0x1)
    bool _isPushing;                                                                  // 0x1051 (size: 0x1)
    class UBlendSpace* _mountedBlendspace;                                            // 0x1058 (size: 0x8)
    float _maxPushingSpeedKmh;                                                        // 0x1060 (size: 0x4)
    float _wheelsSteerAmount;                                                         // 0x1064 (size: 0x4)
    FTransform _leftHandIKTransform;                                                  // 0x1070 (size: 0x30)
    FTransform _rightHandIKTransform;                                                 // 0x10A0 (size: 0x30)
    bool _hasDashboard;                                                               // 0x10D0 (size: 0x1)

}; // Size: 0x10E0

class UPrisonerAnimInstance_WeightLoad : public UAnimInstance
{
}; // Size: 0x2C0

class UPrisonerAnimInstance_WheelBarrow : public UAnimInstance
{
    float _wheelBarrowSpeed;                                                          // 0x02B8 (size: 0x4)
    float _wheelBarrowSpeedKph;                                                       // 0x02BC (size: 0x4)
    float _wheelBarrowBumpiness;                                                      // 0x02C0 (size: 0x4)
    float _wheelBarrowRollAngleRelativeToDriver;                                      // 0x02C4 (size: 0x4)
    bool _isInCombatMode;                                                             // 0x02C8 (size: 0x1)
    bool _isLimping;                                                                  // 0x02C9 (size: 0x1)
    bool _isDriver;                                                                   // 0x02CA (size: 0x1)
    class UAnimSequenceBase* _driverIdleAnimation;                                    // 0x02D0 (size: 0x8)
    class UBlendSpace* _driverWalkJogAnimation;                                       // 0x02D8 (size: 0x8)
    class UBlendSpace* _driverWalkJogLimpingAnimation;                                // 0x02E0 (size: 0x8)
    FTransform _driverLHandGripTransform;                                             // 0x02F0 (size: 0x30)
    FTransform _driverRHandGripTransform;                                             // 0x0320 (size: 0x30)
    float _driverSpineBendAngle;                                                      // 0x0350 (size: 0x4)
    float _driverSpineBendScale;                                                      // 0x0354 (size: 0x4)
    float _driverSpineBendAngleInterpSpeed;                                           // 0x0358 (size: 0x4)
    float _driverSpineLeanAngle;                                                      // 0x035C (size: 0x4)
    float _driverSpineLeanScale;                                                      // 0x0360 (size: 0x4)
    float _driverSpineLeanAngleInterpSpeed;                                           // 0x0364 (size: 0x4)
    bool _driverHasFloor;                                                             // 0x0368 (size: 0x1)
    bool _isDriverMoving;                                                             // 0x0369 (size: 0x1)
    float _driverSpeed;                                                               // 0x036C (size: 0x4)
    float _driverCourseAngle;                                                         // 0x0370 (size: 0x4)
    class UBlendSpace* _passengerIdleAnimation;                                       // 0x0378 (size: 0x8)
    bool _useVehicleWAPLowerBodyIdleTP;                                               // 0x0380 (size: 0x1)
    class UAnimSequenceBase* _vehicleWAPLowerBodyIdleAimingTP;                        // 0x0388 (size: 0x8)
    class UAnimSequenceBase* _vehicleWAPLowerBodyIdleRelaxedTP;                       // 0x0390 (size: 0x8)

    void AnimNotify_RFootDown();
    void AnimNotify_LFootDown();
}; // Size: 0x3A0

class UPrisonerAnimNotify_PlayGearSound : public UAnimNotify
{
    EMotionIntensity motionIntensity;                                                 // 0x0038 (size: 0x1)

}; // Size: 0x40

class UPrisonerAnimStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UPrisonerAppearanceComponent : public UActorComponent
{
    bool _overrideVisualParameters;                                                   // 0x0104 (size: 0x1)
    TArray<FVisualParameter> _visualParameterOverrides;                               // 0x0108 (size: 0x10)
    bool _overridePenisLocations;                                                     // 0x0118 (size: 0x1)
    FVector _penisLocationDefaultOverride;                                            // 0x011C (size: 0xC)
    FVector _penisLocationFatOverride;                                                // 0x0128 (size: 0xC)
    FVector _penisLocationMuscularOverride;                                           // 0x0134 (size: 0xC)
    FVector _penisLocationSkinnyOverride;                                             // 0x0140 (size: 0xC)

    void NetMulticast_UpdateState(const TArray<uint8>& Payload);
    void NetMulticast_UpdateChipLightColorIndex(int8 chipLightColor);
}; // Size: 0x150

class UPrisonerAppearanceDataAsset : public UDataAsset
{
    EDeluxeVersion GameUpgradeRequired;                                               // 0x0030 (size: 0x1)
    TArray<class UCharacterMesh*> CharacterMeshes;                                    // 0x0038 (size: 0x10)
    TMap<class FName, class TSoftObjectPtr<UMaterialInstance>> SkinMaterials;         // 0x0048 (size: 0x50)
    FGameplayTag TypeTag;                                                             // 0x0098 (size: 0x8)
    FGameplayTag RaceTag;                                                             // 0x00A0 (size: 0x8)
    FName CharacterAkSwitchValue;                                                     // 0x00A8 (size: 0x8)
    TSoftObjectPtr<UTexture2D> SkinNormal;                                            // 0x00B0 (size: 0x28)
    TArray<FPrisonerAppearance_HairStyle> FacialHairStyles;                           // 0x00D8 (size: 0x10)
    TArray<FPrisonerAppearance_HairStyle> BeardStyles;                                // 0x00E8 (size: 0x10)
    TArray<FPrisonerAppearance_HairStyle> MoustacheStyles;                            // 0x00F8 (size: 0x10)
    TSoftObjectPtr<UTexture2D> Hairless_SkinColor;                                    // 0x0108 (size: 0x28)
    TSoftObjectPtr<UTexture2D> Hairless_SkinRoughness;                                // 0x0130 (size: 0x28)
    TSoftObjectPtr<UTexture2D> Hairless_SkinMask;                                     // 0x0158 (size: 0x28)
    TSoftObjectPtr<UTexture2D> Hairy_SkinColor;                                       // 0x0180 (size: 0x28)
    TSoftObjectPtr<UTexture2D> Hairy_SkinRoughness;                                   // 0x01A8 (size: 0x28)
    TSoftObjectPtr<UTexture2D> Hairy_SkinMask;                                        // 0x01D0 (size: 0x28)
    bool HasLimitedCharacterCreationOptions;                                          // 0x01F8 (size: 0x1)

}; // Size: 0x200

class UPrisonerAppearanceSetDataAsset : public UDataAsset
{
    float BreastSizeMin;                                                              // 0x0030 (size: 0x4)
    float BreastSizeMax;                                                              // 0x0034 (size: 0x4)
    float BreastSizeMaxInCharacterCreation;                                           // 0x0038 (size: 0x4)
    float BreastSizeDeluxeModifier;                                                   // 0x003C (size: 0x4)
    float PenisSizeMin;                                                               // 0x0040 (size: 0x4)
    float PenisSizeMax;                                                               // 0x0044 (size: 0x4)
    float PenisSizeMaxInCharacterCreation;                                            // 0x0048 (size: 0x4)
    float PenisSizeDeluxeModifier;                                                    // 0x004C (size: 0x4)
    TSubclassOf<class UCharacterMesh> HairClass;                                      // 0x0050 (size: 0x8)
    TSubclassOf<class UCharacterMesh> MoustacheClass;                                 // 0x0058 (size: 0x8)
    TSubclassOf<class UCharacterMesh> BeardClass;                                     // 0x0060 (size: 0x8)
    FRuntimeFloatCurve DefinitionMaterialParamVsFatMassRatio;                         // 0x0068 (size: 0x88)
    FRuntimeFloatCurve DefinitionMaterialParamVsMuscleMassRatio;                      // 0x00F0 (size: 0x88)
    TArray<class UPrisonerAppearanceDataAsset*> _femaleAppearanceData;                // 0x0178 (size: 0x10)
    TArray<class UPrisonerAppearanceDataAsset*> _maleAppearanceData;                  // 0x0188 (size: 0x10)
    TArray<FPrisonerAppearance_HairStyle> _maleHairStyles;                            // 0x0198 (size: 0x10)
    TArray<FPrisonerAppearance_HairStyle> _femaleHairStyles;                          // 0x01A8 (size: 0x10)
    TArray<FPrisonerAppearance_HairColorPreset> _dyedHairColors;                      // 0x01B8 (size: 0x10)
    TMap<class FGameplayTag, class FPrisonerAppearance_TattooArray> _tattooArrays;    // 0x01C8 (size: 0x50)
    TMap<class FGameplayTag, class FPrisonerAppearance_SkinParams> _femaleSkinParams; // 0x0218 (size: 0x50)
    TMap<class FGameplayTag, class FPrisonerAppearance_SkinParams> _maleSkinParams;   // 0x0268 (size: 0x50)
    TArray<FPrisonerAppearance_IrisColor> _irisColors;                                // 0x02B8 (size: 0x10)
    TArray<FPrisonerAppearance_IrisVariation> _irisVariations;                        // 0x02C8 (size: 0x10)

}; // Size: 0x2D8

class UPrisonerAppearanceUIController : public UObject
{
}; // Size: 0x1F0

class UPrisonerBodyAbrasionsStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UPrisonerBodyCompositionMorphsComputer : public UObject
{
}; // Size: 0x28

class UPrisonerBodyCompositionMorphsComputer_CharacterCreationOrMugshot : public UPrisonerBodyCompositionMorphsComputer
{
}; // Size: 0x28

class UPrisonerBodyCondition : public UPrisonerBodyConditionOrSymptom
{
    TArray<class TSubclassOf<UPrisonerBodyConditionInteraction>> _initialInteractions; // 0x00A0 (size: 0x10)

}; // Size: 0xC0

class UPrisonerBodyConditionCause : public UObject
{
}; // Size: 0x30

class UPrisonerBodyConditionCauseUIData : public UObject
{
}; // Size: 0x30

class UPrisonerBodyConditionCauseUIData_Sepsis : public UPrisonerBodyConditionCauseUIData
{
}; // Size: 0x38

class UPrisonerBodyConditionCause_Sepsis : public UPrisonerBodyConditionCause
{
}; // Size: 0x38

class UPrisonerBodyConditionInteraction : public UObject
{
    FText _name;                                                                      // 0x0028 (size: 0x18)
    float _actionDurationVsPhysicianSkillLevel;                                       // 0x0040 (size: 0x14)
    float _experiencePointsToGainVsPhysicianSkillLevel;                               // 0x0054 (size: 0x14)
    EPrisonerMontage _beginInteractionMontage;                                        // 0x0068 (size: 0x1)
    EPrisonerMontage _endInteractionMontage;                                          // 0x0069 (size: 0x1)
    class UAkAudioEvent* _beginInteractionPatientAudioEvent;                          // 0x0070 (size: 0x8)
    class UAkAudioEvent* _endInteractionPatientAudioEvent;                            // 0x0078 (size: 0x8)

}; // Size: 0x80

class UPrisonerBodyConditionInteractionItemTag : public UBaseItemTag
{
    TArray<class TSubclassOf<UPrisonerBodyCondition>> SupportedConditions;            // 0x0030 (size: 0x10)
    bool HasSupportedBodyParts;                                                       // 0x0040 (size: 0x1)
    TArray<EBodyPart> SupportedBodyPartsList;                                         // 0x0048 (size: 0x10)
    bool HasUnsupportedBodyParts;                                                     // 0x0058 (size: 0x1)
    TArray<EBodyPart> UnsupportedBodyPartsList;                                       // 0x0060 (size: 0x10)
    FText InteractionCaption;                                                         // 0x0070 (size: 0x18)
    EPrisonerMontage BeginInteractionMontage;                                         // 0x0088 (size: 0x1)
    EPrisonerMontage EndInteractionMontage;                                           // 0x0089 (size: 0x1)

}; // Size: 0x90

class UPrisonerBodyConditionInteractionQueryResults : public UObject
{
}; // Size: 0xA0

class UPrisonerBodyConditionInteraction_RemoveBandages : public UPrisonerBodyConditionInteraction
{
}; // Size: 0x88

class UPrisonerBodyConditionOrSymptom : public UPrisonerBodyEffect
{
    TSubclassOf<class UPrisonerBodyConditionOrSymptomUIData> _uiDataClass;            // 0x0058 (size: 0x8)
    bool _useSeverityToDetermineLifeThreateningStatus;                                // 0x0060 (size: 0x1)
    FFloatRange _severityRangeToBeLifeThreatening;                                    // 0x0064 (size: 0x10)
    float _severityRatioChangeToReplicate;                                            // 0x0074 (size: 0x4)
    float _clientSeverityRatioInterpSpeed;                                            // 0x0078 (size: 0x4)
    TArray<class UPrisonerBodyConditionOrSymptomSideEffect*> _sideEffects;            // 0x0080 (size: 0x10)
    float _repSeverity;                                                               // 0x0098 (size: 0x4)
    float _repMaxSeverity;                                                            // 0x009C (size: 0x4)

}; // Size: 0xA0

class UPrisonerBodyConditionOrSymptomSideEffect : public UObject
{
}; // Size: 0x30

class UPrisonerBodyConditionOrSymptomSideEffectUIData : public UObject
{
}; // Size: 0x28

class UPrisonerBodyConditionOrSymptomSideEffectUIData_AbstractModifier : public UPrisonerBodyConditionOrSymptomSideEffectUIData
{
}; // Size: 0x30

class UPrisonerBodyConditionOrSymptomSideEffectUIData_ConstitutionModifier : public UPrisonerBodyConditionOrSymptomSideEffectUIData_AbstractModifier
{
}; // Size: 0x30

class UPrisonerBodyConditionOrSymptomSideEffectUIData_Damage : public UPrisonerBodyConditionOrSymptomSideEffectUIData
{
}; // Size: 0x30

class UPrisonerBodyConditionOrSymptomSideEffectUIData_DexterityModifier : public UPrisonerBodyConditionOrSymptomSideEffectUIData_AbstractModifier
{
}; // Size: 0x30

class UPrisonerBodyConditionOrSymptomSideEffectUIData_GroundMovementSpeedModifier : public UPrisonerBodyConditionOrSymptomSideEffectUIData_AbstractModifier
{
}; // Size: 0x30

class UPrisonerBodyConditionOrSymptomSideEffectUIData_HealingSpeedModifier : public UPrisonerBodyConditionOrSymptomSideEffectUIData_AbstractModifier
{
}; // Size: 0x30

class UPrisonerBodyConditionOrSymptomSideEffectUIData_ImmuneSystemEfficiencyModifier : public UPrisonerBodyConditionOrSymptomSideEffectUIData_AbstractModifier
{
}; // Size: 0x30

class UPrisonerBodyConditionOrSymptomSideEffectUIData_IntelligenceModifier : public UPrisonerBodyConditionOrSymptomSideEffectUIData_AbstractModifier
{
}; // Size: 0x30

class UPrisonerBodyConditionOrSymptomSideEffectUIData_MaxMovementPace : public UPrisonerBodyConditionOrSymptomSideEffectUIData
{
}; // Size: 0x30

class UPrisonerBodyConditionOrSymptomSideEffectUIData_MaxStaminaModifier : public UPrisonerBodyConditionOrSymptomSideEffectUIData_AbstractModifier
{
}; // Size: 0x30

class UPrisonerBodyConditionOrSymptomSideEffectUIData_PerformanceScoreModifier : public UPrisonerBodyConditionOrSymptomSideEffectUIData_AbstractModifier
{
}; // Size: 0x30

class UPrisonerBodyConditionOrSymptomSideEffectUIData_StrengthModifier : public UPrisonerBodyConditionOrSymptomSideEffectUIData_AbstractModifier
{
}; // Size: 0x30

class UPrisonerBodyConditionOrSymptomSideEffect_AbstractModifier : public UPrisonerBodyConditionOrSymptomSideEffect
{
    FRuntimeFloatCurve _modifierVsSeverity;                                           // 0x0030 (size: 0x88)

}; // Size: 0xC0

class UPrisonerBodyConditionOrSymptomSideEffect_Blackout : public UPrisonerBodyConditionOrSymptomSideEffect
{
    TSubclassOf<class UPrisonerBodySymptom_Blackout> _symptomClass;                   // 0x0030 (size: 0x8)
    class UPrisonerBodySymptomCause_Blackout* _symptomCause;                          // 0x0038 (size: 0x8)
    FRuntimeFloatCurve _intensityVsSeverity;                                          // 0x0040 (size: 0x88)

}; // Size: 0xC8

class UPrisonerBodyConditionOrSymptomSideEffect_BloodshotEyes : public UPrisonerBodyConditionOrSymptomSideEffect
{
    TSubclassOf<class UPrisonerBodySymptom_BloodshotEyes> _symptomClass;              // 0x0030 (size: 0x8)
    class UPrisonerBodySymptomCause_BloodshotEyes* _symptomCause;                     // 0x0038 (size: 0x8)
    FRuntimeFloatCurve _intensityVsSeverity;                                          // 0x0040 (size: 0x88)

}; // Size: 0xD0

class UPrisonerBodyConditionOrSymptomSideEffect_BlurredVision : public UPrisonerBodyConditionOrSymptomSideEffect
{
    TSubclassOf<class UPrisonerBodySymptom_BlurredVision> _symptomClass;              // 0x0030 (size: 0x8)
    class UPrisonerBodySymptomCause_BlurredVision* _symptomCause;                     // 0x0038 (size: 0x8)
    FRuntimeFloatCurve _intensityVsSeverity;                                          // 0x0040 (size: 0x88)
    FRuntimeFloatCurve _offsetVsSeverity;                                             // 0x00C8 (size: 0x88)
    FRuntimeFloatCurve _falloffVsSeverity;                                            // 0x0150 (size: 0x88)

}; // Size: 0x1D8

class UPrisonerBodyConditionOrSymptomSideEffect_ConstitutionModifier : public UPrisonerBodyConditionOrSymptomSideEffect_AbstractModifier
{
}; // Size: 0xC0

class UPrisonerBodyConditionOrSymptomSideEffect_Damage : public UPrisonerBodyConditionOrSymptomSideEffect
{
    FRuntimeFloatCurve _damageVsSeverity;                                             // 0x0030 (size: 0x88)
    FRuntimeFloatCurve _damageRatioVsSeverity;                                        // 0x00B8 (size: 0x88)
    bool _useBaseMaxHealthInsteadOfMaxHealthToComputeDamageRatio;                     // 0x0140 (size: 0x1)
    bool _useSeverityToDetermineLifeThreateningStatus;                                // 0x0141 (size: 0x1)
    FFloatRange _severityRangeToBeLifeThreatening;                                    // 0x0144 (size: 0x10)

}; // Size: 0x158

class UPrisonerBodyConditionOrSymptomSideEffect_DexterityModifier : public UPrisonerBodyConditionOrSymptomSideEffect_AbstractModifier
{
}; // Size: 0xC0

class UPrisonerBodyConditionOrSymptomSideEffect_Disorientation : public UPrisonerBodyConditionOrSymptomSideEffect
{
    TSubclassOf<class UPrisonerBodySymptom_Disorientation> _symptomClass;             // 0x0030 (size: 0x8)
    class UPrisonerBodySymptomCause_Disorientation* _symptomCause;                    // 0x0038 (size: 0x8)
    FRuntimeFloatCurve _intensityVsSeverity;                                          // 0x0040 (size: 0x88)

}; // Size: 0xD0

class UPrisonerBodyConditionOrSymptomSideEffect_DoubleVision : public UPrisonerBodyConditionOrSymptomSideEffect
{
    TSubclassOf<class UPrisonerBodySymptom_DoubleVision> _symptomClass;               // 0x0030 (size: 0x8)
    class UPrisonerBodySymptomCause_DoubleVision* _symptomCause;                      // 0x0038 (size: 0x8)
    FRuntimeFloatCurve _intensityVsSeverity;                                          // 0x0040 (size: 0x88)

}; // Size: 0xD0

class UPrisonerBodyConditionOrSymptomSideEffect_EyePressure : public UPrisonerBodyConditionOrSymptomSideEffect
{
    TSubclassOf<class UPrisonerBodySymptom_EyePressure> _symptomClass;                // 0x0030 (size: 0x8)
    class UPrisonerBodySymptomCause_EyePressure* _symptomCause;                       // 0x0038 (size: 0x8)
    FRuntimeFloatCurve _intensityVsSeverity;                                          // 0x0040 (size: 0x88)

}; // Size: 0xD0

class UPrisonerBodyConditionOrSymptomSideEffect_Fatigue : public UPrisonerBodyConditionOrSymptomSideEffect
{
    TSubclassOf<class UPrisonerBodySymptom_Fatigue> _symptomClass;                    // 0x0030 (size: 0x8)
    class UPrisonerBodySymptomCause_Fatigue* _symptomCause;                           // 0x0038 (size: 0x8)
    FRuntimeFloatCurve _maxStaminaModifierVsSeverity;                                 // 0x0040 (size: 0x88)

}; // Size: 0xD0

class UPrisonerBodyConditionOrSymptomSideEffect_GroundMovementSpeedModifier : public UPrisonerBodyConditionOrSymptomSideEffect_AbstractModifier
{
}; // Size: 0xC0

class UPrisonerBodyConditionOrSymptomSideEffect_Hallucinations : public UPrisonerBodyConditionOrSymptomSideEffect
{
    TSubclassOf<class UPrisonerBodySymptom_Hallucinations> _symptomClass;             // 0x0030 (size: 0x8)
    class UPrisonerBodySymptomCause_Hallucinations* _symptomCause;                    // 0x0038 (size: 0x8)
    FRuntimeFloatCurve _hallucinationsSeverityVsSeverity;                             // 0x0040 (size: 0x88)

}; // Size: 0xC8

class UPrisonerBodyConditionOrSymptomSideEffect_HealingSpeedModifier : public UPrisonerBodyConditionOrSymptomSideEffect_AbstractModifier
{
}; // Size: 0xC0

class UPrisonerBodyConditionOrSymptomSideEffect_HeightenedSenses : public UPrisonerBodyConditionOrSymptomSideEffect
{
    TSubclassOf<class UPrisonerBodySymptom_HeightenedSenses> _symptomClass;           // 0x0030 (size: 0x8)
    class UPrisonerBodySymptomCause_HeightenedSenses* _symptomCause;                  // 0x0038 (size: 0x8)
    FRuntimeFloatCurve _intensityVsSeverity;                                          // 0x0040 (size: 0x88)

}; // Size: 0xD0

class UPrisonerBodyConditionOrSymptomSideEffect_ImmuneSystemEfficiencyModifier : public UPrisonerBodyConditionOrSymptomSideEffect_AbstractModifier
{
}; // Size: 0xC0

class UPrisonerBodyConditionOrSymptomSideEffect_IntelligenceModifier : public UPrisonerBodyConditionOrSymptomSideEffect_AbstractModifier
{
}; // Size: 0xC0

class UPrisonerBodyConditionOrSymptomSideEffect_Leukopenia : public UPrisonerBodyConditionOrSymptomSideEffect
{
    TSubclassOf<class UPrisonerBodySymptom_Leukopenia> _symptomClass;                 // 0x0030 (size: 0x8)
    class UPrisonerBodySymptomCause_Leukopenia* _symptomCause;                        // 0x0038 (size: 0x8)
    FRuntimeFloatCurve _immuneSystemEfficiencyModifierVsSeverity;                     // 0x0040 (size: 0x88)

}; // Size: 0xD0

class UPrisonerBodyConditionOrSymptomSideEffect_MaxMovementPace : public UPrisonerBodyConditionOrSymptomSideEffect
{
    FPrisonerMaxMovementPaceVsSeverity _maxMovementPaceVsSeverity;                    // 0x0030 (size: 0x10)

}; // Size: 0x48

class UPrisonerBodyConditionOrSymptomSideEffect_MaxStaminaModifier : public UPrisonerBodyConditionOrSymptomSideEffect_AbstractModifier
{
}; // Size: 0xC0

class UPrisonerBodyConditionOrSymptomSideEffect_PerformanceScoreModifier : public UPrisonerBodyConditionOrSymptomSideEffect_AbstractModifier
{
}; // Size: 0xC0

class UPrisonerBodyConditionOrSymptomSideEffect_PeriodicAffect : public UPrisonerBodyConditionOrSymptomSideEffect
{
    TSubclassOf<class UPrisonerBodySymptom_PeriodicAffect> _symptomClass;             // 0x0030 (size: 0x8)
    class UPrisonerBodySymptomCause_PeriodicAffect* _symptomCause;                    // 0x0038 (size: 0x8)
    FRuntimeFloatCurve _intervalVsSeverity;                                           // 0x0040 (size: 0x88)
    FRuntimeFloatCurve _chanceVsSeverity;                                             // 0x00C8 (size: 0x88)
    FFloatInterval _durationVsConstitution;                                           // 0x0150 (size: 0x8)
    FFloatInterval _intensityVsConstitution;                                          // 0x0158 (size: 0x8)

}; // Size: 0x160

class UPrisonerBodyConditionOrSymptomSideEffect_StrengthModifier : public UPrisonerBodyConditionOrSymptomSideEffect_AbstractModifier
{
}; // Size: 0xC0

class UPrisonerBodyConditionOrSymptomSideEffect_Unconsciousness : public UPrisonerBodyConditionOrSymptomSideEffect
{
}; // Size: 0x38

class UPrisonerBodyConditionOrSymptomSideEffect_WaterMovementSpeedModifier : public UPrisonerBodyConditionOrSymptomSideEffect_AbstractModifier
{
}; // Size: 0xC0

class UPrisonerBodyConditionOrSymptomSideEffect_Weakness : public UPrisonerBodyConditionOrSymptomSideEffect
{
    TSubclassOf<class UPrisonerBodySymptom_Weakness> _symptomClass;                   // 0x0030 (size: 0x8)
    class UPrisonerBodySymptomCause_Weakness* _symptomCause;                          // 0x0038 (size: 0x8)
    FRuntimeFloatCurve _performanceScoreModifierVsSeverity;                           // 0x0040 (size: 0x88)
    float _strengthModifierPerPerformanceScoreModifier;                               // 0x00C8 (size: 0x4)
    float _constitutionModifierPerPerformanceScoreModifier;                           // 0x00CC (size: 0x4)
    float _dexterityModifierPerPerformanceScoreModifier;                              // 0x00D0 (size: 0x4)

}; // Size: 0xD8

class UPrisonerBodyConditionOrSymptomUIData : public UPrisonerBodyEffectUIData
{
    bool _isVisibleByDefault;                                                         // 0x0040 (size: 0x1)
    FText _name;                                                                      // 0x0048 (size: 0x18)
    FText _description;                                                               // 0x0060 (size: 0x18)
    TArray<class UPrisonerBodyConditionOrSymptomSideEffectUIData*> _sideEffectsUIData; // 0x0088 (size: 0x10)

}; // Size: 0x98

class UPrisonerBodyConditionTreatInteraction : public UPrisonerBodyConditionInteraction
{
}; // Size: 0x80

class UPrisonerBodyConditionTreatInteractionItemTag : public UPrisonerBodyConditionInteractionItemTag
{
}; // Size: 0x90

class UPrisonerBodyConditionTreatInteraction_ApplyBandagesOrDisinfect : public UPrisonerBodyConditionTreatInteraction
{
    FPBCTI_ApplyBandagesOrDisinfect_DisinfectData _disinfectData;                     // 0x00A0 (size: 0x38)
    FPBCTI_ApplyBandagesOrDisinfect_ApplyBandagesData _applyBandagesData;             // 0x00D8 (size: 0x50)

}; // Size: 0x128

class UPrisonerBodyConditionTreatInteraction_ApplyGel : public UPrisonerBodyConditionTreatInteraction
{
    FPBCTI_ApplyGelData _applyGelData;                                                // 0x0088 (size: 0x38)

}; // Size: 0xC0

class UPrisonerBodyConditionUIData : public UPrisonerBodyConditionOrSymptomUIData
{
}; // Size: 0x1A8

class UPrisonerBodyConditionUIData_Abrasions : public UPrisonerBodyConditionUIData
{
}; // Size: 0x1E8

class UPrisonerBodyConditionUIData_AcuteRadiationSyndrome : public UPrisonerBodyConditionUIData
{
}; // Size: 0x1B0

class UPrisonerBodyConditionUIData_BleedingInjury : public UPrisonerBodyConditionUIData
{
}; // Size: 0x1E8

class UPrisonerBodyConditionUIData_BurnInjury : public UPrisonerBodyConditionUIData
{
}; // Size: 0x1E0

class UPrisonerBodyConditionUIData_EnergyDeficiency : public UPrisonerBodyConditionUIData
{
}; // Size: 0x1B0

class UPrisonerBodyConditionUIData_Exhaustion : public UPrisonerBodyConditionUIData
{
}; // Size: 0x1C0

class UPrisonerBodyConditionUIData_FoodDisgust : public UPrisonerBodyConditionUIData
{
}; // Size: 0x1A8

class UPrisonerBodyConditionUIData_ForeignSubstancePoisoning : public UPrisonerBodyConditionUIData
{
}; // Size: 0x1D0

class UPrisonerBodyConditionUIData_Hyperthermia : public UPrisonerBodyConditionUIData
{
}; // Size: 0x1A8

class UPrisonerBodyConditionUIData_Hypothermia : public UPrisonerBodyConditionUIData
{
}; // Size: 0x1A8

class UPrisonerBodyConditionUIData_Infection : public UPrisonerBodyConditionUIData
{
}; // Size: 0x1B8

class UPrisonerBodyConditionUIData_InhalationPoisoning : public UPrisonerBodyConditionUIData
{
    FText _substanceName;                                                             // 0x01B8 (size: 0x18)

}; // Size: 0x1D0

class UPrisonerBodyConditionUIData_KillBoxGasPoisoning : public UPrisonerBodyConditionUIData
{
}; // Size: 0x1A8

class UPrisonerBodyConditionUIData_NutrientDeficiency : public UPrisonerBodyConditionUIData
{
    EConZUnit NutrientUnit;                                                           // 0x01AC (size: 0x1)

}; // Size: 0x1B0

class UPrisonerBodyConditionUIData_Overburdened : public UPrisonerBodyConditionUIData
{
}; // Size: 0x1A8

class UPrisonerBodyConditionUIData_RadiationPresence : public UPrisonerBodyConditionUIData
{
}; // Size: 0x1C0

class UPrisonerBodyConditionUIData_Sepsis : public UPrisonerBodyConditionWithCausesUIData
{
}; // Size: 0x1C0

class UPrisonerBodyConditionUIData_TrenchFoot : public UPrisonerBodyConditionUIData
{
}; // Size: 0x1B0

class UPrisonerBodyConditionUIData_TutorialInjury : public UPrisonerBodyConditionUIData
{
}; // Size: 0x1B0

class UPrisonerBodyConditionWithCauses : public UPrisonerBodyCondition
{
}; // Size: 0xD0

class UPrisonerBodyConditionWithCausesUIData : public UPrisonerBodyConditionUIData
{
    TArray<class UPrisonerBodyConditionCauseUIData*> _causes;                         // 0x01A8 (size: 0x10)

}; // Size: 0x1B8

class UPrisonerBodyCondition_Abrasions : public UPrisonerBodyCondition_Injury
{
    FFloatInterval _baseAbrasionsRaiseRateVsConstitution;                             // 0x00C8 (size: 0x8)
    float _abrasionsWeightFactor;                                                     // 0x00D0 (size: 0x4)
    float _abrasionsFallRate;                                                         // 0x00D4 (size: 0x4)
    FRuntimeFloatCurve _severityVsAbrasions;                                          // 0x00D8 (size: 0x88)
    float _abrasions;                                                                 // 0x0160 (size: 0x4)
    float _abrasionsAtRecoveryStart;                                                  // 0x0164 (size: 0x4)
    float _bandagesProtection;                                                        // 0x0168 (size: 0x4)
    FBandages _bandages;                                                              // 0x0170 (size: 0x18)
    TSubclassOf<class UNotificationDescription> _bandagesProtectionDecreaseNotification; // 0x0188 (size: 0x8)
    float _bandagesProtectionDecreaseNotificationCooldown;                            // 0x0190 (size: 0x4)
    FRuntimeFloatCurve _stabilizationDurationVsSeverity;                              // 0x0198 (size: 0x88)
    float _stabilizationDurationReductionFromPhysician;                               // 0x0220 (size: 0x4)
    FRuntimeFloatCurve _recoveryDurationVsSeverity;                                   // 0x0228 (size: 0x88)
    FRuntimeFloatCurve _bleedingSeverityVsSeverity;                                   // 0x02B0 (size: 0x88)
    TSubclassOf<class UPrisonerBodySymptom_Bleeding> _bleedingSymptomClass;           // 0x0338 (size: 0x8)
    class UPrisonerBodySymptomCause_Bleeding* _bleedingSymptomCause;                  // 0x0340 (size: 0x8)
    float _bloodLoss;                                                                 // 0x0348 (size: 0x4)
    float _bloodLossToRecover;                                                        // 0x034C (size: 0x4)
    class UAkAudioEvent* _painGruntAudioEvent;                                        // 0x0350 (size: 0x8)
    FRuntimeFloatCurve _painGruntIntervalVsSeverity;                                  // 0x0358 (size: 0x88)
    TSubclassOf<class UPrisonerBodySymptom_Pain> _painSymptomClass;                   // 0x03E8 (size: 0x8)
    class UPrisonerBodySymptomCause_Pain* _painSymptomCause;                          // 0x03F0 (size: 0x8)
    FRuntimeFloatCurve _painSymptomOverallIntensityVsSeverity;                        // 0x03F8 (size: 0x88)
    FRuntimeFloatCurve _painSymptomLimpingIntensityVsSeverity;                        // 0x0480 (size: 0x88)
    FPrisonerMaxMovementPaceVsSeverity _painSymptomMaxMovementPaceVsSeverity;         // 0x0508 (size: 0x10)
    FRuntimeFloatCurve _painSymptomMovementSpeedModifierVsSeverity;                   // 0x0518 (size: 0x88)
    EPrisonerBodyConditionState _state;                                               // 0x05A0 (size: 0x1)
    float _timerElapsedTime;                                                          // 0x05A8 (size: 0x4)
    float _timerDuration;                                                             // 0x05AC (size: 0x4)
    float _disinfectantAmount;                                                        // 0x05B0 (size: 0x4)
    TSubclassOf<class UPrisonerBodyCondition_Infection> _infectionClass;              // 0x05B8 (size: 0x8)
    class UPrisonerBodyCondition_Infection* _infection;                               // 0x05C0 (size: 0x8)
    float _contaminationIncreaseBaseRate;                                             // 0x05C8 (size: 0x4)
    FRuntimeFloatCurve _contaminationIncreaseRateMultiplierVsSeverity;                // 0x05D0 (size: 0x88)
    FRuntimeFloatCurve _contaminationIncreaseRateMultiplierVsAsepsis;                 // 0x0658 (size: 0x88)
    float _disinfectantContaminationDecreaseRate;                                     // 0x06E0 (size: 0x4)
    float _disinfectantEvaporationRate;                                               // 0x06E4 (size: 0x4)

}; // Size: 0x6E8

class UPrisonerBodyCondition_AcuteRadiationSyndrome : public UPrisonerBodyCondition
{
    float _amount;                                                                    // 0x00C0 (size: 0x4)
    float _maxAmount;                                                                 // 0x00C4 (size: 0x4)
    float _amountAtRecoveryStart;                                                     // 0x00C8 (size: 0x4)
    FRuntimeFloatCurve _severityVsAmountRatio;                                        // 0x00D0 (size: 0x88)
    FRuntimeFloatCurve _increaseRateVsEffectiveRadiationAmountRatio;                  // 0x0158 (size: 0x88)
    FRuntimeFloatCurve _decreaseRateVsSeverity;                                       // 0x01E0 (size: 0x88)
    FFloatInterval _decreaseRateMultiplierVsConstitutionRatio;                        // 0x0268 (size: 0x8)
    FFloatInterval _randomBleedingIntervalRange;                                      // 0x0270 (size: 0x8)
    FRuntimeFloatCurve _randomBleedingChanceVsSeverity;                               // 0x0278 (size: 0x88)
    float _randomBleedingTimer;                                                       // 0x0300 (size: 0x4)
    float _chosenRandomBleedingInterval;                                              // 0x0304 (size: 0x4)
    EPrisonerBodyConditionState _state;                                               // 0x0308 (size: 0x1)

}; // Size: 0x310

class UPrisonerBodyCondition_BasicInjury : public UPrisonerBodyCondition_Injury
{
    FRuntimeFloatCurve _severityVsDamageRatio;                                        // 0x00C0 (size: 0x88)
    float _healingRate;                                                               // 0x0148 (size: 0x4)
    float _damage;                                                                    // 0x014C (size: 0x4)
    float _damageToRecover;                                                           // 0x0150 (size: 0x4)

}; // Size: 0x158

class UPrisonerBodyCondition_BladderFull : public UPrisonerBodyCondition
{
    float _bladderFullnessToExist;                                                    // 0x00C0 (size: 0x4)
    float _bladderFullnessToForceUrinate;                                             // 0x00C4 (size: 0x4)
    TSubclassOf<class UPrisonerBodySymptom_NeedToUrinate> _needToUrinateSymptomClass; // 0x00C8 (size: 0x8)
    class UPrisonerBodySymptomCause* _needToUrinateSymptomCause;                      // 0x00D0 (size: 0x8)

}; // Size: 0xE8

class UPrisonerBodyCondition_BleedingInjury : public UPrisonerBodyCondition_Injury
{
    FRuntimeFloatCurve _selfStabilizationDurationVsSeverity;                          // 0x00C8 (size: 0x88)
    FRuntimeFloatCurve _stabilizationDurationVsBloodLossRatio;                        // 0x0150 (size: 0x88)
    FRuntimeFloatCurve _destabilizationActionDifficultyRatioVsSeverity;               // 0x01D8 (size: 0x88)
    TSubclassOf<class UNotificationDescription> _destabilizationNotification;         // 0x0260 (size: 0x8)
    float _destabilizationNotificationCooldown;                                       // 0x0268 (size: 0x4)
    FRuntimeFloatCurve _recoveryDurationVsBloodLossRatio;                             // 0x0270 (size: 0x88)
    TSubclassOf<class UPrisonerBodySymptom_Bleeding> _bleedingSymptomClass;           // 0x02F8 (size: 0x8)
    class UPrisonerBodySymptomCause_Bleeding* _bleedingSymptomCause;                  // 0x0300 (size: 0x8)
    TSubclassOf<class UPrisonerBodySymptom_Pain> _painSymptomClass;                   // 0x0308 (size: 0x8)
    class UPrisonerBodySymptomCause_Pain* _painSymptomCause;                          // 0x0310 (size: 0x8)
    FRuntimeFloatCurve _painIntensityVsSeverity;                                      // 0x0318 (size: 0x88)
    float _limpingIntensityPerLegsDamageRatio;                                        // 0x03A0 (size: 0x4)
    float _legsBleedingSeverityThresholdToLimp;                                       // 0x03A4 (size: 0x4)
    class UPrisonerBodyMuscleGroupToInfectionClassMappings* _infectionClassMappings;  // 0x03A8 (size: 0x8)
    class UPrisonerBodyCondition_Infection* _infection;                               // 0x03B0 (size: 0x8)
    float _contaminationIncreaseBaseRate;                                             // 0x03B8 (size: 0x4)
    FRuntimeFloatCurve _contaminationIncreaseRateMultiplierVsSeverity;                // 0x03C0 (size: 0x88)
    FRuntimeFloatCurve _contaminationIncreaseRateMultiplierVsAsepsis;                 // 0x0448 (size: 0x88)
    float _disinfectantContaminationDecreaseRate;                                     // 0x04D0 (size: 0x4)
    float _disinfectantEvaporationRate;                                               // 0x04D4 (size: 0x4)
    EPrisonerBodyMuscleGroup _muscleGroup;                                            // 0x04D8 (size: 0x1)
    float _damage;                                                                    // 0x04DC (size: 0x4)
    float _damageAtRecoveryStart;                                                     // 0x04E0 (size: 0x4)
    float _bloodLoss;                                                                 // 0x04E4 (size: 0x4)
    float _bloodLossAtRecoveryStart;                                                  // 0x04E8 (size: 0x4)
    float _bloodLossRate;                                                             // 0x04EC (size: 0x4)
    float _bloodLossRateAtRecoveryStart;                                              // 0x04F0 (size: 0x4)
    float _selfStabilizationBleedingSuppression;                                      // 0x04F4 (size: 0x4)
    float _stabilizationDurationReductionFromPhysician;                               // 0x04F8 (size: 0x4)
    FBandages _bandages;                                                              // 0x0500 (size: 0x18)
    float _disinfectantAmount;                                                        // 0x0518 (size: 0x4)
    EPrisonerBodyConditionState _state;                                               // 0x051C (size: 0x1)
    float _timerElapsedTime;                                                          // 0x0528 (size: 0x4)
    float _timerDuration;                                                             // 0x052C (size: 0x4)

}; // Size: 0x530

class UPrisonerBodyCondition_BurnInjury : public UPrisonerBodyCondition_Injury
{
    float _initialDamageMultiplier;                                                   // 0x00C8 (size: 0x4)
    FRuntimeFloatCurve _severityVsDamageRatio;                                        // 0x00D0 (size: 0x88)
    FRuntimeFloatCurve _untreatedDurationVsSeverity;                                  // 0x0158 (size: 0x88)
    FRuntimeFloatCurve _stabilizationDurationVsSeverity;                              // 0x01E0 (size: 0x88)
    FRuntimeFloatCurve _recoveryDurationVsSeverity;                                   // 0x0268 (size: 0x88)
    FRuntimeFloatCurve _stabilizationDurationReductionVsGelRatio;                     // 0x02F0 (size: 0x88)
    FRuntimeFloatCurve _recoveryDurationReductionVsGelRatio;                          // 0x0378 (size: 0x88)
    TSubclassOf<class UPrisonerBodySymptom_Pain> _painSymptomClass;                   // 0x0400 (size: 0x8)
    class UPrisonerBodySymptomCause_Pain* _painSymptomCause;                          // 0x0408 (size: 0x8)
    FRuntimeFloatCurve _painIntensityVsSeverity;                                      // 0x0410 (size: 0x88)
    float _limpingIntensityPerLegsDamageRatio;                                        // 0x0498 (size: 0x4)
    float _legsBurnSeverityThresholdToLimp;                                           // 0x049C (size: 0x4)
    class UPrisonerBodyMuscleGroupToInfectionClassMappings* _infectionClassMappings;  // 0x04A0 (size: 0x8)
    class UPrisonerBodyCondition_Infection* _infection;                               // 0x04A8 (size: 0x8)
    float _contaminationIncreaseBaseRate;                                             // 0x04B0 (size: 0x4)
    FRuntimeFloatCurve _contaminationIncreaseRateMultiplierVsSeverity;                // 0x04B8 (size: 0x88)
    FRuntimeFloatCurve _contaminationIncreaseRateMultiplierVsAsepsis;                 // 0x0540 (size: 0x88)
    float _disinfectantContaminationDecreaseRate;                                     // 0x05C8 (size: 0x4)
    float _disinfectantEvaporationRate;                                               // 0x05CC (size: 0x4)
    EPrisonerBodyMuscleGroup _muscleGroup;                                            // 0x05D0 (size: 0x1)
    float _damage;                                                                    // 0x05D4 (size: 0x4)
    float _damageAtRecoveryStart;                                                     // 0x05D8 (size: 0x4)
    float _selfStabilizationBurnSuppression;                                          // 0x05DC (size: 0x4)
    float _stabilizationDurationReductionFromPhysician;                               // 0x05E0 (size: 0x4)
    float _recoveryDurationReductionFromPhysician;                                    // 0x05E4 (size: 0x4)
    FBandages _bandages;                                                              // 0x05E8 (size: 0x18)
    float _disinfectantAmount;                                                        // 0x0600 (size: 0x4)
    float _gelAmount;                                                                 // 0x0604 (size: 0x4)
    EPrisonerBodyConditionState _state;                                               // 0x0608 (size: 0x1)
    float _timerElapsedTime;                                                          // 0x0610 (size: 0x4)
    float _timerDuration;                                                             // 0x0614 (size: 0x4)

}; // Size: 0x618

class UPrisonerBodyCondition_Choking : public UPrisonerBodyCondition
{
    float _oxygenSaturationToExist;                                                   // 0x00C0 (size: 0x4)

}; // Size: 0xD0

class UPrisonerBodyCondition_ColonFull : public UPrisonerBodyCondition
{
    float _colonFullnessToExist;                                                      // 0x00C0 (size: 0x4)
    float _colonFullnessToForceDefecate;                                              // 0x00C4 (size: 0x4)
    TSubclassOf<class UPrisonerBodySymptom_NeedToDefecate> _needToDefecateSymptomClass; // 0x00C8 (size: 0x8)
    class UPrisonerBodySymptomCause* _needToDefecateSymptomCause;                     // 0x00D0 (size: 0x8)
    float _colonFullnessAtWhichFartingStarts;                                         // 0x00D8 (size: 0x4)
    float _fartingInterval;                                                           // 0x00DC (size: 0x4)
    TSubclassOf<class UPrisonerBodySymptom_Farting> _fartingSymptomClass;             // 0x00E0 (size: 0x8)
    class UPrisonerBodySymptomCause_Farting* _fartingSymptomCause;                    // 0x00E8 (size: 0x8)

}; // Size: 0x100

class UPrisonerBodyCondition_Drunkenness : public UPrisonerBodyCondition
{
    FRuntimeFloatCurve _severityVsAbsorbedAlcoholRatio;                               // 0x00C0 (size: 0x88)
    float _alcoholAbsorptionAtRecoveryStart;                                          // 0x0148 (size: 0x4)
    EPrisonerBodyConditionState _state;                                               // 0x014C (size: 0x1)
    float _vomitCheckInterval;                                                        // 0x015C (size: 0x4)
    float _alcoholInStomachRatioVomitThreshold;                                       // 0x0160 (size: 0x4)
    FRuntimeFloatCurve _vomitProbabilityVsSeverity;                                   // 0x0168 (size: 0x88)

}; // Size: 0x1F0

class UPrisonerBodyCondition_EnergyDeficiency : public UPrisonerBodyCondition
{
    FRuntimeFloatCurve _severityVsEnergyDeficiencyRatio;                              // 0x00C0 (size: 0x88)
    float _maxRatioOfAbsorbedEnergyCapacityToBeRecovered;                             // 0x0148 (size: 0x4)
    float _artificialAbsorbedEnergyAccumulationScale;                                 // 0x014C (size: 0x4)
    float _energyDeficiency;                                                          // 0x0150 (size: 0x4)
    float _energyDeficiencyToRecover;                                                 // 0x0154 (size: 0x4)
    float _artificialAbsorbedEnergy;                                                  // 0x0158 (size: 0x4)

}; // Size: 0x168

class UPrisonerBodyCondition_Exhaustion : public UPrisonerBodyCondition
{
    EPrisonerBodyConditionState _state;                                               // 0x00C0 (size: 0x1)
    float _exhaustionAmount;                                                          // 0x00C8 (size: 0x4)
    float _exhaustionAmountAtRecoveryStart;                                           // 0x00CC (size: 0x4)
    FRuntimeFloatCurve _severityVsExhaustion;                                         // 0x00D0 (size: 0x88)
    float _severityToStartMaxStaminaReduction;                                        // 0x0158 (size: 0x4)
    float _maxStaminaReduction;                                                       // 0x015C (size: 0x4)

}; // Size: 0x170

class UPrisonerBodyCondition_FoodDisgust : public UPrisonerBodyCondition
{
    FFloatInterval _disgustAmountChangeMultiplierVsConstitution;                      // 0x00C0 (size: 0x8)
    FFloatInterval _disgustAmountDecreaseRateVsConstitution;                          // 0x00C8 (size: 0x8)
    float _disgustAmountTolerated;                                                    // 0x00D0 (size: 0x4)
    float _disgustAmountToIssueFirstWarning;                                          // 0x00D4 (size: 0x4)
    TSubclassOf<class UNotificationDescription> _firstDisgustWarning;                 // 0x00D8 (size: 0x8)
    float _disgustAmountToIssueSecondWarning;                                         // 0x00E0 (size: 0x4)
    TSubclassOf<class UNotificationDescription> _secondDisgustWarning;                // 0x00E8 (size: 0x8)
    float _disgustWarningCooldown;                                                    // 0x00F0 (size: 0x4)
    float _disgustAmountToBeAbleToVomit;                                              // 0x00FC (size: 0x4)
    float _disgustAmountToVomit;                                                      // 0x0100 (size: 0x4)
    float _disgustAmount;                                                             // 0x0104 (size: 0x4)
    float _disgustAmountAtStabilizationStart;                                         // 0x0120 (size: 0x4)
    float _disgustAmountAtRecoveryStart;                                              // 0x0124 (size: 0x4)
    TSubclassOf<class UPrisonerBodySymptom_Nausea> _nauseaSymptomClass;               // 0x0128 (size: 0x8)

}; // Size: 0x138

class UPrisonerBodyCondition_FootAbrasions : public UPrisonerBodyCondition_Abrasions
{
}; // Size: 0x6E8

class UPrisonerBodyCondition_ForeignSubstancePoisoning : public UPrisonerBodyCondition
{
    FRuntimeFloatCurve _severityVsForeignSubstanceAmountRatio;                        // 0x00C0 (size: 0x88)
    float _foreignSubstanceAmountRatioToExist;                                        // 0x0148 (size: 0x4)
    float _foreignSubstanceAmountAtRecoveryStart;                                     // 0x014C (size: 0x4)
    EPrisonerBodyConditionState _state;                                               // 0x0150 (size: 0x1)
    FPrisonerBodyBoneGroupsVsSeverity _affectedBodyBoneGroupsVsSeverity;              // 0x0158 (size: 0x10)
    FPrisonerBodyMuscleGroupsVsSeverity _affectedBodyMuscleGroupsVsSeverity;          // 0x0168 (size: 0x10)
    FPrisonerBodyOrganGroupsVsSeverity _affectedBodyOrganGroupsVsSeverity;            // 0x0178 (size: 0x10)
    TSubclassOf<class UForeignSubstance> _foreignSubstanceClass;                      // 0x0188 (size: 0x8)

}; // Size: 0x190

class UPrisonerBodyCondition_HandAbrasions : public UPrisonerBodyCondition_Abrasions
{
    float _vehiclePropellingAbrasivenessMultiplier;                                   // 0x06E8 (size: 0x4)

}; // Size: 0x6F0

class UPrisonerBodyCondition_HealthLow : public UPrisonerBodyCondition
{
    float _healthRatioToExist;                                                        // 0x00C0 (size: 0x4)
    FRuntimeFloatCurve _colorSaturationEffectIntensityVsEffectsIntensity;             // 0x00C8 (size: 0x88)

}; // Size: 0x150

class UPrisonerBodyCondition_HeavyInjuries : public UPrisonerBodyCondition
{
    FFloatInterval _injuriesDamageRatioToExistVsConstitution;                         // 0x00C0 (size: 0x8)
    float _painSymptomOverallIntensity;                                               // 0x00C8 (size: 0x4)
    float _painSymptomLimpingIntensity;                                               // 0x00CC (size: 0x4)
    TSubclassOf<class UPrisonerBodySymptom_Pain> _painSymptomClass;                   // 0x00D0 (size: 0x8)
    class UPrisonerBodySymptomCause_Pain* _painSymptomCause;                          // 0x00D8 (size: 0x8)

}; // Size: 0xE0

class UPrisonerBodyCondition_Hyperthermia : public UPrisonerBodyCondition
{
    float _maxSeverity;                                                               // 0x00C0 (size: 0x4)
    float _bodyTemperatureToDie;                                                      // 0x00C4 (size: 0x4)
    float _bodyTemperatureToExist;                                                    // 0x00C8 (size: 0x4)
    float _bodyTemperatureToRecover;                                                  // 0x00CC (size: 0x4)
    float _bodyTemperatureSampleInterval;                                             // 0x00D4 (size: 0x4)
    float _bodyTemperatureAtUntreatedStart;                                           // 0x00DC (size: 0x4)
    float _bodyTemperatureAtStabilizationStart;                                       // 0x00E0 (size: 0x4)
    float _bodyTemperatureAtRecoveryStart;                                            // 0x00E4 (size: 0x4)
    EPrisonerBodyConditionState _state;                                               // 0x00E8 (size: 0x1)
    float _severityRatio;                                                             // 0x00F0 (size: 0x4)
    float _severityRatioAtUntreatedStart;                                             // 0x00F4 (size: 0x4)
    float _severityRatioAtRecoveryStart;                                              // 0x00F8 (size: 0x4)
    float _severityRatioInterpSpeed;                                                  // 0x0100 (size: 0x4)

}; // Size: 0x108

class UPrisonerBodyCondition_Hypothermia : public UPrisonerBodyCondition
{
    float _maxSeverity;                                                               // 0x00C0 (size: 0x4)
    float _bodyTemperatureToDie;                                                      // 0x00C4 (size: 0x4)
    float _bodyTemperatureToExist;                                                    // 0x00C8 (size: 0x4)
    float _bodyTemperatureToRecover;                                                  // 0x00CC (size: 0x4)
    float _bodyTemperatureSampleInterval;                                             // 0x00D4 (size: 0x4)
    float _bodyTemperatureAtUntreatedStart;                                           // 0x00E0 (size: 0x4)
    float _bodyTemperatureAtStabilizationStart;                                       // 0x00E4 (size: 0x4)
    float _bodyTemperatureAtRecoveryStart;                                            // 0x00E8 (size: 0x4)
    EPrisonerBodyConditionState _state;                                               // 0x00EC (size: 0x1)
    float _severityRatio;                                                             // 0x00F4 (size: 0x4)
    float _severityRatioAtUntreatedStart;                                             // 0x00F8 (size: 0x4)
    float _severityRatioAtRecoveryStart;                                              // 0x00FC (size: 0x4)
    float _severityRatioInterpSpeed;                                                  // 0x0104 (size: 0x4)

}; // Size: 0x108

class UPrisonerBodyCondition_Infection : public UPrisonerBodyCondition
{
    float _maxSeverity;                                                               // 0x00C0 (size: 0x4)
    float _maxContamination;                                                          // 0x00C4 (size: 0x4)
    float _toleratedContamination;                                                    // 0x00C8 (size: 0x4)
    TSubclassOf<class UPrisonerBodyCondition_Sepsis> _sepsisClass;                    // 0x00D0 (size: 0x8)
    class UPrisonerBodyConditionCause_Sepsis* _sepsisCause;                           // 0x00D8 (size: 0x8)
    TSubclassOf<class UNotificationDescription> _infectedNotification;                // 0x00E0 (size: 0x8)
    float _infectedNotificationCooldown;                                              // 0x00E8 (size: 0x4)
    float _contamination;                                                             // 0x00FC (size: 0x4)
    float _contaminationAtRecoveryStart;                                              // 0x0100 (size: 0x4)
    float _contaminationIncreaseRate;                                                 // 0x0104 (size: 0x4)
    float _contaminationDecreaseRate;                                                 // 0x0110 (size: 0x4)
    EPrisonerBodyConditionState _state;                                               // 0x011C (size: 0x1)

}; // Size: 0x128

class UPrisonerBodyCondition_InhalationPoisoning : public UPrisonerBodyCondition
{
    FRuntimeFloatCurve _severityVsInhalableSubstanceAmountRatio;                      // 0x00C0 (size: 0x88)
    float _inhalableSubstanceAmountAtRecoveryStart;                                   // 0x0148 (size: 0x4)
    EPrisonerBodyConditionState _state;                                               // 0x014C (size: 0x1)
    float _inhalableSubstanceAmount;                                                  // 0x0154 (size: 0x4)
    FRuntimeFloatCurve _inhalableSubstanceMaxAmountVsConstitutionRatio;               // 0x0158 (size: 0x88)
    float _baseInhalableSubstanceDiscardRate;                                         // 0x01E0 (size: 0x4)
    FPrisonerBodyBoneGroupsVsSeverity _affectedBodyBoneGroupsVsSeverity;              // 0x01E8 (size: 0x10)
    FPrisonerBodyMuscleGroupsVsSeverity _affectedBodyMuscleGroupsVsSeverity;          // 0x01F8 (size: 0x10)
    FPrisonerBodyOrganGroupsVsSeverity _affectedBodyOrganGroupsVsSeverity;            // 0x0208 (size: 0x10)

}; // Size: 0x228

class UPrisonerBodyCondition_Injury : public UPrisonerBodyCondition
{
}; // Size: 0xC0

class UPrisonerBodyCondition_KillBoxGasPoisoning : public UPrisonerBodyCondition
{
    float _maxSeverity;                                                               // 0x00C0 (size: 0x4)
    float _poisoningDuration;                                                         // 0x00C4 (size: 0x4)
    float _poisoningTriggerCooldown;                                                  // 0x00C8 (size: 0x4)
    float _poisoningTriggerTimer;                                                     // 0x00CC (size: 0x4)
    float _recoveryDuration;                                                          // 0x00D0 (size: 0x4)
    float _damagedEffectTriggerInterval;                                              // 0x00D4 (size: 0x4)
    float _damagedEffectDuration;                                                     // 0x00D8 (size: 0x4)
    float _damagedEffectIntensity;                                                    // 0x00DC (size: 0x4)
    EPrisonerBodyConditionState _state;                                               // 0x00E4 (size: 0x1)
    float _severityRatio;                                                             // 0x00EC (size: 0x4)
    float _severityRatioAtRecoveryStart;                                              // 0x00F0 (size: 0x4)
    float _drunkenness;                                                               // 0x00F4 (size: 0x4)

    void Client_TriggerDamagedEffect(float Duration, float Intensity);
}; // Size: 0xF8

class UPrisonerBodyCondition_Knockout : public UPrisonerBodyCondition_TimeDrivenSeverity
{
    FText _reason;                                                                    // 0x0158 (size: 0x18)

}; // Size: 0x170

class UPrisonerBodyCondition_NutrientDeficiency : public UPrisonerBodyCondition
{
    ENutrient _nutrient;                                                              // 0x00C0 (size: 0x1)
    FRuntimeFloatCurve _severityVsNutrientDeficiencyRatio;                            // 0x00C8 (size: 0x88)
    float _maxRatioOfAbsorbedNutrientCapacityToBeRecovered;                           // 0x0150 (size: 0x4)
    float _artificialAbsorbedNutrientAccumulationScale;                               // 0x0154 (size: 0x4)
    float _nutrientDeficiency;                                                        // 0x0158 (size: 0x4)
    float _nutrientDeficiencyToRecover;                                               // 0x015C (size: 0x4)
    float _artificialAbsorbedNutrient;                                                // 0x0160 (size: 0x4)

}; // Size: 0x170

class UPrisonerBodyCondition_Overburdened : public UPrisonerBodyCondition
{
    FRuntimeFloatCurve _severityVsWeightLoadRatio;                                    // 0x00C0 (size: 0x88)

}; // Size: 0x148

class UPrisonerBodyCondition_RadiationPresence : public UPrisonerBodyCondition
{
    float _radiationAmount;                                                           // 0x00C0 (size: 0x4)
    float _radiationMaxAmount;                                                        // 0x00C4 (size: 0x4)
    float _radiationAmountAtRecoveryStart;                                            // 0x00C8 (size: 0x4)
    float _baseRadiationDispersionRate;                                               // 0x00CC (size: 0x4)
    FPrisonerActionDifficultyCurve _radiationDispersionRatePerActionDifficulty;       // 0x00D0 (size: 0x18)
    float _radiationDispersionRateIncreaseWhileSwimming;                              // 0x00E8 (size: 0x4)
    TMap<class TSubclassOf<UForeignSubstance>, class FRuntimeFloatCurve> _effectiveRadiationAmountChangePerForeignSubstancePresence; // 0x00F0 (size: 0x50)
    float _radiationAmountDecreaseViaUrination;                                       // 0x0140 (size: 0x4)
    float _radiationIncreaseRateToInstantlyDie;                                       // 0x0144 (size: 0x4)
    EPrisonerBodyConditionState _state;                                               // 0x0148 (size: 0x1)

}; // Size: 0x160

class UPrisonerBodyCondition_Sepsis : public UPrisonerBodyConditionWithCauses
{
    float _maxSeverity;                                                               // 0x00D0 (size: 0x4)
    float _maxContamination;                                                          // 0x00D4 (size: 0x4)
    float _contamination;                                                             // 0x00D8 (size: 0x4)
    float _contaminationChangeRate;                                                   // 0x00DC (size: 0x4)
    float _contaminationAtRecoveryStart;                                              // 0x00E0 (size: 0x4)
    EPrisonerBodyConditionState _state;                                               // 0x00E4 (size: 0x1)

}; // Size: 0xF0

class UPrisonerBodyCondition_StaminaLow : public UPrisonerBodyCondition
{
    float _staminaRatioThreshold;                                                     // 0x00C0 (size: 0x4)
    float _maxSeverity;                                                               // 0x00C4 (size: 0x4)
    float _severityRaiseRate;                                                         // 0x00C8 (size: 0x4)
    float _severityFallRate;                                                          // 0x00CC (size: 0x4)
    float _severity;                                                                  // 0x00D0 (size: 0x4)
    bool _shouldRecoverWithDizziness;                                                 // 0x00D4 (size: 0x1)
    float _severityAtRecoveryStart;                                                   // 0x00D8 (size: 0x4)
    EPrisonerBodyConditionState _state;                                               // 0x00E0 (size: 0x1)
    TSubclassOf<class UPrisonerBodySymptom_Dizziness> _dizzinessSymptomClass;         // 0x00E8 (size: 0x8)
    class UPrisonerBodySymptomCause_Dizziness* _dizzinessSymptomCause;                // 0x00F0 (size: 0x8)
    TSubclassOf<class UNotificationDescription> _passOutNotification;                 // 0x00F8 (size: 0x8)

}; // Size: 0x100

class UPrisonerBodyCondition_StomachEmpty : public UPrisonerBodyCondition
{
    float _stomachEmptinessToExist;                                                   // 0x00C0 (size: 0x4)
    float _energyRatioToExist;                                                        // 0x00C4 (size: 0x4)
    TSubclassOf<class UPrisonerBodySymptom_StomachGrowling> _stomachGrowlingSymptomClass; // 0x00C8 (size: 0x8)
    class UPrisonerBodySymptomCause_StomachGrowling* _stomachGrowlingSymptomCause;    // 0x00D0 (size: 0x8)
    float _stomachGrowlingSymptomSoundInterval;                                       // 0x00D8 (size: 0x4)

}; // Size: 0xE0

class UPrisonerBodyCondition_StomachFull : public UPrisonerBodyCondition
{
    float _stomachFullnessToExist;                                                    // 0x00C0 (size: 0x4)
    float _stomachFullnessToDie;                                                      // 0x00C4 (size: 0x4)
    float _stomachFullnessToBeRecovered;                                              // 0x00C8 (size: 0x4)
    float _stomachFullnessAtWhichToAutoCancelConsumptionOnce;                         // 0x00CC (size: 0x4)
    float _stomachFullnessAtWhichToEnableAutoConsumptionCancelationAgain;             // 0x00D0 (size: 0x4)
    float _minMaxStaminaModifierForFatigueSymptom;                                    // 0x00D4 (size: 0x4)
    float _stomachFullnessAtWhichBurpingStarts;                                       // 0x00D8 (size: 0x4)
    float _burpingInterval;                                                           // 0x00DC (size: 0x4)
    TSubclassOf<class UPrisonerBodySymptom_StomachFullness> _stomachFullnessSymptomClass; // 0x00E0 (size: 0x8)
    class UPrisonerBodySymptomCause* _stomachFullnessSymptomCause;                    // 0x00E8 (size: 0x8)
    TSubclassOf<class UPrisonerBodySymptom_Fatigue> _fatigueSymptomClass;             // 0x00F0 (size: 0x8)
    class UPrisonerBodySymptomCause_Fatigue* _fatigueSymptomCause;                    // 0x00F8 (size: 0x8)
    TSubclassOf<class UPrisonerBodySymptom_Burping> _burpingSymptomClass;             // 0x0100 (size: 0x8)
    class UPrisonerBodySymptomCause_Burping* _burpingSymptomCause;                    // 0x0108 (size: 0x8)
    TSubclassOf<class UNotificationDescription> _stomachRuptureWarningNotificationClass; // 0x0110 (size: 0x8)
    TSubclassOf<class UNotificationDescription> _stomachRuptureNotificationClass;     // 0x0118 (size: 0x8)

}; // Size: 0x138

class UPrisonerBodyCondition_TearGasExposure : public UPrisonerBodyCondition
{
    FRuntimeFloatCurve _severityVsTime;                                               // 0x00C0 (size: 0x88)
    float _timeSinceExposure;                                                         // 0x0148 (size: 0x4)
    float _timeAtRecoveryStart;                                                       // 0x014C (size: 0x4)

}; // Size: 0x160

class UPrisonerBodyCondition_TimeDrivenSeverity : public UPrisonerBodyCondition
{
    FRuntimeFloatCurve _severityVsNormalizedElapsedTime;                              // 0x00C0 (size: 0x88)
    float _duration;                                                                  // 0x0148 (size: 0x4)
    bool _shouldBeRemovedWhenTimeElapses;                                             // 0x014C (size: 0x1)
    float _elapsedTime;                                                               // 0x0150 (size: 0x4)

}; // Size: 0x158

class UPrisonerBodyCondition_TrenchFoot : public UPrisonerBodyCondition_Injury
{
    FRuntimeFloatCurve _trenchnessIncreaseRateVsFeetWetness;                          // 0x00C0 (size: 0x88)
    FFloatInterval _trenchnessIncreaseRateMultiplierVsConstitution;                   // 0x0148 (size: 0x8)
    FRuntimeFloatCurve _trenchnessIncreaseRateMultiplierVsAirTemperature;             // 0x0150 (size: 0x88)
    FRuntimeFloatCurve _trenchnessDecreaseRateMultiplierVsAirTemperature;             // 0x01D8 (size: 0x88)
    FRuntimeFloatCurve _recoveryDurationMultiplierVsAirTemperature;                   // 0x0260 (size: 0x88)
    float _trenchnessFallRate;                                                        // 0x02E8 (size: 0x4)
    FRuntimeFloatCurve _severityVsTrenchness;                                         // 0x02F0 (size: 0x88)
    float _trenchness;                                                                // 0x0378 (size: 0x4)
    float _trenchnessTreated;                                                         // 0x037C (size: 0x4)
    float _trenchnessAtRecoveryStart;                                                 // 0x0380 (size: 0x4)
    FRuntimeFloatCurve _stabilizationDurationVsSeverity;                              // 0x0388 (size: 0x88)
    FRuntimeFloatCurve _recoveryDurationVsSeverity;                                   // 0x0410 (size: 0x88)
    class UAkAudioEvent* _painGruntAudioEvent;                                        // 0x0498 (size: 0x8)
    FRuntimeFloatCurve _painGruntIntervalVsSeverity;                                  // 0x04A0 (size: 0x88)
    TSubclassOf<class UPrisonerBodySymptom_Pain> _painSymptomClass;                   // 0x0530 (size: 0x8)
    class UPrisonerBodySymptomCause_Pain* _painSymptomCause;                          // 0x0538 (size: 0x8)
    FRuntimeFloatCurve _painSymptomOverallIntensityVsSeverity;                        // 0x0540 (size: 0x88)
    FRuntimeFloatCurve _painSymptomLimpingIntensityVsSeverity;                        // 0x05C8 (size: 0x88)
    FPrisonerMaxMovementPaceVsSeverity _painSymptomMaxMovementPaceVsSeverity;         // 0x0650 (size: 0x10)
    FRuntimeFloatCurve _painSymptomMovementSpeedModifierVsSeverity;                   // 0x0660 (size: 0x88)
    EPrisonerBodyConditionState _state;                                               // 0x06E8 (size: 0x1)
    float _timerElapsedTime;                                                          // 0x06F0 (size: 0x4)
    float _timerDuration;                                                             // 0x06F4 (size: 0x4)

}; // Size: 0x6F8

class UPrisonerBodyCondition_TutorialInjury : public UPrisonerBodyCondition_Injury
{
    FRuntimeFloatCurve _severityVsDamageRatio;                                        // 0x00C8 (size: 0x88)
    FRuntimeFloatCurve _stabilizationDurationVsSeverity;                              // 0x0150 (size: 0x88)
    FRuntimeFloatCurve _recoveryDurationVsSeverity;                                   // 0x01D8 (size: 0x88)
    FRuntimeFloatCurve _fakeBloodLossVsFakeDamageRatio;                               // 0x0260 (size: 0x88)
    TSubclassOf<class UPrisonerBodySymptom_Bleeding> _bleedingSymptomClass;           // 0x02E8 (size: 0x8)
    class UPrisonerBodySymptomCause_Bleeding* _bleedingSymptomCause;                  // 0x02F0 (size: 0x8)
    float _fakeDamage;                                                                // 0x02F8 (size: 0x4)
    float _fakeDamageAtRecoveryStart;                                                 // 0x02FC (size: 0x4)
    float _maxFakeDamage;                                                             // 0x0300 (size: 0x4)
    FBandages _bandages;                                                              // 0x0308 (size: 0x18)
    EPrisonerBodyMuscleGroup _muscleGroup;                                            // 0x0320 (size: 0x1)
    EPrisonerBodyConditionState _state;                                               // 0x0321 (size: 0x1)
    float _timerElapsedTime;                                                          // 0x032C (size: 0x4)
    float _timerDuration;                                                             // 0x0330 (size: 0x4)

}; // Size: 0x338

class UPrisonerBodyEffect : public UObject
{
    int32 _id;                                                                        // 0x0028 (size: 0x4)
    float _tickInterval;                                                              // 0x0034 (size: 0x4)

}; // Size: 0x40

class UPrisonerBodyEffectUIData : public UObject
{
    TSubclassOf<class UPrisonerBodyEffect> _bodyEffectClass;                          // 0x0030 (size: 0x8)
    FName _associatedSurvivalTipName;                                                 // 0x0038 (size: 0x8)

}; // Size: 0x40

class UPrisonerBodyEffectUIData_AntibioticsReaction : public UPrisonerBodyEffectUIData
{
    FText _name;                                                                      // 0x0048 (size: 0x18)

}; // Size: 0x60

class UPrisonerBodyEffectUIData_ExhaustionChange : public UPrisonerBodyEffectUIData
{
    FText _name;                                                                      // 0x0048 (size: 0x18)
    FText _suffix;                                                                    // 0x0060 (size: 0x18)

}; // Size: 0x78

class UPrisonerBodyEffect_AntibioticsReaction : public UPrisonerBodyEffect
{
    TSubclassOf<class UPrisonerBodyEffectUIData_AntibioticsReaction> _uiDataClass;    // 0x0040 (size: 0x8)
    FRuntimeFloatCurve _immuneSystemEfficiencyModifierVsAntibioticsAmountRatio;       // 0x0048 (size: 0x88)

}; // Size: 0xD0

class UPrisonerBodyEffect_Coma : public UPrisonerBodyEffect
{
}; // Size: 0x40

class UPrisonerBodyEffect_CoolingSwingItem : public UPrisonerBodyEffect
{
}; // Size: 0x48

class UPrisonerBodyEffect_Death : public UPrisonerBodyEffect
{
}; // Size: 0x40

class UPrisonerBodyEffect_ExhaustionChange : public UPrisonerBodyEffect
{
    TSubclassOf<class UPrisonerBodyEffectUIData_ExhaustionChange> _uiDataClass;       // 0x0070 (size: 0x8)

}; // Size: 0x88

class UPrisonerBodyEffect_InfectionController : public UPrisonerBodyEffect
{
    FRuntimeFloatCurve _passiveContaminationIncreaseRateVsContaminationRatio;         // 0x0040 (size: 0x88)
    float _contaminationSuppressionRate;                                              // 0x00C8 (size: 0x4)

}; // Size: 0xD0

class UPrisonerBodyEffect_Limping : public UPrisonerBodyEffect
{
    float _duration;                                                                  // 0x0040 (size: 0x4)
    float _elapsedTime;                                                               // 0x0044 (size: 0x4)

}; // Size: 0x48

class UPrisonerBodyEffect_NotificationCooldown : public UPrisonerBodyEffect
{
    TSubclassOf<class UNotificationDescription> _notificationClass;                   // 0x0040 (size: 0x8)

}; // Size: 0x50

class UPrisonerBodyInfectionStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UPrisonerBodyMuscleGroupToBurnInjuryClassMappings : public UDataAsset
{
    TSubclassOf<class UPrisonerBodyCondition_BurnInjury> _burnInjuryClasses;          // 0x0030 (size: 0xC8)

}; // Size: 0xF8

class UPrisonerBodyMuscleGroupToInfectionClassMappings : public UDataAsset
{
    TSubclassOf<class UPrisonerBodyCondition_Infection> _infectionClasses;            // 0x0030 (size: 0xC8)

}; // Size: 0xF8

class UPrisonerBodySimulationComponent : public UActorComponent
{
    class UPrisonerBodySimulationData* _data;                                         // 0x0260 (size: 0x8)
    TArray<class UPrisonerBodyEffect*> _bodyEffects;                                  // 0x0520 (size: 0x10)
    class UMetabolism* _metabolism;                                                   // 0x06A8 (size: 0x8)
    uint64 _repState1;                                                                // 0x06D0 (size: 0x8)
    uint64 _repState2;                                                                // 0x06D8 (size: 0x8)
    uint64 _repState3;                                                                // 0x06E0 (size: 0x8)
    uint64 _repState4;                                                                // 0x06E8 (size: 0x8)
    uint64 _repState5;                                                                // 0x06F0 (size: 0x8)
    uint8 _repState6;                                                                 // 0x06F8 (size: 0x1)
    uint64 _repState7;                                                                // 0x0700 (size: 0x8)
    uint64 _repState8;                                                                // 0x0708 (size: 0x8)
    TArray<class UPrisonerBodyEffect*> _repBodyEffects;                               // 0x0710 (size: 0x10)

    void OnRep_State8();
    void OnRep_State7();
    void OnRep_State6();
    void OnRep_State5();
    void OnRep_State4();
    void OnRep_State3();
    void OnRep_State2();
    void OnRep_State1();
    void OnRep_BodyEffects();
}; // Size: 0x728

class UPrisonerBodySimulationData : public UDataAsset
{
    FRuntimeFloatCurve MaxStrengthGainRateVsStrength;                                 // 0x0030 (size: 0x88)
    float StrengthLossPerMissingProtein;                                              // 0x00B8 (size: 0x4)
    float MaxConstitutionGainRate;                                                    // 0x00BC (size: 0x4)
    float MaxConstitutionLossRate;                                                    // 0x00C0 (size: 0x4)
    float DexterityChangePerStorageFatEnergy;                                         // 0x00C4 (size: 0x4)
    float IntelligenceExperiencePercentagePerAttribute;                               // 0x00C8 (size: 0x4)
    float IntelligenceLossOnSuicide;                                                  // 0x00CC (size: 0x4)
    float MaxBleedingSeverity;                                                        // 0x00D0 (size: 0x4)
    FFloatInterval BleedOutDurationVsBleedingSeverity;                                // 0x00D4 (size: 0x8)
    FFloatInterval BleedOutDurationMultiplierVsConstitution;                          // 0x00DC (size: 0x8)
    float MaxBurnSeverity;                                                            // 0x00E4 (size: 0x4)
    FRuntimeFloatCurve DamageRatioVsBloodLossRatio;                                   // 0x00E8 (size: 0x88)
    FFloatInterval HealingSpeedMultiplierVsConstitution;                              // 0x0170 (size: 0x8)
    FRuntimeFloatCurve HealingSpeedMultiplierVsActionDifficultyRatio;                 // 0x0178 (size: 0x88)
    FFloatInterval ImmuneSystemEfficiencyMultiplierVsConstitution;                    // 0x0200 (size: 0x8)
    FRuntimeFloatCurve ImmuneSystemEfficiencyMultiplierVsActionDifficultyRatio;       // 0x0208 (size: 0x88)
    FPrisonerActionDifficultyCurve StaminaChangeRateVsActionDifficulty;               // 0x0290 (size: 0x18)
    float ExhaustionIncrement;                                                        // 0x02A8 (size: 0x4)
    float ExhaustionFallRate;                                                         // 0x02AC (size: 0x4)
    float ExhaustionFallRateMultiplierWhenLyingOnFurniture;                           // 0x02B0 (size: 0x4)
    float ExhaustionBonusModifierPerConsumedItem;                                     // 0x02B4 (size: 0x4)
    float ExhaustionBonusMaxModifier;                                                 // 0x02B8 (size: 0x4)
    float MaxStaminaReductionIncreaseMultiplier;                                      // 0x02BC (size: 0x4)
    FPrisonerActionDifficultyCurve HeartRateRatioVsActionDifficulty;                  // 0x02C0 (size: 0x18)
    float HeartRateRaiseInterpSpeed;                                                  // 0x02D8 (size: 0x4)
    float HeartRateFallRate;                                                          // 0x02DC (size: 0x4)
    float BreathingRateInterpSpeed;                                                   // 0x02E0 (size: 0x4)
    FPrisonerActionDifficultyCurve OxygenSaturationRaiseRateVsActionDifficulty;       // 0x02E4 (size: 0x18)
    FPrisonerActionDifficultyCurve OxygenSaturationFallRateVsActionDifficulty;        // 0x02FC (size: 0x18)
    float PreferredEnvironmentTemperatureWhenNaked;                                   // 0x0314 (size: 0x4)
    FRuntimeFloatCurve PhoenixTearsDiscardRateVsAmount;                               // 0x0318 (size: 0x88)
    FRuntimeFloatCurve HealingSpeedMultiplierVsPhoenixTearsAmount;                    // 0x03A0 (size: 0x88)
    FRuntimeFloatCurve ImmuneSystemEfficiencyMultiplierVsPhoenixTearsAmount;          // 0x0428 (size: 0x88)
    TSubclassOf<class UMetabolism> MetabolismClass;                                   // 0x04B0 (size: 0x8)
    float MetabolismUpdateInterval;                                                   // 0x04B8 (size: 0x4)
    FRuntimeFloatCurve CaloriesConsumptionMultiplierVsHeartRateRatio;                 // 0x04C0 (size: 0x88)
    FRuntimeFloatCurve WaterConsumptionMultiplierVsHeartRateRatio;                    // 0x0548 (size: 0x88)
    FFloatInterval NutrientsConsumptionFactorVsConstitutionRatio;                     // 0x05D0 (size: 0x8)
    float StomachFullnessToBeAbleToVomit;                                             // 0x05D8 (size: 0x4)
    float BladderFullnessToBeAbleToUrinate;                                           // 0x05DC (size: 0x4)
    float ColonFullnessToBeAbleToDefecate;                                            // 0x05E0 (size: 0x4)
    float ColonWaterContentRatioToHaveDiarrhea;                                       // 0x05E4 (size: 0x4)
    FFloatInterval ConsumptionDurationMultiplierVsEatingSpeed;                        // 0x05E8 (size: 0x8)
    TMap<FGameplayTag, float> ConsumptionDurations;                                   // 0x05F0 (size: 0x50)
    FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRanges DigestionHandlersPerConsumableHealthRatios; // 0x0640 (size: 0x10)
    FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRanges DigestionHandlersPerConsumableFatsContentRatios; // 0x0650 (size: 0x10)
    TMap<class ENutrient, class FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRanges> DigestionHandlersPerConsumableNutrientContentRatios; // 0x0660 (size: 0x50)
    FPrisonerBodySimulationData_Effects Effects;                                      // 0x06B0 (size: 0x58)

}; // Size: 0x708

class UPrisonerBodySimulationSave : public UObject
{
    bool IsDead;                                                                      // 0x0028 (size: 0x1)
    double BaseStrength;                                                              // 0x0030 (size: 0x8)
    double BaseConstitution;                                                          // 0x0038 (size: 0x8)
    double BaseDexterity;                                                             // 0x0040 (size: 0x8)
    double BaseIntelligence;                                                          // 0x0048 (size: 0x8)
    float InitialAge;                                                                 // 0x0050 (size: 0x4)
    double LifeTimeSinceInitialization;                                               // 0x0058 (size: 0x8)
    double LifeTimeSinceSpawn;                                                        // 0x0060 (size: 0x8)
    int64 TimeOfDeath;                                                                // 0x0068 (size: 0x8)
    int64 TimeOfRevive;                                                               // 0x0070 (size: 0x8)
    int64 TimeOfComa;                                                                 // 0x0078 (size: 0x8)
    int64 TimeOfComaWakeUp;                                                           // 0x0080 (size: 0x8)
    float Stamina;                                                                    // 0x0088 (size: 0x4)
    float AccumulatedFatigue;                                                         // 0x008C (size: 0x4)
    float HeartRate;                                                                  // 0x0090 (size: 0x4)
    float BreathingRate;                                                              // 0x0094 (size: 0x4)
    float OxygenSaturation;                                                           // 0x0098 (size: 0x4)
    float BodyTemperature;                                                            // 0x009C (size: 0x4)
    float PhoenixTearsAmount;                                                         // 0x00A0 (size: 0x4)
    TArray<FPrisonerBodyEffectSave> BodyEffects;                                      // 0x00A8 (size: 0x10)
    TArray<uint8> Metabolism;                                                         // 0x00B8 (size: 0x10)

}; // Size: 0xC8

class UPrisonerBodySimulationStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UPrisonerBodySimulationUIData : public UObject
{
}; // Size: 0x58

class UPrisonerBodySimulationUIDataImpl : public UPrisonerBodySimulationUIData
{
    TArray<class UPrisonerBodyEffectUIData*> BodyEffectsUIData;                       // 0x00F8 (size: 0x10)
    class UPrisonerMetabolismUIData* MetabolismUIData;                                // 0x0108 (size: 0x8)

}; // Size: 0x110

class UPrisonerBodySimulationUIStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UPrisonerBodySymptom : public UPrisonerBodyConditionOrSymptom
{
    class UPrisonerBodySymptomNotifier* _notifier;                                    // 0x00B0 (size: 0x8)

}; // Size: 0xB8

class UPrisonerBodySymptomCause : public UObject
{
}; // Size: 0x30

class UPrisonerBodySymptomCauseUIData : public UObject
{
}; // Size: 0x30

class UPrisonerBodySymptomCauseUIData_Fatigue : public UPrisonerBodySymptomCauseUIData
{
}; // Size: 0x38

class UPrisonerBodySymptomCauseUIData_Leukopenia : public UPrisonerBodySymptomCauseUIData
{
}; // Size: 0x38

class UPrisonerBodySymptomCauseUIData_Weakness : public UPrisonerBodySymptomCauseUIData
{
}; // Size: 0x40

class UPrisonerBodySymptomCause_Blackout : public UPrisonerBodySymptomCause
{
}; // Size: 0x38

class UPrisonerBodySymptomCause_Bleeding : public UPrisonerBodySymptomCause
{
}; // Size: 0x38

class UPrisonerBodySymptomCause_BloodshotEyes : public UPrisonerBodySymptomCause
{
}; // Size: 0x38

class UPrisonerBodySymptomCause_BlurredVision : public UPrisonerBodySymptomCause
{
}; // Size: 0x40

class UPrisonerBodySymptomCause_Burping : public UPrisonerBodySymptomCause_PeriodicSound
{
}; // Size: 0x38

class UPrisonerBodySymptomCause_Diarrhea : public UPrisonerBodySymptomCause_PeriodicAffect
{
}; // Size: 0x48

class UPrisonerBodySymptomCause_Disorientation : public UPrisonerBodySymptomCause
{
}; // Size: 0x38

class UPrisonerBodySymptomCause_Dizziness : public UPrisonerBodySymptomCause_PeriodicAffect
{
}; // Size: 0x48

class UPrisonerBodySymptomCause_DoubleVision : public UPrisonerBodySymptomCause
{
}; // Size: 0x38

class UPrisonerBodySymptomCause_EyePressure : public UPrisonerBodySymptomCause
{
}; // Size: 0x38

class UPrisonerBodySymptomCause_Farting : public UPrisonerBodySymptomCause_PeriodicSound
{
}; // Size: 0x38

class UPrisonerBodySymptomCause_Fatigue : public UPrisonerBodySymptomCause
{
}; // Size: 0x38

class UPrisonerBodySymptomCause_Hallucinations : public UPrisonerBodySymptomCause
{
}; // Size: 0x38

class UPrisonerBodySymptomCause_HeightenedSenses : public UPrisonerBodySymptomCause
{
}; // Size: 0x38

class UPrisonerBodySymptomCause_Leukopenia : public UPrisonerBodySymptomCause
{
}; // Size: 0x38

class UPrisonerBodySymptomCause_Nausea : public UPrisonerBodySymptomCause
{
}; // Size: 0x38

class UPrisonerBodySymptomCause_Pain : public UPrisonerBodySymptomCause
{
}; // Size: 0x40

class UPrisonerBodySymptomCause_PeriodicAffect : public UPrisonerBodySymptomCause
{
}; // Size: 0x48

class UPrisonerBodySymptomCause_PeriodicSound : public UPrisonerBodySymptomCause
{
}; // Size: 0x38

class UPrisonerBodySymptomCause_PhoenixTearsPresence : public UPrisonerBodySymptomCause
{
}; // Size: 0x30

class UPrisonerBodySymptomCause_StomachGrowling : public UPrisonerBodySymptomCause_PeriodicSound
{
}; // Size: 0x38

class UPrisonerBodySymptomCause_Unconsciousness : public UPrisonerBodySymptomCause
{
}; // Size: 0x30

class UPrisonerBodySymptomCause_Vomiting : public UPrisonerBodySymptomCause_PeriodicAffect
{
}; // Size: 0x48

class UPrisonerBodySymptomCause_Weakness : public UPrisonerBodySymptomCause
{
}; // Size: 0x40

class UPrisonerBodySymptomNotifier : public UObject
{
}; // Size: 0x30

class UPrisonerBodySymptomUIData : public UPrisonerBodyConditionOrSymptomUIData
{
    bool _shouldCreateTooltipElementForSeverity;                                      // 0x0098 (size: 0x1)
    TArray<class UPrisonerBodySymptomCauseUIData*> _causes;                           // 0x00A0 (size: 0x10)

}; // Size: 0xB0

class UPrisonerBodySymptomUIData_AttributeChange : public UPrisonerBodySymptomUIData
{
}; // Size: 0xC0

class UPrisonerBodySymptomUIData_Bleeding : public UPrisonerBodySymptomUIData
{
}; // Size: 0xB8

class UPrisonerBodySymptomUIData_BlurredVision : public UPrisonerBodySymptomUIData
{
}; // Size: 0xB0

class UPrisonerBodySymptomUIData_BoostOfEnergy : public UPrisonerBodySymptomUIData
{
}; // Size: 0xD8

class UPrisonerBodySymptomUIData_BreathingObstructed : public UPrisonerBodySymptomUIData
{
}; // Size: 0xB0

class UPrisonerBodySymptomUIData_Fatigue : public UPrisonerBodySymptomUIData
{
}; // Size: 0xB8

class UPrisonerBodySymptomUIData_FeelingCold : public UPrisonerBodySymptomUIData
{
}; // Size: 0xB0

class UPrisonerBodySymptomUIData_FeelingHot : public UPrisonerBodySymptomUIData
{
}; // Size: 0xB0

class UPrisonerBodySymptomUIData_Leukopenia : public UPrisonerBodySymptomUIData
{
}; // Size: 0xB8

class UPrisonerBodySymptomUIData_Nausea : public UPrisonerBodySymptomUIData
{
}; // Size: 0xB8

class UPrisonerBodySymptomUIData_Pain : public UPrisonerBodySymptomUIData
{
}; // Size: 0xC8

class UPrisonerBodySymptomUIData_PhoenixTearsPresence : public UPrisonerBodySymptomUIData
{
}; // Size: 0xB8

class UPrisonerBodySymptomUIData_StomachFullness : public UPrisonerBodySymptomUIData
{
}; // Size: 0xB8

class UPrisonerBodySymptomUIData_Weakness : public UPrisonerBodySymptomUIData
{
}; // Size: 0xC0

class UPrisonerBodySymptomUIData_WetFeet : public UPrisonerBodySymptomUIData
{
}; // Size: 0xB8

class UPrisonerBodySymptom_AttributeChange : public UPrisonerBodySymptom
{
    TSet<TSubclassOf<UPrisonerForeignSubstance_AttributeModifier>> _attributeModifierForeignSubstanceClasses; // 0x00B8 (size: 0x50)

}; // Size: 0x108

class UPrisonerBodySymptom_Blackout : public UPrisonerBodySymptom
{
}; // Size: 0xB8

class UPrisonerBodySymptom_Bleeding : public UPrisonerBodySymptom
{
    FRuntimeFloatCurve _vignetteEffectIntensityVsSeverityRatio;                       // 0x00B8 (size: 0x88)
    FRuntimeFloatCurve _vignetteEffectPulsationFrequencyVsSeverityRatio;              // 0x0140 (size: 0x88)
    FRuntimeFloatCurve _vignetteEffectSeverityRatioMultiplierVsHealthRatio;           // 0x01C8 (size: 0x88)
    float _vignetteEffectIntensityInterpSpeed;                                        // 0x0250 (size: 0x4)
    float _vignetteEffectFrequencyInterpSpeed;                                        // 0x0258 (size: 0x4)

}; // Size: 0x260

class UPrisonerBodySymptom_BloodshotEyes : public UPrisonerBodySymptom
{
    float _maxSeverity;                                                               // 0x00B8 (size: 0x4)

}; // Size: 0xC0

class UPrisonerBodySymptom_BlurredVision : public UPrisonerBodySymptom
{
    float _repOffset;                                                                 // 0x00C4 (size: 0x4)
    float _repFalloff;                                                                // 0x00C8 (size: 0x4)

}; // Size: 0xD0

class UPrisonerBodySymptom_BoostOfEnergy : public UPrisonerBodySymptom
{
    FRuntimeFloatCurve _severityVsEnergyBoosterSubstanceAmountRatio;                  // 0x00B8 (size: 0x88)
    TSubclassOf<class UForeignSubstance> _energyBoosterSubstanceClass;                // 0x0140 (size: 0x8)

}; // Size: 0x148

class UPrisonerBodySymptom_BreathingObstructed : public UPrisonerBodySymptom
{
    float _maxSeverity;                                                               // 0x00B8 (size: 0x4)

}; // Size: 0xC0

class UPrisonerBodySymptom_Burping : public UPrisonerBodySymptom_PeriodicSound
{
}; // Size: 0xD8

class UPrisonerBodySymptom_Diarrhea : public UPrisonerBodySymptom_PeriodicAffect
{
}; // Size: 0xE8

class UPrisonerBodySymptom_Disorientation : public UPrisonerBodySymptom
{
    float _maxSeverity;                                                               // 0x00B8 (size: 0x4)

}; // Size: 0xC0

class UPrisonerBodySymptom_Dizziness : public UPrisonerBodySymptom_PeriodicAffect
{
    FRuntimeFloatCurve _blackoutIntensityVsElapsedTime;                               // 0x00E8 (size: 0x88)
    float _blackoutFadeOutDuration;                                                   // 0x0170 (size: 0x4)
    FRuntimeFloatCurve _colorDesaturationIntensityVsElapsedTime;                      // 0x0178 (size: 0x88)
    float _colorDesaturationFadeOutDuration;                                          // 0x0200 (size: 0x4)
    FRuntimeFloatCurve _blurredVisionIntensityVsElapsedTime;                          // 0x0208 (size: 0x88)
    float _blurredVisionFadeOutDuration;                                              // 0x0290 (size: 0x4)
    float _unconsciousnessDelay;                                                      // 0x0294 (size: 0x4)

}; // Size: 0x298

class UPrisonerBodySymptom_DoubleVision : public UPrisonerBodySymptom
{
    float _maxSeverity;                                                               // 0x00B8 (size: 0x4)

}; // Size: 0xC0

class UPrisonerBodySymptom_EyePressure : public UPrisonerBodySymptom
{
    float _maxSeverity;                                                               // 0x00B8 (size: 0x4)

}; // Size: 0xC0

class UPrisonerBodySymptom_Farting : public UPrisonerBodySymptom_PeriodicSound
{
}; // Size: 0xD8

class UPrisonerBodySymptom_Fatigue : public UPrisonerBodySymptom
{
    float _maxSeverity;                                                               // 0x00B8 (size: 0x4)
    float _maxSeverityMaxStaminaModifier;                                             // 0x00BC (size: 0x4)

}; // Size: 0xC0

class UPrisonerBodySymptom_FeelingCold : public UPrisonerBodySymptom
{
    float _maxSeverity;                                                               // 0x00B8 (size: 0x4)
    float _temperatureDeltaAtMaxSeverity;                                             // 0x00BC (size: 0x4)

}; // Size: 0xC0

class UPrisonerBodySymptom_FeelingHot : public UPrisonerBodySymptom
{
    float _maxSeverity;                                                               // 0x00B8 (size: 0x4)
    float _temperatureDeltaAtMaxSeverity;                                             // 0x00BC (size: 0x4)

}; // Size: 0xC0

class UPrisonerBodySymptom_Hallucinations : public UPrisonerBodySymptom
{
    TArray<FPrisonerHallucinationSymptomSeverityLevelParams> _severityLevelParams;    // 0x00B8 (size: 0x10)
    TSubclassOf<class UPrisonerHallucinationEpisode> _hallucinationEpisodeClass;      // 0x00C8 (size: 0x8)
    TArray<FPrisonerHallucinationIllusionInfo> _hallucinationIllusionInfosSP;         // 0x00D0 (size: 0x10)
    TArray<FPrisonerHallucinationIllusionInfo> _hallucinationIllusionInfosMP;         // 0x00E0 (size: 0x10)
    FRuntimeFloatCurve _effectsIntensityVsElapsedTimePeriod;                          // 0x0100 (size: 0x88)
    float _effectsBlendInDuration;                                                    // 0x0188 (size: 0x4)
    float _effectsFrequencyMultiplier;                                                // 0x018C (size: 0x4)
    FRuntimeFloatCurve _effectsIntensityScaleVsSeverityRatio;                         // 0x0190 (size: 0x88)
    float _visualEffectsIntensityScale;                                               // 0x0218 (size: 0x4)
    float _soundEffectsIntensityScale;                                                // 0x021C (size: 0x4)

}; // Size: 0x228

class UPrisonerBodySymptom_HeightenedSenses : public UPrisonerBodySymptom
{
    float _maxSeverity;                                                               // 0x00B8 (size: 0x4)

}; // Size: 0xC0

class UPrisonerBodySymptom_Hunger : public UPrisonerBodySymptom
{
    FRuntimeFloatCurve _severityVsEnergyRatio;                                        // 0x00B8 (size: 0x88)

}; // Size: 0x140

class UPrisonerBodySymptom_Leukopenia : public UPrisonerBodySymptom
{
    float _maxSeverity;                                                               // 0x00B8 (size: 0x4)
    float _maxSeverityImmuneSystemEfficiencyModifier;                                 // 0x00BC (size: 0x4)

}; // Size: 0xC0

class UPrisonerBodySymptom_Nausea : public UPrisonerBodySymptom
{
    float _maxSeverity;                                                               // 0x00B8 (size: 0x4)

}; // Size: 0xC0

class UPrisonerBodySymptom_NeedToDefecate : public UPrisonerBodySymptom
{
    FRuntimeFloatCurve _severityVsColonFullness;                                      // 0x00B8 (size: 0x88)

}; // Size: 0x140

class UPrisonerBodySymptom_NeedToUrinate : public UPrisonerBodySymptom
{
    FRuntimeFloatCurve _severityVsBladderFullness;                                    // 0x00B8 (size: 0x88)

}; // Size: 0x140

class UPrisonerBodySymptom_Pain : public UPrisonerBodySymptom
{
    float _maxSeverity;                                                               // 0x00B8 (size: 0x4)
    FFloatInterval _painSuppressorsRatioForPainToBeSuppressedVsConstitution;          // 0x00BC (size: 0x8)

}; // Size: 0xC8

class UPrisonerBodySymptom_PeriodicAffect : public UPrisonerBodySymptom
{
    FFloatInterval _affectIntervalDeviationRatio;                                     // 0x00B8 (size: 0x8)
    FFloatInterval _affectDurationDeviationRatio;                                     // 0x00C0 (size: 0x8)

    void Client_PendAffect(float Duration, float Intensity);
}; // Size: 0xE8

class UPrisonerBodySymptom_PeriodicSound : public UPrisonerBodySymptom
{
    class UAkAudioEvent* _sound;                                                      // 0x00B8 (size: 0x8)
    FFloatInterval _soundInitialDelay;                                                // 0x00C0 (size: 0x8)
    FFloatInterval _soundIntervalDeviationRatio;                                      // 0x00C8 (size: 0x8)

    void NetMulticast_PlaySound();
}; // Size: 0xD8

class UPrisonerBodySymptom_PhoenixTearsPresence : public UPrisonerBodySymptom
{
}; // Size: 0xB8

class UPrisonerBodySymptom_StomachFullness : public UPrisonerBodySymptom
{
    FRuntimeFloatCurve _severityVsStomachFullness;                                    // 0x00B8 (size: 0x88)
    FRuntimeFloatCurve _eatingSpeedModifierVsSeverity;                                // 0x0140 (size: 0x88)

}; // Size: 0x1C8

class UPrisonerBodySymptom_StomachGrowling : public UPrisonerBodySymptom_PeriodicSound
{
}; // Size: 0xD8

class UPrisonerBodySymptom_Thirst : public UPrisonerBodySymptom
{
    FRuntimeFloatCurve _severityVsHydrationRatio;                                     // 0x00B8 (size: 0x88)

}; // Size: 0x140

class UPrisonerBodySymptom_Unconsciousness : public UPrisonerBodySymptom
{
}; // Size: 0xB8

class UPrisonerBodySymptom_Vomiting : public UPrisonerBodySymptom_PeriodicAffect
{
    float _minimalSubstanceVolumeInStomachRatioToVomit;                               // 0x00E8 (size: 0x4)
    FFloatInterval _retryVomitingInterval;                                            // 0x00EC (size: 0x8)

}; // Size: 0x100

class UPrisonerBodySymptom_Weakness : public UPrisonerBodySymptom
{
    float _maxSeverity;                                                               // 0x00B8 (size: 0x4)
    float _maxSeverityPerformanceScoreModifier;                                       // 0x00BC (size: 0x4)

}; // Size: 0xC0

class UPrisonerBodySymptom_WetFeet : public UPrisonerBodySymptom
{
    float _feetWetnessToExist;                                                        // 0x00B8 (size: 0x4)
    FRuntimeFloatCurve _severityVsFeetWetness;                                        // 0x00C0 (size: 0x88)

}; // Size: 0x148

class UPrisonerBuryComponent : public UCharacterActionComponent
{
    EBuryState _buryState;                                                            // 0x00C0 (size: 0x1)

    void OnRep_BuryState();
}; // Size: 0xC8

class UPrisonerCharacterMesh : public UCharacterMesh
{
    EBodySlot BodySlotMapping;                                                        // 0x0060 (size: 0x1)
    FPrisonerCharacterMeshDecayMultiplierData DecayMultiplierData;                    // 0x0064 (size: 0x28)
    float WarmthFactor;                                                               // 0x008C (size: 0x4)

}; // Size: 0x90

class UPrisonerCommonData : public UDataAsset
{
    class UPrisonerMovementCommonData* MovementData;                                  // 0x0030 (size: 0x8)
    TSubclassOf<class UAnimInstance> FemaleAnimationInstance;                         // 0x0038 (size: 0x8)
    TSubclassOf<class UAnimInstance> MaleAnimationInstance;                           // 0x0040 (size: 0x8)
    TSubclassOf<class UAnimInstance> ServerAnimationInstance;                         // 0x0048 (size: 0x8)
    FFloatInterval ExhaustionRange;                                                   // 0x0050 (size: 0x8)
    float ExhaustionDamageMultiplier;                                                 // 0x0058 (size: 0x4)
    float SkinHardness;                                                               // 0x005C (size: 0x4)
    float ClothesBaseTemperatureResistanceThreshold;                                  // 0x0060 (size: 0x4)
    float LastDamageDealerResetTime;                                                  // 0x0064 (size: 0x4)
    FFloatInterval StrengthMeleeDamageMultiplierRange;                                // 0x0068 (size: 0x8)
    float ExhaustionMeleeDamageMultiplier;                                            // 0x0070 (size: 0x4)
    TMap<class FGameplayTag, class EClothesPart> ClothesPartUsedByMeleeAttackCapsuleAttachment; // 0x0078 (size: 0x50)
    TMap<class FGameplayTag, class FName> AttackerBoneByMeleeAttackCapsuleAttachment; // 0x00C8 (size: 0x50)
    float UnarmedAttackBaseEnergy;                                                    // 0x0118 (size: 0x4)
    FFloatInterval StrengthThrowingDamageMultiplierRange;                             // 0x011C (size: 0x8)
    float ExhaustionThrowingDamageMultiplier;                                         // 0x0124 (size: 0x4)
    float NoSkillThrowingDamageMultiplier;                                            // 0x0128 (size: 0x4)
    float BasicSkillThrowingDamageMultiplier;                                         // 0x012C (size: 0x4)
    float MediumSkillThrowingDamageMultiplier;                                        // 0x0130 (size: 0x4)
    float AdvancedSkillThrowingDamageMultiplier;                                      // 0x0134 (size: 0x4)
    float AboveAdvancedSkillThrowingDamageMultiplier;                                 // 0x0138 (size: 0x4)
    FFloatInterval ThrowEnergyRange;                                                  // 0x013C (size: 0x8)
    TSubclassOf<class APrisonerCorpse> CorpseClass;                                   // 0x0148 (size: 0x8)
    TSubclassOf<class AGib> HeadExplosionGibClass;                                    // 0x0150 (size: 0x8)
    class UParticleSystem* HeadExplosionParticles;                                    // 0x0158 (size: 0x8)
    TArray<class UStaticMesh*> HeadExplosionGibMeshes;                                // 0x0160 (size: 0x10)
    class UChoppingRecipeDataAsset* CorpseChoppingRecipeDataAsset;                    // 0x0170 (size: 0x8)
    class UChoppingRecipeDataAsset* CorpseHeadlessChoppingRecipeDataAsset;            // 0x0178 (size: 0x8)
    class UAkAudioEvent* CorpseStartSearchAudioEvent;                                 // 0x0180 (size: 0x8)
    class UAkAudioEvent* CorpseStopSearchAudioEvent;                                  // 0x0188 (size: 0x8)
    float MaxActorEyesOffsetWhenLeaning;                                              // 0x0190 (size: 0x4)
    FTransform DefaultMeshTransform;                                                  // 0x01A0 (size: 0x30)
    int32 NumberOfCrouchStages;                                                       // 0x01D0 (size: 0x4)
    float CrouchStagesInterpSpeed;                                                    // 0x01D4 (size: 0x4)
    class UCurveFloat* CrouchViewsAdditionalGlobalOffsetZVsCrouchStage;               // 0x01D8 (size: 0x8)
    float ProneEyeHeight;                                                             // 0x01E0 (size: 0x4)
    float ProneEyeForwardOffset;                                                      // 0x01E4 (size: 0x4)
    float SittingOnGroundEyeHeight;                                                   // 0x01E8 (size: 0x4)
    float LyingOnGroundEyeHeight;                                                     // 0x01EC (size: 0x4)
    float RestingOnGroundBackwardOffset;                                              // 0x01F0 (size: 0x4)
    class UPrisonerMovementSettings* MovementSettings;                                // 0x01F8 (size: 0x8)
    float DefaultViewBlendDuration;                                                   // 0x0200 (size: 0x4)
    float MinEyesRotationYaw;                                                         // 0x0204 (size: 0x4)
    float MaxEyesRotationYaw;                                                         // 0x0208 (size: 0x4)
    float MinEyesRotationPitch;                                                       // 0x020C (size: 0x4)
    float MaxEyesRotationPitch;                                                       // 0x0210 (size: 0x4)
    class UCurveFloat* MinEyesRotationPitchCurve;                                     // 0x0218 (size: 0x8)
    class UCurveFloat* MaxEyesRotationPitchCurve;                                     // 0x0220 (size: 0x8)
    float EyesRotationSpeed;                                                          // 0x0228 (size: 0x4)
    bool DebugEyesRotation;                                                           // 0x022C (size: 0x1)
    float ForcedBoneTransformRefreshTime;                                             // 0x0230 (size: 0x4)
    float ForcedBoneTransformRefreshPeriod;                                           // 0x0234 (size: 0x4)
    class UAkAudioEvent* ComaAudioEvent;                                              // 0x0238 (size: 0x8)
    class UAkAudioEvent* ComaScreamAudioEvent;                                        // 0x0240 (size: 0x8)
    class UAkAudioEvent* DeathAudioEvent;                                             // 0x0248 (size: 0x8)
    class UAkAudioEvent* DeathScreamAudioEvent;                                       // 0x0250 (size: 0x8)
    class UParticleSystem* ColdBreathParticles;                                       // 0x0258 (size: 0x8)
    FName ColdBreathParticlesAttachPointName;                                         // 0x0260 (size: 0x8)
    class UMaterialInstance* StandardUndershirtMaterial;                              // 0x0268 (size: 0x8)
    class UMaterialInstance* DeluxeUndershirtMaterial;                                // 0x0270 (size: 0x8)
    class UAkAudioEvent* JumpAudioEvent;                                              // 0x0278 (size: 0x8)
    float LandingImpactHorizontalSpeedWeight;                                         // 0x0280 (size: 0x4)
    float LandingImpactVerticalSpeedWeight;                                           // 0x0284 (size: 0x4)
    class UCurveFloat* LandingStaminaDrainCurve;                                      // 0x0288 (size: 0x8)
    class UCurveFloat* ForceUnmountDamageCurve;                                       // 0x0290 (size: 0x8)
    class ULandingEffects* LandingEffects;                                            // 0x0298 (size: 0x8)
    float DisplaceFromPrisonerSpeed;                                                  // 0x02A0 (size: 0x4)
    class UParticleSystem* WaterParticlesWhenIdle;                                    // 0x02A8 (size: 0x8)
    class UParticleSystem* WaterParticlesWhenIdleInOcean;                             // 0x02B0 (size: 0x8)
    class UParticleSystem* WaterParticlesWhenMoving;                                  // 0x02B8 (size: 0x8)
    class UParticleSystem* WaterParticlesWhenMovingInOcean;                           // 0x02C0 (size: 0x8)
    class UParticleSystem* WaterParticlesWhenDiving;                                  // 0x02C8 (size: 0x8)
    FName WaterParticlesWhenDivingAttachPointName;                                    // 0x02D0 (size: 0x8)
    class UParticleSystem* WaterContactParticles;                                     // 0x02D8 (size: 0x8)
    FName WaterContactParticlesAttachPointName;                                       // 0x02E0 (size: 0x8)
    float MinVelocityZToSpawnWaterContactParticles;                                   // 0x02E8 (size: 0x4)
    class UCurveFloat* BuoyancyMultiplierVsGearWeightLimitDeviation;                  // 0x02F0 (size: 0x8)
    class UAkAudioEvent* StartedDivingAudioEvent;                                     // 0x02F8 (size: 0x8)
    class UAkAudioEvent* StoppedDivingAudioEvent;                                     // 0x0300 (size: 0x8)
    class UAkAudioEvent* EndDivingOnPlayAudioEvent;                                   // 0x0308 (size: 0x8)
    float MaxHeadWaterWeight;                                                         // 0x0310 (size: 0x4)
    float MaxUpperBodyWaterWeight;                                                    // 0x0314 (size: 0x4)
    float MaxLowerBodyWaterWeight;                                                    // 0x0318 (size: 0x4)
    float MaxFeetWaterWeight;                                                         // 0x031C (size: 0x4)
    float OutwardsWaterPropagationFactor;                                             // 0x0320 (size: 0x4)
    float InwardsWaterPropagationRate;                                                // 0x0324 (size: 0x4)
    float OutwardsWaterPropagationRate;                                               // 0x0328 (size: 0x4)
    class UCurveFloat* GettingDryRateVsSpeed;                                         // 0x0330 (size: 0x8)
    float MinDepthToBeInvisibleToAI;                                                  // 0x0338 (size: 0x4)
    class UParticleSystem* SmallBleedingEffect;                                       // 0x0340 (size: 0x8)
    class UParticleSystem* LargeBleedingEffect;                                       // 0x0348 (size: 0x8)
    class UParticleSystem* UrineParticles;                                            // 0x0350 (size: 0x8)
    FName UrineParticlesAttachPointName;                                              // 0x0358 (size: 0x8)
    FName UrineParticlesAttachPointSmallestName;                                      // 0x0360 (size: 0x8)
    FName UrineParticlesAttachPointBiggestName;                                       // 0x0368 (size: 0x8)
    FName UrineParticlesAttachPointFemaleName;                                        // 0x0370 (size: 0x8)
    FName UrineParticlesAttachPointMaleName;                                          // 0x0378 (size: 0x8)
    float DistanceBetweenFoliageQueriesClient;                                        // 0x0380 (size: 0x4)
    float DetectNearbyFoliageRadiusClient;                                            // 0x0384 (size: 0x4)
    float DistanceBetweenFoliageQueriesServer;                                        // 0x0388 (size: 0x4)
    float DetectNearbyFoliageRadiusServer;                                            // 0x038C (size: 0x4)
    float ClearFoliageCoveragePreventionTime;                                         // 0x0390 (size: 0x4)
    float MinSpeedToTriggerMovingThroughFoliageEffects;                               // 0x0394 (size: 0x4)
    float MinAngularSpeedToTriggerMovingThroughFoliageEffects;                        // 0x0398 (size: 0x4)
    float ShouldAutomaticallyBeSeenInFoliageByAIDistance;                             // 0x039C (size: 0x4)
    class UAkAudioEvent* OpenInventoryAudioEvent;                                     // 0x03A0 (size: 0x8)
    class UAkAudioEvent* CloseInventoryAudioEvent;                                    // 0x03A8 (size: 0x8)
    class UAkAudioEvent* OpenOceanAudioEvent;                                         // 0x03B0 (size: 0x8)
    float CharacterDetectionRadiusForIngameMusic;                                     // 0x03B8 (size: 0x4)
    float BulletFlybyDangerCooldown;                                                  // 0x03BC (size: 0x4)
    float HeadExplodeDamageThreshold;                                                 // 0x03C0 (size: 0x4)
    float MeleeDangerCooldown;                                                        // 0x03C4 (size: 0x4)
    float MeleeDangerRadius;                                                          // 0x03C8 (size: 0x4)
    float MeleeDangerAngle;                                                           // 0x03CC (size: 0x4)
    float PostReviveStateDuration;                                                    // 0x03D0 (size: 0x4)
    FGameplayTag HitReactTypeWhenStanding;                                            // 0x03D4 (size: 0x8)
    FGameplayTag HitReactTypeWhenStandingInCombatMode;                                // 0x03DC (size: 0x8)
    FGameplayTag HitReactTypeWhenStandingInCombatModeAndHoldingBlock;                 // 0x03E4 (size: 0x8)
    FGameplayTag HitReactTypeWhenCrouching;                                           // 0x03EC (size: 0x8)
    FGameplayTag HitReactTypeWhenProne;                                               // 0x03F4 (size: 0x8)
    FGameplayTag HitReactTypeWhenCaptured;                                            // 0x03FC (size: 0x8)
    TMap<class EPrisonerAerialPose, class UHitReactLandingParams*> HitReactLandingParamsMap; // 0x0408 (size: 0x50)
    FGameplayTag MeleeAttackCapsulesAttachmentForItemInLHand;                         // 0x0458 (size: 0x8)
    FGameplayTag MeleeAttackCapsulesAttachmentForItemInRHand;                         // 0x0460 (size: 0x8)
    FPrisonerMeleeAttackTypes MeleeAttackTypes;                                       // 0x0468 (size: 0x88)
    float MeleeTargetMaxDistance;                                                     // 0x04F0 (size: 0x4)
    float MeleeTargetMaxHeightDifference;                                             // 0x04F4 (size: 0x4)
    class UCurveFloat* MeleeTargetMaxConeHalfAngleVsDistanceToTarget;                 // 0x04F8 (size: 0x8)
    float TimeSpanAfterWhichMeleeAttacksBecomeInitial;                                // 0x0500 (size: 0x4)
    TMap<EDamageMagnitudeType, float> MeleeHitRagdollImpulseByDamageMagnitudeType;    // 0x0508 (size: 0x50)
    float DefaultMeleeHitRagdollImpulse;                                              // 0x0558 (size: 0x4)
    float ThrowModeActivationDelay;                                                   // 0x055C (size: 0x4)
    FName ThrowLaunchLocationSocketName;                                              // 0x0560 (size: 0x8)
    class UCurveFloat* ThrowingPathBrightnessFromTimeCurve;                           // 0x0568 (size: 0x8)
    float IslandBoundsCheckInterval;                                                  // 0x0570 (size: 0x4)
    class UPhysicalSurfacesData* PhysicalSurfacesData;                                // 0x0578 (size: 0x8)
    TSubclassOf<class AWristwatch> DeluxeWristwatchClass;                             // 0x0580 (size: 0x8)
    TSubclassOf<class UWeaponScopeWidget> ScopeWidget;                                // 0x0588 (size: 0x8)
    TSubclassOf<class APlaceableActorBase> PlaceableActorItemsClass;                  // 0x0590 (size: 0x8)
    TSubclassOf<class APlaceableActorBase> PlaceableActorFortificationsClass;         // 0x0598 (size: 0x8)
    TSubclassOf<class APlaceableActorBase> PlaceableActorBaseBuildingClass;           // 0x05A0 (size: 0x8)
    TSubclassOf<class APlaceableActorBase> PlaceableActorBaseUpgradeClass;            // 0x05A8 (size: 0x8)
    TSubclassOf<class APlaceableActorBase> PlaceableActorGardenClass;                 // 0x05B0 (size: 0x8)
    TSubclassOf<class APlaceableActorBase> PlaceableActorModularBaseBuildingClass;    // 0x05B8 (size: 0x8)
    int32 MaxPossiblePlacedBlueprints;                                                // 0x05C0 (size: 0x4)
    float OpenOceanRange;                                                             // 0x05C4 (size: 0x4)
    FGameplayTag FeetSlot;                                                            // 0x05C8 (size: 0x8)
    FGameplayTag HairSlot;                                                            // 0x05D0 (size: 0x8)
    FGameplayTag HeadSlot;                                                            // 0x05D8 (size: 0x8)
    FGameplayTag NeckSlot;                                                            // 0x05E0 (size: 0x8)
    FGameplayTag FacialHairSlot;                                                      // 0x05E8 (size: 0x8)
    FGameplayTag PenisSlot;                                                           // 0x05F0 (size: 0x8)
    FGameplayTag ChipSlot;                                                            // 0x05F8 (size: 0x8)
    FGameplayTag LEyeSlot;                                                            // 0x0600 (size: 0x8)
    FGameplayTag REyeSlot;                                                            // 0x0608 (size: 0x8)
    FGameplayTag EyewearSlot;                                                         // 0x0610 (size: 0x8)
    FGameplayTag HandsSlot;                                                           // 0x0618 (size: 0x8)
    FGameplayTag MaskSlot;                                                            // 0x0620 (size: 0x8)
    FGameplayTag CensorshipActiveTag;                                                 // 0x0628 (size: 0x8)
    FGameplayTag PrisonerMountedTag;                                                  // 0x0630 (size: 0x8)
    FGameplayTag HeadHiddenTag;                                                       // 0x0638 (size: 0x8)
    FGameplayTag HeadExplodedTag;                                                     // 0x0640 (size: 0x8)
    FGameplayTag ShowGenitalsOverrideTag;                                             // 0x0648 (size: 0x8)
    FGameplayTag HideWristwatchTag;                                                   // 0x0650 (size: 0x8)
    TSubclassOf<class UCharacterMesh> BodyCharacterMeshClass;                         // 0x0658 (size: 0x8)
    TSubclassOf<class UCharacterMesh> ClothesCharacterMeshClass;                      // 0x0660 (size: 0x8)
    TSubclassOf<class UCharacterMesh> CensorshipCharacterMeshClass;                   // 0x0668 (size: 0x8)
    TArray<class TSubclassOf<UCharacterMesh>> ShoesCharacterMeshClasses;              // 0x0670 (size: 0x10)
    TArray<class TSubclassOf<UCharacterMesh>> FaceCoveringCharacterMeshClasses;       // 0x0680 (size: 0x10)
    FGameplayTagContainer GearSlotsCausingUpperBodyNoise;                             // 0x0690 (size: 0x20)
    TMap<EPrisonerBorderCrossingPenalty, float> LeavingTheIslandPenaltyTimes;         // 0x06B0 (size: 0x50)
    float GameEventOutOfBoundsDamage;                                                 // 0x0700 (size: 0x4)
    class UMaterialInstance* ItemPlacingMaterialAllowed;                              // 0x0708 (size: 0x8)
    class UMaterialInstance* ItemPlacingMaterialDisallowed;                           // 0x0710 (size: 0x8)
    class UMaterialInstance* VehicleServiceMaterial;                                  // 0x0718 (size: 0x8)
    float IkInterpSpeed;                                                              // 0x0720 (size: 0x4)
    class UMaterialParameterCollection* CommonParameterCollection;                    // 0x0728 (size: 0x8)
    FName WeaponSocketName;                                                           // 0x0730 (size: 0x8)
    FName WeaponHolsterSocketName;                                                    // 0x0738 (size: 0x8)
    class UAnimMontage* SwapWeapons;                                                  // 0x0740 (size: 0x8)
    class UAnimMontage* SwapItemsThrowingItemToWeapon;                                // 0x0748 (size: 0x8)
    class UAnimMontage* SwapItemsThrowingItemToNotWeapon;                             // 0x0750 (size: 0x8)
    class UAnimMontage* SwapItemsWeaponToThrowingItem;                                // 0x0758 (size: 0x8)
    class UAnimMontage* SwapItemsNotWeaponToNotWeapon;                                // 0x0760 (size: 0x8)
    class UAnimMontage* SwapItemsWeaponToWeapon;                                      // 0x0768 (size: 0x8)
    class UAnimMontage* SwapItemsNotWeaponToWeapon;                                   // 0x0770 (size: 0x8)
    class UAnimMontage* SwapItemsWeaponToNotWeapon;                                   // 0x0778 (size: 0x8)
    class UAnimMontage* EquipRifleStanding;                                           // 0x0780 (size: 0x8)
    class UAnimMontage* UnequipRifleStanding;                                         // 0x0788 (size: 0x8)
    class UAnimMontage* EquipHandgunStanding;                                         // 0x0790 (size: 0x8)
    class UAnimMontage* UnequipHadgunStanding;                                        // 0x0798 (size: 0x8)
    class UAnimMontage* UrinateMaleMontage;                                           // 0x07A0 (size: 0x8)
    class UAnimMontage* UrinateFemaleMontage;                                         // 0x07A8 (size: 0x8)
    class UAnimMontage* UrinateMaleForcedMontage;                                     // 0x07B0 (size: 0x8)
    class UAnimMontage* UrinateFemaleForcedMontage;                                   // 0x07B8 (size: 0x8)
    class UAnimMontage* DefecateMontage;                                              // 0x07C0 (size: 0x8)
    class UAnimMontage* DefecateForcedMontage;                                        // 0x07C8 (size: 0x8)
    class UAnimMontage* VomitMontage;                                                 // 0x07D0 (size: 0x8)
    class UAnimMontage* VomitForcedMontage;                                           // 0x07D8 (size: 0x8)
    class UAnimMontage* SearchObject;                                                 // 0x07E0 (size: 0x8)
    class UAnimMontage* SearchObjectWhileItemInHands;                                 // 0x07E8 (size: 0x8)
    class UAnimMontage* SearchObjectWhileWeaponInHands;                               // 0x07F0 (size: 0x8)
    class UAnimMontage* SearchObjectWhenSwimming;                                     // 0x07F8 (size: 0x8)
    class UAnimMontage* SearchPrisoner;                                               // 0x0800 (size: 0x8)
    class UAnimMontage* PatchWoundsStanding;                                          // 0x0808 (size: 0x8)
    class UAnimMontage* PatchWoundsCrouching;                                         // 0x0810 (size: 0x8)
    class UAnimMontage* PatchWoundsProne;                                             // 0x0818 (size: 0x8)
    class UAnimMontage* PatchWoundsStandingEnd;                                       // 0x0820 (size: 0x8)
    class UAnimMontage* PatchWoundsCrouchingEnd;                                      // 0x0828 (size: 0x8)
    class UAnimMontage* PatchWoundsProneEnd;                                          // 0x0830 (size: 0x8)
    class UAnimMontage* EatGeneric;                                                   // 0x0838 (size: 0x8)
    class UAnimMontage* EatCan;                                                       // 0x0840 (size: 0x8)
    class UAnimMontage* DrinkFromBottleStanding;                                      // 0x0848 (size: 0x8)
    class UAnimMontage* DrinkFromBottleCrouching;                                     // 0x0850 (size: 0x8)
    class UAnimMontage* DrinkInteraction;                                             // 0x0858 (size: 0x8)
    class UAnimMontage* DefaultLongThrowMontage;                                      // 0x0860 (size: 0x8)
    class UAnimMontage* DefaultLongThrowLoopMontage;                                  // 0x0868 (size: 0x8)
    class UAnimMontage* DefaultShortThrowMontage;                                     // 0x0870 (size: 0x8)
    class UAnimMontage* DefaultThrowbackGrenadeMontage;                               // 0x0878 (size: 0x8)
    class UAnimMontage* ChopTreeStanding;                                             // 0x0880 (size: 0x8)
    class UAnimMontage* ChopTreeStandingEnd;                                          // 0x0888 (size: 0x8)
    class UAnimMontage* ChopLogStanding;                                              // 0x0890 (size: 0x8)
    class UAnimMontage* ChopLogStandingEnd;                                           // 0x0898 (size: 0x8)
    class UAnimMontage* BreakStone;                                                   // 0x08A0 (size: 0x8)
    class UAnimMontage* BreakStoneEnd;                                                // 0x08A8 (size: 0x8)
    class UAnimMontage* CraftStanding;                                                // 0x08B0 (size: 0x8)
    class UAnimMontage* CraftCrouching;                                               // 0x08B8 (size: 0x8)
    class UAnimMontage* CraftProne;                                                   // 0x08C0 (size: 0x8)
    class UAnimMontage* UncraftStanding;                                              // 0x08C8 (size: 0x8)
    class UAnimMontage* UncraftCrouching;                                             // 0x08D0 (size: 0x8)
    class UAnimMontage* UncraftProne;                                                 // 0x08D8 (size: 0x8)
    class UAnimMontage* CheckTime;                                                    // 0x08E0 (size: 0x8)
    class UAnimMontage* CheckTimeFemale;                                              // 0x08E8 (size: 0x8)
    class UAnimMontage* CheckTimeWhileItemInHands;                                    // 0x08F0 (size: 0x8)
    class UAnimMontage* CheckTimeWhileItemInHandsFemale;                              // 0x08F8 (size: 0x8)
    class UAnimMontage* CheckTimeWhileWeaponInHands;                                  // 0x0900 (size: 0x8)
    class UAnimMontage* CheckTimeWhileWeaponInHandsFemale;                            // 0x0908 (size: 0x8)
    class UAnimMontage* CheckTemperature;                                             // 0x0910 (size: 0x8)
    class UAnimMontage* ForceUnlockStanding;                                          // 0x0918 (size: 0x8)
    class UAnimMontage* ForceUnlockStandingEnd;                                       // 0x0920 (size: 0x8)
    class UAnimMontage* ForceUnlockStandingStop;                                      // 0x0928 (size: 0x8)
    class UAnimMontage* ManualUnlockStanding;                                         // 0x0930 (size: 0x8)
    class UAnimMontage* ManualUnlockStandingEnd;                                      // 0x0938 (size: 0x8)
    class UAnimMontage* ManualUnlockStandingStop;                                     // 0x0940 (size: 0x8)
    class UAnimMontage* SpillMontage;                                                 // 0x0948 (size: 0x8)
    class UAnimMontage* StompOutFireMontage;                                          // 0x0950 (size: 0x8)
    class UAnimMontage* BlowAirIntoFireMontage;                                       // 0x0958 (size: 0x8)
    class UAnimMontage* BlowAirIntoLowFireMontage;                                    // 0x0960 (size: 0x8)
    class UAnimMontage* GestureShowFinger;                                            // 0x0968 (size: 0x8)
    class UAnimMontage* GestureStandSurrender;                                        // 0x0970 (size: 0x8)
    class UAnimMontage* GestureWaveHi;                                                // 0x0978 (size: 0x8)
    class UAnimMontage* GestureYouAreDead;                                            // 0x0980 (size: 0x8)
    class UAnimMontage* GestureFY;                                                    // 0x0988 (size: 0x8)
    class UAnimMontage* GesturePoint;                                                 // 0x0990 (size: 0x8)
    class UAnimMontage* GestureHeart;                                                 // 0x0998 (size: 0x8)
    class UAnimMontage* GestureBallpalm;                                              // 0x09A0 (size: 0x8)
    class UAnimMontage* GestureFacepalm;                                              // 0x09A8 (size: 0x8)
    class UAnimMontage* GestureFingerGun;                                             // 0x09B0 (size: 0x8)
    class UAnimMontage* GestureLaughing;                                              // 0x09B8 (size: 0x8)
    class UAnimMontage* GestureSmellWave;                                             // 0x09C0 (size: 0x8)
    class UAnimMontage* GestureSquat;                                                 // 0x09C8 (size: 0x8)
    class UAnimMontage* GestureCharge;                                                // 0x09D0 (size: 0x8)
    class UAnimMontage* GestureChargeCombat;                                          // 0x09D8 (size: 0x8)
    class UAnimMontage* GestureFreeze;                                                // 0x09E0 (size: 0x8)
    class UAnimMontage* GestureFreezeCombat;                                          // 0x09E8 (size: 0x8)
    class UAnimMontage* GestureGetDown;                                               // 0x09F0 (size: 0x8)
    class UAnimMontage* GestureGetDownCombat;                                         // 0x09F8 (size: 0x8)
    class UAnimMontage* GestureGetUp;                                                 // 0x0A00 (size: 0x8)
    class UAnimMontage* GestureGetUpCombat;                                           // 0x0A08 (size: 0x8)
    class UAnimMontage* GestureHalt;                                                  // 0x0A10 (size: 0x8)
    class UAnimMontage* GestureHaltCombat;                                            // 0x0A18 (size: 0x8)
    class UAnimMontage* GestureHurryUp;                                               // 0x0A20 (size: 0x8)
    class UAnimMontage* GestureHurryUpCombat;                                         // 0x0A28 (size: 0x8)
    class UAnimMontage* GesturePointMe;                                               // 0x0A30 (size: 0x8)
    class UAnimMontage* GesturePointMeCombat;                                         // 0x0A38 (size: 0x8)
    class UAnimMontage* GesturePointYou;                                              // 0x0A40 (size: 0x8)
    class UAnimMontage* GesturePointYouCombat;                                        // 0x0A48 (size: 0x8)
    class UAnimMontage* GestureRally;                                                 // 0x0A50 (size: 0x8)
    class UAnimMontage* GestureRallyCombat;                                           // 0x0A58 (size: 0x8)
    class UAnimMontage* GestureThumbsUp;                                              // 0x0A60 (size: 0x8)
    class UAnimMontage* GestureThumbsUpCombat;                                        // 0x0A68 (size: 0x8)
    class UAnimMontage* GestureThumbsDown;                                            // 0x0A70 (size: 0x8)
    class UAnimMontage* GestureThumbsDownCombat;                                      // 0x0A78 (size: 0x8)
    class UAnimMontage* GestureUnderstandNo;                                          // 0x0A80 (size: 0x8)
    class UAnimMontage* GestureUnderstandNoCombat;                                    // 0x0A88 (size: 0x8)
    class UAnimMontage* GestureUnderstandYes;                                         // 0x0A90 (size: 0x8)
    class UAnimMontage* GestureUnderstandYesCombat;                                   // 0x0A98 (size: 0x8)
    class UAnimMontage* CommitSuicideStanding;                                        // 0x0AA0 (size: 0x8)
    class UAnimMontage* CommitSuicideCrouching;                                       // 0x0AA8 (size: 0x8)
    class UAnimMontage* CommitSuicideRareStanding;                                    // 0x0AB0 (size: 0x8)
    class UAnimMontage* LockpickRegular;                                              // 0x0AB8 (size: 0x8)
    class UAnimMontage* WhistleMontageMale;                                           // 0x0AC0 (size: 0x8)
    class UAnimMontage* WhistleMontageFemale;                                         // 0x0AC8 (size: 0x8)
    class UAnimMontage* TuneBowMontage;                                               // 0x0AD0 (size: 0x8)
    class UAnimMontage* RepairVehicleMontage;                                         // 0x0AD8 (size: 0x8)
    class UAnimMontage* WashClothMontage;                                             // 0x0AE0 (size: 0x8)
    class UAnimMontage* BuryStandingMontage;                                          // 0x0AE8 (size: 0x8)
    class UAnimMontage* BuryRestStandingMontage;                                      // 0x0AF0 (size: 0x8)
    class UAnimMontage* BuryResumeStandingMontage;                                    // 0x0AF8 (size: 0x8)
    class UAnimMontage* BuryCrouchingMontage;                                         // 0x0B00 (size: 0x8)
    class UAnimMontage* BuryRestCrouchingMontage;                                     // 0x0B08 (size: 0x8)
    class UAnimMontage* SitOnGroundStandingStartMontage;                              // 0x0B10 (size: 0x8)
    class UAnimMontage* SitOnGroundStandingEndMontage;                                // 0x0B18 (size: 0x8)
    class UAnimMontage* SitOnGroundCrouchingStartMontage;                             // 0x0B20 (size: 0x8)
    class UAnimMontage* SitOnGroundCrouchingEndMontage;                               // 0x0B28 (size: 0x8)
    class UAnimMontage* LayOnGroundStandingStartMontage;                              // 0x0B30 (size: 0x8)
    class UAnimMontage* LayOnGroundStandingEndMontage;                                // 0x0B38 (size: 0x8)
    class UAnimMontage* LayOnGroundCrouchingStartMontage;                             // 0x0B40 (size: 0x8)
    class UAnimMontage* LayOnGroundCrouchingEndMontage;                               // 0x0B48 (size: 0x8)
    class UAnimSequenceBase* SittingOnGroundAnimation;                                // 0x0B50 (size: 0x8)
    class UAnimSequenceBase* LyingOnGroundAnimation;                                  // 0x0B58 (size: 0x8)
    class UAnimMontage* LightFlareMontage;                                            // 0x0B60 (size: 0x8)
    class UAnimMontage* ArmTrapMontage;                                               // 0x0B68 (size: 0x8)
    class UAnimMontage* FishingEnterMontage;                                          // 0x0B70 (size: 0x8)
    class UAnimMontage* FishingLeaveMontage;                                          // 0x0B78 (size: 0x8)
    class UAnimMontage* FishingCastMontage;                                           // 0x0B80 (size: 0x8)
    class UAnimMontage* FishingLongCastEndMontage;                                    // 0x0B88 (size: 0x8)
    class UAnimMontage* FishingShortCastEndMontage;                                   // 0x0B90 (size: 0x8)
    class UAnimMontage* FishingPullStartMontage;                                      // 0x0B98 (size: 0x8)
    class UAnimMontage* FishingPullEndMontage;                                        // 0x0BA0 (size: 0x8)
    class UAnimMontage* FishingFishCaughtMontage;                                     // 0x0BA8 (size: 0x8)
    class UAnimMontage* FishingKeepFishMontage;                                       // 0x0BB0 (size: 0x8)
    class UAnimMontage* FishingDiscardFishMontage;                                    // 0x0BB8 (size: 0x8)
    class UAnimMontage* FishingWireBreakMontage;                                      // 0x0BC0 (size: 0x8)
    class UAnimMontage* DanceSwagMontageMale;                                         // 0x0BC8 (size: 0x8)
    class UAnimMontage* DanceSlinkyMontageMale;                                       // 0x0BD0 (size: 0x8)
    class UAnimMontage* DanceJungleStepMontageMale;                                   // 0x0BD8 (size: 0x8)
    class UAnimMontage* DanceMoonslideMontageMale;                                    // 0x0BE0 (size: 0x8)
    class UAnimMontage* DanceFlossMontageMale;                                        // 0x0BE8 (size: 0x8)
    class UAnimMontage* DanceOrangeJusticeMontageMale;                                // 0x0BF0 (size: 0x8)
    class UAnimMontage* DanceShowtimeMontageMale;                                     // 0x0BF8 (size: 0x8)
    class UAnimMontage* DanceScrubMontageMale;                                        // 0x0C00 (size: 0x8)
    class UAnimMontage* DanceTheCarltonMontageMale;                                   // 0x0C08 (size: 0x8)
    class UAnimMontage* DanceGangnamStyleMontageMale;                                 // 0x0C10 (size: 0x8)
    class UAnimMontage* DanceTechnoVikingMontageMale;                                 // 0x0C18 (size: 0x8)
    class UAnimMontage* DanceOhMamaMontageMale;                                       // 0x0C20 (size: 0x8)
    class UAnimMontage* DanceLoserMontageMale;                                        // 0x0C28 (size: 0x8)
    class UAnimMontage* DanceSeductionMontageMale;                                    // 0x0C30 (size: 0x8)
    class UAnimMontage* DanceTemptationMontageMale;                                   // 0x0C38 (size: 0x8)
    class UAnimMontage* DanceVogueMontageMale;                                        // 0x0C40 (size: 0x8)
    class UAnimMontage* DanceTangoMontageMale;                                        // 0x0C48 (size: 0x8)
    class UAnimMontage* DanceDiscoSpinMontageMale;                                    // 0x0C50 (size: 0x8)
    class UAnimMontage* DanceJaggerMontageMale;                                       // 0x0C58 (size: 0x8)
    class UAnimMontage* DanceSlayinAliveMontageMale;                                  // 0x0C60 (size: 0x8)
    class UAnimMontage* DancePuppetDanceMontageMale;                                  // 0x0C68 (size: 0x8)
    class UAnimMontage* DanceGunsBlazingMontageMale;                                  // 0x0C70 (size: 0x8)
    class UAnimMontage* DanceStepUpMontageMale;                                       // 0x0C78 (size: 0x8)
    class UAnimMontage* DancePartyAnimalMontageMale;                                  // 0x0C80 (size: 0x8)
    class UAnimMontage* DanceHardbassMontageMale;                                     // 0x0C88 (size: 0x8)
    class UAnimMontage* DanceKazachokMontageMale;                                     // 0x0C90 (size: 0x8)
    class UAnimMontage* DancePaddleDanceMontageMale;                                  // 0x0C98 (size: 0x8)
    class UAnimMontage* DanceMoonwalkMontageMale;                                     // 0x0CA0 (size: 0x8)
    class UAnimMontage* DanceSneakyMontageMale;                                       // 0x0CA8 (size: 0x8)
    class UAnimMontage* DanceDeathDropMontageMale;                                    // 0x0CB0 (size: 0x8)
    class UAnimMontage* DanceFelineMontageMale;                                       // 0x0CB8 (size: 0x8)
    class UAnimMontage* DanceGoddessMontageMale;                                      // 0x0CC0 (size: 0x8)
    class UAnimMontage* DanceSultanaMontageMale;                                      // 0x0CC8 (size: 0x8)
    class UAnimMontage* DanceSerpentsCharmMontageMale;                                // 0x0CD0 (size: 0x8)
    class UAnimMontage* DanceBootyliciousMontageMale;                                 // 0x0CD8 (size: 0x8)
    class UAnimMontage* DanceBubbleBounceMontageMale;                                 // 0x0CE0 (size: 0x8)
    class UAnimMontage* DanceSwagMontageFemale;                                       // 0x0CE8 (size: 0x8)
    class UAnimMontage* DanceSlinkyMontageFemale;                                     // 0x0CF0 (size: 0x8)
    class UAnimMontage* DanceJungleStepMontageFemale;                                 // 0x0CF8 (size: 0x8)
    class UAnimMontage* DanceMoonslideMontageFemale;                                  // 0x0D00 (size: 0x8)
    class UAnimMontage* DanceFlossMontageFemale;                                      // 0x0D08 (size: 0x8)
    class UAnimMontage* DanceOrangeJusticeMontageFemale;                              // 0x0D10 (size: 0x8)
    class UAnimMontage* DanceShowtimeMontageFemale;                                   // 0x0D18 (size: 0x8)
    class UAnimMontage* DanceScrubMontageFemale;                                      // 0x0D20 (size: 0x8)
    class UAnimMontage* DanceTheCarltonMontageFemale;                                 // 0x0D28 (size: 0x8)
    class UAnimMontage* DanceGangnamStyleMontageFemale;                               // 0x0D30 (size: 0x8)
    class UAnimMontage* DanceTechnoVikingMontageFemale;                               // 0x0D38 (size: 0x8)
    class UAnimMontage* DanceOhMamaMontageFemale;                                     // 0x0D40 (size: 0x8)
    class UAnimMontage* DanceLoserMontageFemale;                                      // 0x0D48 (size: 0x8)
    class UAnimMontage* DanceSeductionMontageFemale;                                  // 0x0D50 (size: 0x8)
    class UAnimMontage* DanceTemptationMontageFemale;                                 // 0x0D58 (size: 0x8)
    class UAnimMontage* DanceVogueMontageFemale;                                      // 0x0D60 (size: 0x8)
    class UAnimMontage* DanceTangoMontageFemale;                                      // 0x0D68 (size: 0x8)
    class UAnimMontage* DanceDiscoSpinMontageFemale;                                  // 0x0D70 (size: 0x8)
    class UAnimMontage* DanceJaggerMontageFemale;                                     // 0x0D78 (size: 0x8)
    class UAnimMontage* DanceSlayinAliveMontageFemale;                                // 0x0D80 (size: 0x8)
    class UAnimMontage* DancePuppetDanceMontageFemale;                                // 0x0D88 (size: 0x8)
    class UAnimMontage* DanceGunsBlazingMontageFemale;                                // 0x0D90 (size: 0x8)
    class UAnimMontage* DanceStepUpMontageFemale;                                     // 0x0D98 (size: 0x8)
    class UAnimMontage* DancePartyAnimalMontageFemale;                                // 0x0DA0 (size: 0x8)
    class UAnimMontage* DanceHardbassMontageFemale;                                   // 0x0DA8 (size: 0x8)
    class UAnimMontage* DanceKazachokMontageFemale;                                   // 0x0DB0 (size: 0x8)
    class UAnimMontage* DancePaddleDanceMontageFemale;                                // 0x0DB8 (size: 0x8)
    class UAnimMontage* DanceMoonwalkMontageFemale;                                   // 0x0DC0 (size: 0x8)
    class UAnimMontage* DanceSneakyMontageFemale;                                     // 0x0DC8 (size: 0x8)
    class UAnimMontage* DanceDeathDropMontageFemale;                                  // 0x0DD0 (size: 0x8)
    class UAnimMontage* DanceFelineMontageFemale;                                     // 0x0DD8 (size: 0x8)
    class UAnimMontage* DanceGoddessMontageFemale;                                    // 0x0DE0 (size: 0x8)
    class UAnimMontage* DanceSultanaMontageFemale;                                    // 0x0DE8 (size: 0x8)
    class UAnimMontage* DanceSerpentsCharmMontageFemale;                              // 0x0DF0 (size: 0x8)
    class UAnimMontage* DanceBootyliciousMontageFemale;                               // 0x0DF8 (size: 0x8)
    class UAnimMontage* DanceBubbleBounceMontageFemale;                               // 0x0E00 (size: 0x8)
    class UAnimMontage* InjectSelfMontage;                                            // 0x0E08 (size: 0x8)
    class UAnimMontage* InjectOtherMontage;                                           // 0x0E10 (size: 0x8)
    class UAnimMontage* HalloweenGesture1Montage;                                     // 0x0E18 (size: 0x8)
    class UAnimMontage* HalloweenGesture2Montage;                                     // 0x0E20 (size: 0x8)
    class UAnimMontage* HalloweenGesture3Montage;                                     // 0x0E28 (size: 0x8)
    class UAnimMontage* HalloweenGesture4Montage;                                     // 0x0E30 (size: 0x8)
    class UAnimMontage* RemoveWeedMontage;                                            // 0x0E38 (size: 0x8)
    class UAnimMontage* RemoveWeedWithHoeMontage;                                     // 0x0E40 (size: 0x8)
    class UAnimMontage* ApplyPesticideMontage;                                        // 0x0E48 (size: 0x8)
    class UAnimMontage* AddFertilizerMontage;                                         // 0x0E50 (size: 0x8)
    class UAnimMontage* PlantSeedMontage;                                             // 0x0E58 (size: 0x8)
    class UAnimMontage* RemovePlantMontage;                                           // 0x0E60 (size: 0x8)
    class UAnimMontage* DestroyGardenMontage;                                         // 0x0E68 (size: 0x8)
    class UAnimMontage* WashEyesMontage;                                              // 0x0E70 (size: 0x8)
    FPrisonerTurnMontageDescription TurnMontageDescription;                           // 0x0E78 (size: 0x30)
    float MinThrowItemSpeed;                                                          // 0x0EA8 (size: 0x4)
    float MaxThrowItemSpeed;                                                          // 0x0EAC (size: 0x4)
    float ScreenCenterDotOpacityDecreaseDelay;                                        // 0x0EB0 (size: 0x4)
    float ScreenCenterDotOpacityDecrease;                                             // 0x0EB4 (size: 0x4)
    float ScreenCenterDotOpacityIncrease;                                             // 0x0EB8 (size: 0x4)
    float ShortThrowReductionMultiplier;                                              // 0x0EBC (size: 0x4)
    float ThrowingObstacleCheckOffset;                                                // 0x0EC0 (size: 0x4)
    float ThrowingObstacleOffset;                                                     // 0x0EC4 (size: 0x4)
    TMap<class EThrowingAnimationType, class FThrowingAnimationSet> ThrowingAnimationSets; // 0x0EC8 (size: 0x50)
    float respawnTime;                                                                // 0x0F18 (size: 0x4)
    class UCurveFloat* FocusModeZoomEffectCurve;                                      // 0x0F20 (size: 0x8)
    float FocusModeZoomSpeed;                                                         // 0x0F28 (size: 0x4)
    TArray<class UCircularMenuSegmentInfo*> SelfInteractionSegmentInfo;               // 0x0F30 (size: 0x10)
    class UCircularMenuSegmentIcons* SelfInteractionVoicelineIcons;                   // 0x0F40 (size: 0x8)
    TArray<class UCharacterVoiceline*> CharacterDeluxeVoicelines;                     // 0x0F48 (size: 0x10)
    TArray<class UCharacterVoiceline*> CharacterVoicelines;                           // 0x0F58 (size: 0x10)
    TSoftClassPtr<UPrisonerPrisonWalletComponent> PrisonWalletComponentClass;         // 0x0F68 (size: 0x28)
    TSubclassOf<class UPrisonerMusicPlayerComponent> MusicPlayerComponentClass;       // 0x0F90 (size: 0x8)
    float WetnessReachableFromSkyChecksInterval;                                      // 0x0F98 (size: 0x4)
    float DedicatedServerHandleFootstepInterval;                                      // 0x0F9C (size: 0x4)
    float PlayInstrumentEventNetworkDelay;                                            // 0x0FA0 (size: 0x4)
    float PlayInstrumentExitStateDuration;                                            // 0x0FA4 (size: 0x4)
    TSubclassOf<class UPrisonerBodyCompositionMorphsComputer> BodyCompositionMorphsComputer; // 0x0FA8 (size: 0x8)
    FVector PenisLocationDefault;                                                     // 0x0FB0 (size: 0xC)
    FVector PenisLocationFat;                                                         // 0x0FBC (size: 0xC)
    FVector PenisLocationMuscular;                                                    // 0x0FC8 (size: 0xC)
    FVector PenisLocationSkinny;                                                      // 0x0FD4 (size: 0xC)
    float PenisMinSizeHandleZ;                                                        // 0x0FE0 (size: 0x4)
    float PenisMaxSizeHandleZ;                                                        // 0x0FE4 (size: 0x4)
    float PenisGrowOverTimeThreshold;                                                 // 0x0FE8 (size: 0x4)
    float UnmountSpeedThresholdForRagdoll;                                            // 0x0FEC (size: 0x4)
    float MountTiltAngleForRagdoll;                                                   // 0x0FF0 (size: 0x4)
    float RareSuicideAnimationChance;                                                 // 0x0FF4 (size: 0x4)
    class UCurveFloat* FaceAgingIntensityCurve;                                       // 0x0FF8 (size: 0x8)
    float HairGrowthTotalTime;                                                        // 0x1000 (size: 0x4)
    float FacialHairGrowthTotalTime;                                                  // 0x1004 (size: 0x4)
    float HairUpdateRate;                                                             // 0x1008 (size: 0x4)
    class UCurveFloat* ShortHairCurve;                                                // 0x1010 (size: 0x8)
    class UCurveFloat* MediumHairCurve;                                               // 0x1018 (size: 0x8)
    class UCurveFloat* MediumHairPDOCurve;                                            // 0x1020 (size: 0x8)
    class UCurveFloat* MediumHairTopOpacityCurve;                                     // 0x1028 (size: 0x8)
    class UCurveFloat* LongHairCurve;                                                 // 0x1030 (size: 0x8)
    class UCurveFloat* LongHairPDOCurve;                                              // 0x1038 (size: 0x8)
    class UCurveFloat* LongHairTopOpacityCurve;                                       // 0x1040 (size: 0x8)
    class UCurveFloat* AfroHairCurve;                                                 // 0x1048 (size: 0x8)
    class UCurveFloat* ShortFacialHairCurve;                                          // 0x1050 (size: 0x8)
    class UCurveFloat* MediumFacialHairCurve;                                         // 0x1058 (size: 0x8)
    class UCurveFloat* MediumFacialHairPDOCurve;                                      // 0x1060 (size: 0x8)
    class UCurveFloat* MediumFacialHairTopOpacityCurve;                               // 0x1068 (size: 0x8)
    class UCurveFloat* LongFacialHairCurve;                                           // 0x1070 (size: 0x8)
    class UCurveFloat* LongFacialHairPDOCurve;                                        // 0x1078 (size: 0x8)
    class UCurveFloat* LongFacialHairTopOpacityCurve;                                 // 0x1080 (size: 0x8)
    float MaxRestingAngle;                                                            // 0x1088 (size: 0x4)
    float GenericAcceptanceRadius;                                                    // 0x108C (size: 0x4)
    float DistanceWhereRotationStarts;                                                // 0x1090 (size: 0x4)
    TSubclassOf<class UNotificationDescription> AutoTriggeredVomitingNotification;    // 0x1098 (size: 0x8)
    TSubclassOf<class UNotificationDescription> AutoTriggeredUrinationNotification;   // 0x10A0 (size: 0x8)
    TSubclassOf<class UNotificationDescription> AutoTriggeredDefecationNotification;  // 0x10A8 (size: 0x8)
    TSubclassOf<class UPrisonerUIDataImpl> UIDataClass;                               // 0x10B0 (size: 0x8)
    class UAkAudioEvent* DefecateNakedForcedAudioEvent;                               // 0x10B8 (size: 0x8)
    class UAkAudioEvent* DefecateClothedForcedAudioEvent;                             // 0x10C0 (size: 0x8)
    class UAkAudioEvent* DefecateNakedForcedDiarrheaAudioEvent;                       // 0x10C8 (size: 0x8)
    class UAkAudioEvent* DefecateClothedForcedDiarrheaAudioEvent;                     // 0x10D0 (size: 0x8)
    class UAkAudioEvent* UrinateForcedAudioEvent;                                     // 0x10D8 (size: 0x8)
    class UAkAudioEvent* StartBlowingAirAudioEvent;                                   // 0x10E0 (size: 0x8)
    class UAkAudioEvent* StopBlowingAirAudioEvent;                                    // 0x10E8 (size: 0x8)
    class UAkAudioEvent* PhoenixTearsEffectSound;                                     // 0x10F0 (size: 0x8)
    class UParticleSystem* DiarrheaParticleSystem;                                    // 0x10F8 (size: 0x8)
    TSubclassOf<class AActor> FecesClass;                                             // 0x1100 (size: 0x8)
    FName FecesSocketName;                                                            // 0x1108 (size: 0x8)
    FPrisonerCommonData_ResponseIdles ResponseIdles;                                  // 0x1110 (size: 0x8)
    class UAkAudioEvent* SkydivingStartAudioEvent;                                    // 0x1118 (size: 0x8)
    class UAkAudioEvent* SkydivingStopAudioEvent;                                     // 0x1120 (size: 0x8)
    class UAkAudioEvent* IntroCinematicScreamAudioEvent;                              // 0x1128 (size: 0x8)
    float MaxSpeedWhileMountedToBeRelevantForHunting;                                 // 0x1130 (size: 0x4)
    float EncounterSpawnMaxMovementSpeed;                                             // 0x1134 (size: 0x4)
    TSubclassOf<class USurvivalTipEventListener> SurvivalTipEventListenerClass;       // 0x1138 (size: 0x8)
    FRuntimeFloatCurve MaxRunningSpeedMultiplierVsStaminaRatio;                       // 0x1140 (size: 0x88)
    FRuntimeFloatCurve RunningActionDifficultyMultiplierVsStaminaRatio;               // 0x11C8 (size: 0x88)

}; // Size: 0x1250

class UPrisonerConsumableDigestionHandler_Exhaustion : public UConsumableDigestionHandler
{
    float _exhaustionAmountToRecoverPerSubstancesAbsorbedMass;                        // 0x0028 (size: 0x4)

}; // Size: 0x30

class UPrisonerConsumableDigestionHandler_FoodDisgust : public UConsumableDigestionHandler
{
    float _disgustAmountPerMassConsumed;                                              // 0x0028 (size: 0x4)

}; // Size: 0x38

class UPrisonerConsumableDigestionHandler_FoodDisgustAntidote : public UPrisonerConsumableDigestionHandler_FoodDisgust
{
}; // Size: 0x38

class UPrisonerConsumableUserData : public UConsumableUserData
{
    EGameResourceConsumptionMethod ConsumptionMethod;                                 // 0x0028 (size: 0x1)
    TSubclassOf<class AItem> ItemClass;                                               // 0x0030 (size: 0x8)
    TSubclassOf<class UGameResourceType> ResourceTypeClass;                           // 0x0038 (size: 0x8)
    float RadiationAmount;                                                            // 0x0040 (size: 0x4)

}; // Size: 0x48

class UPrisonerCreationUIController : public UObject
{
    FName _editedPrisonerActorTag;                                                    // 0x0344 (size: 0x8)
    FName _mugshotPrisonerActorTag;                                                   // 0x034C (size: 0x8)
    TArray<class UCharacterMesh*> _characterMeshesToAddOntoMugshotPrisoner;           // 0x0358 (size: 0x10)
    FGameplayTag _femaleTag;                                                          // 0x0368 (size: 0x8)
    FGameplayTag _maleTag;                                                            // 0x0370 (size: 0x8)

}; // Size: 0x4B0

class UPrisonerDebugUI_BodyConditionEntryWidget : public UUserWidget
{
    class UTextBlock* _nameTextBlock;                                                 // 0x0270 (size: 0x8)

}; // Size: 0x278

class UPrisonerDebugUI_BodyConditionItem : public UObject
{
}; // Size: 0x30

class UPrisonerDebugUI_BodyEffectItem : public UPrisonerDebugUI_BodyConditionItem
{
}; // Size: 0x38

class UPrisonerDebugUI_BodyStateItem : public UPrisonerDebugUI_BodyConditionItem
{
}; // Size: 0x38

class UPrisonerDebugUI_MainWidget : public UUserWidget
{
    class UComboBoxString* _prisonersComboBox;                                        // 0x0268 (size: 0x8)
    class UTextBlock* _lifeTimeTextBlock;                                             // 0x0270 (size: 0x8)
    class UTextBlock* _strengthTextBlock;                                             // 0x0278 (size: 0x8)
    class UTextBlock* _constitutionTextBlock;                                         // 0x0280 (size: 0x8)
    class UTextBlock* _dexterityTextBlock;                                            // 0x0288 (size: 0x8)
    class UTextBlock* _intelligenceTextBlock;                                         // 0x0290 (size: 0x8)
    class UTextBlock* _healthTextBlock;                                               // 0x0298 (size: 0x8)
    class UTextBlock* _bodyTemperatureTextBlock;                                      // 0x02A0 (size: 0x8)
    class UTextBlock* _apparentTemperatureTextBlock;                                  // 0x02A8 (size: 0x8)
    class UTextBlock* _clothesTemperatureTextBlock;                                   // 0x02B0 (size: 0x8)
    class UListView* _skillsListView;                                                 // 0x02B8 (size: 0x8)
    class UListView* _bodyConditionsListView;                                         // 0x02C0 (size: 0x8)
    class UPrisonerUIData* _data;                                                     // 0x02D0 (size: 0x8)
    class UPrisonerUITooltipCache* _tooltipCache;                                     // 0x02D8 (size: 0x8)
    float _dataRequestTimerInterval;                                                  // 0x02E4 (size: 0x4)
    float _dataApplyTimerInterval;                                                    // 0x02EC (size: 0x4)
    class UTextBlock* _prisonerBodyEffects;                                           // 0x02F0 (size: 0x8)

    void PrisonersComboBox_SelectionChanged(FString SelectedItem, TEnumAsByte<ESelectInfo::Type> SelectionType);
}; // Size: 0x2F8

class UPrisonerDebugUI_SkillEntryWidget : public UUserWidget
{
    class UTextBlock* _nameTextBlock;                                                 // 0x0270 (size: 0x8)

}; // Size: 0x278

class UPrisonerDebugUI_SkillItem : public UObject
{
}; // Size: 0x38

class UPrisonerEntitySetup : public UEntitySetup
{
}; // Size: 0x80

class UPrisonerExcretionUserData : public UObject
{
}; // Size: 0x30

class UPrisonerFirstPersonSubviewComponent : public UCameraComponent
{
    EPrisonerFirstPersonSubview SubviewID;                                            // 0x07D8 (size: 0x1)
    float WeaponFOV;                                                                  // 0x07DC (size: 0x4)
    FVector WeaponFoveationOffset;                                                    // 0x07E0 (size: 0xC)
    float MinViewPitch;                                                               // 0x07EC (size: 0x4)
    float MaxViewPitch;                                                               // 0x07F0 (size: 0x4)
    float MinViewYaw;                                                                 // 0x07F4 (size: 0x4)
    float MaxViewYaw;                                                                 // 0x07F8 (size: 0x4)
    class UCurveLinearColor* MinMaxViewPitchByYawAndSpeed;                            // 0x0800 (size: 0x8)
    class UCurveVector* LocalSpaceOffsetByYaw;                                        // 0x0808 (size: 0x8)
    class UCurveVector* LocalSpaceOffsetByPitch;                                      // 0x0810 (size: 0x8)
    class UCurveVector* ActorSpaceOffsetByYaw;                                        // 0x0818 (size: 0x8)
    class UCurveVector* ActorSpaceOffsetByPitch;                                      // 0x0820 (size: 0x8)
    FName LockRotationToSocketAnimationCurveName;                                     // 0x0828 (size: 0x8)
    FName LockRotationToSocketSocketName;                                             // 0x0830 (size: 0x8)
    float ProbeSize;                                                                  // 0x0838 (size: 0x4)
    TEnumAsByte<ECollisionChannel> ProbeChannel;                                      // 0x083C (size: 0x1)
    bool DoCollisionTest;                                                             // 0x083D (size: 0x1)
    FName AnimationBobbingTXCurveName;                                                // 0x0840 (size: 0x8)
    FName AnimationBobbingTYCurveName;                                                // 0x0848 (size: 0x8)
    FName AnimationBobbingTZCurveName;                                                // 0x0850 (size: 0x8)
    FName AnimationBobbingRYCurveName;                                                // 0x0858 (size: 0x8)
    FName AnimationBobbingRPCurveName;                                                // 0x0860 (size: 0x8)
    FName AnimationBobbingRRCurveName;                                                // 0x0868 (size: 0x8)
    float AnimationBobbingTScale;                                                     // 0x0870 (size: 0x4)
    float AnimationBobbingRScale;                                                     // 0x0874 (size: 0x4)
    FName AnimationCameraOffsetTXCurveName;                                           // 0x0878 (size: 0x8)
    FName AnimationCameraOffsetTYCurveName;                                           // 0x0880 (size: 0x8)
    FName AnimationCameraOffsetTZCurveName;                                           // 0x0888 (size: 0x8)
    FName AnimationCameraOffsetRYCurveName;                                           // 0x0890 (size: 0x8)
    FName AnimationCameraOffsetRPCurveName;                                           // 0x0898 (size: 0x8)
    FName AnimationCameraOffsetRRCurveName;                                           // 0x08A0 (size: 0x8)
    float AnimationCameraOffsetTScale;                                                // 0x08A8 (size: 0x4)
    float AnimationCameraOffsetRScale;                                                // 0x08AC (size: 0x4)
    float BlendInDuration;                                                            // 0x08B0 (size: 0x4)
    float BlendOutDuration;                                                           // 0x08B4 (size: 0x4)
    float _minFactorForPrisonerHiding;                                                // 0x08B8 (size: 0x4)

}; // Size: 0x8C0

class UPrisonerFirstPersonVehicleAimingSubviewComponent : public UPrisonerFirstPersonSubviewComponent
{
}; // Size: 0x8C0

class UPrisonerFirstPersonViewComponent : public UPrisonerViewComponent
{
    TArray<EPrisonerFirstPersonSubview> SubviewBlendingPriorities;                    // 0x00D0 (size: 0x10)
    TArray<FPrisonerFirstPersonSubviewBlendOverride> SubviewBlendOverrides;           // 0x00E0 (size: 0x10)

}; // Size: 0x210

class UPrisonerFishingComponent : public UCharacterActionComponent
{
    EFishingState _fishingState;                                                      // 0x00C0 (size: 0x1)

    void OnRep_FishingState();
}; // Size: 0xD0

class UPrisonerForeignSubstance : public UForeignSubstance
{
    bool _shouldConstitutionAffectAbsorptionCapacity;                                 // 0x00A8 (size: 0x1)
    FRuntimeFloatCurve _absorptionCapacityModifierVsConstitutionRatio;                // 0x00B0 (size: 0x88)
    bool _shouldBeDiscardedWithPhoenixTears;                                          // 0x0138 (size: 0x1)

}; // Size: 0x140

class UPrisonerForeignSubstanceStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UPrisonerForeignSubstance_Antibiotics : public UPrisonerForeignSubstance
{
}; // Size: 0x140

class UPrisonerForeignSubstance_AttributeModifier : public UPrisonerForeignSubstance
{
    float _strengthModifier;                                                          // 0x0140 (size: 0x4)
    float _strengthChange;                                                            // 0x0144 (size: 0x4)
    float _constitutionModifier;                                                      // 0x0148 (size: 0x4)
    float _constitutionChange;                                                        // 0x014C (size: 0x4)
    float _dexterityModifier;                                                         // 0x0150 (size: 0x4)
    float _dexterityChange;                                                           // 0x0154 (size: 0x4)
    float _intelligenceModifier;                                                      // 0x0158 (size: 0x4)
    float _intelligenceChange;                                                        // 0x015C (size: 0x4)

}; // Size: 0x160

class UPrisonerForeignSubstance_Painkillers : public UPrisonerForeignSubstance
{
}; // Size: 0x140

class UPrisonerForeignSubstance_Toxins : public UPrisonerForeignSubstance
{
}; // Size: 0x140

class UPrisonerHallucinationEpisode : public UObject
{
    class UAkAudioEvent* _begunAudioEvent;                                            // 0x0028 (size: 0x8)
    class UAkAudioEvent* _endedAudioEvent;                                            // 0x0030 (size: 0x8)
    FRuntimeFloatCurve _visualEffectIntensityVsTime;                                  // 0x0038 (size: 0x88)
    float _illusionsPreSpawnEffectsDelay;                                             // 0x00C0 (size: 0x4)
    class UAkAudioEvent* _illusionsPreSpawnAudioEvent;                                // 0x00C8 (size: 0x8)
    float _spawnIllusionsDelay;                                                       // 0x00D0 (size: 0x4)
    TArray<class UClass*> _loadedIllusionClasses;                                     // 0x0100 (size: 0x10)

}; // Size: 0x110

class UPrisonerInventoryComponent : public UActorComponent
{
    float AddSelectionDuration;                                                       // 0x0138 (size: 0x4)
    float AddSelectionReplicationDelay;                                               // 0x013C (size: 0x4)
    float TickFrequency;                                                              // 0x0140 (size: 0x4)
    class UStaticMesh* _chipMesh;                                                     // 0x0150 (size: 0x8)
    class UQuickAccessManager* _quickAccessManager;                                   // 0x0158 (size: 0x8)
    TMap<TWeakObjectPtr<AItem>, uint32> _vicinityItems;                               // 0x0178 (size: 0x50)
    TMap<class FGameplayTag, class FClothesPartSet> _clothesPartsToDamageByMeleeAttackCapsuleAttachment; // 0x01E0 (size: 0x50)
    TArray<TSoftClassPtr<UCharacterMesh>> _characterMeshClassesSorted;                // 0x0230 (size: 0x10)
    TSubclassOf<class AClothesItem> _parachuteClass;                                  // 0x0240 (size: 0x8)
    class UInventoryContainerClothes* _inventoryClothes;                              // 0x0248 (size: 0x8)
    class UInventoryContainerHandsHolsters* _inventoryHandsHolsters;                  // 0x0250 (size: 0x8)

    void UnEquipStolenClothesItemOnServer(class APrisoner* stolenPrisoner, class AClothesItem* Item);
    void UnEquipClothesItemOnServer(class AClothesItem* Item, bool placeInInventory, bool shouldEverDrop);
    void UnEquipClothesItem(class AClothesItem* Item, bool placeInInventory, bool shouldEverDrop);
    void SpawnAndDropItemAtOnServer(class UContainerItemDescriptor* Item, FVector Location, FRotator Rotation);
    void Server_SendQuickAccessState(const TArray<FQuickAccessSlotData>& Data);
    void Server_InitializeItemVirtualizedInventory(class UObject* Item, class UObject* container);
    void Server_DropAllItems(const TArray<class AItem*>& Items);
    void Server_AutoAddAllItems(const TArray<class AItem*>& Items);
    void RemoveStolenItemOnServer(class APrisoner* stolenPrisoner, class AItem* Item);
    TScriptInterface<class IInventoryNode> RemoveStacks(int32 stacksToSplit);
    void RemoveItemOnServer(class AItem* Item);
    void OnEquippedClothesDestroyed(class AActor* Actor);
    bool IsClothesItemEquipped(const class AClothesItem* Item);
    int32 GetStacksCount();
    float GetMaxHairLength(EConZGender Gender);
    float GetMaxFacialHairLength();
    float GetGearWeightFast();
    float GetGearWeight();
    TArray<class AClothesItem*> GetEquippedClothes();
    void EquipItemInHandsOnServer(class AItem* Item);
    void EquipClothesItemOnServer(class AClothesItem* Item);
    void EquipClothesItem(class AClothesItem* Item);
    void DropItemOnServer(class AItem* Item);
    void DropItemOnClient(class AItem* Item, FVector Location, FRotator Rotation);
    void DropItemAtOnServer(class AItem* Item, FVector Location, FRotator Rotation);
    void Client_SendQuickAccessState(const TArray<FQuickAccessClientSyncData>& Data, bool enableSendingState);
    bool CanStackWith(const class UObject* Item);
    bool CanStack();
    bool CanEquipClothesItem(class AClothesItem* Item);
    bool CanAddItem(const class AItem* Item, bool tryToJoinItems);
    void AutoAddItemOnServer(class AItem* Item, bool tryToJoinItems);
    void AddStack(TScriptInterface<class IInventoryNode> Item);
    void AddDefaultEquipment();
}; // Size: 0x3A0

class UPrisonerLifeIndicatorsSprite : public UUserWidget
{
    class UVerticalBox* _mainVerticalBox;                                             // 0x0268 (size: 0x8)
    class USizeBox* _sizeBox;                                                         // 0x0270 (size: 0x8)
    class UDualArcedProgressBar* _dualProgressBarBreathing;                           // 0x0278 (size: 0x8)
    class UGradedArcedProgressBar* _gradedProgressBarActionDifficulty;                // 0x0280 (size: 0x8)
    class UCircularProgressBar* CircularProgressBarSpritesHLTH;                       // 0x0288 (size: 0x8)
    float _healthRelevancyThreshold;                                                  // 0x0290 (size: 0x4)
    class UCircularProgressBar* CircularProgressBarSpritesSTA;                        // 0x0298 (size: 0x8)
    float _staminaRelevancyThreshold;                                                 // 0x02A0 (size: 0x4)
    class UCircularProgressBar* CircularProgressBarSpritesNRG;                        // 0x02A8 (size: 0x8)
    float _energyRelevancyThreshold;                                                  // 0x02B0 (size: 0x4)
    class UCircularProgressBar* CircularProgressBarSpritesHYD;                        // 0x02B8 (size: 0x8)
    float _hydrationRelevancyThreshold;                                               // 0x02C0 (size: 0x4)
    class UCircularProgressBar* CircularProgressBarSpritesNoise;                      // 0x02C8 (size: 0x8)
    float _noiseRelevancyThreshold;                                                   // 0x02D0 (size: 0x4)
    class UCircularProgressBar* CircularProgressBarSpritesAIPerception;               // 0x02D8 (size: 0x8)
    float _aiPerceptionRelevancyThreshold;                                            // 0x02E0 (size: 0x4)
    class UImage* _overburdenedWarningImage;                                          // 0x02E8 (size: 0x8)
    class UWidgetAnimation* NewAnimation_1;                                           // 0x0368 (size: 0x8)
    class APrisoner* _prisoner;                                                       // 0x0370 (size: 0x8)

}; // Size: 0x378

class UPrisonerLoadout : public UDataAsset
{
    TSubclassOf<class AItem> primary;                                                 // 0x0030 (size: 0x8)
    TArray<class TSubclassOf<AItem>> primaryAttachments;                              // 0x0038 (size: 0x10)
    TSubclassOf<class AItem> secondary;                                               // 0x0048 (size: 0x8)
    TArray<class TSubclassOf<AItem>> secondaryAttachments;                            // 0x0050 (size: 0x10)
    TSubclassOf<class AItem> tertiary;                                                // 0x0060 (size: 0x8)
    TArray<class TSubclassOf<AItem>> tertiaryAttachments;                             // 0x0068 (size: 0x10)
    TArray<class TSubclassOf<AItem>> outfit;                                          // 0x0078 (size: 0x10)
    TArray<class TSubclassOf<AItem>> support;                                         // 0x0088 (size: 0x10)

    void EquipPrisoner(class APrisoner* Prisoner, TArray<class AItem*>& givenItems, bool ClearEquipment, bool applyOutfit, bool applyItems);
}; // Size: 0x98

class UPrisonerMakeoverUIController : public UObject
{
}; // Size: 0x188

class UPrisonerMeshManager : public UCharacterMeshManager
{
    class USkeletalMeshComponent* _prisonerFPShadowMeshComponent;                     // 0x0248 (size: 0x8)
    class USkeletalMesh* _prisonerFPShadowMesh;                                       // 0x0538 (size: 0x8)
    FGameplayTagContainer _bodyPartVsCharacterMeshSlotMapping;                        // 0x0540 (size: 0x180)
    FGameplayTagContainer _wettablePartVsCharacterMeshSlotMapping;                    // 0x06C0 (size: 0x80)
    FGameplayTagContainer _clothesPartVsCharacterMeshSlotMapping;                     // 0x0740 (size: 0x160)
    TSubclassOf<class UCharacterMesh> _characterBodyClass;                            // 0x08A0 (size: 0x8)
    TArray<class TSubclassOf<UCharacterMesh>> _classesIgnoringFPVHiding;              // 0x08A8 (size: 0x10)
    FGameplayTag _highHeelsTag;                                                       // 0x08B8 (size: 0x8)

}; // Size: 0x8D0

class UPrisonerMetabolismUIData : public UObject
{
}; // Size: 0x100

class UPrisonerMetabolismUIDataImpl : public UPrisonerMetabolismUIData
{
}; // Size: 0x3C8

class UPrisonerMovementCommonData : public UDataAsset
{
    FPrisonerGroundStanceData StandingData;                                           // 0x0030 (size: 0xC)
    FPrisonerGroundStanceData CrouchingData;                                          // 0x003C (size: 0xC)
    FPrisonerGroundStanceData ProneData;                                              // 0x0048 (size: 0xC)
    FPrisonerAquaticModeData SwimmingData;                                            // 0x0054 (size: 0xC)
    FPrisonerAquaticModeData DivingData;                                              // 0x0060 (size: 0xC)
    FPrisonerAerialPoseData FallData;                                                 // 0x006C (size: 0x18)
    FPrisonerAerialPoseData SkydiveSlowData;                                          // 0x0084 (size: 0x18)
    FPrisonerAerialPoseData SkydiveFastData;                                          // 0x009C (size: 0x18)
    FPrisonerAerialPoseData HandsBoundData;                                           // 0x00B4 (size: 0x18)
    TMap<class FPrisonerAerialPosePair, class FPrisonerAerialPoseTransition> AerialPoseTransitionMap; // 0x00D0 (size: 0x50)
    float BaseJumpZVelocity;                                                          // 0x0120 (size: 0x4)
    FRuntimeFloatCurve JumpZVelocityMultiplierVsGroundSpeedMps;                       // 0x0128 (size: 0x88)
    FRuntimeFloatCurve JumpZVelocityMultiplierVsGroundSlopeDegrees;                   // 0x01B0 (size: 0x88)
    FRuntimeFloatCurve JumpStaminaDrainVsTotalMassKg;                                 // 0x0238 (size: 0x88)
    TArray<FWindowMantlingAnimationInfo> WindowMantlingAnimations;                    // 0x02C0 (size: 0x10)
    TArray<FLedgeMantlingAnimationInfo> LedgeMantlingAnimations;                      // 0x02D0 (size: 0x10)
    float MaxFallingSpeedForMantling;                                                 // 0x02E0 (size: 0x4)
    float MaxFallingSpeedForLadderClimbing;                                           // 0x02E4 (size: 0x4)
    float MaxHorzontalDistanceToLadderForClimbing;                                    // 0x02E8 (size: 0x4)
    float LadderClimbingMaxSpeed;                                                     // 0x02EC (size: 0x4)
    int32 NumberOfLadderPeekSteps;                                                    // 0x02F0 (size: 0x4)
    FVector PostLadderClimbingLaunchVelocity;                                         // 0x02F4 (size: 0xC)
    float MaxHeightToJumpOffLadderSafely;                                             // 0x0300 (size: 0x4)
    float MaxGroundSlopeAllowedForLadderDisembarking;                                 // 0x0304 (size: 0x4)
    float DefaultBuoyancy;                                                            // 0x0308 (size: 0x4)
    float DesiredNonWaterImmersedCapsuleHeightWhenSwimmingOnSurface;                  // 0x030C (size: 0x4)
    float NonWaterImmersedHeightToStartSwimming;                                      // 0x0310 (size: 0x4)
    float NonWaterImmersedHeightToStopSwimming;                                       // 0x0314 (size: 0x4)
    float DiveInAttemptTime;                                                          // 0x0318 (size: 0x4)
    float WaterFriction;                                                              // 0x031C (size: 0x4)
    float LongFallSpeedThreshold;                                                     // 0x0320 (size: 0x4)
    float TimeToSpendFallingWithHandsBound;                                           // 0x0324 (size: 0x4)
    float BodyRotationCorrectionRate;                                                 // 0x0328 (size: 0x4)
    FVector BodyRotationDrag;                                                         // 0x032C (size: 0xC)
    FFloatInterval RotationRateMultiplierVsPerformanceRatio;                          // 0x0338 (size: 0x8)
    FFloatInterval MantlingSpeedMultiplierVsPerformanceRatio;                         // 0x0340 (size: 0x8)
    TArray<FConditionalPrisonerMovementParams> _groundMovementParams;                 // 0x0348 (size: 0x10)
    TArray<FConditionalPrisonerMovementParams> _aquaticMovementParams;                // 0x0358 (size: 0x10)
    float _maxWalkingSpeed;                                                           // 0x0368 (size: 0x4)
    float _maxJoggingSpeed;                                                           // 0x036C (size: 0x4)
    float _maxRunningSpeed;                                                           // 0x0370 (size: 0x4)
    float _maxLimpingWalkingSpeed;                                                    // 0x0374 (size: 0x4)
    float _maxLimpingJoggingSpeed;                                                    // 0x0378 (size: 0x4)

}; // Size: 0x380

class UPrisonerMovementComponent : public UConZCharacterMovementComponent
{
    float CapsuleHalfHeightWhenCrouched;                                              // 0x0DD0 (size: 0x4)
    float CapsuleHalfHeightWhenProne;                                                 // 0x0DD4 (size: 0x4)
    float CapsuleHalfHeightWhenSwimming;                                              // 0x0DD8 (size: 0x4)
    bool UseCustomRotationRate;                                                       // 0x0DDC (size: 0x1)
    bool RequestedPathMovesForwardOnly;                                               // 0x0DDD (size: 0x1)
    float RotationInterpolationSpeed;                                                 // 0x0DE0 (size: 0x4)
    class UCurveFloat* MaxRotationRateCurve;                                          // 0x0DE8 (size: 0x8)
    float RotationRateMultiplierWhenStanding;                                         // 0x0DF0 (size: 0x4)
    float RotationRateMultiplierWhenCrouched;                                         // 0x0DF4 (size: 0x4)
    float RotationRateMultiplierWhenProne;                                            // 0x0DF8 (size: 0x4)
    float RotationRateMultiplierWhenSwimming;                                         // 0x0DFC (size: 0x4)
    float RotationRateMultiplierWhenSwimmingAndDiving;                                // 0x0E00 (size: 0x4)
    float GroundSlopeAngleForSpeedScalingSmoothingRate;                               // 0x0E04 (size: 0x4)
    float GroundSlopeAngleSmoothingRate;                                              // 0x0E08 (size: 0x4)
    bool UseSmoothedGroundSlopeAngleForPaceChecks;                                    // 0x0E0C (size: 0x1)
    float MinGroundSlopeAngleForJogging;                                              // 0x0E10 (size: 0x4)
    float MaxGroundSlopeAngleForJogging;                                              // 0x0E14 (size: 0x4)
    float MinGroundSlopeAngleForRunning;                                              // 0x0E18 (size: 0x4)
    float MaxGroundSlopeAngleForRunning;                                              // 0x0E1C (size: 0x4)
    float MinSpeedModifierWhenMovingUphill;                                           // 0x0E20 (size: 0x4)
    float BaseJumpZVelocity;                                                          // 0x0E24 (size: 0x4)
    float MaxAbsoluteVelocityZAfterClimb;                                             // 0x0E60 (size: 0x4)
    float StaminaUnitsToDrainOnJump;                                                  // 0x0E64 (size: 0x4)
    class UCurveFloat* JumpZVelocityMultiplierVsSpeed;                                // 0x0E68 (size: 0x8)
    class UCurveFloat* JumpZVelocityMultiplierVsGroundSlopeAngle;                     // 0x0E70 (size: 0x8)
    TArray<FPrisonerClimbAnimationInfo> ClimbAnimations;                              // 0x0E78 (size: 0x10)
    float ClimbingStaminaDrainModifier;                                               // 0x0E88 (size: 0x4)
    bool ClimbingDebuggingEnabled;                                                    // 0x0E8C (size: 0x1)
    float ClimbingDebuggingDrawTime;                                                  // 0x0E90 (size: 0x4)
    float LadderClimbingMaxSpeed;                                                     // 0x0E94 (size: 0x4)
    float MaxHorzDistanceToLadderForClimbing;                                         // 0x0E98 (size: 0x4)
    int32 NumberOfLadderPeekSteps;                                                    // 0x0E9C (size: 0x4)
    FVector PostLadderClimbingLaunchVelocity;                                         // 0x0EA0 (size: 0xC)
    float MaxHeightToJumpOffLadderSafely;                                             // 0x0EAC (size: 0x4)
    float MaxFallingSpeedAllowedForLadderClimbing;                                    // 0x0EB0 (size: 0x4)
    float MaxGroundSlopeAllowedForLadderClimbing;                                     // 0x0EB4 (size: 0x4)
    class UCurveFloat* MaxHorzDistanceToWindowForClimbingVsSpeed;                     // 0x0EB8 (size: 0x8)
    TArray<FWindowClimbingAnimationInfo> WindowClimbingAnimations;                    // 0x0EC0 (size: 0x10)
    float WaterImmersionToStartSwimming;                                              // 0x0ED0 (size: 0x4)
    float WaterImmersionToStopSwimming;                                               // 0x0ED4 (size: 0x4)
    float MinimalSwimmingTime;                                                        // 0x0ED8 (size: 0x4)
    float SwimmingToWalkingDepthTolerance;                                            // 0x0EDC (size: 0x4)
    float SwimmingToWalkingCapsuleCollisionTolerance;                                 // 0x0EE0 (size: 0x4)
    float DesiredWaterImmersion;                                                      // 0x0EE4 (size: 0x4)
    float DesiredWaterImmersionCorrectionAcceleration;                                // 0x0EE8 (size: 0x4)
    class UCurveFloat* DesiredWaterImmersionCorrectionAccelerationCurve;              // 0x0EF0 (size: 0x8)
    float WaterResurfaceAcceleration;                                                 // 0x0EF8 (size: 0x4)
    FVector2D OceanWavesAcceleration;                                                 // 0x0EFC (size: 0x8)
    float WaterImmersionAfterWhichRunningIsDisabled;                                  // 0x0F04 (size: 0x4)
    float ImmersionCorrectionDownMultiplier;                                          // 0x0F08 (size: 0x4)
    float RotationRateMultiplierWhenImmersedInWater;                                  // 0x0F0C (size: 0x4)
    float DiveInAccelerationScale;                                                    // 0x0F10 (size: 0x4)
    float DiveInAccelerationTimeout;                                                  // 0x0F14 (size: 0x4)
    float DiveInCollisionCheckOffset;                                                 // 0x0F18 (size: 0x4)
    float BuoyancyWhenDiving;                                                         // 0x0F1C (size: 0x4)
    float BuoyancyWhenNotDiving;                                                      // 0x0F20 (size: 0x4)
    float RotationRatePitchWhenDiving;                                                // 0x0F24 (size: 0x4)
    float SurfaceTensionForce;                                                        // 0x0F28 (size: 0x4)
    float MaxWindSpeedForAerialDrag;                                                  // 0x0F2C (size: 0x4)
    float LongFallSpeedThreshold;                                                     // 0x0F30 (size: 0x4)
    float BodyRotationCorrectionRate;                                                 // 0x0F34 (size: 0x4)
    FVector BodyRotationDrag;                                                         // 0x0F38 (size: 0xC)
    float DistanceToAutomaticallyOpenParachuteAt;                                     // 0x0F44 (size: 0x4)
    float MinimalFallingTimeBeforeAutomaticParachuteCanOpen;                          // 0x0F48 (size: 0x4)
    FWaterForceWhenSwimmingParams WaterForceWhenSwimmingParams;                       // 0x0F4C (size: 0x14)
    FVector_NetQuantizeNormal _repAccelerationNormal;                                 // 0x0F64 (size: 0xC)
    float _timeToSpendFallingBeforeHandsAreFree;                                      // 0x0FA4 (size: 0x4)
    float _maxLatencyForStanceCheckInterpolation;                                     // 0x0FA8 (size: 0x4)
    uint8 _repBuoyancy;                                                               // 0x105C (size: 0x1)
    FLadderInfoRepData _ladderInfoRepData;                                            // 0x1200 (size: 0x50)
    uint16 _aerialPoseBlendRepData;                                                   // 0x1476 (size: 0x2)

    void Server_SetDivingState(EPrisonerDivingState Value);
    void Server_SetDesiredAerialPose(EPrisonerAerialPose Pose, bool Force);
    void Server_ClimbOffLadder();
    void OnRep_Buoyancy();
    void OnRep_AerialPoseBlend();
    void OnRep_AccelerationNormal();
    void NetMulticast_SetDesiredAerialPose(EPrisonerAerialPose Pose, bool Force);
    void NetMulticast_SetBodyRotation(FQuat Rotation, FVector AngularVelocity);
    void NetMulticast_PlayAnimMontageIfSimulatedProxy(class UAnimMontage* Montage, float PlayRate);
    void NetMulticast_FinishAnchoring(bool anchoringSucceded);
    bool IsFlyingOrFalling();
    bool IsDiving();
    FWindowInfo GetWindowInfo();
    float GetTimeSpentInAir();
    EPrisonerMovementPace GetMaxAllowedPace();
    float GetGroundSlopeAngleSmoothed();
    float GetGroundSlopeAngleForSpeedScaling();
    float GetGroundSlopeAngle();
    float GetDivingDepth();
    float GetDesiredCoursePitchAngle();
    float GetDesiredCourseAngle();
    EPrisonerMovementMode GetCustomMovementMode();
    float GetCurrentTimeSpentInAir();
    FClimbableObstacleInfo GetClimbableObstacleInfo();
    float GetActualCourseAngle();
    bool DetectWindow(FWindowInfo& Result);
    bool DetectClimbableObstacle(FClimbableObstacleInfo& Result);
    bool ClimbWindow(const FWindowInfo& WindowInfo);
    bool CanClimbWindow();
}; // Size: 0x1550

class UPrisonerMovementDebugWidget : public UUserWidget
{
    class UTextBlock* ServerText;                                                     // 0x0268 (size: 0x8)
    class UTextBlock* ClientText;                                                     // 0x0270 (size: 0x8)
    class APrisoner* Prisoner;                                                        // 0x0278 (size: 0x8)

}; // Size: 0x280

class UPrisonerMovementSettings : public UDataAsset
{
    FPrisonerMovementSettings_Ground Ground;                                          // 0x0030 (size: 0x1C)
    FPrisonerMovementSettings_Ground GroundMI;                                        // 0x004C (size: 0x1C)
    FPrisonerMovementSettings_Air Air;                                                // 0x0068 (size: 0xF8)
    FPrisonerMovementSettings_Water Water;                                            // 0x0160 (size: 0xC)
    FPrisonerMovementSettings_Misc Misc;                                              // 0x016C (size: 0x18)
    FPrisonerMovementSettings_Misc MiscMI;                                            // 0x0184 (size: 0x18)

}; // Size: 0x1A0

class UPrisonerMusicPlayerComponent : public UCharacterActionComponent
{
    FName _musicRootFolder;                                                           // 0x00C0 (size: 0x8)
    float _volumeChangeRate;                                                          // 0x00C8 (size: 0x4)
    int64 _fileSizeLimitInMB;                                                         // 0x00D0 (size: 0x8)
    class UAkAudioEvent* _turnOnAudioEvent;                                           // 0x00D8 (size: 0x8)
    class UAkAudioEvent* _turnOffAudioEvent;                                          // 0x00E0 (size: 0x8)
    class URuntimeAudioImporterLibrary* _importerLibrary;                             // 0x00E8 (size: 0x8)
    class UAudioComponent* _audioComponent;                                           // 0x00F0 (size: 0x8)
    class URadioComponent* _radioComponent;                                           // 0x00F8 (size: 0x8)
    TWeakObjectPtr<class UImportedSoundWave> _playingSoundWave;                       // 0x0100 (size: 0x8)

    void OnResult(class URuntimeAudioImporterLibrary* RuntimeAudioImporterObjectRef, class UImportedSoundWave* SoundWaveRef, ETranscodingStatus Status);
    void OnRadioTrackStarted();
    void OnAudioPlaybackFinished();
}; // Size: 0x150

class UPrisonerNameChangeRequest : public UPlayerRpcChannelServerRequest
{
}; // Size: 0x48

class UPrisonerNameChangeResponse : public UPlayerRpcChannelServerResponse
{
}; // Size: 0x38

class UPrisonerPhotoModeAnimInstance : public UAnimInstance
{
    float PoseBlendTime;                                                              // 0x02B8 (size: 0x4)
    TArray<class UAnimSequence*> _unarmedPoses;                                       // 0x02C0 (size: 0x10)
    TArray<class UAnimSequence*> _riflePoses;                                         // 0x02D0 (size: 0x10)
    TArray<class UAnimSequence*> _handgunPoses;                                       // 0x02E0 (size: 0x10)
    TArray<class UAnimSequence*> _meleePoses;                                         // 0x02F0 (size: 0x10)
    TArray<class UAnimSequence*> _lowerBodyPoses;                                     // 0x0300 (size: 0x10)
    TArray<class UAnimSequence*> _facialExpressions;                                  // 0x0310 (size: 0x10)
    TArray<class UAnimSequence*> _maleFacialExpressions;                              // 0x0320 (size: 0x10)
    TArray<class UAnimSequence*> _femaleFacialExpressions;                            // 0x0330 (size: 0x10)
    EPrisonerPhotoModePoseGroup _poseGroup;                                           // 0x0340 (size: 0x1)
    float _spineCurvature;                                                            // 0x0344 (size: 0x4)
    float _spineRotation;                                                             // 0x0348 (size: 0x4)
    int32 _upperBodyPoseIndex;                                                        // 0x034C (size: 0x4)
    int32 _lowerBodyPoseIndex;                                                        // 0x0350 (size: 0x4)
    int32 _lastUpperBodyPoseIndex;                                                    // 0x0354 (size: 0x4)
    int32 _lastLowerBodyPoseIndex;                                                    // 0x0358 (size: 0x4)
    int32 _facialExpressionIndex;                                                     // 0x035C (size: 0x4)
    int32 _lastFacialExpressionIndex;                                                 // 0x0360 (size: 0x4)
    class UAnimSequenceBase* _correctionPose;                                         // 0x0368 (size: 0x8)
    float _upperBodyPoseBlendAlpha;                                                   // 0x0370 (size: 0x4)
    float _lowerBodyPoseBlendAlpha;                                                   // 0x0374 (size: 0x4)
    float _facialExpressionBlendAlpha;                                                // 0x0378 (size: 0x4)
    bool _isFemale;                                                                   // 0x037C (size: 0x1)

    class UAnimSequence* GetLastFacialExpression();
    class UAnimSequence* GetCurrentFacialExpression();
}; // Size: 0x380

class UPrisonerPrisonWalletComponent : public UCharacterActionComponent
{
    TArray<class TSubclassOf<AItem>> _deluxeItems;                                    // 0x00C0 (size: 0x10)
    TArray<class TSubclassOf<AItem>> _milestoneEventItems;                            // 0x00D0 (size: 0x10)
    EPrisonWalletChoiceType _milestoneItemChoiceType;                                 // 0x00E0 (size: 0x1)
    int32 _lastMilestone;                                                             // 0x00E4 (size: 0x4)

}; // Size: 0xF0

class UPrisonerResponseIdle : public UObject
{
    TArray<class UAnimMontage*> Montages;                                             // 0x0028 (size: 0x10)
    float PreMontageDelay;                                                            // 0x0038 (size: 0x4)
    float PostMontageDelay;                                                           // 0x003C (size: 0x4)
    float CooldownDuration;                                                           // 0x0040 (size: 0x4)
    bool CanBeUsedWhenItemIsInHands;                                                  // 0x0044 (size: 0x1)
    TSet<EPrisonerAnimationSet> CombatibleAnimationsSets;                             // 0x0048 (size: 0x50)

}; // Size: 0x98

class UPrisonerResponseIdle_BodyConditionOrSymptomPresence : public UPrisonerResponseIdle
{
    TSubclassOf<class UPrisonerBodyConditionOrSymptom> BodyConditionOrSymptom;        // 0x0098 (size: 0x8)
    FInt32Range SeverityLevels;                                                       // 0x00A0 (size: 0x10)

}; // Size: 0xB0

class UPrisonerResponseIdle_NeedToDefecate : public UPrisonerResponseIdle
{
}; // Size: 0x98

class UPrisonerResponseIdle_NeedToUrinate : public UPrisonerResponseIdle
{
}; // Size: 0x98

class UPrisonerResponseIdle_StaminaInRange : public UPrisonerResponseIdle
{
    FFloatRange StaminaRatioRange;                                                    // 0x0098 (size: 0x10)

}; // Size: 0xA8

class UPrisonerRestingComponent : public UCharacterActionComponent
{
    FPrisonerRestingData _restingData;                                                // 0x00C0 (size: 0x18)
    FPrisonerRestingDataAutonomous _restingDataAutonomous;                            // 0x00D8 (size: 0x1C)

    void OnRep_RestingDataAutonomous();
    void OnRep_RestingData();
}; // Size: 0x120

class UPrisonerShotsFiredTrackerComponent : public UActorComponent
{
    int32 _repNumShotsFired;                                                          // 0x00B4 (size: 0x4)

    void OnRep_NumShotsFired();
    void Client_SetWidgetVisibilityAndReset(bool Visibility);
}; // Size: 0xC0

class UPrisonerSkillComponent : public UActorComponent
{
    TArray<FPrisonerInitialSkillInfo> InitialSkills;                                  // 0x00B0 (size: 0x10)
    float TickFrequency;                                                              // 0x00C0 (size: 0x4)
    TArray<class USkill*> _skills;                                                    // 0x00D0 (size: 0x10)
    TArray<class USkillAction*> _actions;                                             // 0x00E0 (size: 0x10)
    class USkillClasses* _skillClasses;                                               // 0x0198 (size: 0x8)
    TArray<class AItem*> _lastSurroundingItems;                                       // 0x01A0 (size: 0x10)
    TArray<FSkillRecord> _replicatedSkills;                                           // 0x0238 (size: 0x10)
    TArray<FSkillRecord> _simProxyReplicatedSkills;                                   // 0x0248 (size: 0x10)
    uint32 _replicatedNoiseLevel;                                                     // 0x02AC (size: 0x4)
    float _skillReplicationPeriod;                                                    // 0x02B4 (size: 0x4)

    void UpdateIsInFocusModeOnServer(bool isInFocus);
    void ShowWatchingWarningOnClient();
    void SetSkillStaminaConsumptionOnServer(class USkill* Skill, float Consumption);
    void Server_UpdateNearbyFoliageCoverage(uint8 nearbyFoliageCoveragePackedData);
    void Server_UpdateDetectablePrisoners(const TArray<class APrisoner*>& deltaToAdd, const TArray<class APrisoner*>& deltaToRemove);
    void Server_IncreaseSkillExperiencePoints(ESkillReplicationID skillReplicationID, float Points);
    void SendVisiblePrisoners();
    void RequestNearbyFoliageUpdateOnClient();
    void OnRep_Skills();
    void OnRep_SimProxySkills();
    void HighlightNearbyItems();
    void HighlightItemOnClient(class AItem* Item);
    TArray<class USkill*> GetSkills();
    void ForceSkillsReplicationOnServer();
}; // Size: 0x2C0

class UPrisonerSkillUIData : public UObject
{
    FText _description;                                                               // 0x0028 (size: 0x18)
    TSubclassOf<class USkill> _skillClass;                                            // 0x0040 (size: 0x8)

}; // Size: 0x50

class UPrisonerSkillUIData_Endurance : public UPrisonerSkillUIData
{
}; // Size: 0x60

class UPrisonerSkillUIData_Running : public UPrisonerSkillUIData
{
}; // Size: 0x58

class UPrisonerSkillsUIData : public UObject
{
}; // Size: 0x28

class UPrisonerSkillsUIDataImpl : public UPrisonerSkillsUIData
{
    TArray<class UPrisonerSkillUIData*> SkillsUIData;                                 // 0x0028 (size: 0x10)

}; // Size: 0x38

class UPrisonerSoundComponent : public UCharacterSoundComponent
{
    float MinBreathingRateToPostPeriodicInhaleExhaleAudioEvents;                      // 0x0128 (size: 0x4)
    float MaxDistanceToListenerToPostPeriodicInhaleExhaleAudioEvents;                 // 0x012C (size: 0x4)
    class UAkAudioEvent* PeriodicInhaleAudioEvent;                                    // 0x0130 (size: 0x8)
    class UAkAudioEvent* PeriodicExhaleAudioEvent;                                    // 0x0138 (size: 0x8)
    class UAkAudioEvent* HoldBreathInhaleAudioEvent;                                  // 0x0140 (size: 0x8)
    class UAkAudioEvent* HoldBreathExhaleAudioEvent;                                  // 0x0148 (size: 0x8)
    class UAkAudioEvent* HoldBreathBreathlessExhaleAudioEvent;                        // 0x0150 (size: 0x8)
    float MinHeartRateToPostHeartbeatAudioEvent;                                      // 0x0158 (size: 0x4)
    class UAkAudioEvent* HeartbeatAudioEvent;                                         // 0x0160 (size: 0x8)
    class UAkAudioEvent* FootstepsAudioEvent;                                         // 0x0168 (size: 0x8)
    class UAkAudioEvent* FootstepsEnhancerAudioEvent;                                 // 0x0170 (size: 0x8)
    float MovingThroughFoliageGateDuration;                                           // 0x0178 (size: 0x4)
    class UAkAudioEvent* StartGenericMovingThroughFoliageAudioEvent;                  // 0x0180 (size: 0x8)
    class UAkAudioEvent* StopGenericMovingThroughFoliageAudioEvent;                   // 0x0188 (size: 0x8)
    class UAkAudioEvent* GenericOneShotMovingThroughFoliageAudioEvent;                // 0x0190 (size: 0x8)
    class UAkAudioEvent* GearNoiseAudioEvent;                                         // 0x0198 (size: 0x8)
    class UAkAudioEvent* GearNoiseAudioEventWhenInWater;                              // 0x01A0 (size: 0x8)
    float ItemMotionNoiseTimeToLive;                                                  // 0x01A8 (size: 0x4)
    class UAkAudioEvent* StartGenericEatItemAudioEvent;                               // 0x01B0 (size: 0x8)
    class UAkAudioEvent* StopGenericEatItemAudioEvent;                                // 0x01B8 (size: 0x8)
    class UAkAudioEvent* StartGenericDrinkItemAudioEvent;                             // 0x01C0 (size: 0x8)
    class UAkAudioEvent* StopGenericDrinkItemAudioEvent;                              // 0x01C8 (size: 0x8)
    class UAkAudioEvent* StartGenericDrinkWaterAudioEvent;                            // 0x01D0 (size: 0x8)
    class UAkAudioEvent* StopGenericDrinkWaterAudioEvent;                             // 0x01D8 (size: 0x8)
    class UAkAudioEvent* StartGenericExamineObjectAudioEvent;                         // 0x01E0 (size: 0x8)
    class UAkAudioEvent* StopGenericExamineObjectAudioEvent;                          // 0x01E8 (size: 0x8)
    class UAkAudioEvent* StartGenericCraftAudioEvent;                                 // 0x01F0 (size: 0x8)
    class UAkAudioEvent* StopGenericCraftAudioEvent;                                  // 0x01F8 (size: 0x8)
    class UAkAudioEvent* StartGenericUncraftAudioEvent;                               // 0x0200 (size: 0x8)
    class UAkAudioEvent* StopGenericUncraftAudioEvent;                                // 0x0208 (size: 0x8)
    class UAkAudioEvent* StartGenericVehicleRepairAudioEvent;                         // 0x0210 (size: 0x8)
    class UAkAudioEvent* StopGenericVehicleRepairAudioEvent;                          // 0x0218 (size: 0x8)
    class UAkAudioEvent* StartWashClothAudioEvent;                                    // 0x0220 (size: 0x8)
    class UAkAudioEvent* StopWashClothAudioEvent;                                     // 0x0228 (size: 0x8)
    class UAkAudioEvent* StartInGameAudioEvent;                                       // 0x0230 (size: 0x8)
    class UAkAudioEvent* StopInGameAudioEvent;                                        // 0x0238 (size: 0x8)
    class UAkAudioEvent* CalmStateAudioEvent;                                         // 0x0240 (size: 0x8)
    class UAkAudioEvent* IntenseStateAudioEvent;                                      // 0x0248 (size: 0x8)
    class UAkAudioEvent* CombatStateAudioEvent;                                       // 0x0250 (size: 0x8)
    class USoundCue* OutOfBoundsSound;                                                // 0x0258 (size: 0x8)
    class UAkAudioEvent* ChipExplosionSound;                                          // 0x0260 (size: 0x8)
    class UAkAudioEvent* UnconsciousnessStartAudioEvent;                              // 0x0268 (size: 0x8)
    class UAkAudioEvent* UnconsciousnessResetAudioEvent;                              // 0x0270 (size: 0x8)
    TArray<FActiveMovingThroughFoliageSounds> _activeMovingThroughFoliageSounds;      // 0x02C0 (size: 0x10)
    int32 _maxNumberOfFootstepsToPlayFootstepEnhancerSound;                           // 0x02EC (size: 0x4)
    int32 _minNumberOfFootstepsToPlayFootstepEnhancerSound;                           // 0x02F0 (size: 0x4)

    bool UpdateMovingThroughFoliageSounds(int32 PlayingID, EMotionIntensity motionIntensity);
    bool StopMovingThroughFoliageSounds(int32 PlayingID);
    void StopAllMovingThroughFoliageSounds();
    int32 PlayMovingThroughFoliageSounds(class UAkAudioEvent* StartAudioEvent, class UAkAudioEvent* StopAudioEvent, EMotionIntensity motionIntensity);
    void PlayGearSounds(EMotionIntensity motionIntensity);
    void PlayFootstepSounds(TEnumAsByte<EPhysicalSurface> inPhysicalSurface);
    void OnOutOfBoundsSoundPercentChanged(const class USoundWave* PlayingSoundWave, const float PlaybackPercent);
    void OnBorderCrossingStateChanged(class APrisoner* Prisoner, EPrisonerBorderCrossingPenalty penalty);
}; // Size: 0x2F8

class UPrisonerSpawnEquipment : public UDataAsset
{
    FGameplayTagQuery Condition;                                                      // 0x0030 (size: 0x48)
    TSoftClassPtr<AItem> ItemClass;                                                   // 0x0078 (size: 0x28)
    EPrisonerItemEquipType EquipType;                                                 // 0x00A0 (size: 0x1)
    EBiomeType BiomeRequriment;                                                       // 0x00A4 (size: 0x4)

}; // Size: 0xA8

class UPrisonerStatics : public UBlueprintFunctionLibrary
{

    int32 GetAdditionalPenisInchesBasedOnTotalPlayTime(const class UPrisonerCommonData* commonData);
}; // Size: 0x28

class UPrisonerTeleportUserData : public UTeleportUserData
{
}; // Size: 0x30

class UPrisonerThirdPersonAerialSubviewComponent : public USceneComponent
{
    float FieldOfView;                                                                // 0x0200 (size: 0x4)
    bool UseFieldOfViewForLOD;                                                        // 0x0204 (size: 0x1)
    bool ConstrainAspectRatio;                                                        // 0x0205 (size: 0x1)
    float AspectRatio;                                                                // 0x0208 (size: 0x4)
    float MinViewYaw;                                                                 // 0x020C (size: 0x4)
    float MaxViewYaw;                                                                 // 0x0210 (size: 0x4)
    float MinViewPitch;                                                               // 0x0214 (size: 0x4)
    float MaxViewPitch;                                                               // 0x0218 (size: 0x4)
    float PostProcessBlendWeight;                                                     // 0x021C (size: 0x4)
    FPostProcessSettings PostProcessSettings;                                         // 0x0220 (size: 0x560)
    float BlendInDuration;                                                            // 0x0780 (size: 0x4)
    float BlendOutDuration;                                                           // 0x0784 (size: 0x4)
    float BaseOrbitDistance;                                                          // 0x0788 (size: 0x4)
    float SpeedOrbitDistanceIncreaseFactor;                                           // 0x078C (size: 0x4)

}; // Size: 0x7B0

class UPrisonerThirdPersonSubviewComponent : public USpringArmComponent
{
    EPrisonerThirdPersonSubview SubviewID;                                            // 0x0298 (size: 0x1)
    float FieldOfView;                                                                // 0x029C (size: 0x4)
    bool UseFieldOfViewForLOD;                                                        // 0x02A0 (size: 0x1)
    bool ConstrainAspectRatio;                                                        // 0x02A1 (size: 0x1)
    float AspectRatio;                                                                // 0x02A4 (size: 0x4)
    float MinViewYaw;                                                                 // 0x02A8 (size: 0x4)
    float MaxViewYaw;                                                                 // 0x02AC (size: 0x4)
    float MinViewPitch;                                                               // 0x02B0 (size: 0x4)
    float MaxViewPitch;                                                               // 0x02B4 (size: 0x4)
    float LeanOffsetLeft;                                                             // 0x02B8 (size: 0x4)
    float LeanOffsetRight;                                                            // 0x02BC (size: 0x4)
    FVector GlobalOffset;                                                             // 0x02C0 (size: 0xC)
    bool MirrorAroundXZPlane;                                                         // 0x02CC (size: 0x1)
    FVector MaxLocalOffsetWhenColliding;                                              // 0x02D0 (size: 0xC)
    bool ShouldConstrainTraceOriginToOwnerCapsule;                                    // 0x02DC (size: 0x1)
    float OwnerCapsuleContrainBuffer;                                                 // 0x02E0 (size: 0x4)
    FVector TraceOriginGlobalOffset;                                                  // 0x02E4 (size: 0xC)
    FVector TraceOriginRelativeOffset;                                                // 0x02F0 (size: 0xC)
    float LocalOffsetCurvesBlendSpeed;                                                // 0x02FC (size: 0x4)
    FLocalOffsetCurves LocalOffsetCurves;                                             // 0x0300 (size: 0x40)
    FName AnimationOffsetTZCurveName;                                                 // 0x0340 (size: 0x8)
    float PostProcessBlendWeight;                                                     // 0x0348 (size: 0x4)
    FPostProcessSettings PostProcessSettings;                                         // 0x0350 (size: 0x560)
    float BlendInDuration;                                                            // 0x08B0 (size: 0x4)
    float BlendOutDuration;                                                           // 0x08B4 (size: 0x4)
    bool ShouldScaleProbeWithFOV;                                                     // 0x08B8 (size: 0x1)
    FVector _clippingPreventionOffset;                                                // 0x08D4 (size: 0xC)
    float _clippingPreventionSweepLength;                                             // 0x08E0 (size: 0x4)
    float _clippingPreventionAmount;                                                  // 0x08E4 (size: 0x4)
    FVector _clippingPreventionTraceOffset;                                           // 0x08E8 (size: 0xC)
    float _minFactorForPrisonerHiding;                                                // 0x08F4 (size: 0x4)

}; // Size: 0x900

class UPrisonerThirdPersonViewComponent : public UPrisonerViewComponent
{
    TArray<EPrisonerThirdPersonSubview> SubviewBlendingPriorities;                    // 0x00D0 (size: 0x10)
    TArray<FPrisonerThirdPersonSubviewBlendOverride> SubviewBlendOverrides;           // 0x00E0 (size: 0x10)

}; // Size: 0x200

class UPrisonerThrowComponent : public UCharacterActionComponent
{
    EThrowingState _throwingState;                                                    // 0x00C0 (size: 0x1)
    TWeakObjectPtr<class AItem> _itemToThrow;                                         // 0x00C4 (size: 0x8)

    void OnRep_ThrowState();
}; // Size: 0xD0

class UPrisonerTradingComponent : public UActorComponent
{
}; // Size: 0xC8

class UPrisonerTreatmentUIController : public UObject
{

    void Patient_Destroyed(class AActor* Actor);
}; // Size: 0x268

class UPrisonerUIData : public UObject
{
    FText _attributeDescriptions;                                                     // 0x0028 (size: 0x7E0)

}; // Size: 0x808

class UPrisonerUIDataController : public UObject
{
    class UPrisonerUIData* _prisonerUIData;                                           // 0x00C8 (size: 0x8)
    class UPrisonerUITooltipCache* _tooltipCache;                                     // 0x00D0 (size: 0x8)

}; // Size: 0x358

class UPrisonerUIDataImpl : public UPrisonerUIData
{
    class UPrisonerSkillsUIData* SkillsUIData;                                        // 0x0838 (size: 0x8)
    class UPrisonerBodySimulationUIData* BodySimulationUIData;                        // 0x0840 (size: 0x8)

}; // Size: 0x848

class UPrisonerUIDataRequest : public UPlayerRpcChannelServerRequest
{
}; // Size: 0x30

class UPrisonerUIDataResponse : public UPlayerRpcChannelServerResponse
{
    class UPrisonerUIData* _payload;                                                  // 0x0028 (size: 0x8)

}; // Size: 0x30

class UPrisonerUIDebugData : public UObject
{
}; // Size: 0x38

class UPrisonerUIDebugDataRequest : public UPlayerRpcChannelServerRequest
{
}; // Size: 0x28

class UPrisonerUIDebugDataResponse : public UPlayerRpcChannelServerResponse
{
    class UPrisonerUIDebugData* _payload;                                             // 0x0028 (size: 0x8)

}; // Size: 0x30

class UPrisonerUIStatics : public UBlueprintFunctionLibrary
{

    float GetPrisonerStaminaRatio(const class APrisoner* Prisoner);
    float GetPrisonerHydration(const class APrisoner* Prisoner);
    float GetPrisonerHealthRatio(const class APrisoner* Prisoner);
    float GetPrisonerEnergy(const class APrisoner* Prisoner);
}; // Size: 0x28

class UPrisonerUITooltipCache : public UObject
{
}; // Size: 0x1B8

class UPrisonerVehicleAction_ForcePush : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerVehicleAction_ForcePushDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerVehicleAction_ForceUnmount : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerVehicleAction_ForceUnmountDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerVehicleAction_InstallAttachment : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerVehicleAction_InstallAttachmentDescription : public UPrisonerActionDescription
{
    class AVehicleBase* Vehicle;                                                      // 0x0038 (size: 0x8)

}; // Size: 0x90

class UPrisonerVehicleAction_ModifyAttachmentPaintjob : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerVehicleAction_ModifyAttachmentPaintjobDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerVehicleAction_Mount : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerVehicleAction_MountDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerVehicleAction_OpenOrCloseDoor : public UPrisonerAction
{
}; // Size: 0x138

class UPrisonerVehicleAction_OpenOrCloseDoorDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerVehicleAction_QuickInstallAttachment : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerVehicleAction_QuickInstallAttachmentDescription : public UPrisonerActionDescription
{
}; // Size: 0x68

class UPrisonerVehicleAction_QuickRemoveAttachment : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerVehicleAction_QuickRemoveAttachmentDescription : public UPrisonerActionDescription
{
}; // Size: 0x68

class UPrisonerVehicleAction_QuickRepairAttachment : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerVehicleAction_QuickRepairAttachmentDescription : public UPrisonerActionDescription
{
}; // Size: 0x68

class UPrisonerVehicleAction_RemoveAttachment : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerVehicleAction_RemoveAttachmentDescription : public UPrisonerActionDescription
{
}; // Size: 0x88

class UPrisonerVehicleAction_RepairAttachment : public UPrisonerAction
{
}; // Size: 0x128

class UPrisonerVehicleAction_RepairAttachmentDescription : public UPrisonerActionDescription
{
}; // Size: 0x80

class UPrisonerVehicleAction_SetupCarJack : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerVehicleAction_SetupCarJackDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerVehicleAction_SwitchMountSlot : public UPrisonerAction
{
}; // Size: 0x120

class UPrisonerVehicleAction_SwitchMountSlotDescription : public UPrisonerActionDescription
{
}; // Size: 0x40

class UPrisonerVehicleAction_Unmount : public UPrisonerAction
{
}; // Size: 0x130

class UPrisonerVehicleAction_UnmountDescription : public UPrisonerActionDescription
{
}; // Size: 0x48

class UPrisonerViewComponent : public UActorComponent
{
    float DefaultSubviewBlendDuration;                                                // 0x00B0 (size: 0x4)

}; // Size: 0xD0

class UProjectileImpactEffects : public UDataAsset
{
    float MinDecalSize;                                                               // 0x0030 (size: 0x4)
    float MaxDecalSize;                                                               // 0x0034 (size: 0x4)
    float MinDecalLifetime;                                                           // 0x0038 (size: 0x4)
    float MaxDecalLifetime;                                                           // 0x003C (size: 0x4)
    float DecalFadeFactor;                                                            // 0x0040 (size: 0x4)
    float ParticleEffectsInitialScale;                                                // 0x0044 (size: 0x4)
    float ParticleEffectsScaleDistanceStart;                                          // 0x0048 (size: 0x4)
    float ParticleEffectsScaleDistanceRange;                                          // 0x004C (size: 0x4)
    float ParticleEffectsScaleByDistanceFactor;                                       // 0x0050 (size: 0x4)
    class UParticleSystem* BulletPenetrationExitParticlesDaytime;                     // 0x0058 (size: 0x8)
    class UParticleSystem* BulletPenetrationExitParticlesNighttime;                   // 0x0060 (size: 0x8)
    class UMaterialInterface* DayTimePenetrationDecal;                                // 0x0068 (size: 0x8)
    class UMaterialInterface* NightTimePenetrationDecal;                              // 0x0070 (size: 0x8)
    class UAkAudioEvent* AudioEvent;                                                  // 0x0078 (size: 0x8)
    FImpactEffectData Default;                                                        // 0x0080 (size: 0x18)
    FImpactEffectData grass;                                                          // 0x0098 (size: 0x18)
    FImpactEffectData ForrestGroundCoastal;                                           // 0x00B0 (size: 0x18)
    FImpactEffectData ForrestGroundContinental;                                       // 0x00C8 (size: 0x18)
    FImpactEffectData Rock;                                                           // 0x00E0 (size: 0x18)
    FImpactEffectData Stone;                                                          // 0x00F8 (size: 0x18)
    FImpactEffectData Gravel;                                                         // 0x0110 (size: 0x18)
    FImpactEffectData GravelBeach;                                                    // 0x0128 (size: 0x18)
    FImpactEffectData Pebbles;                                                        // 0x0140 (size: 0x18)
    FImpactEffectData Snow;                                                           // 0x0158 (size: 0x18)
    FImpactEffectData Ice;                                                            // 0x0170 (size: 0x18)
    FImpactEffectData Sand;                                                           // 0x0188 (size: 0x18)
    FImpactEffectData Asphalt;                                                        // 0x01A0 (size: 0x18)
    FImpactEffectData Dirt;                                                           // 0x01B8 (size: 0x18)
    FImpactEffectData Water;                                                          // 0x01D0 (size: 0x18)
    FImpactEffectData WaterOcean;                                                     // 0x01E8 (size: 0x18)
    FImpactEffectData Cloth;                                                          // 0x0200 (size: 0x18)
    FImpactEffectData Metal;                                                          // 0x0218 (size: 0x18)
    FImpactEffectData Aluminium;                                                      // 0x0230 (size: 0x18)
    FImpactEffectData Concrete;                                                       // 0x0248 (size: 0x18)
    FImpactEffectData Brick;                                                          // 0x0260 (size: 0x18)
    FImpactEffectData Wood;                                                           // 0x0278 (size: 0x18)
    FImpactEffectData Plastic;                                                        // 0x0290 (size: 0x18)
    FImpactEffectData Rubber;                                                         // 0x02A8 (size: 0x18)
    FImpactEffectData Glass;                                                          // 0x02C0 (size: 0x18)
    FImpactEffectData Folliage;                                                       // 0x02D8 (size: 0x18)
    FImpactEffectData Bark;                                                           // 0x02F0 (size: 0x18)
    FImpactEffectData Flesh;                                                          // 0x0308 (size: 0x18)
    FImpactEffectData RoofTile;                                                       // 0x0320 (size: 0x18)
    FImpactEffectData CeramicsTiles;                                                  // 0x0338 (size: 0x18)
    FImpactEffectData Scrap;                                                          // 0x0350 (size: 0x18)
    FImpactEffectData Trunk;                                                          // 0x0368 (size: 0x18)
    FImpactEffectData Leaves;                                                         // 0x0380 (size: 0x18)
    FImpactEffectData Cardboard;                                                      // 0x0398 (size: 0x18)
    FImpactEffectData Plaster;                                                        // 0x03B0 (size: 0x18)
    FImpactEffectData Kevlar;                                                         // 0x03C8 (size: 0x18)
    FImpactEffectData ForceField;                                                     // 0x03E0 (size: 0x18)
    FImpactEffectData NoEffect;                                                       // 0x03F8 (size: 0x18)
    FImpactEffectData WhiteGravel;                                                    // 0x0410 (size: 0x18)
    FImpactEffectData Mud;                                                            // 0x0428 (size: 0x18)
    FImpactEffectData RiverSand;                                                      // 0x0440 (size: 0x18)
    FImpactEffectData GrassContinental;                                               // 0x0458 (size: 0x18)

}; // Size: 0x470

class UProjectilePool : public UObject
{
    int32 _maxNumPermanentlyAvailableProjectiles;                                     // 0x0078 (size: 0x4)
    float _projectileLifeSpanSeconds;                                                 // 0x0080 (size: 0x4)

}; // Size: 0x88

class UProjectileStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UQuartalPieProgressBar : public UUserWidget
{
    TArray<FSlateBrush> ProgressIcons;                                                // 0x0268 (size: 0x10)
    class UImage* _displayedImage;                                                    // 0x0278 (size: 0x8)

    void SetProgressIndex(int32 progressIndex);
}; // Size: 0x280

class UQuestBookMinigameConfiguration : public UMinigameConfiguration
{
    class AQuestBook* QuestBookUsed;                                                  // 0x0050 (size: 0x8)

}; // Size: 0x58

class UQuestBookMinigameWidget : public UMinigameWidget
{
    FText _acceptQuestControlCaption;                                                 // 0x0280 (size: 0x18)
    FText _changeSideControlCaption;                                                  // 0x0298 (size: 0x18)
    FText _exitBookControlCaption;                                                    // 0x02B0 (size: 0x18)
    class UTextBlock* _acceptQuestLabel;                                              // 0x02C8 (size: 0x8)
    class URichTextBlock* _acceptQuestControlText;                                    // 0x02D0 (size: 0x8)
    class UTextBlock* _changeSideLabel;                                               // 0x02D8 (size: 0x8)
    class URichTextBlock* _changeSideControlText;                                     // 0x02E0 (size: 0x8)
    class UTextBlock* _exitBookLabel;                                                 // 0x02E8 (size: 0x8)
    class URichTextBlock* _exitBookControlText;                                       // 0x02F0 (size: 0x8)
    class UProgressBar* _acceptQuestProgressBar;                                      // 0x02F8 (size: 0x8)
    class UUniformGridPanel* _gridPanel;                                              // 0x0300 (size: 0x8)

}; // Size: 0x318

class UQuestBookPageWidget : public UUserWidget
{
    class UTextBlock* _titleText;                                                     // 0x0268 (size: 0x8)
    class UImage* _tierIcon;                                                          // 0x0270 (size: 0x8)
    class UTextBlock* _descriptionText;                                               // 0x0278 (size: 0x8)
    class UTextBlock* _requirementsLabel;                                             // 0x0280 (size: 0x8)
    class UTextBlock* _requirementsText;                                              // 0x0288 (size: 0x8)
    class UTextBlock* _timeLimitText;                                                 // 0x0290 (size: 0x8)
    class UTextBlock* _locationText;                                                  // 0x0298 (size: 0x8)
    class UTextBlock* _rewardsText;                                                   // 0x02A0 (size: 0x8)
    class UImage* _acceptedImage;                                                     // 0x02A8 (size: 0x8)
    class UOverlay* _splattersOverlay;                                                // 0x02B0 (size: 0x8)
    class UHorizontalBox* _timeLimitHorizontalBox;                                    // 0x02B8 (size: 0x8)
    class UVerticalBox* _rewardsVerticalBox;                                          // 0x02C0 (size: 0x8)
    TArray<FPageSplatterInfo> _splatterInfos;                                         // 0x02C8 (size: 0x10)
    FRuntimeFloatCurve _splatterSpawnRangeFromYCurve;                                 // 0x02D8 (size: 0x88)
    FRuntimeFloatCurve _stampPressAnimationCurve;                                     // 0x0360 (size: 0x88)

}; // Size: 0x3E8

class UQuestBookPagesWidget : public UUserWidget
{
    class UQuestBookPageWidget* _movingPage;                                          // 0x0268 (size: 0x8)
    class UQuestBookPageWidget* _staticPage;                                          // 0x0270 (size: 0x8)

}; // Size: 0x290

class UQuestCommonData : public UDataAsset
{
    TSoftClassPtr<AQuestInteractable> TemplateInteractable;                           // 0x0030 (size: 0x28)
    TMap<class FString, class TSoftClassPtr<UObject>> JsonClassMapping;               // 0x0058 (size: 0x50)

}; // Size: 0xA8

class UQuestCondition : public UObject
{
    bool CanBeAutoCompleted;                                                          // 0x0028 (size: 0x1)
    FText TrackingCaption;                                                            // 0x0030 (size: 0x18)
    FName DialogueUponCompletionName;                                                 // 0x0048 (size: 0x8)
    TArray<FMapLocationMarker> LocationsShownOnMap;                                   // 0x0050 (size: 0x10)
    int32 SequenceIndex;                                                              // 0x0060 (size: 0x4)
    TArray<FGameplayTag> WidgetsToHighlight;                                          // 0x0068 (size: 0x10)

}; // Size: 0x78

class UQuestCondition_BodyCondition : public UQuestCondition
{
    TSoftClassPtr<UPrisonerBodyCondition> BodyCondition;                              // 0x0078 (size: 0x28)
    EPrisonerBodyConditionState State;                                                // 0x00A0 (size: 0x1)

}; // Size: 0xA8

class UQuestCondition_CircularMenuOpened : public UQuestCondition
{
}; // Size: 0x78

class UQuestCondition_CircularSubMenuOpened : public UQuestCondition
{
    class UCircularMenuSegmentInfo* SubMenu;                                          // 0x0078 (size: 0x8)

}; // Size: 0x80

class UQuestCondition_ClickUIButton : public UQuestCondition
{
    FGameplayTag ButtonTag;                                                           // 0x0078 (size: 0x8)

}; // Size: 0x80

class UQuestCondition_CustomZone : public UQuestCondition
{
    TArray<FName> ZoneNames;                                                          // 0x0078 (size: 0x10)

}; // Size: 0x88

class UQuestCondition_DrivingWaypoint : public UQuestCondition
{
    TSoftClassPtr<AQuestDrivingWaypoint> WaypointClass;                               // 0x0078 (size: 0x28)
    FPrimaryAssetId VehicleToSpawn;                                                   // 0x00A0 (size: 0x10)
    FName CircularAreaGroupName;                                                      // 0x00B0 (size: 0x8)

}; // Size: 0xB8

class UQuestCondition_Elimination : public UQuestCondition
{
    TSoftClassPtr<AConZCharacter> CharacterClass;                                     // 0x0078 (size: 0x28)
    TArray<TSoftClassPtr<AConZCharacter>> AdditionalCharacterClasses;                 // 0x00A0 (size: 0x10)
    int32 Amount;                                                                     // 0x00B0 (size: 0x4)
    FName CircularAreaName;                                                           // 0x00B4 (size: 0x8)
    TArray<TSoftClassPtr<AItem>> AllowedWeapons;                                      // 0x00C0 (size: 0x10)
    TArray<TSoftObjectPtr<UBaseItemTag>> AllowedBaseTags;                             // 0x00D0 (size: 0x10)

}; // Size: 0xE0

class UQuestCondition_HudMode : public UQuestCondition
{
    EPrisonerHUDMode TargetMode;                                                      // 0x0078 (size: 0x1)

}; // Size: 0x80

class UQuestCondition_InputMapping : public UQuestCondition
{
    FName MappingName;                                                                // 0x0078 (size: 0x8)
    TArray<FName> MappingNames;                                                       // 0x0080 (size: 0x10)
    TSoftClassPtr<AActor> RequiredHoveredActor;                                       // 0x0090 (size: 0x28)

}; // Size: 0xB8

class UQuestCondition_Interactable : public UQuestCondition
{
    TSoftClassPtr<AQuestInteractable> InteractableClass;                              // 0x0078 (size: 0x28)
    TArray<TSoftClassPtr<AQuestInteractable>> InteractableClasses;                    // 0x00A0 (size: 0x10)

}; // Size: 0xB0

class UQuestCondition_InteractablePersistentMesh : public UQuestCondition_Interactable
{
    TArray<FInteractableDescription> Interactables;                                   // 0x00B0 (size: 0x10)
    bool SpawnOnlyNeededInteractables;                                                // 0x00C0 (size: 0x1)
    FInt32Interval MaxNumInteractables;                                               // 0x00C4 (size: 0x8)
    int32 WorldMarkerShowDistance;                                                    // 0x00CC (size: 0x4)

}; // Size: 0xD0

class UQuestCondition_InteractableUserData : public UQuestCondition_Interactable
{
    FGameplayTag _questInteractableTag;                                               // 0x00B0 (size: 0x8)
    bool SpawnOnlyNeededInteractables;                                                // 0x00B8 (size: 0x1)
    FGameplayTagContainer PossibleInteractableSets;                                   // 0x00C0 (size: 0x20)
    FInt32Interval MaxNumInteractables;                                               // 0x00E0 (size: 0x8)
    TArray<FName> LimitToCircularAreaNames;                                           // 0x00E8 (size: 0x10)

}; // Size: 0xF8

class UQuestCondition_ItemEquipped : public UQuestCondition
{
    TArray<TSoftClassPtr<AItem>> ItemFilter;                                          // 0x0078 (size: 0x10)
    bool ClothesEquip;                                                                // 0x0088 (size: 0x1)
    EHandsHolstersType SlotFilter;                                                    // 0x0089 (size: 0x1)
    TArray<EHandsHolstersType> SlotFilterMulti;                                       // 0x0090 (size: 0x10)
    EItemAttachTriggerType TriggerOn;                                                 // 0x00A0 (size: 0x1)

}; // Size: 0xA8

class UQuestCondition_ItemSet : public UQuestCondition
{
    bool DisablePurchasingItems;                                                      // 0x0078 (size: 0x1)
    bool PlayerKeepsItems;                                                            // 0x0079 (size: 0x1)
    bool AllowNonEmptyContainers;                                                     // 0x007A (size: 0x1)
    bool AllowWeaponsWithAttachments;                                                 // 0x007B (size: 0x1)
    bool AllowEquippedClothes;                                                        // 0x007C (size: 0x1)
    class UQuestItemSet_Asset* ItemSetAsset;                                          // 0x0080 (size: 0x8)
    float RequiredAmountMultiplier;                                                   // 0x0088 (size: 0x4)
    FQuestItemSet_Data ItemSetData;                                                   // 0x0090 (size: 0x10)

}; // Size: 0xA0

class UQuestCondition_ItemsInVicinity : public UQuestCondition
{
    TArray<FVicinityItems> MustBeInVicinity;                                          // 0x0078 (size: 0x10)

}; // Size: 0x88

class UQuestCondition_PlaceableActor : public UQuestCondition
{
    EPlaceableActorTriggerType TriggerType;                                           // 0x0078 (size: 0x1)

}; // Size: 0x80

class UQuestCondition_PrisonerAction : public UQuestCondition
{
    TArray<TSoftClassPtr<UQuestCondition_PrisonerActionMatcher>> ActionMatchers;      // 0x0078 (size: 0x10)
    EPrisonerActionTriggerType TriggerType;                                           // 0x0088 (size: 0x1)

}; // Size: 0x90

class UQuestCondition_PrisonerActionMatcher : public UObject
{
}; // Size: 0x28

class UQuestCondition_PrisonerActionMatcher_ChopObject : public UQuestCondition_PrisonerActionMatcher
{
}; // Size: 0x28

class UQuestCondition_PrisonerActionMatcher_CraftItem : public UQuestCondition_PrisonerActionMatcher
{
    TArray<TSoftObjectPtr<UItemCraftingRecipe>> AcceptedRecipes;                      // 0x0028 (size: 0x10)

}; // Size: 0x38

class UQuestCondition_PrisonerActionMatcher_CutObject : public UQuestCondition_PrisonerActionMatcher
{
}; // Size: 0x28

class UQuestCondition_PrisonerActionMatcher_EatItem : public UQuestCondition_PrisonerActionMatcher
{
    TArray<TSoftClassPtr<AItem>> AcceptedItems;                                       // 0x0028 (size: 0x10)

}; // Size: 0x38

class UQuestCondition_PrisonerActionMatcher_ExecuteBodyConditionInteraction : public UQuestCondition_PrisonerActionMatcher
{
}; // Size: 0x28

class UQuestCondition_PrisonerActionMatcher_FuelFire : public UQuestCondition_PrisonerActionMatcher
{
}; // Size: 0x28

class UQuestCondition_PrisonerActionMatcher_LightFire : public UQuestCondition_PrisonerActionMatcher
{
}; // Size: 0x28

class UQuestCondition_PrisonerActionMatcher_SearchObject : public UQuestCondition_PrisonerActionMatcher
{
}; // Size: 0x28

class UQuestCondition_PrisonerActionMatcher_ThrowItem : public UQuestCondition_PrisonerActionMatcher
{
    TArray<TSoftClassPtr<AItem>> AcceptedItems;                                       // 0x0028 (size: 0x10)

}; // Size: 0x38

class UQuestCondition_TalkToNPC : public UQuestCondition
{
    TSoftClassPtr<AConZCharacter> CharacterClass;                                     // 0x0078 (size: 0x28)

}; // Size: 0xA0

class UQuestCondition_UITabOpen : public UQuestCondition
{
    bool TriggerOnTabOpen;                                                            // 0x0078 (size: 0x1)
    ETabMenuTab TargetTab;                                                            // 0x0079 (size: 0x1)
    bool TriggerOnSubTabOpen;                                                         // 0x007A (size: 0x1)
    ETabMenuSubTab TargetSubTab;                                                      // 0x007B (size: 0x1)

}; // Size: 0x80

class UQuestCondition_UITabOpen_ManualWidget : public UQuestCondition
{
    int32 TabIndex;                                                                   // 0x0078 (size: 0x4)

}; // Size: 0x80

class UQuestCondition_Wait : public UQuestCondition
{
    bool WaitUntilDialogueCompletes;                                                  // 0x0078 (size: 0x1)
    float AdditionalWaitDuration;                                                     // 0x007C (size: 0x4)

}; // Size: 0x80

class UQuestEntriesPanelWidget : public UUserWidget
{
    class USearchBox* _searchBox;                                                     // 0x0268 (size: 0x8)
    class UVerticalBox* _entryContainer;                                              // 0x0270 (size: 0x8)
    TSubclassOf<class UQuestEntryWidget> _entryWidgetClass;                           // 0x0278 (size: 0x8)

}; // Size: 0x2A0

class UQuestEntryDetailsPanelWidget : public UUserWidget
{
    class UOverlay* _mainOverlay;                                                     // 0x0268 (size: 0x8)
    class UScrollBox* _scrollBox;                                                     // 0x0270 (size: 0x8)
    class UTextBlock* _entryName;                                                     // 0x0278 (size: 0x8)
    class UQuestTimerTextBlock* _entryRemainingTime;                                  // 0x0280 (size: 0x8)
    class UTextBlock* _entryDescription;                                              // 0x0288 (size: 0x8)
    class UTextBlock* _entryQuestGiver;                                               // 0x0290 (size: 0x8)
    class UTextBlock* _entryOutpost;                                                  // 0x0298 (size: 0x8)
    class UTextBlock* _entryTierText;                                                 // 0x02A0 (size: 0x8)
    FSlateColor _entryTierIconColor;                                                  // 0x02A8 (size: 0x28)
    class UImage* _entryQuestGiverIcon;                                               // 0x02D0 (size: 0x8)
    class UVerticalBox* _entryTrackingDataContainer;                                  // 0x02D8 (size: 0x8)
    class UVerticalBox* _entryRewardsVerticalBox;                                     // 0x02E0 (size: 0x8)
    class UVerticalBox* _entryRewardsContainer;                                       // 0x02E8 (size: 0x8)
    class UPrimaryButton* _abandonQuestButton;                                        // 0x02F0 (size: 0x8)
    TSubclassOf<class UQuestTrackingDataWidget> _trackingDataWidgetClass;             // 0x02F8 (size: 0x8)
    FText _abandonQuestTooltipText;                                                   // 0x0300 (size: 0x18)
    TSubclassOf<class UTextOnlyTooltip> _tooltipClass;                                // 0x0318 (size: 0x8)

    void OnAbandonQuestButtonHovered();
    void OnAbandonQuestButtonClicked();
}; // Size: 0x380

class UQuestEntryWidget : public UUserWidget
{
    class UImage* _backgroundImage;                                                   // 0x0278 (size: 0x8)
    class UImage* _questNotificationIcon;                                             // 0x0280 (size: 0x8)
    class UTextBlock* _entryName;                                                     // 0x0288 (size: 0x8)
    class UQuestTimerTextBlock* _entryTimeRemaining;                                  // 0x0290 (size: 0x8)
    class UQuestTrackingCheckbox* _trackingCheckbox;                                  // 0x0298 (size: 0x8)
    FName _pixelSizeMaterialParameterName;                                            // 0x02A0 (size: 0x8)
    FName _dpiMaterialParameterName;                                                  // 0x02A8 (size: 0x8)
    class UMaterialInstance* _inactiveMaterialInstance;                               // 0x02B0 (size: 0x8)
    class UMaterialInstance* _inactiveHoveredMaterialInstance;                        // 0x02B8 (size: 0x8)
    class UMaterialInstance* _activeMaterialInstance;                                 // 0x02C0 (size: 0x8)
    class UImage* _customQuestSymbol;                                                 // 0x02C8 (size: 0x8)

}; // Size: 0x2E8

class UQuestGiverComponent : public UActorComponent
{
    bool _ownerInstancesShareId;                                                      // 0x00B0 (size: 0x1)
    uint64 _gameUniqueId;                                                             // 0x00B8 (size: 0x8)
    TSoftClassPtr<AActor> _typeOfSourceActor;                                         // 0x00C0 (size: 0x28)
    bool _uniqueForEachPlayer;                                                        // 0x00E8 (size: 0x1)
    TEnumAsByte<EQuestGiverSectorSelectionType> _sectorSelectionType;                 // 0x00E9 (size: 0x1)

}; // Size: 0x118

class UQuestInteractableAssetUserData : public UAssetUserData
{
    FGameplayTag QuestInteractableTag;                                                // 0x0028 (size: 0x8)

}; // Size: 0x30

class UQuestInteractableComponent : public UStaticMeshComponent
{
}; // Size: 0x510

class UQuestItemSet_Asset : public UDataAsset
{
    FQuestItemSet_Data ItemSet;                                                       // 0x0030 (size: 0x10)

}; // Size: 0x40

class UQuestManagerData : public UDataAsset
{
    TMap<int32, int32> NumberOfQuestsThatUnlocksATier;                                // 0x0030 (size: 0x50)
    TMap<class TSoftClassPtr<AActor>, class FQuestGiverSetup> QuestGiversSetup;       // 0x0080 (size: 0x50)
    TArray<FSpecialQuestSetupArray> SpecialQuestSets;                                 // 0x00D0 (size: 0x10)
    bool QuestListManualOverride;                                                     // 0x00E0 (size: 0x1)
    TArray<TSoftObjectPtr<UQuestSetup>> QuestsManualOverride;                         // 0x00E8 (size: 0x10)
    FName QuestRootFolder;                                                            // 0x00F8 (size: 0x8)
    TArray<FName> QuestSubFolders;                                                    // 0x0100 (size: 0x10)
    TArray<class UTaskSetup*> InitiallyAvailableTasks;                                // 0x0110 (size: 0x10)
    int32 MaxSimultaneousTasks;                                                       // 0x0120 (size: 0x4)
    TSoftClassPtr<AItem> MobilePhoneItemClass;                                        // 0x0128 (size: 0x28)
    TSoftClassPtr<ASedentaryNPC> GeneralGoodsNPCClass;                                // 0x0150 (size: 0x28)

    TArray<FString> ListDirectory();
}; // Size: 0x178

class UQuestSetup : public UPrimaryDataAsset
{
    TSoftClassPtr<ASedentaryNPC> AssociatedNPC;                                       // 0x0030 (size: 0x28)
    bool LimitLocation;                                                               // 0x0058 (size: 0x1)
    FVector LimitedToLocation;                                                        // 0x005C (size: 0xC)
    int32 Tier;                                                                       // 0x0068 (size: 0x4)
    FText Title;                                                                      // 0x0070 (size: 0x18)
    TArray<FText> DescriptionSegments;                                                // 0x0088 (size: 0x10)
    bool UseCustomPhoneCompletionMessage;                                             // 0x0098 (size: 0x1)
    FText CustomPhoneCompletionMessage;                                               // 0x00A0 (size: 0x18)
    TArray<FQuestRewards> PossibleRewards;                                            // 0x00B8 (size: 0x10)
    FGameplayTagContainer TagUnlocks;                                                 // 0x00C8 (size: 0x20)
    float TimeLimit;                                                                  // 0x00E8 (size: 0x4)
    TArray<class UQuestCondition*> ConditionsSequence;                                // 0x00F0 (size: 0x10)
    bool ForceAllowAutoComplete;                                                      // 0x0100 (size: 0x1)
    bool AlwaysShownInPhone;                                                          // 0x0101 (size: 0x1)
    int32 _cachedNetIndex;                                                            // 0x0104 (size: 0x4)
    FString _loadableName;                                                            // 0x0108 (size: 0x10)

}; // Size: 0x118

class UQuestTimerTextBlock : public UUserWidget
{
    class UTextBlock* _textBlock;                                                     // 0x0268 (size: 0x8)
    FSlateFontInfo _timerFont;                                                        // 0x0270 (size: 0x58)
    FSlateColor _timerColorAndOpacity;                                                // 0x02C8 (size: 0x28)
    FSlateColor _questCompletedColorAndOpacity;                                       // 0x02F0 (size: 0x28)
    FSlateColor _questFailedColorAndOpacity;                                          // 0x0318 (size: 0x28)

}; // Size: 0x360

class UQuestTrackingCheckbox : public UUserWidget
{
    FSlateBrush _uncheckedNormalImage;                                                // 0x0298 (size: 0x88)
    FSlateBrush _uncheckedHoveredImage;                                               // 0x0320 (size: 0x88)
    FSlateBrush _checkedNormalImage;                                                  // 0x03A8 (size: 0x88)
    FSlateBrush _checkedHoveredImage;                                                 // 0x0430 (size: 0x88)
    class UImage* _image;                                                             // 0x04B8 (size: 0x8)

}; // Size: 0x4C8

class UQuestTrackingDataWidget : public UUserWidget
{
    class UImage* _icon;                                                              // 0x0268 (size: 0x8)
    class UTextBlock* _caption;                                                       // 0x0270 (size: 0x8)
    class UTextBlock* _progressText;                                                  // 0x0278 (size: 0x8)
    FQuestTrackingDataWidgetStyle _widgetStyle;                                       // 0x0280 (size: 0x150)

}; // Size: 0x3D0

class UQuestTrackingWidget : public UUserWidget
{
    class UTextBlock* _title;                                                         // 0x0268 (size: 0x8)
    class UTextBlock* _turnInText;                                                    // 0x0270 (size: 0x8)
    class UVerticalBox* _trackingDataContainer;                                       // 0x0278 (size: 0x8)
    class USizeBox* _mainSizeBox;                                                     // 0x0280 (size: 0x8)
    class UVerticalBox* _mainWidgetVerticalBox;                                       // 0x0288 (size: 0x8)
    class UQuestTimerTextBlock* _questTimer;                                          // 0x0290 (size: 0x8)
    FMargin _paddingWhileInTabMenu;                                                   // 0x0298 (size: 0x10)
    FMargin _paddingNormal;                                                           // 0x02A8 (size: 0x10)
    TSubclassOf<class UQuestTrackingDataWidget> _trackingDataWidgetClass;             // 0x02B8 (size: 0x8)

}; // Size: 0x328

class UQuestUIData : public UDataAsset
{
    TMap<class ETaskCategory, class FSlateBrush> TaskCategoryIconTypeMap;             // 0x0030 (size: 0x50)
    TMap<class TSoftClassPtr<ASedentaryNPC>, class FQuestGiverUIData> QuestGiverUIDataMap; // 0x0080 (size: 0x50)
    TArray<FSlateBrush> QuestTierBrushes;                                             // 0x00D0 (size: 0x10)
    TArray<class UMaterialInstance*> QuestTierTextMaterials;                          // 0x00E0 (size: 0x10)
    TMap<class EQuestStartLimiterFlags, class FText> QuestStartLimiterFlagsMessageMap; // 0x00F0 (size: 0x50)
    FText PhoneMessageReceivedNotificationTitle;                                      // 0x0140 (size: 0x18)
    FText PhoneMessageReceivedNotificationText;                                       // 0x0158 (size: 0x18)
    float QuestAudioCooldown;                                                         // 0x0170 (size: 0x4)
    FText QuestBookInteractionTraderLocked;                                           // 0x0178 (size: 0x18)
    FText QuestBookInteractionUnknownTraderLocked;                                    // 0x0190 (size: 0x18)
    FText QuestBookInteractionActiveLimit;                                            // 0x01A8 (size: 0x18)
    FText QuestBookInteractionDailyLimit;                                             // 0x01C0 (size: 0x18)
    FText QuestBookInteractionDepleted;                                               // 0x01D8 (size: 0x18)
    FText QuestBookInteractionLoading;                                                // 0x01F0 (size: 0x18)

}; // Size: 0x208

class UQuickAccessBarWidget : public UUserWidget
{
    TArray<class UQuickAccessItemWidget*> _quickAccessItemContainers;                 // 0x0268 (size: 0x10)
    class UHorizontalBox* _horizontalBox;                                             // 0x0278 (size: 0x8)
    class UQuickAccessItemWidget* UI_QuickAccessItemWidget_1;                         // 0x0280 (size: 0x8)
    class UQuickAccessItemWidget* UI_QuickAccessItemWidget_2;                         // 0x0288 (size: 0x8)
    class UQuickAccessItemWidget* UI_QuickAccessItemWidget_3;                         // 0x0290 (size: 0x8)
    class UQuickAccessItemWidget* UI_QuickAccessItemWidget_4;                         // 0x0298 (size: 0x8)
    class UQuickAccessItemWidget* UI_QuickAccessItemWidget_5;                         // 0x02A0 (size: 0x8)
    class UQuickAccessItemWidget* UI_QuickAccessItemWidget_6;                         // 0x02A8 (size: 0x8)
    class UQuickAccessItemWidget* UI_QuickAccessItemWidget_7;                         // 0x02B0 (size: 0x8)
    class UQuickAccessItemWidget* UI_QuickAccessItemWidget_8;                         // 0x02B8 (size: 0x8)
    class UQuickAccessItemWidget* UI_QuickAccessItemWidget_9;                         // 0x02C0 (size: 0x8)
    class UQuickAccessItemWidget* UI_QuickAccessItemWidget_0;                         // 0x02C8 (size: 0x8)

}; // Size: 0x2D8

class UQuickAccessItemSwitcher3 : public UInventoryContainerWidget2
{
    int32 Index;                                                                      // 0x0268 (size: 0x4)
    class UTextBlock* _nameText;                                                      // 0x0270 (size: 0x8)
    class UInventorySlotUserWidget* _slotWidget;                                      // 0x0278 (size: 0x8)
    class UTextBlock* IndexText;                                                      // 0x0280 (size: 0x8)
    class UItemWidget2* _itemWidget;                                                  // 0x0288 (size: 0x8)
    class UCheckBox* _throwingModeCheckbox;                                           // 0x0290 (size: 0x8)
    FText _throwingModeCaption;                                                       // 0x02B0 (size: 0x18)
    FText _throwingModeDescription;                                                   // 0x02C8 (size: 0x18)
    FName _conzInputMappingName;                                                      // 0x02E0 (size: 0x8)

    void ThrowingModePressed(bool IsChecked);
}; // Size: 0x2E8

class UQuickAccessItemWidget : public UUserWidget
{
    class UImage* _imageWidget;                                                       // 0x0268 (size: 0x8)
    float DefaultWidth;                                                               // 0x0288 (size: 0x4)
    float DefaultHeight;                                                              // 0x028C (size: 0x4)
    FVector2D DefaultPosition;                                                        // 0x0290 (size: 0x8)
    class UImage* _additionalIcon;                                                    // 0x02A0 (size: 0x8)
    class UTextBlock* _additionalText;                                                // 0x02A8 (size: 0x8)
    class USizeBox* _lowerLeftBox;                                                    // 0x0330 (size: 0x8)
    class USizeBox* _additionalIconSizeBox;                                           // 0x0338 (size: 0x8)
    FLinearColor TextColor;                                                           // 0x0360 (size: 0x10)
    FName _conzControlMappingName;                                                    // 0x0370 (size: 0x8)
    FText _alternativeControlText;                                                    // 0x0378 (size: 0x18)
    FLinearColor _alarmColor;                                                         // 0x0390 (size: 0x10)
    class UTextBlock* TextBlockSlotNumber;                                            // 0x03A0 (size: 0x8)
    class USizeBox* _sizeBox;                                                         // 0x03A8 (size: 0x8)
    class UWidgetAnimation* LowerLeftBoxFadeIn;                                       // 0x03B0 (size: 0x8)
    class UWidgetAnimation* LowerLeftBoxFadeOut;                                      // 0x03B8 (size: 0x8)
    class UWidgetAnimation* BlinkingBackground;                                       // 0x03C0 (size: 0x8)
    class UWidgetAnimation* AdditionalIconFadeIn;                                     // 0x03C8 (size: 0x8)
    class UWidgetAnimation* AdditionalIconFadeOut;                                    // 0x03D0 (size: 0x8)
    class UWidgetAnimation* ShowLowerLeftBoxAnimation;                                // 0x03D8 (size: 0x8)
    class UWidgetAnimation* ShowAdditionalIconAnimation;                              // 0x03E0 (size: 0x8)

    void OnItemDestroyed(class AActor* itemActor);
    FEventReply OnImageWidgetMouseButtonDown(FGeometry inGeometry, const FPointerEvent& InMouseEvent);
}; // Size: 0x3F8

class UQuickAccessManager : public UObject
{
}; // Size: 0x120

class URadioCategory : public UObject
{
    TArray<class URadioTrack*> Tracks;                                                // 0x0028 (size: 0x10)
    int32 _index;                                                                     // 0x0038 (size: 0x4)

    class URadioTrack* ProvideNextRadioTrack();
}; // Size: 0x40

class URadioCategoryShuffle : public URadioCategory
{
    bool _canTracksRepeat;                                                            // 0x0040 (size: 0x1)
    TArray<class URadioTrack*> _tracksAlreadyPlayed;                                  // 0x0048 (size: 0x10)

}; // Size: 0x58

class URadioComponent : public UAkComponent
{
    float _volume;                                                                    // 0x03C8 (size: 0x4)
    int32 _currentStationIndex;                                                       // 0x03CC (size: 0x4)
    bool _isHiFi;                                                                     // 0x03D4 (size: 0x1)
    bool _isReachableFromSkyWhenMounted;                                              // 0x03D5 (size: 0x1)
    float _attenuationScale;                                                          // 0x03D8 (size: 0x4)
    bool _turnedOn;                                                                   // 0x03DC (size: 0x1)

    void PlayTrackFromRadioStation();
    void OnTrackStarted();
    void OnTrackEnded();
    void OnRep_Volume();
    void OnRep_TurnedOn();
    void OnRep_StationIndex();
}; // Size: 0x400

class URadioProgram : public UObject
{
    TArray<class TSubclassOf<URadioCategory>> CategoryClasses;                        // 0x0028 (size: 0x10)
    TArray<class URadioCategory*> Categories;                                         // 0x0038 (size: 0x10)
    int32 _categoryIndex;                                                             // 0x0048 (size: 0x4)

    class URadioCategory* ProvideNextRadioCategory();
}; // Size: 0x50

class URadioTrack : public UDataAsset
{
    class UAkAudioEvent* Audio;                                                       // 0x0030 (size: 0x8)
    float Duration;                                                                   // 0x0038 (size: 0x4)
    FName TrackName;                                                                  // 0x003C (size: 0x8)

}; // Size: 0x48

class URagItemEntitySave : public UObject
{
    float dirtiness;                                                                  // 0x0028 (size: 0x4)

}; // Size: 0x30

class URagItemEntitySetup : public UItemEntitySetup
{
    float DefaultDirtiness;                                                           // 0x0090 (size: 0x4)

}; // Size: 0x98

class URaidProtectionSelectionWidget : public UUserWidget
{
    class UButton* _buttonCancel;                                                     // 0x0288 (size: 0x8)
    class UButton* _buttonPay;                                                        // 0x0290 (size: 0x8)
    class UButton* _buttonCancel2;                                                    // 0x0298 (size: 0x8)
    class UButton* _buttonSet;                                                        // 0x02A0 (size: 0x8)
    class UNumberPicker* _startHour;                                                  // 0x02A8 (size: 0x8)
    class UNumberPicker* _startMinute;                                                // 0x02B0 (size: 0x8)
    class UNumberPicker* _endHour;                                                    // 0x02B8 (size: 0x8)
    class UNumberPicker* _endMinute;                                                  // 0x02C0 (size: 0x8)
    class UTextBlock* _remainingCooldown;                                             // 0x02C8 (size: 0x8)
    class UTextBlock* _currencyText;                                                  // 0x02D0 (size: 0x8)
    class UImage* _currencyIcon;                                                      // 0x02D8 (size: 0x8)
    class UWidgetSwitcher* _panelSwitcher;                                            // 0x02E0 (size: 0x8)
    class UHorizontalBox* _timeSpanContainer;                                         // 0x02E8 (size: 0x8)
    class UTextBlock* _timeSpanText;                                                  // 0x02F0 (size: 0x8)
    FSlateBrush _goldIcon;                                                            // 0x02F8 (size: 0x88)
    FSlateBrush _cashIcon;                                                            // 0x0380 (size: 0x88)

    void OnTimeValuesChanged();
    void OnSetButtonClicked();
    void OnPayButtonClicked();
    void OnCancelButtonClicked();
}; // Size: 0x430

class URainCollectionManager : public UActorComponent
{
}; // Size: 0x138

class URainCollectorComponent : public UItemComponent
{
    FDbIntegerId _collectorID;                                                        // 0x00C8 (size: 0x8)
    float _fillRate;                                                                  // 0x00D4 (size: 0x4)
    float _maxAmount;                                                                 // 0x00D8 (size: 0x4)
    class UAkAudioEvent* _collectingStartSound;                                       // 0x00E8 (size: 0x8)
    class UAkAudioEvent* _collectingStopSound;                                        // 0x00F0 (size: 0x8)

    void OnResourceAmountChanged(class UBasicGameResourceContainerComponent* containerComponent, float newAmount);
    void OnRep_CollectorID();
}; // Size: 0xF8

class URangedResourceConsumerComponent : public UItemComponent
{
    TSubclassOf<class UGameResourceType> _repResourceType;                            // 0x00E0 (size: 0x8)
    float _repResourceAmount;                                                         // 0x00E8 (size: 0x4)
    float _repRequiredResourceAmount;                                                 // 0x00EC (size: 0x4)

    void OnRep_ResourceType();
    void OnRep_ResourceAmount();
    void OnRep_RequiredResourceAmount();
}; // Size: 0xF0

class URangedResourceConsumerComponentMultipleProviders : public URangedResourceConsumerComponent
{
}; // Size: 0xF0

class URangedResourceConsumerComponentSingleProvider : public URangedResourceConsumerComponent
{
}; // Size: 0xF0

class URangedResourceConsumerEntityComponentSave : public UObject
{
    TSubclassOf<class UGameResourceType> ResourceType;                                // 0x0028 (size: 0x8)
    float ResourceAmount;                                                             // 0x0030 (size: 0x4)
    float RequiredResourceAmount;                                                     // 0x0034 (size: 0x4)
    bool ResourceUsageEnabled;                                                        // 0x0038 (size: 0x1)
    FEntityComponentId ResourceSupplierId;                                            // 0x0040 (size: 0x10)
    TArray<FEntityComponentId> RegisteredProviders;                                   // 0x0050 (size: 0x10)
    TArray<FConnectionSaveData> Connections;                                          // 0x0060 (size: 0x10)

}; // Size: 0x70

class URangedResourceConsumerEntityComponentSetup : public UEntityComponentSetup
{
    TSubclassOf<class UGameResourceType> ResourceType;                                // 0x0048 (size: 0x8)
    float ResourceAmount;                                                             // 0x0050 (size: 0x4)
    float RequiredResourceAmount;                                                     // 0x0054 (size: 0x4)
    bool AutoFindResourceSupplier;                                                    // 0x0058 (size: 0x1)
    FName ResourceSupplierName;                                                       // 0x005C (size: 0x8)

}; // Size: 0x68

class URangedResourceConsumerEntityComponentSetupMultipleProviders : public URangedResourceConsumerEntityComponentSetup
{
    bool AutoConnect;                                                                 // 0x0068 (size: 0x1)

}; // Size: 0x70

class URangedResourceConsumerEntityComponentSetupSingleProvider : public URangedResourceConsumerEntityComponentSetup
{
}; // Size: 0x68

class URangedResourceConsumerEntityComponentStateSingleProvider : public URangedResourceConsumerEntityComponentSave
{
}; // Size: 0x70

class URangedResourceProviderComponent : public UItemComponent
{
    TSubclassOf<class UGameResourceType> _repResourceType;                            // 0x00F8 (size: 0x8)
    float _repResourceAmount;                                                         // 0x0100 (size: 0x4)
    float _repAvailableResourceAmount;                                                // 0x0104 (size: 0x4)
    TSubclassOf<class AInfluenceAreaVisualizer> _influenceAreaVisualizerClass;        // 0x0108 (size: 0x8)

    void OnRep_ResourceType();
    void OnRep_ResourceAmount();
    void OnRep_AvailableResourceAmount();
}; // Size: 0x118

class URangedResourceProviderComponentContinousAmount : public URangedResourceProviderComponent
{
}; // Size: 0x118

class URangedResourceProviderEntityComponentContinousAmountSave : public URangedResourceProviderEntityComponentSave
{
}; // Size: 0x60

class URangedResourceProviderEntityComponentContinousAmountSetup : public URangedResourceProviderEntityComponentSetup
{
}; // Size: 0x68

class URangedResourceProviderEntityComponentSave : public UObject
{
    TSubclassOf<class UGameResourceType> ResourceType;                                // 0x0028 (size: 0x8)
    float ResourceAmount;                                                             // 0x0030 (size: 0x4)
    float AvailableResourceAmount;                                                    // 0x0034 (size: 0x4)
    bool ResourceUsageEnabled;                                                        // 0x0038 (size: 0x1)
    FEntityComponentId ResourceSupplierId;                                            // 0x0040 (size: 0x10)
    TArray<FConnectionSaveData> Connections;                                          // 0x0050 (size: 0x10)

}; // Size: 0x60

class URangedResourceProviderEntityComponentSetup : public UEntityComponentSetup
{
    TSubclassOf<class UGameResourceType> ResourceType;                                // 0x0048 (size: 0x8)
    float ResourceAmount;                                                             // 0x0050 (size: 0x4)
    bool AutoFindResourceSupplier;                                                    // 0x0054 (size: 0x1)
    FName ResourceSupplierName;                                                       // 0x0058 (size: 0x8)
    bool MirrorResourceSupplierResources;                                             // 0x0060 (size: 0x1)

}; // Size: 0x68

class URangedWeaponsSkill : public UStrengthSkill
{
    FRangedWeaponSkillExperienceAwards NoSkillExperienceAwards;                       // 0x00C0 (size: 0x40)
    FRangedWeaponSkillExperienceAwards BasicSkillExperienceAwards;                    // 0x0100 (size: 0x40)
    FRangedWeaponSkillExperienceAwards MediumSkillExperienceAwards;                   // 0x0140 (size: 0x40)
    FRangedWeaponSkillExperienceAwards AdvancedSkillExperienceAwards;                 // 0x0180 (size: 0x40)
    FRangedWeaponSkillExperienceAwards AboveAdvancedSkillExperienceAwards;            // 0x01C0 (size: 0x40)
    FRangedWeaponSkillParametersPerSkillLevel NoSkillParameters;                      // 0x0200 (size: 0x4)
    FRangedWeaponSkillParametersPerSkillLevel BasicSkillParameters;                   // 0x0204 (size: 0x4)
    FRangedWeaponSkillParametersPerSkillLevel MediumSkillParameters;                  // 0x0208 (size: 0x4)
    FRangedWeaponSkillParametersPerSkillLevel AdvancedSkillParameters;                // 0x020C (size: 0x4)
    FRangedWeaponSkillParametersPerSkillLevel AboveAdvancedSkillParameters;           // 0x0210 (size: 0x4)

}; // Size: 0x218

class URazorAnimInstance : public UAnimInstance
{
    bool _isInRagdoll;                                                                // 0x02C0 (size: 0x1)
    ERazorStance _razorStance;                                                        // 0x02C1 (size: 0x1)
    ERazorSleepingStage _sleepingStage;                                               // 0x02C2 (size: 0x1)
    FVector _acceleration;                                                            // 0x02C4 (size: 0xC)
    bool _wantsToMove;                                                                // 0x02D0 (size: 0x1)
    FVector _velocity;                                                                // 0x02D4 (size: 0xC)
    float _speed;                                                                     // 0x02E0 (size: 0x4)
    float _speedXY;                                                                   // 0x02E4 (size: 0x4)
    float _walkStoppingDistance;                                                      // 0x02E8 (size: 0x4)
    float _walkStoppingTime;                                                          // 0x02EC (size: 0x4)
    bool _isFalling;                                                                  // 0x02F0 (size: 0x1)
    float _fallingPlayRate;                                                           // 0x02F4 (size: 0x4)
    bool _isJumping;                                                                  // 0x02F8 (size: 0x1)
    float _jumpApex;                                                                  // 0x02FC (size: 0x4)
    float _jumpDuration;                                                              // 0x0300 (size: 0x4)
    float _speedInWalkAnimation;                                                      // 0x0304 (size: 0x4)
    float _speedInJogAnimation;                                                       // 0x0308 (size: 0x4)
    float _speedInRunAnimation;                                                       // 0x030C (size: 0x4)
    float _ventilationSpawnFallingAnimPlayRate;                                       // 0x0310 (size: 0x4)
    float _moveStartAnimationPlayRate;                                                // 0x0314 (size: 0x4)
    float _moveLoopAnimationPlayRate;                                                 // 0x0318 (size: 0x4)
    float _moveStopAnimationStartTime;                                                // 0x031C (size: 0x4)
    float _moveStopAnimationPlayRate;                                                 // 0x0320 (size: 0x4)
    FVector2D _moveDirectionRelativeToForwardVector;                                  // 0x0324 (size: 0x8)
    bool _shouldUseCurvedRunAnimation;                                                // 0x032C (size: 0x1)
    float _distanceToActivateCurvedRunAnimation;                                      // 0x0330 (size: 0x4)
    class UAnimSequenceBase* _walkStopAnimation;                                      // 0x0338 (size: 0x8)
    class UAnimSequenceBase* _jogStopAnimation;                                       // 0x0340 (size: 0x8)
    class UAnimSequenceBase* _runStopAnimation;                                       // 0x0348 (size: 0x8)
    class UAnimSequenceBase* _runCurveStopAnimation;                                  // 0x0350 (size: 0x8)
    class UAnimSequence* _grappledIdleAnimation;                                      // 0x0358 (size: 0x8)
    bool _shouldUseGrappleAnimation;                                                  // 0x0360 (size: 0x1)
    float _minUpperBodyBlendWeight;                                                   // 0x0364 (size: 0x4)
    float _upperBodyBlendMaxSpeedXY;                                                  // 0x0368 (size: 0x4)
    float _upperBodyBlendWeight;                                                      // 0x036C (size: 0x4)
    float _upperBodyPitch;                                                            // 0x0370 (size: 0x4)
    float _meshRootMaxOffset;                                                         // 0x0374 (size: 0x4)
    float _meshRootMaxOffsetFP;                                                       // 0x0378 (size: 0x4)
    float _meshRootMaxOffsetWall;                                                     // 0x037C (size: 0x4)
    float _minDistanceToApplyMeshRootOffset;                                          // 0x0380 (size: 0x4)
    float _rootOffsetChangeRatePerSecond;                                             // 0x0388 (size: 0x4)
    FVector _meshRootCurrentOffset;                                                   // 0x038C (size: 0xC)

    void AnimNotify_RFootDown();
    void AnimNotify_LFootDown();
}; // Size: 0x3A0

class URazorCommonData : public UDataAsset
{
    float MaxHealth;                                                                  // 0x0030 (size: 0x4)
    float ProjectileDamageMultiplierPerBodyPart;                                      // 0x0034 (size: 0x30)
    float MeleeDamageMultiplierPerBodyPart;                                           // 0x0064 (size: 0x30)
    float ExplosionDamageMultiplier;                                                  // 0x0094 (size: 0x4)
    float ExplosionDamageThresholdToTriggerHitReact;                                  // 0x0098 (size: 0x4)
    float WeakSpotDamageMultiplier;                                                   // 0x009C (size: 0x4)
    float RagdollHitImpulseStrengthPerUnitDamage;                                     // 0x00A0 (size: 0x4)
    float HeadMaxAccumulatedDamageBeforeHitReact;                                     // 0x00A4 (size: 0x4)
    float BodyMaxAccumulatedDamageBeforeSmallHitReact;                                // 0x00A8 (size: 0x4)
    float BodyMaxAccumulatedDamageBeforeLargeHitReact;                                // 0x00AC (size: 0x4)
    float WeakSpotMaxAccumulatedDamageBeforeHitReact;                                 // 0x00B0 (size: 0x4)
    float WeakSpotHeavyHitReactMinSpeed;                                              // 0x00B4 (size: 0x4)
    float TimeNeededForAccumulatedDamageToStartDropping;                              // 0x00B8 (size: 0x4)
    float TimeNeededToFullyDropAccumulatedDamage;                                     // 0x00BC (size: 0x4)
    float DefaultAccumulatedDamageMultiplier;                                         // 0x00C0 (size: 0x4)
    float MeleeAccumulatedDamageMultiplier;                                           // 0x00C4 (size: 0x4)
    float DamageImmunityTime;                                                         // 0x00C8 (size: 0x4)
    float CorpseSearchDuration;                                                       // 0x00CC (size: 0x4)
    FRazorTurnMontageDescription TurnMontageDescriptions;                             // 0x00D0 (size: 0x50)
    TArray<class UAnimMontage*> SuddenWakeUpMontages;                                 // 0x0120 (size: 0x10)
    TArray<class UAnimMontage*> NormalWakeUpMontages;                                 // 0x0130 (size: 0x10)
    class UAnimMontage* EnterCombatMontage;                                           // 0x0140 (size: 0x8)
    TArray<FRazorAttackMontageDescription> BasicAttackAnimations;                     // 0x0148 (size: 0x10)
    TArray<FRazorAttackMontageDescription> GroupAttackAnimations;                     // 0x0158 (size: 0x10)
    class UAnimMontage* MountAttackJumpMontage;                                       // 0x0168 (size: 0x8)
    class UAnimMontage* MountAttackFailedMontage;                                     // 0x0170 (size: 0x8)
    class UAnimMontage* MountAttackFailedToTallObstacleMontage;                       // 0x0178 (size: 0x8)
    class UAnimMontage* MountAttackFailedToShortObstacleMontage;                      // 0x0180 (size: 0x8)
    float MountAttackFailMoveDistance;                                                // 0x0188 (size: 0x4)
    float MountAttackObstacleHeightThreshold;                                         // 0x018C (size: 0x4)
    class UAnimMontage* VentilationSpawnAttackMontage;                                // 0x0190 (size: 0x8)
    class UAnimMontage* VentilationSpawnAttackMontageEnd;                             // 0x0198 (size: 0x8)
    TArray<FRazorDeathAnimationData> WeakSpotDeathMontages;                           // 0x01A0 (size: 0x10)
    TArray<FRazorDeathAnimationData> MeleeDeathFrontMontage;                          // 0x01B0 (size: 0x10)
    TArray<FRazorDeathAnimationData> MeleeDeathBackMontage;                           // 0x01C0 (size: 0x10)
    TArray<FRazorDeathAnimationData> ProjectileDeathFrontMontage;                     // 0x01D0 (size: 0x10)
    TArray<FRazorDeathAnimationData> ProjectileDeathBackMontage;                      // 0x01E0 (size: 0x10)
    TArray<FRazorUpperBodyPitchRangeData> UpperBodyPitchRanges;                       // 0x01F0 (size: 0x10)
    float UpperBodyPitchChangeRate;                                                   // 0x0200 (size: 0x4)
    float MaxUpperBodyPitchChangeDistance;                                            // 0x0204 (size: 0x4)
    TArray<class UAnimMontage*> MountAttackInitiateChargeMontages;                    // 0x0208 (size: 0x10)
    TArray<class UAnimMontage*> IntimidationMontages;                                 // 0x0218 (size: 0x10)
    TArray<class UAnimMontage*> DoorDestructionAnimations;                            // 0x0228 (size: 0x10)
    float DoorBreakdownAnimationDistance;                                             // 0x0238 (size: 0x4)
    FName DoorDestructionNotifyName;                                                  // 0x023C (size: 0x8)
    class UCurveVector* RazorPositionDuringVentilationAttackCurve;                    // 0x0248 (size: 0x8)
    class UAkAudioEvent* IdleSleepingAudioEvent;                                      // 0x0250 (size: 0x8)
    class UAkAudioEvent* IdleAlertedAudioEvent;                                       // 0x0258 (size: 0x8)
    class UAkAudioEvent* IdleAlertedAggressiveAudioEvent;                             // 0x0260 (size: 0x8)
    class UAkAudioEvent* IdleCombatAudioEvent;                                        // 0x0268 (size: 0x8)
    class UAkAudioEvent* DeathAudioEvent;                                             // 0x0270 (size: 0x8)
    class UAkAudioEvent* FootstepAudioEvent;                                          // 0x0278 (size: 0x8)
    class UAkAudioEvent* StartSearchAudioEvent;                                       // 0x0280 (size: 0x8)
    class UAkAudioEvent* StopSearchAudioEvent;                                        // 0x0288 (size: 0x8)
    FGameplayTag HitReactTypeStanding;                                                // 0x0290 (size: 0x8)
    FGameplayTag HitReactTypeWeakSpot;                                                // 0x0298 (size: 0x8)

}; // Size: 0x2A0

class URazorMovementComponent : public UConZCharacterMovementComponent
{
    float _walkSpeedPerRazorStance;                                                   // 0x0DA8 (size: 0x18)
    float _walkAccelerationPerRazorStance;                                            // 0x0DC0 (size: 0x18)
    float _walkDecelerationPerRazorStance;                                            // 0x0DD8 (size: 0x18)
    float _yawRotationSpeedPerRazorStance;                                            // 0x0DF0 (size: 0x18)
    float _combatCloseChargeSpeedDistance;                                            // 0x0E08 (size: 0x4)
    float _combatCloseChargeSpeed;                                                    // 0x0E0C (size: 0x4)
    float _combatCloseChargeAcceleration;                                             // 0x0E10 (size: 0x4)
    float _combatCloseChargeDeceleration;                                             // 0x0E14 (size: 0x4)
    float _hitReactStateWalkSpeedMultiplier;                                          // 0x0E18 (size: 0x4)
    float _hitReactSlowdownDuration;                                                  // 0x0E1C (size: 0x4)

}; // Size: 0xEA0

class URecipeIngredientButton : public UUserWidget
{
    class UImage* _background;                                                        // 0x02C0 (size: 0x8)
    class UImage* _lines;                                                             // 0x02C8 (size: 0x8)
    class UImage* _border;                                                            // 0x02D0 (size: 0x8)
    class UImage* _icon;                                                              // 0x02D8 (size: 0x8)
    class UHorizontalBox* _wholeUsesHBox;                                             // 0x02E0 (size: 0x8)
    class UTextBlock* _wholeUsesTextBlock;                                            // 0x02E8 (size: 0x8)
    class UHorizontalBox* _partialUsesHBox;                                           // 0x02F0 (size: 0x8)
    class UTextBlock* _partialUsesTextBlock;                                          // 0x02F8 (size: 0x8)
    class UCookingInfoButton* _infoButton;                                            // 0x0300 (size: 0x8)
    TSubclassOf<class UTextOnlyTooltip> _ingredientTextTooltipClass;                  // 0x0310 (size: 0x8)

}; // Size: 0x320

class URemoteSensorRegistry : public UObject
{
}; // Size: 0x48

class URemoveCartridge : public UWeaponActionUnloadAmmoSequence
{
    FName MontageEndSectionName;                                                      // 0x0050 (size: 0x8)

}; // Size: 0x58

class URemoveMagazineInsertCartridge : public UWeaponActionReloadSequence
{
}; // Size: 0x90

class URemoveMagazineInsertMagazine : public UWeaponActionReloadSequence
{
}; // Size: 0x90

class URemoveMagazineInsertMagazineInsertCartridge : public UWeaponActionReloadSequence
{
    FName MontageEndSectionName;                                                      // 0x0090 (size: 0x8)

}; // Size: 0xA0

class URemoveMagazineRemoveCartridge : public UWeaponActionUnloadAmmoSequence
{
    FName MontageEndSectionName;                                                      // 0x0050 (size: 0x8)

}; // Size: 0x58

class URepairStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class URepairToolItemTag : public UBaseItemTag
{
    FRepairToolItemParams Params;                                                     // 0x0030 (size: 0x58)

}; // Size: 0x88

class URepairableItemTag : public UBaseItemTag
{
    FRepairableParams Params;                                                         // 0x0030 (size: 0x38)

}; // Size: 0x68

class UReplenishableResourceBaseComponent : public UInstancedStaticMeshComponent
{
    FReplenishableResourceDescription _replenishableResourceDescription;              // 0x05A8 (size: 0x88)
    FName _replenishableResourceAmountMaterialParameterName;                          // 0x0630 (size: 0x8)

}; // Size: 0x640

class UReplenishableResourceComponent : public UReplenishableResourceBaseComponent
{
    FFillItemWithReplenishableResourceInteractionData _replenishableResourceFillItemInteractionData; // 0x0638 (size: 0x40)
    float QuantityPerDrink;                                                           // 0x0678 (size: 0x4)
    float Salinity;                                                                   // 0x067C (size: 0x4)
    class UAkAudioEvent* StartDrinkingAudioEvent;                                     // 0x0680 (size: 0x8)
    class UAkAudioEvent* StopDrinkingAudioEvent;                                      // 0x0688 (size: 0x8)

}; // Size: 0x690

class UReplenishableResourceManager : public UActorComponent
{
    int32 _maxNumReplenishableResourceReplenishmentsPerTick;                          // 0x0228 (size: 0x4)
    float _playerProximityToReplenish;                                                // 0x022C (size: 0x4)

    void NetMulticast_SetReplenishableResourceAmount(int32 dataVersion, FPackedLocation ID, float Value);
    void NetMulticast_ReserveReplenishableResourceSlot(int32 dataVersion, FPackedLocation ID, int32 SlotIndex);
    void NetMulticast_ReleaseReplenishableResourceSlot(int32 dataVersion, FPackedLocation ID, int32 SlotIndex);
    void NetMulticast_DestroyReplenishableResource(int32 dataVersion, FPackedLocation ID);
    void NetMulticast_CreateReplenishableResource(int32 dataVersion, const FReplenishableResourceDescription& Description);
}; // Size: 0x230

class URequestMinigameToolsRequest : public UPlayerRpcChannelServerRequest
{
}; // Size: 0x40

class URequestMinigameToolsResponse : public UPlayerRpcChannelServerResponse
{
}; // Size: 0x38

class UResistanceSkill : public UConstitutionSkill
{
}; // Size: 0xC8

class UResourceIndicatorWidget : public UUserWidget
{

    float GetResourceAmountRatio();
}; // Size: 0x278

class UResourceLockingManager : public UActorComponent
{

    void OnResourceDestroyed(class AActor* Resource);
    void OnLockOwnerDestroyed(class AActor* lockOwner);
    void NetMulticast_UnlockResource(int32 dataVersion, const FResourceNetworkGUID& ResourceGUID, int32 ResourceId);
    void NetMulticast_UnlockIntersectingAreas(int32 dataVersion, const FBox& Area);
    void NetMulticast_UnlockArea(int32 dataVersion, const FBox& Area);
    void NetMulticast_RemoveAreaLocks(int32 dataVersion, const TArray<FAreaResourceLockNetwork>& Locks);
    void NetMulticast_RemoveActorLocks(int32 dataVersion, const TArray<FActorResourceLockNetwork>& Locks);
    void NetMulticast_LockResource(int32 dataVersion, const FResourceNetworkGUID& LockOwnerGUID, const FResourceNetworkGUID& ResourceGUID, int32 ResourceId);
    void NetMulticast_LockArea(int32 dataVersion, const FResourceNetworkGUID& LockOwnerGUID, FBox Area);
}; // Size: 0x1A0

class UResourcePointLightAnimator : public UBaseResourceLightAnimator
{
}; // Size: 0x178

class UResourcePoweredLightItemComponent : public UItemComponent
{
    float _intensityChangeStep;                                                       // 0x00E0 (size: 0x4)
    float _minIntensityValue;                                                         // 0x00E4 (size: 0x4)
    FColor _emissiveColorOn;                                                          // 0x00E8 (size: 0x4)
    FColor _emissiveColorOff;                                                         // 0x00EC (size: 0x4)
    class UAkAudioEvent* _lightActivatedAudioEvent;                                   // 0x00F0 (size: 0x8)
    TSubclassOf<class UBaseResourceLightAnimator> _animatorClass;                     // 0x00F8 (size: 0x8)
    uint8 _lightIntensityReplicated;                                                  // 0x0104 (size: 0x1)
    class UBaseResourceLightAnimator* _lightAnimator;                                 // 0x0128 (size: 0x8)

    void OnRep_LightIntensity();
    void OnComponentDeactivated(class UActorComponent* Component);
    void OnComponentActivated(class UActorComponent* Component, bool wasReset);
}; // Size: 0x130

class UResourceSpotLightAnimator : public UBaseResourceLightAnimator
{
}; // Size: 0x180

class URespawnSettings : public UDataAsset
{
    FRespawnParameters Parameters;                                                    // 0x0048 (size: 0x6C)

}; // Size: 0xB8

class URestAssetData : public UInteractionAssetData
{
    EPrisonerRestingMode RestingMode;                                                 // 0x0030 (size: 0x1)
    class UAnimSequenceBase* RestingAnimation;                                        // 0x0038 (size: 0x8)
    TArray<FVector> AdditionalEndRestLocations;                                       // 0x0040 (size: 0x10)

}; // Size: 0x50

class URestorableMeshInstancesManager : public UActorComponent
{
    float _actorsProcessingDelayOnStreamingLevelLoad;                                 // 0x01C0 (size: 0x4)
    float _processingBudgetPerTick;                                                   // 0x01C4 (size: 0x4)
    float _generateMeshInstancesToRestoreUpdateInterval;                              // 0x0330 (size: 0x4)
    float _minDistanceToPlayerPawnToRestoreMeshInstance;                              // 0x0348 (size: 0x4)

    void NetMulticast_RestoreRemovedMeshInstance(int32 dataVersion, const FRestorableMeshInstanceId& InstanceId);
    void NetMulticast_RemoveMeshInstance(int32 dataVersion, class UInstancedStaticMeshComponent* Component, const FRestorableMeshInstanceId& InstanceId, const FTransform& InstanceTransform);
}; // Size: 0x350

class URichTextInlineTextDecorator : public URichTextBlockDecorator
{
}; // Size: 0x28

class URiflesSkill : public URangedWeaponsSkill
{
}; // Size: 0x218

class URizzonerMovementComponent : public UConZCharacterMovementComponent
{
    float WaterImmersionToStartSwimming;                                              // 0x0DAC (size: 0x4)
    float WaterImmersionToStopSwimming;                                               // 0x0DB0 (size: 0x4)

    FString GetServerData();
    FString GetClientData();
}; // Size: 0x1900

class URunningSkill : public UConstitutionSkill
{
    FRunningSkillExperienceAwards NoSkillExperienceAwards;                            // 0x00C8 (size: 0x8)
    FRunningSkillExperienceAwards BasicSkillExperienceAwards;                         // 0x00D0 (size: 0x8)
    FRunningSkillExperienceAwards MediumSkillExperienceAwards;                        // 0x00D8 (size: 0x8)
    FRunningSkillExperienceAwards AdvancedSkillExperienceAwards;                      // 0x00E0 (size: 0x8)
    FRunningSkillExperienceAwards AboveAdvancedSkillExperienceAwards;                 // 0x00E8 (size: 0x8)
    FRunningSkillParametersPerSkillLevel NoSkillParameters;                           // 0x00F0 (size: 0x10)
    FRunningSkillParametersPerSkillLevel BasicSkillParameters;                        // 0x0100 (size: 0x10)
    FRunningSkillParametersPerSkillLevel MediumSkillParameters;                       // 0x0110 (size: 0x10)
    FRunningSkillParametersPerSkillLevel AdvancedSkillParameters;                     // 0x0120 (size: 0x10)

}; // Size: 0x138

class UScopeableItemComponent : public UItemComponent
{
    TArray<FScopeZoomLevelSettings> _zoomLevelSettings;                               // 0x00C8 (size: 0x10)
    class UTexture2D* _scopingOverlayTexture;                                         // 0x00D8 (size: 0x8)
    float _scopingStartDelay;                                                         // 0x00E0 (size: 0x4)
    float _scopingStopDelay;                                                          // 0x00E4 (size: 0x4)
    class UAnimMontage* _montageStandingFP;                                           // 0x00E8 (size: 0x8)
    class UAnimMontage* _montageCrouchingFP;                                          // 0x00F0 (size: 0x8)
    class UAnimMontage* _montageProneFP;                                              // 0x00F8 (size: 0x8)
    class UAnimMontage* _montageStandingTP;                                           // 0x0100 (size: 0x8)
    class UAnimMontage* _montageCrouchingTP;                                          // 0x0108 (size: 0x8)
    class UAnimMontage* _montageProneTP;                                              // 0x0110 (size: 0x8)
    int32 _currentZoomLevel;                                                          // 0x0118 (size: 0x4)

}; // Size: 0x120

class UScopeableItemComponentState : public UItemComponentStateBase
{
    int32 CurrentZoomLevel;                                                           // 0x0040 (size: 0x4)

}; // Size: 0x48

class UScreenSpaceHealthWidget : public UUserWidget
{

    void SetMaxHealthPercentage(float Value);
    void SetHealthPercentage(float Value);
}; // Size: 0x268

class UScrollingSizeBox : public UUserWidget
{
    class USizeBox* _mainSizeBox;                                                     // 0x0268 (size: 0x8)
    class UNamedSlot* _customContentSlot;                                             // 0x0270 (size: 0x8)
    bool _overrideWidth;                                                              // 0x0278 (size: 0x1)
    bool _overrideHeight;                                                             // 0x0279 (size: 0x1)
    float _width;                                                                     // 0x027C (size: 0x4)
    float _height;                                                                    // 0x0280 (size: 0x4)
    float _speed;                                                                     // 0x0284 (size: 0x4)
    float _startHaltDuration;                                                         // 0x0288 (size: 0x4)
    float _startAccelerationDuration;                                                 // 0x028C (size: 0x4)
    float _endHaltDuration;                                                           // 0x0290 (size: 0x4)
    float _endRetardationDuration;                                                    // 0x0294 (size: 0x4)
    bool _isCultureDependantScrolling;                                                // 0x0298 (size: 0x1)
    EScrollingSizeBoxDirection _direction;                                            // 0x0299 (size: 0x1)
    EScrollingSizeBoxLoopingType _loopingType;                                        // 0x029A (size: 0x1)
    EScrollingSizeBoxDynamic _dynamic;                                                // 0x029B (size: 0x1)
    EScrollingSizeBoxScrollDemand _scrollDemand;                                      // 0x029C (size: 0x1)

}; // Size: 0x2C8

class UScumPointDamageType : public UDamageType
{
}; // Size: 0x40

class UScumRadialDamageType : public UDamageType
{
}; // Size: 0x40

class USearchBox : public UUserWidget
{
    bool PreviewSelectedState;                                                        // 0x02A8 (size: 0x1)
    class UEditableText* _editBox;                                                    // 0x02B0 (size: 0x8)
    class UWidgetSwitcher* _backgroundSwitcher;                                       // 0x02B8 (size: 0x8)
    class UClearSearchButton* _clearSearchButton;                                     // 0x02C0 (size: 0x8)
    bool _overrideSearchQueryText;                                                    // 0x02E8 (size: 0x1)
    FText _searchQueryTextOverride;                                                   // 0x02F0 (size: 0x18)

    void TextChanged(const FText& Text);
}; // Size: 0x308

class USearchForItemsAssetData : public UInteractionAssetData
{
    class USearchItemDataAsset* SearchAsset;                                          // 0x0030 (size: 0x8)

}; // Size: 0x38

class USearchItemDataAsset : public UDataAsset
{
    FText Caption;                                                                    // 0x0030 (size: 0x18)
    float Duration;                                                                   // 0x0048 (size: 0x4)
    TArray<FSearchPerItemData> SearchData;                                            // 0x0050 (size: 0x10)
    class UAkAudioEvent* StartSearchAudioEvent;                                       // 0x0060 (size: 0x8)
    class UAkAudioEvent* StopSearchAudioEvent;                                        // 0x0068 (size: 0x8)
    ENoiseLevel noiseLevel;                                                           // 0x0070 (size: 0x1)

}; // Size: 0x78

class USedentaryNPCAnimInstance : public UAnimInstance
{
    FRotator _headTurningRotator;                                                     // 0x02C0 (size: 0xC)

}; // Size: 0x2D0

class USedentaryNPCBackgroundInteraction : public UObject
{
    EBackgroundInteractionType _backgroundInteractionType;                            // 0x0028 (size: 0x1)
    int32 _priority;                                                                  // 0x002C (size: 0x4)
    float _cooldownTime;                                                              // 0x0030 (size: 0x4)
    bool _canEverTick;                                                                // 0x0034 (size: 0x1)
    FFloatRange _newBackgroundInteractionInterval;                                    // 0x0038 (size: 0x10)
    TArray<FSedentaryNPCHeadAnimationAndAudio> _animationVariationsBegin;             // 0x0058 (size: 0x10)
    TArray<FSedentaryNPCHeadAnimationAndAudio> _animationVariationsTick;              // 0x0068 (size: 0x10)
    TArray<FSedentaryNPCHeadAnimationAndAudio> _animationVariationsEnd;               // 0x0078 (size: 0x10)
    TArray<FSedentaryNPCHeadAnimationAndAudio> _animationVariationsOneShot;           // 0x0088 (size: 0x10)
    class UAkAudioEvent* _stopOwningPawnAudioEvent;                                   // 0x0098 (size: 0x8)

    void NetMulticast_PlayBackgroundInteraction(int32 animationAudioPairIndex, EBackgroundInteractionPlayType playType);
}; // Size: 0xA0

class USedentaryNPCHeadAnimInstance : public UAnimInstance
{
    TArray<FName> _updateableBones;                                                   // 0x02C0 (size: 0x10)
    TMap<class FName, class FTransform> _bonesWithUpdateableTransforms;               // 0x02D0 (size: 0x50)
    class UAnimSequenceBase* _faceIdleAnimation;                                      // 0x0320 (size: 0x8)
    FName _headBoneName;                                                              // 0x0328 (size: 0x8)
    FRotator _headFollowingRotation;                                                  // 0x0330 (size: 0xC)
    FVector _animationHeadScale;                                                      // 0x0380 (size: 0xC)
    float _eyesYawCurveValue;                                                         // 0x03AC (size: 0x4)
    float _eyesPitchCurveValue;                                                       // 0x03B0 (size: 0x4)
    float _blinkCurveValue;                                                           // 0x03F8 (size: 0x4)

}; // Size: 0x400

class USelectionOverlayWidget : public UUserWidget
{
    class UImage* _solidShown;                                                        // 0x02B0 (size: 0x8)
    class UImage* _gradientShown;                                                     // 0x02B8 (size: 0x8)
    class UImage* _solidSelected;                                                     // 0x02C0 (size: 0x8)
    class UImage* _gradientSelected;                                                  // 0x02C8 (size: 0x8)
    FDataTableRowHandle _highlightColorRef;                                           // 0x02D0 (size: 0x10)
    float _solidWidth;                                                                // 0x02E0 (size: 0x4)

}; // Size: 0x2E8

class USentryAIControllerEncounterSaveState : public UConZAIControllerEncounterSaveState
{
    ESentryState2 SentryState;                                                        // 0x0080 (size: 0x1)

}; // Size: 0x88

class USentryAnimInstance2 : public UAnimInstance
{
    bool ShouldUseLUWalkStopAnimation;                                                // 0x02B8 (size: 0x1)
    float stoppingDistance;                                                           // 0x02BC (size: 0x4)
    FInPlaceTurningData _turnInPlaceData;                                             // 0x02D0 (size: 0x2C)
    float _upperBodyRotationLerpFactor;                                               // 0x030C (size: 0x4)
    float _grenadeLauncherUpperFlapMaxPitch;                                          // 0x0310 (size: 0x4)
    float _grenadeLauncherLowerFlapMaxPitch;                                          // 0x0314 (size: 0x4)
    float _grenadeLauncherFlapsTimeToOpenFlaps;                                       // 0x0318 (size: 0x4)
    int32 _glitchingVaritionsNum;                                                     // 0x031C (size: 0x4)
    float _glitchingUpdateTimeMin;                                                    // 0x0320 (size: 0x4)
    float _glitchingUpdateTimeMax;                                                    // 0x0324 (size: 0x4)
    float _chanceToGlitchPerHealthState;                                              // 0x0328 (size: 0x18)
    int32 _miningunBonesNum;                                                          // 0x0340 (size: 0x4)
    float _minigunRotationSpeed;                                                      // 0x0344 (size: 0x4)
    float _minigunRotationAcceleration;                                               // 0x0348 (size: 0x4)
    float _minigunRotationDeceleration;                                               // 0x034C (size: 0x4)
    bool _isSentryCompletelyInitialized;                                              // 0x0354 (size: 0x1)
    bool _wantsToMove;                                                                // 0x0355 (size: 0x1)
    bool _previousWantsToMove;                                                        // 0x0356 (size: 0x1)
    ESentryMovementPace2 _movementPace;                                               // 0x0357 (size: 0x1)
    float _actualCourseAngle;                                                         // 0x0358 (size: 0x4)
    float _desiredCourseAngle;                                                        // 0x035C (size: 0x4)
    float _desiredCoursePitchAngle;                                                   // 0x0360 (size: 0x4)
    float _angularVelocity;                                                           // 0x0364 (size: 0x4)
    FVector _velocity;                                                                // 0x0368 (size: 0xC)
    float _speed;                                                                     // 0x0374 (size: 0x4)
    float _walkSpeedMultiplier;                                                       // 0x0378 (size: 0x4)
    FVector _forwardVector;                                                           // 0x037C (size: 0xC)
    bool _isFalling;                                                                  // 0x0388 (size: 0x1)
    bool _isDead;                                                                     // 0x0389 (size: 0x1)
    ESentryStance _sentryStance;                                                      // 0x038A (size: 0x1)
    ESentryHealthState _sentryHealthState;                                            // 0x038B (size: 0x1)
    ESentryCombatVariation _combatVariation;                                          // 0x038C (size: 0x1)
    bool _shouldAimLongRangeWeapon;                                                   // 0x038D (size: 0x1)
    FVector _longRangeGunLookAtLocation;                                              // 0x0390 (size: 0xC)
    bool _shouldAimMediumRangeWeapon;                                                 // 0x039C (size: 0x1)
    FVector _mediumRangeGunLookAtLocation;                                            // 0x03A0 (size: 0xC)
    bool _shouldAimHighPrecisionWeapon;                                               // 0x03AC (size: 0x1)
    FVector _highPrecisionGunLookAtLocation;                                          // 0x03B0 (size: 0xC)
    bool _hasUpperBodyFocusLocation;                                                  // 0x03BC (size: 0x1)
    float _upperBodyFocusRotationYaw;                                                 // 0x03C0 (size: 0x4)
    float _grenadeLauncherUpperFlapCurrentPitch;                                      // 0x03C4 (size: 0x4)
    float _grenadeLauncherLowerFlapCurrentPitch;                                      // 0x03C8 (size: 0x4)
    bool _isFiring;                                                                   // 0x03CC (size: 0x1)
    TArray<FSentryGlitchingPartInfo> _partGlitchingInfo;                              // 0x03D0 (size: 0x10)
    TArray<float> _minigunRotationAngles;                                             // 0x03E0 (size: 0x10)
    bool _isDeactivated;                                                              // 0x03F0 (size: 0x1)
    bool _isActivating;                                                               // 0x03F1 (size: 0x1)

    float GetTurnInPlaceElapsedTimeRight();
    float GetTurnInPlaceElapsedTimeLeft();
    float GetTurnInPlaceDirectionBlendAlpha();
    float GetTurnInPlaceBlendAlpha();
    float FindTimeAtStoppingDistance(const class UAnimSequenceBase* AnimSequence, float stoppingDistance);
    void AnimNotify_SentryPlayLongRangeWeaponMuzzleFlash();
    void AnimNotify_SentryJump();
    void AnimNotify_SentryHighPrecisionWeaponStartCharging();
    void AnimNotify_SentryHighPrecisionAttackFired();
    void AnimNotify_RFootDown();
    void AnimNotify_LFootDown();
}; // Size: 0x400

class USentryEncounterSaveState : public UConZCharacterEncounterSaveState
{
    float health;                                                                     // 0x0038 (size: 0x4)
    bool IsSpawnedThroughSpawner;                                                     // 0x003C (size: 0x1)
    FVector SpawnerLocationZero;                                                      // 0x0040 (size: 0xC)
    FRotator SpawnerRotator;                                                          // 0x004C (size: 0xC)
    TArray<FVector> PatrolPointsRelativeLocations;                                    // 0x0058 (size: 0x10)
    float OperatingRange;                                                             // 0x0068 (size: 0x4)
    bool IsForcedUnderground;                                                         // 0x006C (size: 0x1)
    int32 AmmunitionLongRangeWeapon;                                                  // 0x0070 (size: 0x4)

}; // Size: 0x78

class USentryFirstPersonViewComponent : public UPrisonerViewComponent
{
}; // Size: 0xD0

class USentryHotZoneBoxComponent : public UBoxComponent
{
}; // Size: 0x480

class USentryMovementComponent : public UConZCharacterMovementComponent
{
    class UCurveFloat* MaxRotationRateCurve;                                          // 0x0DA0 (size: 0x8)
    float RotationInterpolationSpeed;                                                 // 0x0DA8 (size: 0x4)
    bool CorrectServerReceivedZ;                                                      // 0x0DAC (size: 0x1)
    float _movementPauseAfterLandingTime;                                             // 0x0DD0 (size: 0x4)
    float _timeNeededToBeConsideredFalling;                                           // 0x0DE0 (size: 0x4)

}; // Size: 0xDF0

class USentryThirdPersonViewComponent : public UPrisonerViewComponent
{
    FName StandingSubviewName;                                                        // 0x00D0 (size: 0x8)
    FName StandingAimingSubviewName;                                                  // 0x00D8 (size: 0x8)

}; // Size: 0x100

class USerializationStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UServerBrowser : public UBaseMenu
{
    class UVerticalBox* PasswordPopup;                                                // 0x02D8 (size: 0x8)
    class UEditableTextBox* PasswordPopupTextBox;                                     // 0x02E0 (size: 0x8)
    class UVerticalBox* MenuVerticalBox;                                              // 0x02E8 (size: 0x8)
    class UConZStandardButton* Back;                                                  // 0x02F0 (size: 0x8)
    class UEditableTextBox* DirectConnectTextBox;                                     // 0x02F8 (size: 0x8)
    class UVerticalBox* MainVerticalBox;                                              // 0x0300 (size: 0x8)
    class UConZStandardButton* PasswordPopupCancelButton;                             // 0x0308 (size: 0x8)
    class UConZStandardButton* PasswordPopupOkButton;                                 // 0x0310 (size: 0x8)
    class UConZStandardButton* Refresh;                                               // 0x0318 (size: 0x8)
    class UConZStandardButton* ServerHosting;                                         // 0x0320 (size: 0x8)
    class UEditableTextBox* _searchBox;                                               // 0x0328 (size: 0x8)
    class UOverlay* ServersCategoryOverlay;                                           // 0x0330 (size: 0x8)
    class USortByButton* SortByHost;                                                  // 0x0338 (size: 0x8)
    class USortByButton* SortByOfficial;                                              // 0x0340 (size: 0x8)
    class USortByButton* SortByPassword;                                              // 0x0348 (size: 0x8)
    class USortByButton* SortByPing;                                                  // 0x0350 (size: 0x8)
    class USortByButton* SortByPlayers;                                               // 0x0358 (size: 0x8)
    class USortByButton* SortByVersion;                                               // 0x0360 (size: 0x8)
    class UServerBrowserCheckboxWidget* _hideEmptyCB;                                 // 0x0368 (size: 0x8)
    class UServerBrowserCheckboxWidget* _hideFullCB;                                  // 0x0370 (size: 0x8)
    class UServerBrowserCheckboxWidget* _passwordProtectedCB;                         // 0x0378 (size: 0x8)
    class UServerBrowserCheckboxWidget* _favoritesCB;                                 // 0x0380 (size: 0x8)
    class UServerBrowserDropdownWidget* _typeDropdown;                                // 0x0388 (size: 0x8)
    class UServerBrowserDropdownWidget* _activityDropdown;                            // 0x0390 (size: 0x8)
    class UServerBrowserDropdownWidget* _regionDropdown;                              // 0x0398 (size: 0x8)
    class UServerBrowserDropdownWidget* _latencyDropdown;                             // 0x03A0 (size: 0x8)
    class UCheckBox* _sortFavorites;                                                  // 0x03A8 (size: 0x8)
    class UCursedScrollBar* UI_ScrollBar;                                             // 0x03B0 (size: 0x8)
    class UCircularThrobber* CircularThrobber_52;                                     // 0x03B8 (size: 0x8)
    class UServerInfoWidget* SelectedServer;                                          // 0x03C0 (size: 0x8)
    class UConZStandardButton* _lastButton;                                           // 0x0440 (size: 0x8)
    class UWidget* _lastWidget;                                                       // 0x0448 (size: 0x8)
    class UVerticalBox* _serverList;                                                  // 0x0450 (size: 0x8)
    class UConZStandardButton* _connectButton;                                        // 0x0458 (size: 0x8)
    TSubclassOf<class UServerInfoWidget> _serverInfoWidgetClass;                      // 0x04C8 (size: 0x8)

    void UpdateList();
    void OnSortFavoritesStateChanged(bool checked);
    void OnSearchBoxTextCommitted(const FText& Text, TEnumAsByte<ETextCommit::Type> CommitMethod);
    void OnSearchBoxTextChanged(const FText& Text);
    void OnPasswordPopupTextBoxTextCommitted(const FText& Text, TEnumAsByte<ETextCommit::Type> CommitMethod);
    void OnDirectConnectTextBoxTextCommitted(const FText& Text, TEnumAsByte<ETextCommit::Type> CommitMethod);
    void OnDirectConnectTextBoxTextChanged(const FText& Text);
    void OnClickedServerHosting();
}; // Size: 0x510

class UServerBrowserCheckboxWidget : public UUserWidget
{
    class UCheckBox* _checkBox;                                                       // 0x0280 (size: 0x8)
    class UTextBlock* _label;                                                         // 0x0288 (size: 0x8)
    FLinearColor _uncheckedLabelColor;                                                // 0x0290 (size: 0x10)
    FLinearColor _checkedLabelColor;                                                  // 0x02A0 (size: 0x10)
    FText _labelText;                                                                 // 0x02B0 (size: 0x18)
    bool _isCheckedByDefault;                                                         // 0x02C8 (size: 0x1)

    void OnCheckStateChanged(bool IsChecked);
}; // Size: 0x2D0

class UServerBrowserDropdownEntryWidget : public UUserWidget
{
    class UImage* _icon;                                                              // 0x0280 (size: 0x8)
    class UTextBlock* _label;                                                         // 0x0288 (size: 0x8)
    FLinearColor _regularIconColor;                                                   // 0x0290 (size: 0x10)
    FLinearColor _hoveredIconColor;                                                   // 0x02A0 (size: 0x10)
    FLinearColor _selectedIconColor;                                                  // 0x02B0 (size: 0x10)

}; // Size: 0x2C8

class UServerBrowserDropdownWidget : public UUserWidget
{
    class UImage* _backgroundImage;                                                   // 0x0298 (size: 0x8)
    class UTextBlock* _label;                                                         // 0x02A0 (size: 0x8)
    class USizeBox* _entriesSizeBox;                                                  // 0x02A8 (size: 0x8)
    class UVerticalBox* _entriesVerticalBox;                                          // 0x02B0 (size: 0x8)
    TArray<FText> _entryUIData;                                                       // 0x02B8 (size: 0x10)
    TSubclassOf<class UServerBrowserDropdownEntryWidget> _entryWidgetClass;           // 0x02C8 (size: 0x8)

}; // Size: 0x2E0

class UServerInfoWidget : public UUserWidget
{
    FServerInfo _serverInfo;                                                          // 0x02C8 (size: 0x50)
    int32 FontSize;                                                                   // 0x0318 (size: 0x4)
    class UAkAudioEvent* ClickSound;                                                  // 0x0328 (size: 0x8)
    class UButton* DeleteServerButton;                                                // 0x0330 (size: 0x8)
    class UButton* Button_0;                                                          // 0x0338 (size: 0x8)
    class UTextBlock* NameText;                                                       // 0x0340 (size: 0x8)
    class UTextBlock* PingText;                                                       // 0x0348 (size: 0x8)
    class UTextBlock* PlayersText;                                                    // 0x0350 (size: 0x8)
    class UImage* _passwordIcon;                                                      // 0x0358 (size: 0x8)
    class UImage* _officialIcon;                                                      // 0x0360 (size: 0x8)
    class UImage* _backgroundImage;                                                   // 0x0368 (size: 0x8)
    class UTextBlock* VersionText;                                                    // 0x0370 (size: 0x8)
    class UWidgetSwitcher* _favoriteButtonSwitcher;                                   // 0x0378 (size: 0x8)
    class UButton* _favoriteServerButton;                                             // 0x0380 (size: 0x8)
    class UThrobber* Throbber_0;                                                      // 0x0388 (size: 0x8)
    FLinearColor _regularColor;                                                       // 0x0390 (size: 0x10)
    FLinearColor _invertedColor;                                                      // 0x03A0 (size: 0x10)
    FLinearColor _transparentColor;                                                   // 0x03B0 (size: 0x10)
    FLinearColor _lowPingColor;                                                       // 0x03C0 (size: 0x10)
    FLinearColor _mediumPingColor;                                                    // 0x03D0 (size: 0x10)
    FLinearColor _highPingColor;                                                      // 0x03E0 (size: 0x10)

    void OnFavoriteClicked();
    void OnDeleteClicked();
    void OnClickedButton_0();
}; // Size: 0x3F0

class UServerPriceCache : public UObject
{
}; // Size: 0x228

class UServerSettingsMenu : public UConZSettingsMenu
{
}; // Size: 0x610

class UServerSettingsUIController : public UConZSettingsUIController
{
}; // Size: 0x288

class USharkAnimInstance : public UAnimInstance
{
    FName _mouthTargetName;                                                           // 0x02C8 (size: 0x8)
    float _mouthMorphValueChangePerSecond;                                            // 0x02D0 (size: 0x4)
    FName _teethTargetName;                                                           // 0x02D4 (size: 0x8)
    float _teethMorphValueChangePerSecond;                                            // 0x02DC (size: 0x4)
    FName _eyesTargetName;                                                            // 0x02E0 (size: 0x8)
    float _eyesMorphValueChangePerSecond;                                             // 0x02E8 (size: 0x4)
    FVector _velocity;                                                                // 0x02EC (size: 0xC)
    float _angularVelocityYaw;                                                        // 0x02F8 (size: 0x4)
    float _angularVelocityPitch;                                                      // 0x02FC (size: 0x4)
    EFishBehavior _behaviorMode;                                                      // 0x0300 (size: 0x1)
    bool _isAlive;                                                                    // 0x0301 (size: 0x1)

    bool IsAlive();
}; // Size: 0x360

class USharpMeleeWeaponItemTag : public UBaseItemTag
{
}; // Size: 0x30

class UShotsFiredTrackerWidget : public UUserWidget
{
    class UTextBlock* _widgetText;                                                    // 0x0268 (size: 0x8)

}; // Size: 0x270

class USimpleDropdownEntryCategoryTitle : public UUserWidget
{
    class UTextBlock* _label;                                                         // 0x0268 (size: 0x8)

}; // Size: 0x270

class USimpleTextDropdownEntry : public UUserWidget
{
    class UImage* _background;                                                        // 0x0278 (size: 0x8)
    class UTextBlock* _label;                                                         // 0x0280 (size: 0x8)
    FLinearColor _black;                                                              // 0x0288 (size: 0x10)
    FLinearColor _white;                                                              // 0x0298 (size: 0x10)
    int32 _singleIndentationValue;                                                    // 0x02A8 (size: 0x4)

}; // Size: 0x2B0

class USimpleTextDropdownEntryWithCheckBox : public USimpleTextDropdownEntry
{
    class USquareCheckbox* _checkBox;                                                 // 0x02C0 (size: 0x8)

}; // Size: 0x2C8

class USimulatedShooterFiringStrategy : public UObject
{
}; // Size: 0x40

class USimulatedShooterFiringStrategy_Flamethrower : public USimulatedShooterFiringStrategy
{
    float _fuelUsagePerHour;                                                          // 0x0050 (size: 0x4)

    void OnResourceComponentDeactivated(class UActorComponent* Component);
}; // Size: 0x58

class USimulatedShooterFiringStrategy_Hitscan : public USimulatedShooterFiringStrategy_Projectile
{
    float _range;                                                                     // 0x0068 (size: 0x4)
    bool _useWeaponTrace;                                                             // 0x006C (size: 0x1)

}; // Size: 0x70

class USimulatedShooterFiringStrategy_Projectile : public USimulatedShooterFiringStrategy
{
    float _rateOfFire;                                                                // 0x0040 (size: 0x4)
    float _maxRateOfFire;                                                             // 0x0048 (size: 0x4)
    float _timeToMaxFireRate;                                                         // 0x004C (size: 0x4)
    float _firingConeAngle;                                                           // 0x0054 (size: 0x4)
    float _spread;                                                                    // 0x0058 (size: 0x4)

}; // Size: 0x68

class USimulatedShooterFiringStrategy_SpawnProjectile : public USimulatedShooterFiringStrategy_Projectile
{
}; // Size: 0x68

class USingletonStatics : public UBlueprintFunctionLibrary
{

    class UDataSingleton* GetDataSingleton();
}; // Size: 0x28

class USkill : public UDataAsset
{
    FText Caption;                                                                    // 0x0030 (size: 0x18)
    ESkillReplicationID ReplicationID;                                                // 0x0048 (size: 0x1)
    float ComboBonus;                                                                 // 0x004C (size: 0x4)
    float NoSkillBonus;                                                               // 0x0050 (size: 0x4)
    float BasicBonus;                                                                 // 0x0054 (size: 0x4)
    float MediumBonus;                                                                // 0x0058 (size: 0x4)
    float AdvancedBonus;                                                              // 0x005C (size: 0x4)
    float DisplayActionMessages;                                                      // 0x0060 (size: 0x4)
    bool IsAvailableInCharacterCreation;                                              // 0x0064 (size: 0x1)
    class UTexture2D* _skillIcon;                                                     // 0x0068 (size: 0x8)
    float _skillFamePointsMultiplier;                                                 // 0x00A4 (size: 0x4)
    TSubclassOf<class UPrisonerSkillUIData> _uiDataClass;                             // 0x00A8 (size: 0x8)

}; // Size: 0xB0

class USkillAction : public UObject
{

    void OnActionFinished();
    void OnActionCanceled();
}; // Size: 0xA0

class USkillClasses : public UObject
{
}; // Size: 0x38

class USkillEventHandler : public UObject
{
}; // Size: 0x30

class USkydivingHUD : public UUserWidget
{
}; // Size: 0x268

class USliderWithLabelAndNumber : public UConZSlider
{
    class UTextBlock* _name;                                                          // 0x0DD8 (size: 0x8)
    class UTextBlock* _valueDisplay;                                                  // 0x0DE0 (size: 0x8)
    class UImage* _focusBackgroundImage;                                              // 0x0DE8 (size: 0x8)
    FSliderWithLabelAndNumberStyle _selectedAndFocusedSWNANStyle;                     // 0x0DF0 (size: 0x158)
    FSliderWithLabelAndNumberStyle _selectedAndUnfocusedSWNANStyle;                   // 0x0F48 (size: 0x158)
    FSliderWithLabelAndNumberStyle _unselectedSWNANStyle;                             // 0x10A0 (size: 0x158)
    FSliderWithLabelAndNumberStyle _highlightedSWNANStyle;                            // 0x11F8 (size: 0x158)
    FSliderWithLabelAndNumberStyle _disabledSWNANStyle;                               // 0x1350 (size: 0x158)
    FText _label;                                                                     // 0x14A8 (size: 0x18)
    int32 _decimalPlacesShown;                                                        // 0x14C0 (size: 0x4)
    int32 _decimalPlacesShifted;                                                      // 0x14C4 (size: 0x4)
    bool _showAsPercentage;                                                           // 0x14C8 (size: 0x1)

}; // Size: 0x14D0

class USmokableItemComponent : public UIgnitableItemComponent
{
    TArray<FSmokableSubstance> _smokableSubstances;                                   // 0x01A8 (size: 0x10)
    float _exhaustionRecoveryAmount;                                                  // 0x01B8 (size: 0x4)
    class UTexture2D* _burningIcon;                                                   // 0x01C0 (size: 0x8)
    float _minEmissivity;                                                             // 0x01C8 (size: 0x4)
    float _maxEmissivity;                                                             // 0x01CC (size: 0x4)
    class UMaterialInterface* _burningMaterial;                                       // 0x01D0 (size: 0x8)
    float _timeBetweenExhalation;                                                     // 0x01D8 (size: 0x4)
    FName _itemInHandsSocketName;                                                     // 0x01DC (size: 0x8)
    FName _itemEquippedSocketName;                                                    // 0x01E4 (size: 0x8)
    FTransform _offsetWhenEquipped;                                                   // 0x0200 (size: 0x30)

}; // Size: 0x280

class USmokableTag : public UBaseItemTag
{
}; // Size: 0x30

class USnipingSkill : public UIntelligenceSkill
{
    float _distanceLimit;                                                             // 0x00B0 (size: 0x4)
    FSnipingSkillExperienceAwards NoSkillExperienceAwards;                            // 0x00C0 (size: 0x34)
    FSnipingSkillExperienceAwards BasicSkillExperienceAwards;                         // 0x00F4 (size: 0x34)
    FSnipingSkillExperienceAwards MediumSkillExperienceAwards;                        // 0x0128 (size: 0x34)
    FSnipingSkillExperienceAwards AdvancedSkillExperienceAwards;                      // 0x015C (size: 0x34)
    FSnipingSkillExperienceAwards AboveAdvancedSkillExperienceAwards;                 // 0x0190 (size: 0x34)

}; // Size: 0x1C8

class USortByButton : public UUserWidget
{
    class UButton* Button_0;                                                          // 0x0280 (size: 0x8)
    class USizeBox* SizeBox_0;                                                        // 0x0288 (size: 0x8)
    class UTextBlock* TextBlock_0;                                                    // 0x0290 (size: 0x8)
    float Size;                                                                       // 0x0298 (size: 0x4)
    FText Text;                                                                       // 0x02A0 (size: 0x18)
    TEnumAsByte<ESortByType> Type;                                                    // 0x02B8 (size: 0x1)
    bool _shouldTextBeCentered;                                                       // 0x02B9 (size: 0x1)

    void SetType(TEnumAsByte<ESortByType> sortType);
    void OnTheButtonClicked();
}; // Size: 0x2C0

class USoundNotification : public UConZNotification
{
}; // Size: 0x30

class USoundNotificationDescription : public UNotificationDescription
{
    class UAkAudioEvent* AudioEvent;                                                  // 0x0040 (size: 0x8)
    class AActor* Actor;                                                              // 0x0048 (size: 0x8)
    bool stopWhenAttachedToDestroyed;                                                 // 0x0050 (size: 0x1)

}; // Size: 0x58

class USoundReducingItemTag : public UBaseItemTag
{
}; // Size: 0x30

class USpamProtectionState : public UObject
{
    ESpamSeverity Severity;                                                           // 0x0028 (size: 0x1)
    FDateTime LastSeverityChange;                                                     // 0x0030 (size: 0x8)
    FDateTime LastTimeout;                                                            // 0x0038 (size: 0x8)
    bool PermanentTimeout;                                                            // 0x0040 (size: 0x1)
    ESpamSeverity MaxSeverityReached;                                                 // 0x0041 (size: 0x1)
    int32 MaxSeverityCount;                                                           // 0x0044 (size: 0x4)

}; // Size: 0x58

class USpawnChoiceWidget : public UUserWidget
{
    class UImage* _progressBar;                                                       // 0x0278 (size: 0x8)
    class UMaterialInstanceDynamic* _progressMaterial;                                // 0x0280 (size: 0x8)
    class UButton* _choiceButton;                                                     // 0x0288 (size: 0x8)
    class UTextBlock* _optionText;                                                    // 0x0290 (size: 0x8)
    class UTextBlock* _prohibitedText;                                                // 0x0298 (size: 0x8)
    class UTextBlock* _priceText;                                                     // 0x02A0 (size: 0x8)
    class UImage* SelectionArrow;                                                     // 0x02A8 (size: 0x8)
    class UBorder* Border_0;                                                          // 0x02B0 (size: 0x8)
    float _borderFill;                                                                // 0x02B8 (size: 0x4)
    int32 _price;                                                                     // 0x02BC (size: 0x4)
    ECurrencyType _priceCurrency;                                                     // 0x02C0 (size: 0x1)
    FText _optionTextBlockText;                                                       // 0x02C8 (size: 0x18)

    void Update();
    void OnChoiceButtonClicked();
}; // Size: 0x2E8

class USpawnDecalWhenParticleCollides : public UParticleModuleEventSendToGame
{
    TArray<FParticleCollisionDecalData> Decals;                                       // 0x0028 (size: 0x10)

}; // Size: 0x38

class USpawnMenuWidget : public UUserWidget
{
    class USpawnChoiceWidget* _randomLocationButton;                                  // 0x0268 (size: 0x8)
    class USpawnChoiceWidget* _sectorLocationButton;                                  // 0x0270 (size: 0x8)
    class USpawnChoiceWidget* _shelterLocationButton;                                 // 0x0278 (size: 0x8)
    class USpawnChoiceWidget* _squadLocationButton;                                   // 0x0280 (size: 0x8)
    class UVerticalBox* _locationOptions;                                             // 0x0288 (size: 0x8)
    class UBorder* _respawnDisabledLabel;                                             // 0x0290 (size: 0x8)
    class UBorder* _combatLabel;                                                      // 0x0298 (size: 0x8)
    class UBorder* _noAvailableLabel;                                                 // 0x02A0 (size: 0x8)
    class UBorder* _limitExceededLabel;                                               // 0x02A8 (size: 0x8)
    class UOverlay* _deathTitlePanel;                                                 // 0x02B0 (size: 0x8)
    class UTextBlock* _deathTitleLabel;                                               // 0x02B8 (size: 0x8)
    class UOverlay* _comaTitlePanel;                                                  // 0x02C0 (size: 0x8)
    class UTextBlock* _comatoseTitleLabel;                                            // 0x02C8 (size: 0x8)
    class UOverlay* _timerPanel;                                                      // 0x02D0 (size: 0x8)
    class UTextBlock* _timerLabel;                                                    // 0x02D8 (size: 0x8)
    class UTextBlock* _timer;                                                         // 0x02E0 (size: 0x8)
    class UOverlay* _wakeUpPanel;                                                     // 0x02E8 (size: 0x8)
    class UButton* _wakeUpButton;                                                     // 0x02F0 (size: 0x8)
    class UTextBlock* _healthCriticalLabel;                                           // 0x02F8 (size: 0x8)
    class USpawnSectorSelectorWidget* _spawnSectorSelector;                           // 0x0300 (size: 0x8)
    FText _suddenDeathText;                                                           // 0x0308 (size: 0x18)
    FText _permadeathText;                                                            // 0x0320 (size: 0x18)
    class UTextBlock* TotalPriceText;                                                 // 0x0358 (size: 0x8)
    class UBorder* Border_1;                                                          // 0x0360 (size: 0x8)
    class UTextBlock* CurrentCurrencyText;                                            // 0x0368 (size: 0x8)
    class UTextBlock* RemainingCurrencyText;                                          // 0x0370 (size: 0x8)
    class UTextBlock* MainStateLabel;                                                 // 0x0378 (size: 0x8)

    void SelectLocation(class USpawnChoiceWidget* Button);
    float Prisoner_GetHealthRatio(const class APrisoner* Prisoner);
    float Prisoner_GetComaDuration(const class APrisoner* Prisoner);
    void Prisoner_Die(class APrisoner* Prisoner);
    void OnWakeUpButtonClicked();
    FSectorId GetSectorId(int32 X, int32 Y);
}; // Size: 0x380

class USpawnScreen : public UUserWidget
{
    class UButton* _mainMenuButton;                                                   // 0x0268 (size: 0x8)
    class UButton* _respawnButton;                                                    // 0x0270 (size: 0x8)
    class UButton* _scoreBoardButton;                                                 // 0x0278 (size: 0x8)
    class UOverlay* _screen;                                                          // 0x0280 (size: 0x8)
    class UOverlay* _scoreboard;                                                      // 0x0288 (size: 0x8)
    class UGameEventLoadoutMenuWidget* _gameEventLoadoutMenuWidget;                   // 0x0290 (size: 0x8)
    class USpawnMenuWidget* _spawnMenuWidget;                                         // 0x0298 (size: 0x8)
    class UBorder* _blackout;                                                         // 0x02A0 (size: 0x8)
    class UTextBlock* WaitTimeText;                                                   // 0x02C0 (size: 0x8)
    class UBorder* PenaltyCountdown;                                                  // 0x02C8 (size: 0x8)

    void OnSpawnAccept();
    void OnScoreBoardButtonClicked();
    void OnExitToMainMenuClicked();
}; // Size: 0x2D0

class USpawnSectorSelectorWidget : public UUserWidget
{
    class UImage* _selectorImage;                                                     // 0x0268 (size: 0x8)
    class UImage* _deathImage;                                                        // 0x0270 (size: 0x8)

    void SelectSector(class UButton* Button);
}; // Size: 0x278

class USphereMotionTriggerComponent : public UMotionTriggerComponent
{
    class USphereComponent* SphereCollisionComponent;                                 // 0x0528 (size: 0x8)
    class UStaticMeshComponent* VisualizationMeshComponent;                           // 0x0530 (size: 0x8)
    float _triggerRadius;                                                             // 0x0538 (size: 0x4)
    class UStaticMesh* _visualizationMesh;                                            // 0x0540 (size: 0x8)

    void SphereComponent_OnComponentEndOverlap(class UPrimitiveComponent* activatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
    void SphereComponent_OnComponentBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
}; // Size: 0x550

class USprayPaintItemTag : public UBaseItemTag
{
    uint8 ColorIndex;                                                                 // 0x0030 (size: 0x1)

}; // Size: 0x38

class USquadEditor : public UUserWidget
{
    TSubclassOf<class UDropdownMenuSelectionWidget> _dropdownMenuTextureSelectionWidgetClass; // 0x0268 (size: 0x8)
    TSubclassOf<class UDropdownMenuSelectionWidget> _dropdownMenuColorSelectionWidgetClass; // 0x0270 (size: 0x8)
    class UUniformGridPanel* BackgroundGrid;                                          // 0x0278 (size: 0x8)
    class UUniformGridPanel* SymbolGrid;                                              // 0x0280 (size: 0x8)
    class UUniformGridPanel* ColorGrid;                                               // 0x0288 (size: 0x8)
    class UDropdownMenuTextureSelectionWidget* BackgroundSelector;                    // 0x0290 (size: 0x8)
    class UImage* BackgroundDropdownBackground;                                       // 0x0298 (size: 0x8)
    class UDropdownMenuWidget* BackgroundDropdownMenu;                                // 0x02A0 (size: 0x8)
    class UImage* BackgroundDropdownBorder;                                           // 0x02A8 (size: 0x8)
    class UDropdownMenuTextureSelectionWidget* SymbolSelector;                        // 0x02B0 (size: 0x8)
    class UImage* SymbolDropdownBackground;                                           // 0x02B8 (size: 0x8)
    class UDropdownMenuWidget* SymbolDropdownMenu;                                    // 0x02C0 (size: 0x8)
    class UImage* SymbolDropdownBorder;                                               // 0x02C8 (size: 0x8)
    class UDropdownMenuColorSelectionWidget* BackgroundPrimaryColorSelector;          // 0x02D0 (size: 0x8)
    class UDropdownMenuColorSelectionWidget* BackgroundSecondaryColorSelector;        // 0x02D8 (size: 0x8)
    class UDropdownMenuColorSelectionWidget* BackgroundTertiaryColorSelector;         // 0x02E0 (size: 0x8)
    class UImage* ColorDropdownBackground;                                            // 0x02E8 (size: 0x8)
    class UDropdownMenuWidget* ColorDropdownMenu;                                     // 0x02F0 (size: 0x8)
    class UImage* ColorDropdownBorder;                                                // 0x02F8 (size: 0x8)
    class UDropdownMenuColorSelectionWidget* SymbolPrimaryColorSelector;              // 0x0300 (size: 0x8)
    class UDropdownMenuColorSelectionWidget* SymbolSecondaryColorSelector;            // 0x0308 (size: 0x8)
    class UDropdownMenuColorSelectionWidget* SymbolTertiaryColorSelector;             // 0x0310 (size: 0x8)
    class USquadEmblemWidget* UI_SquadEmblem;                                         // 0x0318 (size: 0x8)
    class UEditableTextBox* NameTextBox;                                              // 0x0320 (size: 0x8)
    class UMultiLineEditableText* MessageTextBox;                                     // 0x0328 (size: 0x8)
    class UMultiLineEditableText* InformationTextBox;                                 // 0x0330 (size: 0x8)
    class UVerticalBox* InformationBox;                                               // 0x0338 (size: 0x8)
    class UVerticalBox* MessageBoxBox;                                                // 0x0340 (size: 0x8)
    class USizeBox* EmblemBox;                                                        // 0x0348 (size: 0x8)
    class UButton* AcceptButton;                                                      // 0x0350 (size: 0x8)
    class UButton* CancelButton;                                                      // 0x0358 (size: 0x8)

    void OnTextCommittedNameTextBox(const FText& Text, TEnumAsByte<ETextCommit::Type> CommitMethod);
    void OnTextChangedMessageTextBox(const FText& Text);
    void OnTextChangedInformationTextBox(const FText& Text);
    void OnSymbolClicked(class UDropdownMenuSelectionWidget* Widget);
    void OnReleasedCancelButton();
    void OnReleasedAcceptButton();
    void OnEmblemUpdate(class UDropdownMenuSelectionWidget* Widget);
    void OnColorClicked(class UDropdownMenuSelectionWidget* Widget);
    void OnBackgroundClicked(class UDropdownMenuSelectionWidget* Widget);
}; // Size: 0x378

class USquadEmblemWidget : public UUserWidget
{
    class UImage* _symbol;                                                            // 0x0268 (size: 0x8)
    class UImage* _background;                                                        // 0x0270 (size: 0x8)
    class UMaterialInterface* _material;                                              // 0x0278 (size: 0x8)

    void SetEmblemData(const FConZSquadEmblem& Value);
    FConZSquadEmblem GetEmblemData();
}; // Size: 0x288

class USquadLeftPanel : public UTabMenuPanel
{
    class UTextBlock* SquadName;                                                      // 0x02F0 (size: 0x8)
    class UTextBlock* SquadMessage;                                                   // 0x02F8 (size: 0x8)
    class UTextBlock* MemberCount;                                                    // 0x0300 (size: 0x8)
    class USquadEmblemWidget* SquadEmblem;                                            // 0x0308 (size: 0x8)
    class UButton* EditButton;                                                        // 0x0310 (size: 0x8)
    class UPrimaryButton* LeaveButton;                                                // 0x0318 (size: 0x8)
    class UPrimaryButton* CreateButton;                                               // 0x0320 (size: 0x8)
    class UScrollBox* MemberListBox;                                                  // 0x0328 (size: 0x8)
    class UWidgetSwitcher* _mainSwitcher;                                             // 0x0330 (size: 0x8)
    TSubclassOf<class UGenericTooltip> _genericTooltipClass;                          // 0x0338 (size: 0x8)
    TSubclassOf<class UTextOnlyTooltip> _tooltipClass;                                // 0x0340 (size: 0x8)
    FText _leaveSquadTooltipText;                                                     // 0x0348 (size: 0x18)
    FText _createSquadTooltipText;                                                    // 0x0360 (size: 0x18)
    TSubclassOf<class USquadMemberPanel> _squadMemberPanelClass;                      // 0x0378 (size: 0x8)

    void OnReleasedLeaveButton();
    void OnReleasedEditButton();
    void OnReleasedCreateButton();
    void OnAnyButtonHovered();
}; // Size: 0x3B0

class USquadListing : public UUserWidget
{
    class UTextBlock* SquadName;                                                      // 0x0268 (size: 0x8)
    class UTextBlock* squadRank;                                                      // 0x0270 (size: 0x8)
    class UTextBlock* SquadScore;                                                     // 0x0278 (size: 0x8)
    class UImage* Highlight;                                                          // 0x0280 (size: 0x8)
    class UHorizontalBox* ContentBox;                                                 // 0x0288 (size: 0x8)
    class UHorizontalBox* SeparatorBox;                                               // 0x0290 (size: 0x8)
    class USizeBox* _emblemSizeBox;                                                   // 0x0298 (size: 0x8)
    class USquadEmblemWidget* _squadEmblemWidget;                                     // 0x02A0 (size: 0x8)
    TSubclassOf<class USquadTooltip> _squadTooltipClass;                              // 0x02A8 (size: 0x8)

}; // Size: 0x2F8

class USquadMemberPanel : public UUserWidget
{
    class UTextBlock* PlayerName;                                                     // 0x0268 (size: 0x8)
    class UTextBlock* FameText;                                                       // 0x0270 (size: 0x8)
    class UTextBlock* FPText;                                                         // 0x0278 (size: 0x8)
    class UImage* RankIcon;                                                           // 0x0280 (size: 0x8)
    class UButton* HoverButton;                                                       // 0x0288 (size: 0x8)
    class UButton* MakeLeaderButton;                                                  // 0x0290 (size: 0x8)
    class UButton* PromoteButton;                                                     // 0x0298 (size: 0x8)
    class UButton* DemoteButton;                                                      // 0x02A0 (size: 0x8)
    class UButton* KickButton;                                                        // 0x02A8 (size: 0x8)
    class UHorizontalBox* CommandBox;                                                 // 0x02B0 (size: 0x8)
    class UHorizontalBox* FamePointBox;                                               // 0x02B8 (size: 0x8)
    TMap<class EConZSquadMemberRank, class UTexture2D*> _memberTextures;              // 0x02C0 (size: 0x50)
    FSlateBrush _probationTexture;                                                    // 0x0310 (size: 0x88)
    TSubclassOf<class UTextOnlyTooltip> _tooltipClass;                                // 0x0398 (size: 0x8)
    class UTextOnlyTooltip* _toolTip;                                                 // 0x03B0 (size: 0x8)

    void OnReleasePromoteButton();
    void OnReleaseMakeLeaderButton();
    void OnReleaseKickButton();
    void OnReleaseDemoteButton();
    void OnButtonUnhovered();
    void OnButtonHovered();
}; // Size: 0x3D8

class USquadPenaltyManager : public UObject
{

    void OnSquadDestroyed(class AActor* squadActor);
}; // Size: 0x140

class USquadRankingsCache : public UActorComponent
{
}; // Size: 0xE8

class USquadRightPanel : public UTabMenuPanel
{
    class UVerticalBox* RankingBox;                                                   // 0x02F0 (size: 0x8)
    TSubclassOf<class USquadListing> _squadListingClass;                              // 0x02F8 (size: 0x8)
    FLinearColor _darkListingBackgroundColor;                                         // 0x0318 (size: 0x10)
    FLinearColor _lightListingBackgroundColor;                                        // 0x0328 (size: 0x10)
    FLinearColor _selectedListingBackgroundColor;                                     // 0x0338 (size: 0x10)

}; // Size: 0x348

class USquadTooltip : public UUserWidget
{
    class UTextBlock* SquadName;                                                      // 0x0268 (size: 0x8)
    class UTextBlock* SquadInformation;                                               // 0x0270 (size: 0x8)
    class USquadEmblemWidget* SquadEmblem;                                            // 0x0278 (size: 0x8)

}; // Size: 0x280

class USquadUIController : public UObject
{
}; // Size: 0x60

class USquareCheckbox : public UUserWidget
{
    class UWidgetAnimation* _selectAnimation;                                         // 0x0278 (size: 0x8)

}; // Size: 0x288

class UStandardLockData : public ULockData
{
    class UStaticMesh* LockMeshOuter;                                                 // 0x00B8 (size: 0x8)
    class UStaticMesh* LockMeshInner;                                                 // 0x00C0 (size: 0x8)
    float RotatingTresholdAngle;                                                      // 0x00C8 (size: 0x4)
    float Duration;                                                                   // 0x00CC (size: 0x4)
    float AngleTolerance;                                                             // 0x00D0 (size: 0x4)
    float PickBreakingMultiplier;                                                     // 0x00D4 (size: 0x4)
    int32 PickBreakingAtNumberOfFailedPushAttempts;                                   // 0x00D8 (size: 0x4)

}; // Size: 0xE0

class UStandardLockMinigameConfiguration : public ULockpickingMinigameConfiguration
{
}; // Size: 0x88

class UStaticDoorReplicator : public UActorComponent
{
    TArray<class ULockData*> _queuedInitialSyncLockData;                              // 0x0110 (size: 0x10)

    void NetMulticast_OnDoorRepDataChanged(int32 dataVersion, FVector doorLocationZeroOrigin, const FDoorRepData& RepData);
}; // Size: 0x120

class UStaticVehicleServiceStationSaveObject : public UVehicleServiceStationSaveObject
{
    int64 StaticId;                                                                   // 0x0028 (size: 0x8)

}; // Size: 0x30

class UStatisticsDetailsWidget : public UUserWidget
{
    class UStatisticsSubcategoryTab* _generalSubcategoryTab;                          // 0x0268 (size: 0x8)
    class UStatisticsSubcategoryTab* _foodSubcategoryTab;                             // 0x0270 (size: 0x8)
    class UStatisticsSubcategoryTab* _huntingSubcategoryTab;                          // 0x0278 (size: 0x8)
    class UStatisticsSubcategoryTab* _fishingSubcategoryTab;                          // 0x0280 (size: 0x8)
    class UStatisticsSubcategoryTab* _travelSubcategoryTab;                           // 0x0288 (size: 0x8)
    class UStatisticsSubcategoryTab* _metabolismSubcategoryTab;                       // 0x0290 (size: 0x8)
    class UStatisticsSubcategoryTab* _craftingSubcategoryTab;                         // 0x0298 (size: 0x8)
    class UStatisticsSubcategoryTab* _combatSubcategoryTab;                           // 0x02A0 (size: 0x8)
    class UStatisticsSubcategoryTab* _eventsSubcategoryTab;                           // 0x02A8 (size: 0x8)
    class UWidgetSwitcher* _subcategorySwitcher;                                      // 0x02B0 (size: 0x8)
    class UStatisticsListWidget* _generalStatisticsList;                              // 0x0350 (size: 0x8)
    class UStatisticsListWidget* _foodStatisticsList;                                 // 0x0358 (size: 0x8)
    class UStatisticsListWidget* _huntingStatisticsList;                              // 0x0360 (size: 0x8)
    class UStatisticsListWidget* _fishingStatisticsList;                              // 0x0368 (size: 0x8)
    class UStatisticsListWidget* _travelStatisticsList;                               // 0x0370 (size: 0x8)
    class UStatisticsListWidget* _metabolismStatisticsList;                           // 0x0378 (size: 0x8)
    class UStatisticsListWidget* _craftingStatisticsList;                             // 0x0380 (size: 0x8)
    class UStatisticsListWidget* _combatStatisticsList;                               // 0x0388 (size: 0x8)
    class UStatisticsListWidget* _eventsStatisticsList;                               // 0x0390 (size: 0x8)

    void OnTravelSubcategoryButtonClicked();
    void OnMetabolismSubcategoryButtonClicked();
    void OnHuntingSubcategoryButtonClicked();
    void OnGeneralSubcategoryButtonClicked();
    void OnFoodSubcategoryButtonClicked();
    void OnFishingSubcategoryButtonClicked();
    void OnEventsSubcategoryButtonClicked();
    void OnCraftingSubcategoryButtonClicked();
    void OnCombatSubcategoryButtonClicked();
}; // Size: 0x398

class UStatisticsListRow : public UUserWidget
{
    class UTextBlock* _statNameTextBox;                                               // 0x0268 (size: 0x8)
    class UTextBlock* _statValueTextBox;                                              // 0x0270 (size: 0x8)
    class UTextBlock* _statUnitTextBox;                                               // 0x0278 (size: 0x8)

}; // Size: 0x280

class UStatisticsListWidget : public UUserWidget
{
    FText _subcategoryName;                                                           // 0x0268 (size: 0x18)
    class UTextBlock* _subcategoryTextBox;                                            // 0x0280 (size: 0x8)
    class UScrollBox* _scrollBox;                                                     // 0x0288 (size: 0x8)

}; // Size: 0x290

class UStatisticsPanelWidget : public UBaseMenu
{
    class UStatisticsDetailsWidget* _survivalDetailsWidget;                           // 0x0268 (size: 0x8)
    class UConZStandardButton* _backButton;                                           // 0x0270 (size: 0x8)

    void CloseMenu();
}; // Size: 0x278

class UStatisticsSubcategoryTab : public UUserWidget
{
    class UTexture2D* _subcategoryIcon;                                               // 0x0280 (size: 0x8)
    class UImage* _tabSelectionImage;                                                 // 0x0288 (size: 0x8)
    class UImage* _subcategoryImage;                                                  // 0x0290 (size: 0x8)
    class UTexture2D* _selectedTabTexture;                                            // 0x0298 (size: 0x8)

}; // Size: 0x2A8

class UStealthSkill : public UDexteritySkill
{
    FStealthSkillExperienceAwards NoSkillExperienceAwards;                            // 0x00B0 (size: 0x8)
    FStealthSkillExperienceAwards BasicSkillExperienceAwards;                         // 0x00B8 (size: 0x8)
    FStealthSkillExperienceAwards MediumSkillExperienceAwards;                        // 0x00C0 (size: 0x8)
    FStealthSkillExperienceAwards AdvancedSkillExperienceAwards;                      // 0x00C8 (size: 0x8)
    FStealthSkillExperienceAwards AboveAdvancedSkillExperienceAwards;                 // 0x00D0 (size: 0x8)

}; // Size: 0xD8

class UStrengthSkill : public USkill
{
}; // Size: 0xB0

class USubtitleWidget : public UUserWidget
{
    class UTextBlock* _subtitle;                                                      // 0x0268 (size: 0x8)
    class UOverlay* _subtitleOverlay;                                                 // 0x0270 (size: 0x8)

}; // Size: 0x278

class USurfaceHardnessData : public UDataAsset
{
    float DefaultSurfaceHardness;                                                     // 0x0030 (size: 0x4)
    TMap<TEnumAsByte<EPhysicalSurface>, float> SurfaceHardnessMap;                    // 0x0038 (size: 0x50)

}; // Size: 0x88

class USurvivalSkill : public UIntelligenceSkill
{
    FCompassSkillParametersPerSkillLevel NoSkillParameters;                           // 0x00B0 (size: 0x1)
    FCompassSkillParametersPerSkillLevel BasicSkillParameters;                        // 0x00B1 (size: 0x1)
    FCompassSkillParametersPerSkillLevel MediumSkillParameters;                       // 0x00B2 (size: 0x1)
    FCompassSkillParametersPerSkillLevel AdvancedSkillParameters;                     // 0x00B3 (size: 0x1)
    FCompassSkillParametersPerSkillLevel AboveAdvancedSkillParameters;                // 0x00B4 (size: 0x1)

}; // Size: 0xB8

class USurvivalTipEventListener : public UObject
{
    TArray<FTipAndItems> _tipsAndNeededItems;                                         // 0x0028 (size: 0x10)
    float _staminaNormAmountForSurvivalTip;                                           // 0x0038 (size: 0x4)

    void OnAssociatedPrisonerDestroyed(class AActor* Prisoner);
    void ItemEquipped(class UPrisonerInventoryComponent* sender, class AItem* Item);
}; // Size: 0x70

class USurvivalTipManager : public UObject
{
    class UDataTable* _survivalTipsTable;                                             // 0x0178 (size: 0x8)

}; // Size: 0x190

class USurvivalTipWidget : public UUserWidget
{
    class URichTextBlock* _tipText;                                                   // 0x0280 (size: 0x8)
    class URetainerBox* _tipRetainerBox;                                              // 0x0288 (size: 0x8)
    class USizeBox* _rootSizeBox;                                                     // 0x0290 (size: 0x8)
    class UProgressBar* _progressBar;                                                 // 0x0298 (size: 0x8)
    FName _dpiMaterialParameterName;                                                  // 0x02A0 (size: 0x8)
    FName _widgetPixelSizeParameterName;                                              // 0x02A8 (size: 0x8)
    FName _horizontalRolloutPercentParameterName;                                     // 0x02B0 (size: 0x8)
    FVector2D _animationDuration;                                                     // 0x02B8 (size: 0x8)
    class UCurveFloat* _animationCurve;                                               // 0x02C0 (size: 0x8)
    class UAkAudioEvent* _onSurvivalTipActivated;                                     // 0x02C8 (size: 0x8)

}; // Size: 0x338

class USurvivalTipsView : public UUserWidget
{
    TSubclassOf<class USurvivalTipWidget> _widgetClassToSpawn;                        // 0x0268 (size: 0x8)
    float _distanceBetweenWidgets;                                                    // 0x0270 (size: 0x4)
    class UVerticalBox* _widgetList;                                                  // 0x0278 (size: 0x8)
    FUserWidgetPool _widgetPool;                                                      // 0x0280 (size: 0x80)
    TArray<class USurvivalTipWidget*> _activeWidgets;                                 // 0x0300 (size: 0x10)
    class UDataTable* _survivalTipsTable;                                             // 0x0310 (size: 0x8)

}; // Size: 0x318

class USwimmingSkill : public UConstitutionSkill
{
}; // Size: 0xC8

class USwingItemComponent : public UItemComponent
{
    FRuntimeFloatCurve _swingSpeedLevelVsInputSpeed;                                  // 0x00E0 (size: 0x88)
    FRuntimeFloatCurve _prisonerActionDifficultyVsSwingSpeedLevel;                    // 0x0168 (size: 0x88)
    EPrisonerMovementPace _maxAllowedPrisonerMovementPaceWhenInHands;                 // 0x01F0 (size: 0x1)
    bool _shouldCoolDownPrisonerWhileSwinging;                                        // 0x01F1 (size: 0x1)
    FRuntimeFloatCurve _bodyTemperatureCoolingRatesVsSwingSpeedLevel;                 // 0x01F8 (size: 0x88)
    class UAnimMontage* _itemSwingAnimMontage;                                        // 0x0280 (size: 0x8)
    class UAnimMontage* _prisonerSwingAnimMontage;                                    // 0x0288 (size: 0x8)
    FName _prisonerSwingAnimMontageStartSectionName;                                  // 0x0290 (size: 0x8)
    FName _prisonerSwingAnimMontageLoopSectionName;                                   // 0x0298 (size: 0x8)
    FName _prisonerSwingAnimMontageEndSectionName;                                    // 0x02A0 (size: 0x8)
    float _prisonerSwingAnimMontageInterpolationSpeed;                                // 0x02A8 (size: 0x4)
    FRuntimeFloatCurve _animMontagePlayRateVsSwingSpeedLevel;                         // 0x02B0 (size: 0x88)

    void Server_SetSwingSpeedLevel(int32 Value, bool shouldPlaySwingMontageEndSection);
    void NetMulticast_SetSwingSpeedLevel(int32 Value, bool shouldPlaySwingMontageEndSection);
}; // Size: 0x338

class USwitchboardComponent : public UActorComponent
{
    TArray<uint16> _repSwitchStates;                                                  // 0x01B0 (size: 0x10)
    bool _shouldControlParentMeshEmissiveColor;                                       // 0x01C0 (size: 0x1)

    void OnRep_SwitchStates();
    void Multicast_SyncSwitchOverrides(const TArray<uint16>& overrideIndices);
}; // Size: 0x1C8

class USwitchboardMinigameConfiguration : public UMinigameConfiguration
{
    class UStaticMesh* SchematicMesh;                                                 // 0x0068 (size: 0x8)

}; // Size: 0x110

class USwitchboardSwitchAssetData : public UAssetUserData
{
    FGameplayTag ActivationTag;                                                       // 0x0028 (size: 0x8)
    FTransform OffRelativeTransform;                                                  // 0x0030 (size: 0x30)
    FTransform OnRelativeTransform;                                                   // 0x0060 (size: 0x30)
    float TransitionDuration;                                                         // 0x0090 (size: 0x4)
    class UAkAudioEvent* ToggleAudio;                                                 // 0x0098 (size: 0x8)
    TArray<FSwitchMaterialEmissiveColorProperties> EmissiveControlProperties;         // 0x00A0 (size: 0x10)
    ESwitchboardSwitch Switch;                                                        // 0x00B0 (size: 0x1)

}; // Size: 0xC0

class UTabButton : public UConZUserWidget
{
    bool PreviewSelectedState;                                                        // 0x02F0 (size: 0x1)
    class UButton* _button;                                                           // 0x02F8 (size: 0x8)
    class UTextBlock* _text;                                                          // 0x0300 (size: 0x8)
    class USizeBox* _sizeBox;                                                         // 0x0308 (size: 0x8)
    FText _initialTitle;                                                              // 0x0310 (size: 0x18)
    FTabButtonStyle _selectedButtonStyle;                                             // 0x0328 (size: 0x288)
    FTabButtonStyle _selectedUnfocusedButtonStyle;                                    // 0x05B0 (size: 0x288)
    FTabButtonStyle _deselectedButtonStyle;                                           // 0x0838 (size: 0x288)
    FTabTextStyle _selectedTextStyle;                                                 // 0x0AC0 (size: 0x98)
    FTabTextStyle _selectedUnfocusedTextStyle;                                        // 0x0B58 (size: 0x98)
    FTabTextStyle _deselectedTextStyle;                                               // 0x0BF0 (size: 0x98)

    void OnClick();
}; // Size: 0xC88

class UTabButtonAlertable : public UTabButton
{
    FDataTableRowHandle _alertedTextColorHandle;                                      // 0x0C88 (size: 0x10)
    FDataTableRowHandle _alertedBackgroundColorHandle;                                // 0x0C98 (size: 0x10)
    float _blinkSpeed;                                                                // 0x0CA8 (size: 0x4)

}; // Size: 0xD08

class UTabContainer : public UUserWidget
{
    class UNamedSlot* _containerContent;                                              // 0x02B0 (size: 0x8)
    EUINavigation _previous;                                                          // 0x02B8 (size: 0x1)
    EUINavigation _next;                                                              // 0x02B9 (size: 0x1)
    EUINavigation _in;                                                                // 0x02BA (size: 0x1)
    bool _canWrap;                                                                    // 0x02BB (size: 0x1)

}; // Size: 0x2D8

class UTabElement : public UUserWidget
{
    class UWidget* CategoryNameWidget;                                                // 0x0268 (size: 0x8)
    uint8 MaxIndex;                                                                   // 0x0270 (size: 0x1)
    uint8 Index;                                                                      // 0x0271 (size: 0x1)
    FVector2D _initialPosition;                                                       // 0x0274 (size: 0x8)
    FVector2D _oldPosition;                                                           // 0x027C (size: 0x8)
    FVector2D _newPosition;                                                           // 0x0284 (size: 0x8)
    FVector2D _initialSize;                                                           // 0x028C (size: 0x8)
    FVector2D _oldSize;                                                               // 0x0294 (size: 0x8)
    FVector2D _newSize;                                                               // 0x029C (size: 0x8)
    float _oldAlpha;                                                                  // 0x02A4 (size: 0x4)
    float _newAlpha;                                                                  // 0x02A8 (size: 0x4)
    float _interpolationTime;                                                         // 0x02AC (size: 0x4)
    float _interpolationDuration;                                                     // 0x02B0 (size: 0x4)

    void Update(bool Up, FVector2D Offset);
    int32 GetNextIndex(bool Up);
}; // Size: 0x2B8

class UTabGroup : public UUserWidget
{
    class UPanelWidget* _tabPanel;                                                    // 0x0298 (size: 0x8)
    EUINavigation _previous;                                                          // 0x02A0 (size: 0x1)
    EUINavigation _next;                                                              // 0x02A1 (size: 0x1)
    EUINavigation _in;                                                                // 0x02A2 (size: 0x1)
    bool _canWrap;                                                                    // 0x02A3 (size: 0x1)
    TEnumAsByte<EHorizontalAlignment> _tabHorizontalAlignment;                        // 0x02A4 (size: 0x1)
    TEnumAsByte<EVerticalAlignment> _tabVerticalAlignment;                            // 0x02A5 (size: 0x1)

}; // Size: 0x2C0

class UTabMenu : public UUserWidget
{
    class UTabModeTab* _inventoryTab;                                                 // 0x0268 (size: 0x8)
    class UTabModeTab* _craftingTab;                                                  // 0x0270 (size: 0x8)
    class UTabModeTab* _healthTab;                                                    // 0x0278 (size: 0x8)
    class UTabModeTab* _metabolismTab;                                                // 0x0280 (size: 0x8)
    class UTabModeTab* _squadTab;                                                     // 0x0288 (size: 0x8)
    class UTabModeTab* _gameEventsTab;                                                // 0x0290 (size: 0x8)
    class UTabModeTab* _manualTab;                                                    // 0x0298 (size: 0x8)
    class UTabModeTab* _tradingTab;                                                   // 0x02A0 (size: 0x8)
    class UTabModeTab* _journalTab;                                                   // 0x02A8 (size: 0x8)
    class UWidgetSwitcher* _centralSwitcher;                                          // 0x02B0 (size: 0x8)
    class UWidgetSwitcher* _leftSwitcher;                                             // 0x02B8 (size: 0x8)
    class UWidgetSwitcher* _rightSwitcher;                                            // 0x02C0 (size: 0x8)
    class UTabMenuPanel* _inventoryLeftPanel;                                         // 0x02C8 (size: 0x8)
    class UTabMenuPanel* _metabolismLeftPanel;                                        // 0x02D0 (size: 0x8)
    class UTabMenuPanel* _squadLeftPanel;                                             // 0x02D8 (size: 0x8)
    class UTabMenuPanel* _gameEventsLeftPanel;                                        // 0x02E0 (size: 0x8)
    class UTabMenuPanel* _emptyLeftPanel;                                             // 0x02E8 (size: 0x8)
    class UTabMenuPanel* _inventoryCentralPanel;                                      // 0x02F0 (size: 0x8)
    class UTabMenuPanel* _buildingCentralPanel;                                       // 0x02F8 (size: 0x8)
    class UTabMenuPanel* _manualCentralPanel;                                         // 0x0300 (size: 0x8)
    class UTabMenuPanel* _journalCentralPanel;                                        // 0x0308 (size: 0x8)
    class UTabMenuPanel* _emptyCentralPanel;                                          // 0x0310 (size: 0x8)
    class UTabMenuPanel* _inventoryRightPanel;                                        // 0x0318 (size: 0x8)
    class UTabMenuPanel* _craftingRightPanel;                                         // 0x0320 (size: 0x8)
    class UTabMenuPanel* _healthRightPanel;                                           // 0x0328 (size: 0x8)
    class UTabMenuPanel* _metabolismRightPanel;                                       // 0x0330 (size: 0x8)
    class UTabMenuPanel* _squadRightPanel;                                            // 0x0338 (size: 0x8)
    class UTabMenuPanel* _gameEventsRightPanel;                                       // 0x0340 (size: 0x8)
    class UTabMenuPanel* _tradingRightPanel;                                          // 0x0348 (size: 0x8)
    class UTabMenuPanel* _emptyRightPanel;                                            // 0x0350 (size: 0x8)
    class USquadEditor* _squadEditor;                                                 // 0x0358 (size: 0x8)
    TSubclassOf<class UTabModeTab> _tabClass;                                         // 0x0450 (size: 0x8)
    TSubclassOf<class UTextOnlyTooltip> _tooltipClass;                                // 0x0458 (size: 0x8)

}; // Size: 0x468

class UTabMenuPanel : public UUserWidget
{
}; // Size: 0x268

class UTabMenuUIController : public UObject
{
}; // Size: 0x258

class UTabModeTab : public UConZUserWidget
{
    class USizeBox* _mainSizeBox;                                                     // 0x0308 (size: 0x8)
    class UImage* _backgroundImage;                                                   // 0x0310 (size: 0x8)
    class UTextBlock* _title;                                                         // 0x0318 (size: 0x8)
    class UTextBlock* _hotkey;                                                        // 0x0320 (size: 0x8)
    FText _titleText;                                                                 // 0x0328 (size: 0x18)
    FText _hotkeyText;                                                                // 0x0340 (size: 0x18)
    FSlateBrush _backgroundTextureActive;                                             // 0x0358 (size: 0x88)
    FSlateBrush _backgroundTextureInactive;                                           // 0x03E0 (size: 0x88)
    FLinearColor _inactiveUnalertedColor;                                             // 0x0468 (size: 0x10)
    FLinearColor _inactiveAlertedColor;                                               // 0x0478 (size: 0x10)
    float _alertBlinkTime;                                                            // 0x0488 (size: 0x4)

}; // Size: 0x490

class UTacticsSkill : public UIntelligenceSkill
{
    float _updateTime;                                                                // 0x0100 (size: 0x4)
    float _serverUpdateTime;                                                          // 0x0104 (size: 0x4)
    float _noSkillDetectionRange;                                                     // 0x0108 (size: 0x4)
    float _basicDetectionRange;                                                       // 0x010C (size: 0x4)
    float _mediumDetectionRange;                                                      // 0x0110 (size: 0x4)
    float _advancedDetectionRange;                                                    // 0x0114 (size: 0x4)
    float _aboveAdvancedDetectionRange;                                               // 0x0118 (size: 0x4)
    float _noSkillDetectionTime;                                                      // 0x011C (size: 0x4)
    float _basicDetectionTime;                                                        // 0x0120 (size: 0x4)
    float _mediumDetectionTime;                                                       // 0x0124 (size: 0x4)
    float _advancedDetectionTime;                                                     // 0x0128 (size: 0x4)
    float _aboveAdvancedDetectionTime;                                                // 0x012C (size: 0x4)
    float _fadeOutTime;                                                               // 0x0130 (size: 0x4)
    class UCurveFloat* _detectionTimeDistanceScale;                                   // 0x0138 (size: 0x8)
    float _noSkillExperiencePerSecond;                                                // 0x0140 (size: 0x4)
    float _basicExperiencePerSecond;                                                  // 0x0144 (size: 0x4)
    float _mediumExperiencePerSecond;                                                 // 0x0148 (size: 0x4)
    float _advancedExperiencePerSecond;                                               // 0x014C (size: 0x4)
    float _tacticsDetectionCurveCoefficient1;                                         // 0x0150 (size: 0x4)
    float _tacticsDetectionCurveCoefficient2;                                         // 0x0154 (size: 0x4)
    float _tacticsDetectionCurveCoefficient3;                                         // 0x0158 (size: 0x4)

    bool ShouldDetectPrisoner(class APrisoner* Prisoner);
    bool IsPrisonerDetected(class APrisoner* Prisoner);
}; // Size: 0x160

class UTakeInHandsAssetData : public UInteractionAssetData
{
    TSubclassOf<class UAttachmentSocketMountType> AttachmentSocketMountType;          // 0x0030 (size: 0x8)
    FName GripSocketName;                                                             // 0x0038 (size: 0x8)
    FName SupportingHandIKSocketName;                                                 // 0x0040 (size: 0x8)
    class UAnimMontage* TakeInHandsMontage;                                           // 0x0048 (size: 0x8)
    class UAnimMontage* RemoveFromHandsMontage;                                       // 0x0050 (size: 0x8)
    class UMeleeSkillAnimationsPreset* MeleeSkillAnimationsPreset;                    // 0x0058 (size: 0x8)
    class UHandsCorrectionsData* HandsCorrectionssData;                               // 0x0060 (size: 0x8)
    class UItemFirstPersonAnimationsDataAsset* FirstPersonAnimationsData;             // 0x0068 (size: 0x8)
    bool ShouldOverrideMaxPace;                                                       // 0x0070 (size: 0x1)
    bool ShouldOverrideMovementSpeedMultiplier;                                       // 0x0071 (size: 0x1)
    EPrisonerMovementPace MaxPaceOverride;                                            // 0x0072 (size: 0x1)
    float MovementSpeedMultiplierOverride;                                            // 0x0074 (size: 0x4)
    float SwimmingMovementSpeedModifier;                                              // 0x0078 (size: 0x4)
    float DivingMovementSpeedModifier;                                                // 0x007C (size: 0x4)
    float BuoyancyMultiplier;                                                         // 0x0080 (size: 0x4)
    bool IsCarriedWithTwoHands;                                                       // 0x0084 (size: 0x1)
    bool ShouldDropWhenEnteringCombatMode;                                            // 0x0085 (size: 0x1)
    bool ShouldActionConstrainStance;                                                 // 0x0086 (size: 0x1)
    bool ShouldActionConstrainMove;                                                   // 0x0087 (size: 0x1)
    bool ShouldActionConstrainTurn;                                                   // 0x0088 (size: 0x1)
    bool ShouldActionForceStance;                                                     // 0x0089 (size: 0x1)
    EPrisonerGroundStance ActionStance;                                               // 0x008A (size: 0x1)
    EStanceChangeFlag ActionStanceFlag;                                               // 0x008B (size: 0x1)
    bool IsCarried;                                                                   // 0x008C (size: 0x1)
    EPrisonerGroundStance StanceWhileCarrying;                                        // 0x008D (size: 0x1)
    EStanceChangeFlag CarryStanceFlag;                                                // 0x008E (size: 0x1)
    bool ShouldDropWhenEnteringCombatModeWhileCarrying;                               // 0x008F (size: 0x1)
    EPrisonerMovementPace MaxPaceWhileCarrying;                                       // 0x0090 (size: 0x1)
    class UAnimSequenceBase* CarryItemIdleAnimationFP;                                // 0x0098 (size: 0x8)
    class UAnimSequenceBase* CarryItemIdleAnimationTP;                                // 0x00A0 (size: 0x8)
    class UAnimMontage* PlayerLongThrowMontage;                                       // 0x00A8 (size: 0x8)
    class UAnimMontage* PlayerLongThrowLoopMontage;                                   // 0x00B0 (size: 0x8)
    class UAnimMontage* PlayerShortThrowMontage;                                      // 0x00B8 (size: 0x8)
    class UAnimMontage* PlayerThrowbackMontage;                                       // 0x00C0 (size: 0x8)
    class UAnimMontage* ThrowingItemToWeaponMontage;                                  // 0x00C8 (size: 0x8)
    class UAnimMontage* WeaponToThrowingItemMontage;                                  // 0x00D0 (size: 0x8)
    TMap<class EThrowingAnimationType, class FThrowingAnimationSet> ThrowingAnimationSets; // 0x00D8 (size: 0x50)
    float MaxObstructedDepenetrationDepth;                                            // 0x0128 (size: 0x4)
    float MaxObstructedDepenetrationDepthProne;                                       // 0x012C (size: 0x4)
    class UAnimSequenceBase* LeftObstructedIdleAnimationFP;                           // 0x0130 (size: 0x8)
    class UAnimSequenceBase* RightObstructedIdleAnimationFP;                          // 0x0138 (size: 0x8)
    class UAnimSequenceBase* ObstructedIdleAnimationTP;                               // 0x0140 (size: 0x8)
    class UAnimSequenceBase* ObstructedIdleAnimationProneTP;                          // 0x0148 (size: 0x8)

}; // Size: 0x150

class UTaskEntriesDropdownWidget : public UUserWidget
{
    class UImage* _background;                                                        // 0x0268 (size: 0x8)
    class UTextBlock* _categoryNameTextBlock;                                         // 0x0270 (size: 0x8)
    class UCheckBox* _chbSwitchDropdownState;                                         // 0x0278 (size: 0x8)
    class UVerticalBox* _entriesContainer;                                            // 0x0280 (size: 0x8)
    class UOverlay* _titleOverlay;                                                    // 0x0288 (size: 0x8)
    int32 _unopenedFontSize;                                                          // 0x0290 (size: 0x4)
    int32 _openedFontSize;                                                            // 0x0294 (size: 0x4)
    FLinearColor _unopenedBackgroundColorAndOpacity;                                  // 0x0298 (size: 0x10)
    FLinearColor _openedBackgroundColorAndOpacity;                                    // 0x02A8 (size: 0x10)
    ETaskCategory _taskCategory;                                                      // 0x02B8 (size: 0x1)
    class UImage* _categoryIcon;                                                      // 0x02C0 (size: 0x8)

    void OnDropdownStateChanged(bool isCollapsed);
}; // Size: 0x2C8

class UTaskEntriesPanelWidget : public UUserWidget
{
    class USearchBox* _searchBox;                                                     // 0x0268 (size: 0x8)
    class UVerticalBox* _activeEntriesVerticalBox;                                    // 0x0270 (size: 0x8)
    class UVerticalBox* _activeEntryContainer;                                        // 0x0278 (size: 0x8)
    class UVerticalBox* _entriesVerticalBox;                                          // 0x0280 (size: 0x8)
    class UVerticalBox* _entryContainer;                                              // 0x0288 (size: 0x8)
    TSubclassOf<class UTaskEntriesDropdownWidget> _dropdownWidgetClass;               // 0x0290 (size: 0x8)
    TSubclassOf<class UTaskEntryWidget> _entryWidgetClass;                            // 0x0298 (size: 0x8)
    class UConZCustomInteractionButton* _collapseAllButton;                           // 0x02C0 (size: 0x8)
    class UConZCustomInteractionButton* _expandAllButton;                             // 0x02C8 (size: 0x8)

    void OnAnyButtonHovered();
    void HandleOnExpandAllClicked();
    void HandleOnCollapseAllClicked();
}; // Size: 0x2D0

class UTaskEntryDetailsPanelWidget : public UUserWidget
{
    class UOverlay* _mainOverlay;                                                     // 0x0268 (size: 0x8)
    class UScrollBox* _scrollBox;                                                     // 0x0270 (size: 0x8)
    class UTextBlock* _entryName;                                                     // 0x0278 (size: 0x8)
    class UTextBlock* _entryDescription;                                              // 0x0280 (size: 0x8)
    class UVerticalBox* _entryTrackingDataContainer;                                  // 0x0288 (size: 0x8)
    class UVerticalBox* _rewardsVerticalBox;                                          // 0x0290 (size: 0x8)
    class UVerticalBox* _entryRewardsContainer;                                       // 0x0298 (size: 0x8)
    class UPrimaryButton* _abandonTaskButton;                                         // 0x02A0 (size: 0x8)
    class UPrimaryButton* _startTaskButton;                                           // 0x02A8 (size: 0x8)
    TSubclassOf<class UQuestTrackingDataWidget> _trackingDataWidgetClass;             // 0x02B0 (size: 0x8)
    FSlateFontInfo _dialogueTextFont;                                                 // 0x02B8 (size: 0x58)
    FText _abandonTaskTooltipText;                                                    // 0x0310 (size: 0x18)
    FText _startTaskTooltipText;                                                      // 0x0328 (size: 0x18)
    TSubclassOf<class UTextOnlyTooltip> _tooltipClass;                                // 0x0340 (size: 0x8)
    FSlateColor _stepDialogueTextColor;                                               // 0x0400 (size: 0x28)

    void OnStartTaskButtonClicked();
    void OnAbandonTaskButtonClicked();
}; // Size: 0x430

class UTaskEntryWidget : public UUserWidget
{
    class UImage* _backgroundImage;                                                   // 0x0278 (size: 0x8)
    class UTextBlock* _entryName;                                                     // 0x0280 (size: 0x8)
    class UQuestTrackingCheckbox* _trackingCheckbox;                                  // 0x0288 (size: 0x8)
    FName _pixelSizeMaterialParameterName;                                            // 0x0290 (size: 0x8)
    FName _dpiMaterialParameterName;                                                  // 0x0298 (size: 0x8)
    class UMaterialInstance* _inactiveMaterialInstance;                               // 0x02A0 (size: 0x8)
    class UMaterialInstance* _inactiveHoveredMaterialInstance;                        // 0x02A8 (size: 0x8)
    class UMaterialInstance* _activeMaterialInstance;                                 // 0x02B0 (size: 0x8)
    class UImage* _entryCompletedIcon;                                                // 0x02B8 (size: 0x8)

}; // Size: 0x2D8

class UTaskSetup : public UDataAsset
{
    FText Title;                                                                      // 0x0030 (size: 0x18)
    ETaskCategory Category;                                                           // 0x0048 (size: 0x1)
    TArray<FText> DescriptionSegments;                                                // 0x0050 (size: 0x10)
    FName StartingDialogueName;                                                       // 0x0060 (size: 0x8)
    bool CanBeAutoStarted;                                                            // 0x0068 (size: 0x1)
    bool HiddenFromTaskList;                                                          // 0x0069 (size: 0x1)
    TArray<class UQuestCondition*> ConditionsSequence;                                // 0x0070 (size: 0x10)
    TArray<TSoftObjectPtr<UTaskSetup>> TasksToUnlockWhenCompleted;                    // 0x0080 (size: 0x10)
    FQuestRewards Rewards;                                                            // 0x0090 (size: 0x128)
    TSoftClassPtr<UPrisonerBodyCondition> AddBodyConditionWhenStartingTask;           // 0x01B8 (size: 0x28)
    FString BodyConditionAdminCommandParams;                                          // 0x01E0 (size: 0x10)
    bool EarlyFailOnDeath;                                                            // 0x01F0 (size: 0x1)
    FName DialogueUponEarlyFailName;                                                  // 0x01F4 (size: 0x8)
    FName DialogueUponEarlyCompletionName;                                            // 0x01FC (size: 0x8)

}; // Size: 0x208

class UTeamDeathmatchParticipantStats : public UGameEventParticipantStats
{
}; // Size: 0x48

class UTeamInvitationWidget : public UUserWidget
{
    class APrisoner* invitor;                                                         // 0x0268 (size: 0x8)
    class APrisoner* invited;                                                         // 0x0270 (size: 0x8)
    class UTextBlock* _flagWarningMessage;                                            // 0x0280 (size: 0x8)
    class UTextBlock* TimerText;                                                      // 0x0288 (size: 0x8)
    class UTextBlock* InvitationMessage;                                              // 0x0290 (size: 0x8)
    class UButton* Accept;                                                            // 0x0298 (size: 0x8)
    class UButton* Decline;                                                           // 0x02A0 (size: 0x8)
    class UMessageBox* _confirmationMessageBox;                                       // 0x02B0 (size: 0x8)

    void OnDecline();
    void OnAccept();
}; // Size: 0x2B8

class UTelemetryCheckbox : public UUserWidget
{
    class UImage* _checkboxIcon;                                                      // 0x0268 (size: 0x8)

}; // Size: 0x278

class UTelemetryMenu : public UUserWidget
{
    class UWidgetSwitcher* _mainSwitcher;                                             // 0x0280 (size: 0x8)
    class UButton* _buttonModify;                                                     // 0x0288 (size: 0x8)
    class UButton* _buttonAcceptAll;                                                  // 0x0290 (size: 0x8)
    class UButton* _buttonAbout;                                                      // 0x0298 (size: 0x8)
    class UButton* _buttonCancel;                                                     // 0x02A0 (size: 0x8)
    class UButton* _buttonDone;                                                       // 0x02A8 (size: 0x8)
    class UButton* _buttonBack;                                                       // 0x02B0 (size: 0x8)
    class UButton* _buttonGamepiresPrivacyPolicy;                                     // 0x02B8 (size: 0x8)
    class UTelemetryCheckbox* _checkboxPAGA;                                          // 0x02C0 (size: 0x8)
    class UTelemetryCheckbox* _checkboxIBA;                                           // 0x02C8 (size: 0x8)

    void OnModifyButtonClicked();
    void OnGamepiresPrivacyPolicyClicked();
    void OnDoneButtonClicked();
    void OnCancelButtonClicked();
    void OnBackButtonClicked();
    void OnAcceptAllButtonClicked();
    void OnAboutButtonClicked();
}; // Size: 0x2D8

class UTelemetrySetting : public UUserWidget
{
    class UButton* _modifyButton;                                                     // 0x0268 (size: 0x8)
    TSubclassOf<class UTelemetryMenu> _telementryMenuClass;                           // 0x0270 (size: 0x8)

    void ShowTelemetryMenu();
}; // Size: 0x278

class UTeleportComponent : public UActorComponent
{
    FTeleportRepData _repData;                                                        // 0x00B8 (size: 0x30)

    void Server_ReportClientReadyToFinishTeleport(uint8 RequestID);
    void OnRep_Data();
}; // Size: 0xF0

class UTeleportUserData : public UObject
{
}; // Size: 0x28

class UTextBoxWithLabel : public UUserWidget
{
    class UTextBlock* _name;                                                          // 0x02D0 (size: 0x8)
    class UEditableTextBox* _inputTextBox;                                            // 0x02D8 (size: 0x8)
    class UImage* _focusBackgroundImage;                                              // 0x02E0 (size: 0x8)
    class UImage* _showPasswordOff;                                                   // 0x02E8 (size: 0x8)
    class UImage* _showPasswordOn;                                                    // 0x02F0 (size: 0x8)
    class UOverlay* _showPasswordIconOverlay;                                         // 0x02F8 (size: 0x8)
    FText _label;                                                                     // 0x0300 (size: 0x18)
    FTextBoxWithLabelStyle _selectedAndFocusedTWLStyle;                               // 0x0318 (size: 0x158)
    FTextBoxWithLabelStyle _selectedAndUnfocusedTWLStyle;                             // 0x0470 (size: 0x158)
    FTextBoxWithLabelStyle _unselectedTWLStyle;                                       // 0x05C8 (size: 0x158)
    FTextBoxWithLabelStyle _highlightedTWLStyle;                                      // 0x0720 (size: 0x158)
    FTextBoxWithLabelStyle _disabledTWLStyle;                                         // 0x0878 (size: 0x158)
    FEditableTextBoxStyle _correctInputTextBoxStyle;                                  // 0x09D0 (size: 0x7F8)
    FEditableTextBoxStyle _incorrectInputTextBoxStyle;                                // 0x11C8 (size: 0x7F8)

    void OnTextChanged(const FText& Text);
    FEventReply OnShowPasswordToggle(FGeometry MyGeometry, const FPointerEvent& MouseEvent);
}; // Size: 0x19F8

class UTextInputWidget : public UUserWidget
{
    class UButton* MainButton;                                                        // 0x0280 (size: 0x8)
    class UEditableTextBox* TextBox;                                                  // 0x0288 (size: 0x8)
    class UTextBlock* TextBlock_0;                                                    // 0x0290 (size: 0x8)
    class USizeBox* TitleSizeBox;                                                     // 0x0298 (size: 0x8)
    class USizeBox* InputSizeBox;                                                     // 0x02A0 (size: 0x8)
    class UImage* InputImage;                                                         // 0x02A8 (size: 0x8)
    class UImage* Image_0;                                                            // 0x02B0 (size: 0x8)
    class UImage* Image_1;                                                            // 0x02B8 (size: 0x8)
    int32 InputFontSize;                                                              // 0x02C0 (size: 0x4)
    int32 TitleFontSize;                                                              // 0x02C4 (size: 0x4)
    int32 TitleFontSizeHighlighted;                                                   // 0x02C8 (size: 0x4)
    float TitleWidth;                                                                 // 0x02CC (size: 0x4)
    float InputWidth;                                                                 // 0x02D0 (size: 0x4)
    float Height;                                                                     // 0x02D4 (size: 0x4)
    FText Title;                                                                      // 0x02D8 (size: 0x18)
    FText DefaultValue;                                                               // 0x02F0 (size: 0x18)
    float InputPadding;                                                               // 0x0308 (size: 0x4)
    TEnumAsByte<EHorizontalAlignment> ValueJustification;                             // 0x030C (size: 0x1)
    FLinearColor InputBackgroundColor;                                                // 0x0310 (size: 0x10)
    TEnumAsByte<ETextInputType> InputType;                                            // 0x0320 (size: 0x1)

    void OnTextBoxTextCommitted(const FText& Text, TEnumAsByte<ETextCommit::Type> CommitMethod);
    void OnTextBoxTextChanged(const FText& Text);
    int32 GetValueInt();
    FText GetValue();
}; // Size: 0x328

class UTextOnlyTooltip : public UUserWidget
{
    class UTextBlock* _textBlock;                                                     // 0x0268 (size: 0x8)

}; // Size: 0x270

class UTextStatics : public UBlueprintFunctionLibrary
{

    FText GetColorText(EConZColor Color);
}; // Size: 0x28

class UTexture2DStatics : public UObject
{
}; // Size: 0x28

class UThermalSensorComponent : public UActorComponent
{
    float _temperature;                                                               // 0x00B0 (size: 0x4)
    float _emissivity;                                                                // 0x00B4 (size: 0x4)
    float _radius;                                                                    // 0x00B8 (size: 0x4)
    float _mass;                                                                      // 0x00BC (size: 0x4)
    float _specificHeatCapacity;                                                      // 0x00C0 (size: 0x4)
    float _thermalConductivity;                                                       // 0x00C4 (size: 0x4)
    uint8 _packedTemperature;                                                         // 0x00E8 (size: 0x1)
    bool _temperatureReplicationEnabled;                                              // 0x00F0 (size: 0x1)
    float _packTemperatureOffset;                                                     // 0x00F4 (size: 0x4)
    float _packTemperatureScale;                                                      // 0x00F8 (size: 0x4)
    float _packTemperatureGamma;                                                      // 0x00FC (size: 0x4)

    void OnRep_Temperature();
}; // Size: 0x100

class UThieverySkill : public UDexteritySkill
{
    class UCurveFloat* _lockpickingDurationModifierCurve;                             // 0x00B0 (size: 0x8)
    class UCurveFloat* _lockpickingStartAngleModifierCurve;                           // 0x00B8 (size: 0x8)
    class UCurveFloat* _lockpickingAngleModifierCurve;                                // 0x00C0 (size: 0x8)
    class UCurveFloat* _lockpickingDurabilityModifierCurve;                           // 0x00C8 (size: 0x8)
    class UCurveFloat* _dialPadDurationModifierCurve;                                 // 0x00D0 (size: 0x8)
    class UCurveFloat* _voltageMatchingDurationModifierCurve;                         // 0x00D8 (size: 0x8)

}; // Size: 0xE0

class UThrowableItemTag : public UBaseItemTag
{
    FMeleeWeaponDesc WeaponDesc;                                                      // 0x0030 (size: 0x38)

}; // Size: 0x68

class UThrowingComponent : public UProjectileMovementComponent
{
    EItemThrowingBehavior ItemThrowingBehavior;                                       // 0x01F8 (size: 0x1)
    float Dispersion;                                                                 // 0x01FC (size: 0x4)
    float PierceMaxDensity;                                                           // 0x0200 (size: 0x4)
    float ThrowEnergyMultiplier;                                                      // 0x0204 (size: 0x4)
    FRotator InitialRotation;                                                         // 0x0208 (size: 0xC)
    FRotator UpdatedRotation;                                                         // 0x0214 (size: 0xC)
    FRotator MinRandomImpactRotation;                                                 // 0x0220 (size: 0xC)
    FRotator MaxRandomImpactRotation;                                                 // 0x022C (size: 0xC)
    float PenetrationDepth;                                                           // 0x0238 (size: 0x4)
    bool IsFloatable;                                                                 // 0x023C (size: 0x1)
    EPrisonerGroundStance MinStance;                                                  // 0x023D (size: 0x1)
    class UParticleSystem* _splashParticleSystem;                                     // 0x15F8 (size: 0x8)
    class UAkAudioEvent* _splashAudioEvent;                                           // 0x1600 (size: 0x8)

    void OnProjectileBounced(const FHitResult& ImpactResult, const FVector& impactVelocity);
    void Multicast_ThrowingFinished(class USceneComponent* thrownComponent, const FHitResult& HitResult, bool isPiercing, const FVector& impactVelocity);
}; // Size: 0x1610

class UThrowingQuickAccessItemWidget : public UUserWidget
{
    uint8 MaxWidth;                                                                   // 0x0268 (size: 0x1)
    uint8 MaxHeight;                                                                  // 0x0269 (size: 0x1)
    class UImage* _imageWidget;                                                       // 0x0270 (size: 0x8)
    float DefaultWidth;                                                               // 0x0280 (size: 0x4)
    float DefaultHeight;                                                              // 0x0284 (size: 0x4)
    FVector2D DefaultPosition;                                                        // 0x0288 (size: 0x8)
    class UWidget* _itemWidget;                                                       // 0x0290 (size: 0x8)
    class USizeBox* SizeBox_0;                                                        // 0x0298 (size: 0x8)
    class UImage* _additionalIcon;                                                    // 0x02A0 (size: 0x8)
    class UTextBlock* _additionalText;                                                // 0x02A8 (size: 0x8)
    class UTextBlock* TextBlockItemSlotNumber;                                        // 0x02B0 (size: 0x8)

    FEventReply OnImageWidgetMouseButtonDown(FGeometry MyGeometry, const FPointerEvent& MouseEvent);
}; // Size: 0x2C8

class UTimedTriggerComponent : public UTriggerComponent
{
    float _countdownDuration;                                                         // 0x04E0 (size: 0x4)
    class UAkAudioEvent* _countdownStartAudioEvent;                                   // 0x04E8 (size: 0x8)
    class UAkAudioEvent* _countdownStopAudioEvent;                                    // 0x04F0 (size: 0x8)
    float _countdownRemainingTime;                                                    // 0x04F8 (size: 0x4)

    void OnCountdownTimer();
}; // Size: 0x510

class UTimedTriggerComponentState : public UTriggerComponentState
{
    float CountdownRemainingTime;                                                     // 0x0028 (size: 0x4)

}; // Size: 0x30

class UTireToSurfaceAudioData : public UDataAsset
{
    float _maxSoundRange;                                                             // 0x0030 (size: 0x4)
    class UAkAudioEvent* _movementStarted;                                            // 0x0038 (size: 0x8)
    class UAkAudioEvent* _movementStopped;                                            // 0x0040 (size: 0x8)
    class UAkAudioEvent* _noSurface;                                                  // 0x0048 (size: 0x8)
    class UAkAudioEvent* _flatTireContinuousStart;                                    // 0x0050 (size: 0x8)
    class UAkAudioEvent* _flatTireContinuousStop;                                     // 0x0058 (size: 0x8)
    TArray<FTireSurfaceAudioEntry> _soundGroups;                                      // 0x0060 (size: 0x10)

}; // Size: 0x268

class UTitleAndDescriptionTooltip : public UUserWidget
{
    class UTextBlock* _titleTextBlock;                                                // 0x0268 (size: 0x8)
    class UTextBlock* _descriptionTextBlock;                                          // 0x0270 (size: 0x8)

}; // Size: 0x278

class UToggleCamouflageAction : public USkillAction
{
}; // Size: 0xA8

class UTooltipBase : public UUserWidget
{
    class UImage* BackgroundImage;                                                    // 0x0268 (size: 0x8)
    class UImage* ItemImage;                                                          // 0x0270 (size: 0x8)
    class UVerticalBox* ItemImageBox;                                                 // 0x0278 (size: 0x8)
    class UTextBlock* NameText;                                                       // 0x0280 (size: 0x8)
    class UTextBlock* DescriptionText;                                                // 0x0288 (size: 0x8)
    class UProgressBar* ProgressBar_0;                                                // 0x0290 (size: 0x8)
    class AItem* _item;                                                               // 0x0298 (size: 0x8)

    void InitFromItem(class AItem* Item);
    void InitFromCaptionAndDescription(const FText& Caption, const FText& Description);
}; // Size: 0x2A0

class UTournamentScoreboardRowWidget : public UUserWidget
{
    class UTextBlock* _rankText;                                                      // 0x0268 (size: 0x8)
    class UTextBlock* _playerNameText;                                                // 0x0270 (size: 0x8)
    class UTextBlock* _famePointsText;                                                // 0x0278 (size: 0x8)
    class UTextBlock* _killsText;                                                     // 0x0280 (size: 0x8)
    class UImage* _deathIcon;                                                         // 0x0288 (size: 0x8)

}; // Size: 0x290

class UTournamentScoreboardWidget : public UUserWidget
{
    class UTextBlock* _instruction;                                                   // 0x0268 (size: 0x8)
    class UVerticalBox* _table;                                                       // 0x0270 (size: 0x8)
    TSubclassOf<class UTournamentScoreboardRowWidget> _rowClass;                      // 0x0278 (size: 0x8)

}; // Size: 0x280

class UTradeStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UTradeableDiscountCondition : public UObject
{
}; // Size: 0x28

class UTraderBuyPanel : public UUserWidget
{
    TSubclassOf<class UTraderItemButton> _traderItemButtonClass;                      // 0x0280 (size: 0x8)
    class UTabContainer* _cashOrCreditRadioBtn;                                       // 0x0288 (size: 0x8)
    class UWidgetSwitcher* _subpanelSwitcher;                                         // 0x0290 (size: 0x8)
    class UPanelWidget* _catResults;                                                  // 0x0298 (size: 0x8)
    class UWrapBox* _itemsOfChosenCategory;                                           // 0x02A0 (size: 0x8)
    class UTraderItemButton* _chosenItem;                                             // 0x02A8 (size: 0x8)
    class UWrapBox* _relatedItems;                                                    // 0x02B0 (size: 0x8)
    class USearchBox* _itemSearchBox;                                                 // 0x02B8 (size: 0x8)
    class UTraderDropdownMenu* _itemCategoryDropdown;                                 // 0x02C0 (size: 0x8)
    class UTraderDropdownMenu* _itemSortingDropdown;                                  // 0x02C8 (size: 0x8)
    class UTextBlock* _categoryTitle;                                                 // 0x02D0 (size: 0x8)
    class UTraderFilterFamePointsButton* _btnFilterSufficientFP;                      // 0x02D8 (size: 0x8)
    class UTraderFilterFamePointsButton* _btnFilterInsufficientFP;                    // 0x02E0 (size: 0x8)
    class UTextBlock* _warningMessage;                                                // 0x02E8 (size: 0x8)
    class UTextBlock* _headerBannerPrisonerCashOnHand;                                // 0x02F0 (size: 0x8)
    class UTextBlock* _headerBannerPrisonerCashInBank;                                // 0x02F8 (size: 0x8)
    class UTextBlock* _prisonerCashOnHand;                                            // 0x0300 (size: 0x8)
    class UTextBlock* _prisonerCashInBank;                                            // 0x0308 (size: 0x8)
    class UTextBlock* _prisonerGoldInBank;                                            // 0x0310 (size: 0x8)
    class UTextBlock* _prisonerFamePoints;                                            // 0x0318 (size: 0x8)
    class UTextBlock* _buyTotal;                                                      // 0x0320 (size: 0x8)
    class UTextBlock* _buyTotalGold;                                                  // 0x0328 (size: 0x8)
    class UWidgetSwitcher* _exitBackSwitcher;                                         // 0x0330 (size: 0x8)
    class UPrimaryButton* _btnExit;                                                   // 0x0338 (size: 0x8)
    FText _exitTooltipText;                                                           // 0x0340 (size: 0x18)
    class UPrimaryButton* _btnBack;                                                   // 0x0358 (size: 0x8)
    FText _backTooltipText;                                                           // 0x0360 (size: 0x18)
    class UWidgetSwitcher* _cartBuySwitcher;                                          // 0x0378 (size: 0x8)
    class UPrimaryButton* _btnCart;                                                   // 0x0380 (size: 0x8)
    FText _cartTooltipText;                                                           // 0x0388 (size: 0x18)
    class UPrimaryButton* _btnBuy;                                                    // 0x03A0 (size: 0x8)
    FText _buyTooltipText;                                                            // 0x03A8 (size: 0x18)
    int32 _cashOrCreditFontSizeUnselected;                                            // 0x03C0 (size: 0x4)
    int32 _cashOrCreditFontSizeSelected;                                              // 0x03C4 (size: 0x4)
    TSubclassOf<class UTextOnlyTooltip> _tooltipClass;                                // 0x03C8 (size: 0x8)
    FSlateColor _buyTotalZeroColor;                                                   // 0x0440 (size: 0x28)
    FSlateColor _buyTotalNonZeroColor;                                                // 0x0468 (size: 0x28)
    FSlateColor _noOwnedCardInInventoryColor;                                         // 0x0490 (size: 0x28)
    TArray<FSlateBrush> _sortTypeBrushes;                                             // 0x04B8 (size: 0x10)

    void OnExitButtonClicked();
    void OnCartButtonClicked();
    void OnBuyButtonClicked();
    void OnBackButtonClicked();
    void OnAnyButtonHovered();
}; // Size: 0x4C8

class UTraderBuyUIController : public UObject
{
}; // Size: 0x218

class UTraderDepotPanel : public UUserWidget
{
    class UTextBlock* _prisonerCashOnHand;                                            // 0x0268 (size: 0x8)
    class UTextBlock* _prisonerCashInBank;                                            // 0x0270 (size: 0x8)
    class UTextBlock* _prisonerGoldInBank;                                            // 0x0278 (size: 0x8)
    class UTextBlock* _prisonerFamePoints;                                            // 0x0280 (size: 0x8)
    class UPrimaryButton* _btnExit;                                                   // 0x0288 (size: 0x8)
    FText _exitTooltipText;                                                           // 0x0290 (size: 0x18)
    class UItemInventoryDepotWidget2* _inventoryDepotWidget2;                         // 0x02A8 (size: 0x8)
    class UAkAudioEvent* _soundExitOnClick;                                           // 0x02B0 (size: 0x8)
    class UAkAudioEvent* _soundButtonOnHover;                                         // 0x02B8 (size: 0x8)
    TSubclassOf<class UTextOnlyTooltip> _tooltipClass;                                // 0x02C0 (size: 0x8)

    void OnExitClicked();
    void OnAnyButtonHover();
}; // Size: 0x2D0

class UTraderDropdownMenu : public UUserWidget
{
    bool PreviewSelectedState;                                                        // 0x0268 (size: 0x1)
    class UWidgetSwitcher* _backgroundSwitcher;                                       // 0x02A0 (size: 0x8)
    class UComboBoxStringWithIndexing* _comboBox;                                     // 0x02A8 (size: 0x8)
    class UImage* _dropdownIcon;                                                      // 0x02B0 (size: 0x8)
    TArray<FTraderDropdownMenuEntry> _comboBoxEntries;                                // 0x02B8 (size: 0x10)

    void OnComboBoXSelectionChanged(int32 SelectedIndex);
}; // Size: 0x2E0

class UTraderFilterFamePointsButton : public UUserWidget
{
    class UImage* _lockImage;                                                         // 0x02B8 (size: 0x8)
    FSlateBrush _selectedLookBrush;                                                   // 0x02C0 (size: 0x88)
    FSlateBrush _deselectedLookBrush;                                                 // 0x0348 (size: 0x88)

}; // Size: 0x3D0

class UTraderForPlayerAndDepotItemRequest : public UPlayerRpcChannelServerRequest
{
}; // Size: 0x30

class UTraderForPlayerAndDepotItemResponse : public UPlayerRpcChannelServerResponse
{
    class ATrader* _payload;                                                          // 0x0028 (size: 0x8)

}; // Size: 0x30

class UTraderItemButton : public UUserWidget
{
    class UButton* _button;                                                           // 0x02D0 (size: 0x8)
    class UImage* _icon;                                                              // 0x02D8 (size: 0x8)
    class UImage* _saleIcon;                                                          // 0x02E0 (size: 0x8)
    class UOverlay* _priceOverlay;                                                    // 0x02E8 (size: 0x8)
    class UTextBlock* _title;                                                         // 0x02F0 (size: 0x8)
    class UOverlay* _amountInStockOverlay;                                            // 0x02F8 (size: 0x8)
    class UTextBlock* _amountInStock;                                                 // 0x0300 (size: 0x8)
    class UOverlay* _tradeDataOverlay;                                                // 0x0308 (size: 0x8)
    class UImage* _priceBackground;                                                   // 0x0310 (size: 0x8)
    class UTextBlock* _price;                                                         // 0x0318 (size: 0x8)
    class UTextBlock* _quantity;                                                      // 0x0320 (size: 0x8)
    class UTextBlock* _quantityFadeout;                                               // 0x0328 (size: 0x8)
    class UImage* _quantityBackground;                                                // 0x0330 (size: 0x8)
    class UImage* _quantityBackgroundFadeout;                                         // 0x0338 (size: 0x8)
    class UOverlay* _lockedOverlay;                                                   // 0x0340 (size: 0x8)
    class UWidgetSwitcher* _lockedWidgetSwitcher;                                     // 0x0348 (size: 0x8)
    class UTextBlock* _requiredFamePointsText;                                        // 0x0350 (size: 0x8)
    class UWidgetAnimation* _changeQuantity;                                          // 0x0358 (size: 0x8)
    FLinearColor _salePriceBackgroundColor;                                           // 0x0360 (size: 0x10)
    class UTexture2D* _iconBlankTexture;                                              // 0x0448 (size: 0x8)
    class UAkAudioEvent* _soundOnHover;                                               // 0x0450 (size: 0x8)
    class UAkAudioEvent* _soundOnClick;                                               // 0x0458 (size: 0x8)

    void OnClick();
}; // Size: 0x468

class UTraderItemCategoryButton : public UUserWidget
{
    class UButton* _button;                                                           // 0x0280 (size: 0x8)
    class UImage* _icon;                                                              // 0x0288 (size: 0x8)
    class UTextBlock* _title;                                                         // 0x0290 (size: 0x8)
    class UOverlay* _lockedOverlay;                                                   // 0x0298 (size: 0x8)
    class UWidgetSwitcher* _lockedWidgetSwitcher;                                     // 0x02A0 (size: 0x8)
    class UTextBlock* _requiredFamePointsText;                                        // 0x02A8 (size: 0x8)
    FText _titleValue;                                                                // 0x02B0 (size: 0x18)
    TSoftObjectPtr<UTexture> _iconTexture;                                            // 0x02C8 (size: 0x28)
    class UTexture2D* _iconBlankTexture;                                              // 0x02F0 (size: 0x8)
    FVector2D _iconSize;                                                              // 0x02F8 (size: 0x8)
    FGameplayTagContainer _tradeCategories;                                           // 0x0300 (size: 0x20)
    class UPanelWidget* _panelToOpenOnClick;                                          // 0x0320 (size: 0x8)
    class UAkAudioEvent* _soundOnHover;                                               // 0x0328 (size: 0x8)
    class UAkAudioEvent* _soundOnClick;                                               // 0x0330 (size: 0x8)

    void UpdateIconTexture();
    void OnClick();
}; // Size: 0x340

class UTraderMainPanel : public UTabMenuPanel
{
    class UTabContainer* _tabRow;                                                     // 0x0268 (size: 0x8)
    class UWidgetSwitcher* _panelSwitcher;                                            // 0x0270 (size: 0x8)
    class UTraderBuyPanel* _buyPanel;                                                 // 0x0278 (size: 0x8)
    class UTraderSellPanel* _sellPanel;                                               // 0x0280 (size: 0x8)
    class UTraderDepotPanel* _depotPanel;                                             // 0x0288 (size: 0x8)
    class UPanelWidget* _loadingScreen;                                               // 0x0290 (size: 0x8)

}; // Size: 0x2A8

class UTraderMainUIController : public UObject
{
    class UTraderBuyUIController* TraderBuyUIController;                              // 0x0088 (size: 0x8)
    class UTraderSellUIController* TraderSellUIController;                            // 0x0090 (size: 0x8)

}; // Size: 0xD0

class UTraderManagingComponent : public UActorComponent
{
    float _pawnRelevancyRange;                                                        // 0x00D0 (size: 0x4)
    float _tradeOutpostsUpdateTime;                                                   // 0x00D4 (size: 0x4)
    float _outpostEconomyResetTimeHours;                                              // 0x00DC (size: 0x4)
    float _outpostPriceDeltasRandomizationTimeHours;                                  // 0x00E0 (size: 0x4)
    float _tradeableRotationTimeIngameHoursMin;                                       // 0x00E4 (size: 0x4)
    float _tradeableRotationTimeIngameHoursMax;                                       // 0x00E8 (size: 0x4)
    float _tradeableRotationTimeOfDayMin;                                             // 0x00EC (size: 0x4)
    float _tradeableRotationTimeOfDayMax;                                             // 0x00F0 (size: 0x4)

}; // Size: 0x108

class UTraderPersonalityDataAsset : public UDataAsset
{
    FGuid TraderPersistentId;                                                         // 0x0030 (size: 0x10)
    FString HumanReadableTraderName;                                                  // 0x0040 (size: 0x10)
    ETraderType TraderType;                                                           // 0x0050 (size: 0x1)
    TArray<FTraderMarkerTradeableOverrideStruct> PurchasableTradeablesClassesOverride; // 0x0058 (size: 0x10)

}; // Size: 0x68

class UTraderSellListEntry : public UUserWidget
{
    class UImage* _entryIcon;                                                         // 0x0280 (size: 0x8)
    class UTextBlock* _entryCaption;                                                  // 0x0288 (size: 0x8)
    class UTextBlock* _entryPrice;                                                    // 0x0290 (size: 0x8)
    class UButton* _btnCancel;                                                        // 0x0298 (size: 0x8)
    class UTexture2D* _missingTextureIcon;                                            // 0x0308 (size: 0x8)

    void OnCancelClicked();
}; // Size: 0x310

class UTraderSellPanel : public UUserWidget
{
    class UTabContainer* _cashOrCreditRadioBtn;                                       // 0x0268 (size: 0x8)
    class UVerticalBox* _sellList;                                                    // 0x0270 (size: 0x8)
    class UTextBlock* _headerBannerPrisonerCashOnHand;                                // 0x0278 (size: 0x8)
    class UTextBlock* _headerBannerPrisonerCashInBank;                                // 0x0280 (size: 0x8)
    class UTextBlock* _prisonerCashOnHand;                                            // 0x0288 (size: 0x8)
    class UTextBlock* _prisonerCashInBank;                                            // 0x0290 (size: 0x8)
    class UTextBlock* _prisonerGoldInBank;                                            // 0x0298 (size: 0x8)
    class UTextBlock* _prisonerFamePoints;                                            // 0x02A0 (size: 0x8)
    class UTextBlock* _traderFunds;                                                   // 0x02A8 (size: 0x8)
    class UTextBlock* _saleTotal;                                                     // 0x02B0 (size: 0x8)
    class UTextBlock* _warningMessage;                                                // 0x02B8 (size: 0x8)
    class UPrimaryButton* _btnExit;                                                   // 0x02C0 (size: 0x8)
    FText _exitTooltipText;                                                           // 0x02C8 (size: 0x18)
    class UPrimaryButton* _btnSell;                                                   // 0x02E0 (size: 0x8)
    FText _sellTooltipText;                                                           // 0x02E8 (size: 0x18)
    TSubclassOf<class UTextOnlyTooltip> _tooltipClass;                                // 0x0300 (size: 0x8)
    TSubclassOf<class UTraderSellListEntry> _sellListEntryWidgetClass;                // 0x0308 (size: 0x8)
    FText _partialPriceSellText;                                                      // 0x0328 (size: 0x18)
    FText _worthlessPriceSellText;                                                    // 0x0340 (size: 0x18)
    float _sellWarningPopupTextWidth;                                                 // 0x0358 (size: 0x4)
    int32 _cashOrCreditFontSizeUnselected;                                            // 0x035C (size: 0x4)
    int32 _cashOrCreditFontSizeSelected;                                              // 0x0360 (size: 0x4)

    void OnSellClicked();
    void OnExitClicked();
    void OnAnyButtonHovered();
}; // Size: 0x368

class UTraderSellUIController : public UObject
{
}; // Size: 0x88

class UTraderService : public UObject
{
    class UTexture2D* _storeIcon;                                                     // 0x0030 (size: 0x8)

}; // Size: 0x38

class UTradingOutpostDescriptionDataAsset : public UDataAsset
{
    FGuid TradeOutpostPersistentId;                                                   // 0x0030 (size: 0x10)

}; // Size: 0x40

class UTrapData : public UDataAsset
{
    TSubclassOf<class USphereMotionTriggerComponent> SphereMotionTriggerComponentClass; // 0x0030 (size: 0x8)
    TSubclassOf<class UBoxMotionTriggerComponent> BoxMotionTriggerComponentClass;     // 0x0038 (size: 0x8)
    TSubclassOf<class ULaserTriggerComponent> LaserTriggerComponentClass;             // 0x0040 (size: 0x8)
    TSubclassOf<class UTimedTriggerComponent> TimedTriggerComponentClass;             // 0x0048 (size: 0x8)

}; // Size: 0x50

class UTrapItemEntitySetup : public UItemEntitySetup
{
}; // Size: 0x90

class UTrapItemUserData : public UVirtualizedItemUserData
{
    FDbIntegerId OwnerUserProfileId;                                                  // 0x0028 (size: 0x8)
    bool IsOwnerUserProfileIdDirty;                                                   // 0x0030 (size: 0x1)

}; // Size: 0x38

class UTrapRefuelItemTag : public UBaseItemTag
{
    int32 UsesOnRefuel;                                                               // 0x0030 (size: 0x4)

}; // Size: 0x38

class UTrashCarouselWidget : public UUserWidgetWithDescription
{
    FSlateBrush _leftArrowIcon;                                                       // 0x02E8 (size: 0x88)
    FSlateBrush _rightArrowIcon;                                                      // 0x0370 (size: 0x88)
    FSlateBrush _disabledLeftArrowIcon;                                               // 0x03F8 (size: 0x88)
    FSlateBrush _disabledRightArrowIcon;                                              // 0x0480 (size: 0x88)
    class UTextBlock* _selectionDisplay;                                              // 0x0508 (size: 0x8)
    class UButton* _leftArrow;                                                        // 0x0510 (size: 0x8)
    class UButton* _rightArrow;                                                       // 0x0518 (size: 0x8)
    FSlateFontInfo _font;                                                             // 0x0520 (size: 0x58)
    TArray<FString> _possibleValues;                                                  // 0x0578 (size: 0x10)
    TArray<FText> _carouselValues;                                                    // 0x0588 (size: 0x10)
    bool _canWrap;                                                                    // 0x0598 (size: 0x1)

    void OnValueChanged(int32 NewValue);
    void ClickRight();
    void ClickLeft();
}; // Size: 0x5A0

class UTrashNamedCarouselWidget : public UUserWidgetWithDescription
{
    FTrashNamedCarouselWidgetValueChangedTemp_DONOTUSE ValueChangedTemp_DONOTUSE;     // 0x02E8 (size: 0x10)
    void TrashCarouselValueChangedTemp(int32 NewValue);
    class UTextBlock* _name;                                                          // 0x02F8 (size: 0x8)
    class UTrashCarouselWidget* _carousel;                                            // 0x0300 (size: 0x8)
    class USelectionOverlayWidget* _focusBackground;                                  // 0x0308 (size: 0x8)
    FString _label;                                                                   // 0x0310 (size: 0x10)
    FText _mainLabel;                                                                 // 0x0320 (size: 0x18)
    FSlateFontInfo _defaultFont;                                                      // 0x0338 (size: 0x58)
    TArray<FString> _possibleValues;                                                  // 0x03E8 (size: 0x10)
    TArray<FText> _carouselValues;                                                    // 0x03F8 (size: 0x10)

    void SetValue(int32 Value);
    void SetName(FText Name);
    void OnValueChanged(int32 NewValue);
    int32 GetValue();
}; // Size: 0x410

class UTrashNamedSliderWidget : public UUserWidgetWithDescription
{
    FTrashNamedSliderWidgetValueChangedTemp_DONOTUSE ValueChangedTemp_DONOTUSE;       // 0x02E8 (size: 0x10)
    void TrashNamedSliderValueChangedTemp(float NewValue);
    class UScrollingSizeBox* _nameBox;                                                // 0x02F8 (size: 0x8)
    class UTextBlock* _name;                                                          // 0x0300 (size: 0x8)
    class USizeBox* _valueDisplayBox;                                                 // 0x0308 (size: 0x8)
    class UTextBlock* _valueDisplay;                                                  // 0x0310 (size: 0x8)
    class UTrashSliderWidget* _slider;                                                // 0x0318 (size: 0x8)
    class USelectionOverlayWidget* _focusBackground;                                  // 0x0320 (size: 0x8)
    FString _label;                                                                   // 0x0328 (size: 0x10)
    FText _mainLabel;                                                                 // 0x0338 (size: 0x18)
    FSlateFontInfo _defaultFont;                                                      // 0x0350 (size: 0x58)
    float _stepSpeedTreshold;                                                         // 0x0400 (size: 0x4)
    float _valueDisplayWidth;                                                         // 0x0404 (size: 0x4)
    float _minValue;                                                                  // 0x0408 (size: 0x4)
    float _maxValue;                                                                  // 0x040C (size: 0x4)
    int32 _stepCount;                                                                 // 0x0410 (size: 0x4)
    int32 _decimalPlacesShown;                                                        // 0x0414 (size: 0x4)
    float _nameBoxWidth;                                                              // 0x0434 (size: 0x4)

    void SetValue(float Value);
    void SetName(FText Name);
    void SetLimits(float MinValue, float MaxValue, int32 stepCount);
    void OnValueChanged(float NewValue);
    float GetValue();
    float GetMinValue();
    float GetMaxValue();
}; // Size: 0x440

class UTrashSliderWidget : public UUserWidgetWithDescription
{
    FTrashSliderWidgetValueChangedTemp_DONOTUSE ValueChangedTemp_DONOTUSE;            // 0x02E8 (size: 0x10)
    void TrashSliderValueChangedTemp(float NewValue);
    FSlateBrush _emptySlider;                                                         // 0x02F8 (size: 0x88)
    FSlateBrush _filledSlider;                                                        // 0x0380 (size: 0x88)
    FSlateBrush _selectedSlider;                                                      // 0x0408 (size: 0x88)
    FSlateBrush _normalThumb;                                                         // 0x05A0 (size: 0x88)
    FSlateBrush _selectedThumb;                                                       // 0x0628 (size: 0x88)
    class USlider* _slider;                                                           // 0x0738 (size: 0x8)
    class UProgressBar* _progressBar;                                                 // 0x0740 (size: 0x8)
    FDataTableRowHandle _selectedColor;                                               // 0x0748 (size: 0x10)
    FDataTableRowHandle _disabledColor;                                               // 0x0758 (size: 0x10)
    float _minValue;                                                                  // 0x0768 (size: 0x4)
    float _maxValue;                                                                  // 0x076C (size: 0x4)
    int32 _stepCount;                                                                 // 0x0770 (size: 0x4)

    void SetValue(float Value);
    void OnValueChanged(float NewValue);
    float GetValue();
}; // Size: 0x778

class UTriggerComponent : public UPrimitiveComponent
{
    FObjectConditionContainer _triggeringActorConditions;                             // 0x04D0 (size: 0x10)

}; // Size: 0x4E0

class UTriggerComponentState : public UObject
{
}; // Size: 0x28

class UTriggerFailurePenalty : public UFailurePenalty
{
}; // Size: 0x30

class UTriggerItemTag : public UBaseItemTag
{
    ETrapTriggerType TriggerType;                                                     // 0x0030 (size: 0x1)

}; // Size: 0x38

class UTurretItemAnimInstance : public UAnimInstance
{
    FRotator _barrelRotation;                                                         // 0x02B8 (size: 0xC)
    int32 _stateFlags;                                                                // 0x02C4 (size: 0x4)

}; // Size: 0x2D0

class UTurretItemEntitySave : public UObject
{
    TArray<FCountedAmmunitionData> AmmunitionData;                                    // 0x0028 (size: 0x10)

}; // Size: 0x38

class UTurretItemEntitySetup : public UItemEntitySetup
{
}; // Size: 0x90

class UTurretPaintjobCommonData : public UDataAsset
{
    TArray<FTurretPaintjobPatternParams> Patterns;                                    // 0x0030 (size: 0x10)

}; // Size: 0x40

class UTurretPaintjobItemComponent : public UItemComponent
{
    TArray<FTurretPaintjobPatternParams> _patterns;                                   // 0x00C8 (size: 0x10)
    bool _isActive;                                                                   // 0x00D8 (size: 0x1)
    float _paintjobDecayDurationSeconds;                                              // 0x00DC (size: 0x4)

    void NetMulticast_SetPatternIndex(int32 Index);
    void NetMulticast_SetColorAtIndex(int32 Index, FColor Value);
    void NetMulticast_RefreshColor();
    void NetMulticast_ClearPaintjob(FColor NewColor);
}; // Size: 0x128

class UTwitchDropsMainMenuButtonWidget : public UUserWidget
{
    class UButton* _button;                                                           // 0x0268 (size: 0x8)
    class UHorizontalBox* _backgroundHorizontalBox;                                   // 0x0270 (size: 0x8)
    class UTextBlock* _displayText;                                                   // 0x0278 (size: 0x8)
    class UImage* _icon;                                                              // 0x0280 (size: 0x8)
    FSlateBrush _notConnectedIcon;                                                    // 0x0288 (size: 0x88)
    FSlateBrush _connectedIcon;                                                       // 0x0310 (size: 0x88)
    FSlateBrush _invalidConnectionIcon;                                               // 0x0398 (size: 0x88)
    FSlateBrush _criticalErrorIcon;                                                   // 0x0420 (size: 0x88)
    class UTwitchDropsUIController* _twitchDropsUIController;                         // 0x04A8 (size: 0x8)

    void OnClicked();
}; // Size: 0x4C0

class UTwitchDropsManager : public UObject
{
}; // Size: 0x1A0

class UTwitchDropsUIController : public UObject
{
}; // Size: 0x48

class UUIBaseContext : public UObject
{
}; // Size: 0x28

class UUIContainerSubobject : public UObject
{
    uint8 _containerWidth;                                                            // 0x0070 (size: 0x1)
    uint8 _containerHeight;                                                           // 0x0071 (size: 0x1)
    float _maximumContainedWeight;                                                    // 0x0074 (size: 0x4)

}; // Size: 0x90

class UUIContext : public UObject
{
}; // Size: 0x28

class UUIROWidgetDragDropOperation : public UDragDropOperation
{
}; // Size: 0x90

class UUIRepresentableObjectWidget : public UUserWidget
{
    class USizeBox* _mainSizeBox;                                                     // 0x02F8 (size: 0x8)
    class UScaleBox* _imageScaleBox;                                                  // 0x0300 (size: 0x8)
    class UImage* _image;                                                             // 0x0308 (size: 0x8)

    void OnDropOperation(class UDragDropOperation* DragDropOperation);
    void OnDragOperationCancelled(class UDragDropOperation* DragDropOperation);
}; // Size: 0x318

class UUIRepresentationSubobject : public UObject
{
    uint8 _inContainerWidth;                                                          // 0x0030 (size: 0x1)
    uint8 _inContainerHeight;                                                         // 0x0031 (size: 0x1)
    TSoftObjectPtr<UTexture2D> _inContainerIcon;                                      // 0x0038 (size: 0x28)
    TSoftObjectPtr<UTexture2D> _inVicinityIcon;                                       // 0x0060 (size: 0x28)
    TSoftObjectPtr<UTexture2D> _inHandsOrHolstersIcon;                                // 0x0088 (size: 0x28)

}; // Size: 0xB0

class UUISoundsData : public UDataAsset
{
    FGenericUISounds Generic;                                                         // 0x0030 (size: 0x40)
    FNotificationUISounds Notification;                                               // 0x0070 (size: 0x10)
    FBankATMUISounds BankATM;                                                         // 0x0080 (size: 0x20)
    FTraderUISounds Trader;                                                           // 0x00A0 (size: 0x18)
    FItemsCraftingUISounds ItemsCrafting;                                             // 0x00B8 (size: 0x20)
    FBaseBuildingUISounds BaseBuilding;                                               // 0x00D8 (size: 0x18)
    FCookingUISounds Cooking;                                                         // 0x00F0 (size: 0x18)
    FJournalUISounds Journal;                                                         // 0x0108 (size: 0x28)
    FManualUISounds Manual;                                                           // 0x0130 (size: 0x18)
    FSquadUISounds Squad;                                                             // 0x0148 (size: 0x18)
    FEventsUISounds Events;                                                           // 0x0160 (size: 0x10)
    FQuestUISounds Quests;                                                            // 0x0170 (size: 0x58)
    FSettingsUISounds Settings;                                                       // 0x01C8 (size: 0x50)

}; // Size: 0x218

class UUIStatics : public UBlueprintFunctionLibrary
{

    bool ProjectWorldToScreen(class APlayerController* Controller, FVector& WorldPosition, FVector2D& Size, FVector2D& screenPosition);
    class UWidget* GetWidgetParentOfType(class UWidget* Widget, TSubclassOf<class UWidget> Type, bool includeUserWidgets);
    FVector GetMuscleLeanFatFactorsFromCoordinates(FVector2D Coordinates);
    TSubclassOf<class UUserWidget> GetDesiredWidgetClass(EWidgetType Type);
    FText GetDataForFieldName(FName Name, class UStruct* Str, class UStruct* Type);
    FVector4 GetAttributesFromMuscularAndFatFactors(float muscular, float fat);
    FVector4 GetAgeModifiersFromAge(int32 Age);
    FString FilterNonNumbersFromString(FString& String);
    void ColorToHex(const FSlateColor& Color, FText& Text);
    bool CanDropIfDraggingItem(const class UObject* draggedObject, const class APawn* draggingPlayerPawn);
}; // Size: 0x28

class UUPrisonerActionCleanDescription : public UPrisonerActionDescription
{
}; // Size: 0x50

class UUPrisonerActionWashClothDescription : public UPrisonerActionDescription
{
}; // Size: 0x58

class UUnarmedCombatInputRedirector : public UObject
{
}; // Size: 0x60

class UUnpackableTag : public UBaseItemTag
{
    EItemUnpackingType _unpackingType;                                                // 0x0030 (size: 0x1)
    FText _interactionCaption;                                                        // 0x0038 (size: 0x18)
    TArray<FItemUnpackingSpawnedItem> _spawnedItems;                                  // 0x0050 (size: 0x10)

}; // Size: 0x60

class UUnusableWorldItemTag : public UBaseItemTag
{
    TSubclassOf<class AItem> UnusableItem;                                            // 0x0030 (size: 0x8)

}; // Size: 0x38

class UUpdateableNotification : public UBasicNotification
{
}; // Size: 0x30

class UUpdateableNotificationDescription : public UBasicNotificationDescription
{
    FString NotificationName;                                                         // 0x0078 (size: 0x10)

}; // Size: 0x90

class UUpgradeItemTag : public UBaseItemTag
{
    int32 Price;                                                                      // 0x0030 (size: 0x4)
    bool AttachAsItem;                                                                // 0x0034 (size: 0x1)

}; // Size: 0x38

class UUpgradeSlotWidget : public UUserWidget
{
    class UImage* _itemIcon;                                                          // 0x0268 (size: 0x8)
    class UImage* _gridSymbol;                                                        // 0x0270 (size: 0x8)
    class UImage* _backgroundImage;                                                   // 0x0278 (size: 0x8)
    class UImage* _defaultImage;                                                      // 0x0280 (size: 0x8)
    FLinearColor _regularColour;                                                      // 0x0288 (size: 0x10)
    FLinearColor _dropUnavailableColour;                                              // 0x0298 (size: 0x10)
    FLinearColor _dropAvailableColour;                                                // 0x02A8 (size: 0x10)
    ESlotType _slotType;                                                              // 0x02B8 (size: 0x1)
    TArray<class TSubclassOf<AItem>> _buyableUpgrades;                                // 0x02C8 (size: 0x10)

}; // Size: 0x2E8

class UUser : public UObject
{
}; // Size: 0x128

class UUserManager : public UObject
{
}; // Size: 0xA0

class UUserProfile : public UObject
{
    class USpamProtectionState* _globalSpamProtectionState;                           // 0x0108 (size: 0x8)
    class USpamProtectionState* _localSpamProtectionState;                            // 0x0110 (size: 0x8)

}; // Size: 0x178

class UUserWidgetWithDescription : public UUserWidget
{
    bool _usesDescription;                                                            // 0x0298 (size: 0x1)
    FText _description;                                                               // 0x02A0 (size: 0x18)

}; // Size: 0x2B8

class UVehicleAttachment : public UObject
{
    FName ParentSocket;                                                               // 0x0038 (size: 0x8)
    FVehicleAttachmentMeshSetup MeshSetup;                                            // 0x0040 (size: 0x80)
    FVehicleAttachmentMeshSetup QueryMeshSetup;                                       // 0x00D0 (size: 0x80)
    TArray<FVehicleAttachmentAdditionalSocket> AdditionalSockets;                     // 0x0158 (size: 0x10)
    class UWidgetComponent* HealthDisplay;                                            // 0x0168 (size: 0x8)
    TArray<FName> _associatedCollisionShapes;                                         // 0x0170 (size: 0x10)
    FText _displayName;                                                               // 0x0180 (size: 0x18)
    bool _canEverBeRemoved;                                                           // 0x0198 (size: 0x1)
    TArray<FVehicleAttachmentSlot> _slots;                                            // 0x01A0 (size: 0x10)
    bool _isIndestructible;                                                           // 0x01B0 (size: 0x1)
    bool _shouldBeRemovedFromVehicleWhenDestroyed;                                    // 0x01B1 (size: 0x1)
    FGameplayTag _requiredServiceToolTag;                                             // 0x01B4 (size: 0x8)
    bool _uniquePerVehicle;                                                           // 0x01BC (size: 0x1)
    int32 _parentId;                                                                  // 0x01D0 (size: 0x4)
    int32 _parentSlotIndex;                                                           // 0x01D4 (size: 0x4)
    TArray<class UMaterialInstanceDynamic*> _regularMaterials;                        // 0x01D8 (size: 0x10)
    class UMaterialInstanceDynamic* _serviceModeMaterial;                             // 0x01E8 (size: 0x8)
    double _mileage;                                                                  // 0x0200 (size: 0x8)
    bool _isSupportedForNetworking;                                                   // 0x0209 (size: 0x1)
    int32 _id;                                                                        // 0x020C (size: 0x4)
    float _maxHealth;                                                                 // 0x0218 (size: 0x4)
    float _health;                                                                    // 0x021C (size: 0x4)
    float _hardness;                                                                  // 0x0220 (size: 0x4)
    uint64 _miscState;                                                                // 0x0228 (size: 0x8)
    float _linearEnergyAbsorption;                                                    // 0x0230 (size: 0x4)
    float _flatEnergyAbsorption;                                                      // 0x0234 (size: 0x4)
    TSoftClassPtr<UObject> AttachmentItemClass;                                       // 0x0238 (size: 0x28)
    TSoftClassPtr<UObject> _tradeableClassOverride;                                   // 0x0260 (size: 0x28)
    bool _isServiceRestrictedToAcceptableModes;                                       // 0x02A8 (size: 0x1)
    TArray<FGameplayTag> _acceptableServiceModes;                                     // 0x02B0 (size: 0x10)
    FGameplayTag _damageRegion;                                                       // 0x02C0 (size: 0x8)
    int32 _damageRegionPriority;                                                      // 0x02C8 (size: 0x4)
    FRuntimeFloatCurve _damagePropagationVsArmorPiercing;                             // 0x02D0 (size: 0x88)
    FRuntimeFloatCurve _damagePropagationVsCollisionDamage;                           // 0x0358 (size: 0x88)
    bool _useDamageRatiosForDamagePropagation;                                        // 0x03E0 (size: 0x1)
    TMap<ECollisionDamageType, float> _damageRatios;                                  // 0x03E8 (size: 0x50)
    float _explosionDamageRatio;                                                      // 0x0438 (size: 0x4)
    FRuntimeFloatCurve _burnDamagePerSecondVsTemperature;                             // 0x0440 (size: 0x88)
    float _collisionDamageMultiplierToOthers;                                         // 0x04C8 (size: 0x4)
    float _installDuration;                                                           // 0x04CC (size: 0x4)
    float _repairDuration;                                                            // 0x04D0 (size: 0x4)
    TSoftClassPtr<USkill> _repairSkill;                                               // 0x04D8 (size: 0x28)
    float _repairExperience;                                                          // 0x0500 (size: 0x4)
    float _removeDuration;                                                            // 0x0504 (size: 0x4)
    FVehicleAttachmentDestructionEffect _destructionEffect;                           // 0x0508 (size: 0x28)
    bool _isPaintable;                                                                // 0x0530 (size: 0x1)
    float _paintjobDecayDurationSeconds;                                              // 0x0534 (size: 0x4)
    int32 _paintjobPatternIndex;                                                      // 0x0538 (size: 0x4)
    float _paintjobDecaySeconds;                                                      // 0x053C (size: 0x4)
    TArray<FColor> _paintJobColors;                                                   // 0x0540 (size: 0x10)
    TArray<FVehiclePaintjobPatternParams> _paintjobPatterns;                          // 0x0558 (size: 0x10)

    void OnRep_Paintjob();
    void OnRep_MiscState();
    void OnRep_Health();
}; // Size: 0x570

class UVehicleAttachmentDashboardAnimInstance : public UAnimInstance
{
    float _interpSteer;                                                               // 0x02B8 (size: 0x4)
    FRotator _steerRotator;                                                           // 0x02BC (size: 0xC)
    FVector _velocity;                                                                // 0x02C8 (size: 0xC)
    float _rpm;                                                                       // 0x02D4 (size: 0x4)
    float _fuelAmountPercentage;                                                      // 0x02D8 (size: 0x4)
    float _batteryAmountPercentage;                                                   // 0x02DC (size: 0x4)

}; // Size: 0x2E0

class UVehicleAttachmentHealthWidget : public UUserWidget
{
    class UTextBlock* _text;                                                          // 0x0268 (size: 0x8)
    class UProgressBar* _progressBar;                                                 // 0x0270 (size: 0x8)

}; // Size: 0x298

class UVehicleAttachmentTag : public UBaseItemTag
{
    TSubclassOf<class UVehicleAttachment> AttachmentClass;                            // 0x0030 (size: 0x8)

}; // Size: 0x38

class UVehicleAttachment_Airfoil : public UVehicleAttachment
{
    TArray<FAerodynamicSurface> AerodynamicSurfaces;                                  // 0x0568 (size: 0x10)

}; // Size: 0x580

class UVehicleAttachment_Alternator : public UVehicleAttachment
{
    FVehicleAttachmentAlternatorSetup AlternatorSetup;                                // 0x0570 (size: 0x8)

}; // Size: 0x580

class UVehicleAttachment_Armor : public UVehicleAttachment
{
}; // Size: 0x570

class UVehicleAttachment_Battery : public UVehicleAttachment
{
    FVehicleAttachmentBatterySetup BatterySetup;                                      // 0x0568 (size: 0x30)
    FVehicleAttachmentBatterySimulationData _simulationData;                          // 0x0598 (size: 0x4)

}; // Size: 0x5A0

class UVehicleAttachment_Chassis : public UVehicleAttachment
{
    TArray<class TSubclassOf<UVehicleBaseMountSlot>> _mountSlotClasses;               // 0x0570 (size: 0x10)
    TArray<FVehicleServiceItemSlot> _serviceItemSlots;                                // 0x0580 (size: 0x10)
    TArray<class UVehicleBaseMountSlot*> _mountSlots;                                 // 0x0590 (size: 0x10)

}; // Size: 0x5A0

class UVehicleAttachment_ConstrainedWheel : public UVehicleAttachment_Wheel
{
    FVehicleAttachmentWheelSetup WheelSetup;                                          // 0x05C0 (size: 0x44)
    FVehicleAttachmentMeshSetup VisualMeshSetup;                                      // 0x0610 (size: 0x80)
    FVehicleAttachmentMeshSetup SteeringMeshSetup;                                    // 0x06A0 (size: 0x80)

}; // Size: 0x740

class UVehicleAttachment_Dashboard : public UVehicleAttachment_StaticPart
{
    FDashboardMaterialParameterCache _materialParameterCache;                         // 0x0578 (size: 0x110)
    FGameplayTagContainer _lightsToggleTags;                                          // 0x0688 (size: 0x20)
    bool _isTurnedOn;                                                                 // 0x06A8 (size: 0x1)

}; // Size: 0x6B0

class UVehicleAttachment_DashboardWithMountInteractions : public UVehicleAttachment_Dashboard
{
}; // Size: 0x6B0

class UVehicleAttachment_DcxWheel : public UVehicleAttachment_Wheel
{
    TArray<int32> WheelIndices;                                                       // 0x05C0 (size: 0x10)

}; // Size: 0x5D0

class UVehicleAttachment_Door : public UVehicleAttachment
{
    FVehicleAttachmentDoorSetup DoorSetup;                                            // 0x0570 (size: 0x30)
    EVehicleAttachment_DoorFlags _flags;                                              // 0x05A0 (size: 0x1)
    class UObject* _reservee;                                                         // 0x05A8 (size: 0x8)
    TArray<FGameplayTag> _mountPathObstructionTags;                                   // 0x05B0 (size: 0x10)

    void OnRep_Flags();
}; // Size: 0x5D0

class UVehicleAttachment_EngineBlock : public UVehicleAttachment
{
    FVehicleAttachmentEngineBlockSetup EngineSetup;                                   // 0x0578 (size: 0x168)
    FVehicleAttachmentEngineBlockSimulationData _simulationData;                      // 0x06E0 (size: 0x2C)
    TSoftClassPtr<UObject> _tradeableClass;                                           // 0x0710 (size: 0x28)
    EEngineBlockState _repEngineBlockState;                                           // 0x0738 (size: 0x1)
    FGameplayTag _toggleOnTag;                                                        // 0x0760 (size: 0x8)
    FGameplayTag _toggleOffTag;                                                       // 0x0768 (size: 0x8)

    void OnRep_EngineBlockState();
}; // Size: 0x770

class UVehicleAttachment_Gearbox : public UVehicleAttachment
{
    FVehicleAttachmentGearboxSetup GearboxSetup;                                      // 0x0568 (size: 0x28)
    FVehicleAttachmentGearboxSimulationData _simulationData;                          // 0x05A8 (size: 0x14)

}; // Size: 0x5D0

class UVehicleAttachment_InventoryExpansion : public UVehicleAttachment_StaticPart
{
    TSubclassOf<class AVehicleItemContainer> _itemContainerClass;                     // 0x0570 (size: 0x8)
    FEntityId _itemContainerEntityId;                                                 // 0x0578 (size: 0x8)
    class AVehicleItemContainer* _itemContainer;                                      // 0x0580 (size: 0x8)

    void OnRep_ItemContainer();
}; // Size: 0x590

class UVehicleAttachment_Lights : public UVehicleAttachment
{
    bool _affectMaterialsOnParent;                                                    // 0x0570 (size: 0x1)
    TArray<FVehicleLightsData> _lightsData;                                           // 0x0578 (size: 0x10)
    FLightsAttachmentSimulationData _simulationData;                                  // 0x05A8 (size: 0x1)

}; // Size: 0x5B0

class UVehicleAttachment_MountableInventoryExpansion : public UVehicleAttachment_InventoryExpansion
{
    TArray<class TSubclassOf<UVehicleBaseMountSlot>> _mountSlotClasses;               // 0x0590 (size: 0x10)
    FVehicleAttachmentMeshSetup _inventoryVisualsMeshSetup;                           // 0x05A0 (size: 0x80)
    FName _inventoryVisualsCollisionShapeName;                                        // 0x0628 (size: 0x8)
    TArray<class UVehicleBaseMountSlot*> _mountSlots;                                 // 0x0630 (size: 0x10)

}; // Size: 0x640

class UVehicleAttachment_Radio : public UVehicleAttachment
{
    class URadioComponent* _radioComponent;                                           // 0x0570 (size: 0x8)
    FGameplayTagContainer _toggleTags;                                                // 0x0578 (size: 0x20)
    FGameplayTagContainer _changeStationTags;                                         // 0x0598 (size: 0x20)
    FGameplayTagContainer _increaseVolumeTags;                                        // 0x05B8 (size: 0x20)
    FGameplayTagContainer _decreaseVolumeTags;                                        // 0x05D8 (size: 0x20)
    FTransform _radioComponentOffset;                                                 // 0x0620 (size: 0x30)
    float _volumeChangeRate;                                                          // 0x0650 (size: 0x4)
    bool _isHiFi;                                                                     // 0x0654 (size: 0x1)
    float _electricityConsumption;                                                    // 0x0658 (size: 0x4)
    bool _turnedOn;                                                                   // 0x065C (size: 0x1)

    void OnRep_RadioComponent(class URadioComponent* Component);
}; // Size: 0x660

class UVehicleAttachment_Seat : public UVehicleAttachment
{
    TArray<class TSubclassOf<UVehicleBaseMountSlot>> _mountSlotClasses;               // 0x0570 (size: 0x10)
    TArray<class UVehicleBaseMountSlot*> _mountSlots;                                 // 0x0580 (size: 0x10)
    float _minimalHealthPercentWhenMounted;                                           // 0x0590 (size: 0x4)
    float _minimalHealthPercentToMounted;                                             // 0x0594 (size: 0x4)

}; // Size: 0x5A0

class UVehicleAttachment_StaticPart : public UVehicleAttachment
{
    bool _isIndependentFromParent;                                                    // 0x0568 (size: 0x1)

}; // Size: 0x570

class UVehicleAttachment_WeaponMount : public UVehicleAttachment
{
    FEntityId WeaponId;                                                               // 0x0568 (size: 0x8)
    TArray<FWeaponMountSetup> _supportedWeapons;                                      // 0x0570 (size: 0x10)

}; // Size: 0x580

class UVehicleAttachment_Wheel : public UVehicleAttachment
{
}; // Size: 0x5C0

class UVehicleBaseAnimInstance : public UAnimInstance
{
}; // Size: 0x2C0

class UVehicleBaseMountSlot : public UObject
{
    class UVehicleAttachment* AttachmentOwner;                                        // 0x0030 (size: 0x8)
    FName MountSocketName;                                                            // 0x0038 (size: 0x8)
    FName MountedCollisionShapeName;                                                  // 0x0040 (size: 0x8)
    EVehicleMountType Type;                                                           // 0x0048 (size: 0x1)
    class UPhysicalMaterial* InteractionMaterial;                                     // 0x0050 (size: 0x8)
    TSubclassOf<class UAnimInstance> MountedAnimInstanceClass;                        // 0x0058 (size: 0x8)
    class UAnimSequenceBase* MountedAnimation;                                        // 0x0060 (size: 0x8)
    class UBlendSpace* MountedBlendspace;                                             // 0x0068 (size: 0x8)
    class UBlendSpace* MountedBlendspaceFP;                                           // 0x0070 (size: 0x8)
    FPrisonerRestingParameters DefaultPrisonerRestingParameters;                      // 0x0080 (size: 0x60)
    FGameplayTag SlotId;                                                              // 0x00E0 (size: 0x8)
    FText MountInteractionCaption;                                                    // 0x00E8 (size: 0x18)
    float ForceUnmountDuration;                                                       // 0x0100 (size: 0x4)
    class UObject* _mountee;                                                          // 0x0108 (size: 0x8)
    class UObject* _reservee;                                                         // 0x0110 (size: 0x8)
    TSubclassOf<class UVehicleWeaponAimingParameters> _weaponAimingParametersClass;   // 0x0120 (size: 0x8)
    float _forceUnmountAngle;                                                         // 0x0128 (size: 0x4)
    FGameplayTag _reachabilityFromSkyStateTag;                                        // 0x012C (size: 0x8)
    bool _shouldHideAttachedItems;                                                    // 0x0134 (size: 0x1)
    FVector _prisonerViewpointOffset;                                                 // 0x0138 (size: 0xC)
    FVector _prisonerFeetOffset;                                                      // 0x0144 (size: 0xC)
    TArray<class UExternalMountPath*> _externalMountPaths;                            // 0x0150 (size: 0x10)
    TArray<class UExternalMountPath*> _emergencyMountPaths;                           // 0x0160 (size: 0x10)
    TArray<class UInternalMountPath*> _internalMountPaths;                            // 0x0170 (size: 0x10)

    void OnRep_AttachmentOwner(class UVehicleAttachment* oldAttachmentOwner);
}; // Size: 0x190

class UVehicleBasePushMountSlot : public UVehicleBaseMountSlot
{
    FText PushStartMountInteractionCaption;                                           // 0x0188 (size: 0x18)
    FName LeftHandIKSocketName;                                                       // 0x01A0 (size: 0x8)
    FName RightHandIKSocketName;                                                      // 0x01A8 (size: 0x8)
    bool SearchSocketsOnlyOnMainMesh;                                                 // 0x01B0 (size: 0x1)

}; // Size: 0x1C0

class UVehicleBaseSave : public UObject
{
    int64 LastAccessTime;                                                             // 0x0028 (size: 0x8)
    uint64 PackedSimulationState;                                                     // 0x0030 (size: 0x8)
    TArray<FVehicleAttachmentSave> VehicleAttachments;                                // 0x0038 (size: 0x10)
    FVector LastSteadyLocation;                                                       // 0x0048 (size: 0xC)
    float VerticalSpawnOffset;                                                        // 0x0054 (size: 0x4)

}; // Size: 0x58

class UVehicleBuoyancySystem : public UVehicleSystem
{
    FBuoyancy _buoyancy;                                                              // 0x0030 (size: 0x70)
    bool _isAnchored;                                                                 // 0x00A0 (size: 0x1)
    bool _simulateRudder;                                                             // 0x00A1 (size: 0x1)
    FName _rudderInputName;                                                           // 0x00A4 (size: 0x8)
    float _steerMultiplier;                                                           // 0x00AC (size: 0x4)
    FRuntimeFloatCurve _rudderEfficiencyBySpeedKmH;                                   // 0x00B0 (size: 0x88)
    TArray<FWaterParticleTransform> _waterParticleTransforms;                         // 0x0138 (size: 0x10)

}; // Size: 0x158

class UVehicleCameraComponent : public UCameraComponent
{
}; // Size: 0x7D0

class UVehicleCameraStabilizerComponent : public USceneComponent
{
    FVector _componentWorldOffset;                                                    // 0x01FC (size: 0xC)
    float _desiredDistance;                                                           // 0x0208 (size: 0x4)
    float _probeSize;                                                                 // 0x020C (size: 0x4)
    float _speedFallbackIntensity;                                                    // 0x0210 (size: 0x4)
    float _lateralMovementResponseIntensity;                                          // 0x0214 (size: 0x4)
    float _lockedHorizontalDampeningFactor;                                           // 0x0218 (size: 0x4)
    float _lockedHorizontalOscillationFactor;                                         // 0x021C (size: 0x4)
    float _lockedVerticalDampeningFactor;                                             // 0x0220 (size: 0x4)
    float _lockedVerticalOscillationFactor;                                           // 0x0224 (size: 0x4)
    float _maxFreeLookPitch;                                                          // 0x0228 (size: 0x4)
    float _freeHorizontalDampeningFactor;                                             // 0x022C (size: 0x4)
    float _freeHorizontalOscillationFactor;                                           // 0x0230 (size: 0x4)
    float _freeVerticalDampeningFactor;                                               // 0x0234 (size: 0x4)
    float _freeVerticalOscillationFactor;                                             // 0x0238 (size: 0x4)

}; // Size: 0x2A0

class UVehicleCheatControllerComponent : public UActorComponent
{
}; // Size: 0xB8

class UVehicleDamageRegionAssetData : public UAssetUserData
{
    FGameplayTag Tag;                                                                 // 0x0028 (size: 0x8)
    bool TreatCapsuleAsCylinder;                                                      // 0x0030 (size: 0x1)

}; // Size: 0x38

class UVehicleDoorsComponent : public UActorComponent
{
}; // Size: 0xC8

class UVehicleElectricalSystem : public UVehicleSystem
{
    float _chargeDrainWhenInactive;                                                   // 0x0068 (size: 0x4)
    float _EMInterferenceMaxDisabledTime;                                             // 0x0070 (size: 0x4)

}; // Size: 0x78

class UVehicleEntitySetup : public UEntitySetup
{
}; // Size: 0x80

class UVehicleForcePushComponent : public UActorComponent
{
    TArray<FVehicleForcePushParams> _forcePushParams;                                 // 0x00B0 (size: 0x10)

}; // Size: 0xD8

class UVehicleGroupSpawningPreset : public UDataAsset
{
    TArray<class UVehiclePreset*> VehiclePresets;                                     // 0x0030 (size: 0x10)

}; // Size: 0x40

class UVehicleHandlingSkill : public UDexteritySkill
{
}; // Size: 0xB0

class UVehicleHudWidget : public UUserWidget
{
    class UVehicleMountSlotIndicators* _mountSlotIndicators;                          // 0x0268 (size: 0x8)
    class UTextBlock* Speed1s;                                                        // 0x0278 (size: 0x8)
    class UTextBlock* Speed10s;                                                       // 0x0280 (size: 0x8)
    class UTextBlock* Speed100s;                                                      // 0x0288 (size: 0x8)
    class UTextBlock* Gear;                                                           // 0x0290 (size: 0x8)
    class UProgressBar* HealthBar;                                                    // 0x0298 (size: 0x8)
    class UProgressBar* FuelBar;                                                      // 0x02A0 (size: 0x8)
    class UProgressBar* BatteryBar;                                                   // 0x02A8 (size: 0x8)
    class UImage* EngineBrokenIndicator;                                              // 0x02B0 (size: 0x8)
    class UWidgetAnimation* Blink;                                                    // 0x02B8 (size: 0x8)
    class UOverlay* Overlay_0;                                                        // 0x02C0 (size: 0x8)
    class UTextBlock* TextBlock_1;                                                    // 0x02C8 (size: 0x8)
    class UTextBlock* TextBlock_2;                                                    // 0x02D0 (size: 0x8)
    class USizeBox* SizeBox_2;                                                        // 0x02D8 (size: 0x8)
    class USizeBox* SizeBox_3;                                                        // 0x02E0 (size: 0x8)
    class UImage* Image_0;                                                            // 0x02E8 (size: 0x8)
    class UImage* Image_1;                                                            // 0x02F0 (size: 0x8)
    class UImage* Image_2;                                                            // 0x02F8 (size: 0x8)
    class UImage* Image_3;                                                            // 0x0300 (size: 0x8)
    class UImage* Image_4;                                                            // 0x0308 (size: 0x8)
    class UTextBlock* kmh;                                                            // 0x0310 (size: 0x8)

}; // Size: 0x318

class UVehicleMarkersData : public UObject
{
}; // Size: 0x38

class UVehicleMarkersRequest : public UPlayerRpcChannelServerRequest
{
}; // Size: 0x28

class UVehicleMarkersResponse : public UPlayerRpcChannelServerResponse
{
    class UVehicleMarkersData* _payload;                                              // 0x0028 (size: 0x8)

}; // Size: 0x30

class UVehicleMeshComponent : public USkeletalMeshComponent
{
    float _minCcdAdvanceCoefficient;                                                  // 0x0ED8 (size: 0x4)
    bool _useSimpleNavMesh;                                                           // 0x0EDC (size: 0x1)
    FBox _navBoundingBox;                                                             // 0x0EE0 (size: 0x1C)

}; // Size: 0xF00

class UVehicleMountSlotIndicators : public UUserWidget
{
    class UImage* _backgroundGradient;                                                // 0x0268 (size: 0x8)
    class UContentWidget* _vehicleMountSlotsContainer;                                // 0x0270 (size: 0x8)

}; // Size: 0x288

class UVehicleMountSlotWidget : public UUserWidget
{
    class UWidgetSwitcher* _slotStateSwitcher;                                        // 0x0268 (size: 0x8)
    class UTextBlock* _keybindLabel;                                                  // 0x0270 (size: 0x8)

}; // Size: 0x278

class UVehicleMountSlotsWidget : public UUserWidget
{
    class UCanvasPanel* _mountSlotsCanvas;                                            // 0x0268 (size: 0x8)

}; // Size: 0x278

class UVehiclePaintjobCommonData : public UDataAsset
{
    TArray<FVehiclePaintjobPatternParams> Patterns;                                   // 0x0030 (size: 0x10)

}; // Size: 0x40

class UVehiclePaintjobItemComponent : public UItemComponent
{
    TArray<FVehiclePaintjobPatternParams> _patterns;                                  // 0x00C8 (size: 0x10)
    bool _isActive;                                                                   // 0x00D8 (size: 0x1)
    float _paintjobDecayDurationSeconds;                                              // 0x00DC (size: 0x4)

    void NetMulticast_SetState(int32 patternIndex, float decaySeconds, const TArray<FColor>& Colors);
    void NetMulticast_SetPatternIndex(int32 Index);
    void NetMulticast_SetColorAtIndex(int32 Index, FColor Value);
    void NetMulticast_RefreshColor();
    void NetMulticast_ClearPaintjob(FColor NewColor);
}; // Size: 0x120

class UVehiclePartDescriptionComponent : public UBoxComponent
{
}; // Size: 0x480

class UVehiclePowertrainComponent : public UActorComponent
{
}; // Size: 0xC8

class UVehiclePreset : public UDataAsset
{
    bool Frobnicate;                                                                  // 0x0030 (size: 0x1)
    FPrimaryAssetId VehicleAssetId;                                                   // 0x0034 (size: 0x10)
    class UVehiclePresetNode* RootNode;                                               // 0x0048 (size: 0x8)
    FFloatRange FuelAmountSpawnPercentageRange;                                       // 0x0050 (size: 0x10)
    FFloatRange BatteryChargeSpawnPercentageRange;                                    // 0x0060 (size: 0x10)
    TSoftClassPtr<UObject> LockClass;                                                 // 0x0070 (size: 0x28)
    float VerticalSpawnOffset;                                                        // 0x0098 (size: 0x4)

}; // Size: 0xA0

class UVehiclePresetNode : public UObject
{
    TArray<FPrimaryAssetId> PossibleAttachmentAssetIds;                               // 0x0028 (size: 0x10)
    FPrimaryAssetId AttachmentAssetId;                                                // 0x0038 (size: 0x10)
    bool IsFunctionalityAttachment;                                                   // 0x0048 (size: 0x1)
    float SpawnChance;                                                                // 0x004C (size: 0x4)
    FFloatRange SpawnHealthPercentageRange;                                           // 0x0050 (size: 0x10)
    TArray<class UVehiclePresetNode*> Children;                                       // 0x0060 (size: 0x10)

}; // Size: 0x70

class UVehicleServiceComponent : public UActorComponent
{
    class AVehicleServiceStation* _serviceStation;                                    // 0x00B0 (size: 0x8)
    FDbIntegerId _serviceInitiatorId;                                                 // 0x00B8 (size: 0x8)
    TWeakObjectPtr<class UObject> _currentAction;                                     // 0x00C0 (size: 0x8)

    void OnRep_ServiceStation();
}; // Size: 0xD0

class UVehicleServiceItemComponent : public UActorComponent
{
    TSubclassOf<class APortableVehicleServiceStation> _serviceStationClass;           // 0x00B0 (size: 0x8)
    TArray<FGameplayTag> _supportedServiceTags;                                       // 0x00B8 (size: 0x10)

}; // Size: 0xC8

class UVehicleServiceRegistry : public UActorComponent
{
    TArray<FVehicleServiceData> _serviceData;                                         // 0x00B0 (size: 0x10)

}; // Size: 0x110

class UVehicleServiceStationAnimInstance : public UAnimInstance
{
    float _liftTime;                                                                  // 0x02B8 (size: 0x4)
    float _liftInterpValue;                                                           // 0x02BC (size: 0x4)
    bool _isOnServer;                                                                 // 0x02C0 (size: 0x1)

}; // Size: 0x2D0

class UVehicleServiceStationSaveObject : public UObject
{
}; // Size: 0x28

class UVehicleServiceToolTag : public UBaseItemTag
{
    FGameplayTag GameplayTag;                                                         // 0x0030 (size: 0x8)
    int32 UsesPerService;                                                             // 0x0038 (size: 0x4)

}; // Size: 0x40

class UVehicleSlotIdAssetData : public UAssetUserData
{
}; // Size: 0x40

class UVehicleSpawnBoxComponent : public UBoxComponent
{
    int32 SpawnPriority;                                                              // 0x0480 (size: 0x4)

}; // Size: 0x490

class UVehicleSpawnerComponent : public USceneComponent
{
    TArray<FVehicleSpawnerMarker> SpawnerMarkers;                                     // 0x01F8 (size: 0x10)

}; // Size: 0x210

class UVehicleSystem : public UObject
{
    bool _useReplication;                                                             // 0x002C (size: 0x1)

}; // Size: 0x30

class UVehicleUIDataController : public UObject
{
}; // Size: 0xB8

class UVehicleWeaponAimingParameters : public UObject
{
    TArray<EVehicleWeaponAimingStance> SupportedStance;                               // 0x0028 (size: 0x10)
    FVehicleWeaponAimingStanceData StanceData;                                        // 0x0038 (size: 0xF0)

    bool CanPrisonerTakeItemInHands(const class APrisoner* Prisoner, const class AItem* Item, EVehicleWeaponAimingStance stance);
    bool CanPrisonerEnterCombatModeUsingItem(const class APrisoner* Prisoner, const class AItem* Item, EVehicleWeaponAimingStance stance);
    bool CanExecutePrisonerAction(const class APrisoner* Prisoner, const class UPrisonerActionDescription* desc);
}; // Size: 0x128

class UVehicleWeaponsSystem : public UVehicleSystem
{
    TArray<FWeaponMountData> _weaponMountDataArray;                                   // 0x0040 (size: 0x10)

    void OnRep_WeaponMountDataArray();
}; // Size: 0x50

class UVerificationStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UVerticalScrollBoxDropdownContent : public UUserWidget
{
    class UScrollBox* _entriesScrollBox;                                              // 0x0268 (size: 0x8)
    TSubclassOf<class USimpleDropdownEntryCategoryTitle> _simpleDropdownEntryCategoryTitle; // 0x0270 (size: 0x8)

}; // Size: 0x278

class UVicinityContainer3 : public UUserWidget
{
    class UItemInventoryWidget2* _container;                                          // 0x0280 (size: 0x8)
    class UScrollBox* _containerScrollBox;                                            // 0x0288 (size: 0x8)

    void OnContainerScrollBoxScrolled(float CurrentOffset);
}; // Size: 0x2A8

class UVicinityContainerRowItemWidget : public UItemWidget2
{
    class UTextBlock* _caption;                                                       // 0x0520 (size: 0x8)
    class UTextBlock* PlayerGivenName;                                                // 0x0528 (size: 0x8)
    class UWidgetSwitcher* _titleSwitcher;                                            // 0x0530 (size: 0x8)
    class UImage* Image_0;                                                            // 0x0538 (size: 0x8)
    class UImage* Image_2;                                                            // 0x0540 (size: 0x8)
    class UImage* Image_9;                                                            // 0x0548 (size: 0x8)
    class UTextBlock* TextBlock_20;                                                   // 0x0550 (size: 0x8)
    class UImage* UpperLeftIcon;                                                      // 0x0558 (size: 0x8)
    class UProgressBar* ProgressBarLeftFirst;                                         // 0x0560 (size: 0x8)
    class UProgressBar* ProgressBarLeftSecond;                                        // 0x0568 (size: 0x8)
    class USizeBox* SizeBox_0;                                                        // 0x0570 (size: 0x8)
    FLinearColor _openedBackgroundColor;                                              // 0x0578 (size: 0x10)
    FLinearColor _closedBackgroundColor;                                              // 0x0588 (size: 0x10)
    FLinearColor _selectedBackgroundColor;                                            // 0x0598 (size: 0x10)
    FLinearColor _openedFontColor;                                                    // 0x05A8 (size: 0x10)
    FLinearColor _closedFontColor;                                                    // 0x05B8 (size: 0x10)

}; // Size: 0x5D0

class UVicinityPanel3 : public UUserWidget
{
    bool _isTradingThingy;                                                            // 0x0278 (size: 0x1)
    class UWrapBox* _searchedItemsBox;                                                // 0x0280 (size: 0x8)
    class UWrapBox* _vicinityBox;                                                     // 0x0288 (size: 0x8)
    class UHorizontalBox* _vicinityContainersBox;                                     // 0x0290 (size: 0x8)
    class UHorizontalBox* _tradingBox;                                                // 0x0298 (size: 0x8)
    class UOverlay* _tradingBoxOverlay;                                               // 0x02A0 (size: 0x8)
    class UBadAdjustableSeparator* _adjustableSeparator;                              // 0x02A8 (size: 0x8)
    TMap<class UObject*, class UWidget*> _searchedItems;                              // 0x02B0 (size: 0x50)
    TMap<class UObject*, class UWidget*> _vicinityItems;                              // 0x0300 (size: 0x50)
    TMap<class UObject*, class UWidget*> _vicinityContainers;                         // 0x0350 (size: 0x50)
    TMap<class UObject*, class UWidget*> _tradingItems;                               // 0x03A0 (size: 0x50)
    TMap<class FName, class EVicinityFilterType> _filterCheckboxesNames;              // 0x0490 (size: 0x50)
    FMargin _vicinityContainersPadding;                                               // 0x04E0 (size: 0x10)
    TArray<class TSubclassOf<UForeignSubstance>> _medicalFilterClasses;               // 0x0500 (size: 0x10)
    TArray<class TSubclassOf<UBaseItemTag>> _toolFilterItemTags;                      // 0x0510 (size: 0x10)

    void OnVicinityContainerInitialized(const TScriptInterface<class IInventoryNode>& Item, class UItemWidget2* Widget);
    void OnVicinityContainerClosed(class UItemWidget2* Widget);
    void OnItemActorDestroyed(class AActor* Actor);
    void OnCheckBoxCheckedChanged(bool checked);
}; // Size: 0x520

class UVideoSettingsManager : public UObject
{
}; // Size: 0x28

class UVirtualizedEncounterData : public UObject
{
    TSoftClassPtr<UEncounterBase> EncounterBaseClass;                                 // 0x0028 (size: 0x28)
    FVector EncounterLocation;                                                        // 0x0050 (size: 0xC)
    bool HadZoneIndex;                                                                // 0x005C (size: 0x1)
    int32 SubZoneIndex;                                                               // 0x0060 (size: 0x4)
    float Radius;                                                                     // 0x0064 (size: 0x4)
    int32 CurrentInnerRadiusStep;                                                     // 0x0068 (size: 0x4)
    float InnerRadiusReferenceDistance;                                               // 0x006C (size: 0x4)
    float InnerRadius;                                                                // 0x0070 (size: 0x4)
    float FixedDurationTimeElapsed;                                                   // 0x0074 (size: 0x4)
    bool WasShutdown;                                                                 // 0x0078 (size: 0x1)
    FDbIntegerId ParentID;                                                            // 0x0080 (size: 0x8)
    FDbIntegerId ChildId;                                                             // 0x0088 (size: 0x8)

}; // Size: 0x90

class UVirtualizedEncounterData_BB : public UVirtualizedEncounterData
{
    FDbIntegerId BaseId;                                                              // 0x0090 (size: 0x8)
    TSet<FDbIntegerId> FlagIds;                                                       // 0x0098 (size: 0x50)

}; // Size: 0xE8

class UVirtualizedEncounterData_BBFlyingAttacker : public UVirtualizedEncounterData_BB
{
    TSoftClassPtr<AConZCharacter> CharacterClass;                                     // 0x00E8 (size: 0x28)
    FTransform CharacterTransform;                                                    // 0x0110 (size: 0x30)
    FVector MoveToLocationAfterSpawn;                                                 // 0x0140 (size: 0xC)
    TArray<uint8> LoadData;                                                           // 0x0150 (size: 0x10)
    TArray<FVirtualizedEncounterBBForeignCharacterData> ForeignCharacterData;         // 0x0160 (size: 0x10)

}; // Size: 0x170

class UVirtualizedEncounterData_Horde : public UVirtualizedEncounterData_SpawnCharacters
{
    bool IsHordeActivated;                                                            // 0x00A8 (size: 0x1)
    TArray<FVirtualizedEncounterCharacterData> HordeCharacterDataArray;               // 0x00B0 (size: 0x10)
    int32 CurrentHordePresetIndex;                                                    // 0x00C0 (size: 0x4)
    bool IsHordeEndReached;                                                           // 0x00C4 (size: 0x1)

}; // Size: 0xC8

class UVirtualizedEncounterData_SpawnAirborneCharacters : public UVirtualizedEncounterData_SpawnCharacters
{
    TArray<FVirtualizedEncounterCharacterData> AirborneCharacterDataArray;            // 0x00A8 (size: 0x10)
    bool IsInitialSpawningOfAirborneCharactersFinished;                               // 0x00B8 (size: 0x1)

}; // Size: 0xC0

class UVirtualizedEncounterData_SpawnCharacters : public UVirtualizedEncounterData
{
    TArray<FVirtualizedEncounterCharacterData> CharacterDataArray;                    // 0x0090 (size: 0x10)
    bool InitialSpawnFinished;                                                        // 0x00A0 (size: 0x1)

}; // Size: 0xA8

class UVirtualizedItemUserData : public UObject
{
}; // Size: 0x28

class UVisionEffectsComponent : public UActorComponent
{
    float PostProcessPriority;                                                        // 0x00E8 (size: 0x4)
    class UMaterialInterface* FadeOutMaterial;                                        // 0x00F0 (size: 0x8)
    class UMaterialInterface* LowLightVisionMaterial;                                 // 0x00F8 (size: 0x8)
    class UMaterialInterface* NightVisionMaterial;                                    // 0x0100 (size: 0x8)
    float NightVisionBlendInDuration;                                                 // 0x0108 (size: 0x4)
    float NightVisionBlendOutDuration;                                                // 0x010C (size: 0x4)
    class UMaterialParameterCollection* AnimalEyesMaterialParameterCollection;        // 0x0110 (size: 0x8)
    FName AnimalEyesEmissiveMaterialName;                                             // 0x0118 (size: 0x8)
    float AnimalEyesEmissiveValueWhenNightVisionIsEnabled;                            // 0x0120 (size: 0x4)
    FName NightVisionGlitchStrengthParameterName;                                     // 0x0124 (size: 0x8)
    class UMaterialInterface* FlashbangEffectMaterial;                                // 0x0130 (size: 0x8)
    class UMaterialInterface* FallingBlurMaterial;                                    // 0x0138 (size: 0x8)
    class UMaterialInterface* TakenDamageMaterial;                                    // 0x0140 (size: 0x8)
    class UMaterialParameterCollection* TakenDamageMaterialParameterCollection;       // 0x0148 (size: 0x8)
    FName TakenDamageBlurIntensityParameterName;                                      // 0x0150 (size: 0x8)
    FName TakenDamageStainsIntensityParameterName;                                    // 0x0158 (size: 0x8)
    FName TakenDamageVignetteIntensityParameterName;                                  // 0x0160 (size: 0x8)
    class UCurveFloat* TakenDamageBlurShapeCurve;                                     // 0x0168 (size: 0x8)
    class UCurveFloat* TakenDamageBlurIntensityCurve;                                 // 0x0170 (size: 0x8)
    class UCurveFloat* TakenDamageBlurDurationCurve;                                  // 0x0178 (size: 0x8)
    class UCurveFloat* TakenDamageStainsShapeCurve;                                   // 0x0180 (size: 0x8)
    class UCurveFloat* TakenDamageStainsIntensityCurve;                               // 0x0188 (size: 0x8)
    class UCurveFloat* TakenDamageStainsDurationCurve;                                // 0x0190 (size: 0x8)
    class UCurveFloat* TakenDamageVignetteShapeCurve;                                 // 0x0198 (size: 0x8)
    class UCurveFloat* TakenDamageVignetteIntensityCurve;                             // 0x01A0 (size: 0x8)
    class UCurveFloat* TakenDamageVignetteDurationCurve;                              // 0x01A8 (size: 0x8)
    float TakenDamageMaxChromaticAberration;                                          // 0x01B0 (size: 0x4)
    TSubclassOf<class UMatineeCameraShake> TakenDamageCameraShakeClass;               // 0x01B8 (size: 0x8)
    class UCurveFloat* TakenDamageCameraShakeScaleCurve;                              // 0x01C0 (size: 0x8)
    class UMaterialInterface* TacticsEffectMaterial;                                  // 0x01C8 (size: 0x8)
    class UMaterialInterface* FocusModeMaterial;                                      // 0x01D0 (size: 0x8)
    class UMaterialInterface* DoubleVisionMaterial;                                   // 0x01D8 (size: 0x8)
    FName DoubleVisionIntensityParameterName;                                         // 0x01E0 (size: 0x8)
    class UMaterialInterface* BlurredVisionMaterial;                                  // 0x01E8 (size: 0x8)
    FName BlurredVisionIntensityParameterName;                                        // 0x01F0 (size: 0x8)
    class UMaterialInterface* UnderwaterBlurMaterial;                                 // 0x01F8 (size: 0x8)
    class UMaterialInterface* PhotoModeTransitionMaterial;                            // 0x0200 (size: 0x8)
    class UMaterialInterface* ScopeZoomMaterial;                                      // 0x0208 (size: 0x8)
    FName ScopeZoomBlendPPParameterName;                                              // 0x0210 (size: 0x8)
    FName ScopeZoomBlackoutDensityParameterName;                                      // 0x0218 (size: 0x8)
    FName ScopeZoomChromaticAberrationDampeningParameterName;                         // 0x0220 (size: 0x8)
    FName ScopeZoomCrosshairBaseScaleParameterName;                                   // 0x0228 (size: 0x8)
    FName ScopeZoomCrosshairDepthOffsetMultiplierParameterName;                       // 0x0230 (size: 0x8)
    FName ScopeZoomCrosshairScaleMultiplierParameterName;                             // 0x0238 (size: 0x8)
    FName ScopeZoomDistortionPowerParameterName;                                      // 0x0240 (size: 0x8)
    FName ScopeZoomDistortionScaleParameterName;                                      // 0x0248 (size: 0x8)
    FName ScopeZoomEyeDistanceBlackoutMultiplierParameterName;                        // 0x0250 (size: 0x8)
    FName ScopeZoomGlowIntensityAtNightParameterName;                                 // 0x0258 (size: 0x8)
    FName ScopeZoomLensDepthOffsetMultiplierParameterName;                            // 0x0260 (size: 0x8)
    FName ScopeZoomLensScaleParameterName;                                            // 0x0268 (size: 0x8)
    FName ScopeZoomLensUIScaleParameterName;                                          // 0x0270 (size: 0x8)
    FName ScopeZoomLensZoomParameterName;                                             // 0x0278 (size: 0x8)
    FName ScopeZoomOptimalEyeDistanceParameterName;                                   // 0x0280 (size: 0x8)
    FName ScopeZoomCrosshairCenterScreenOffsetParameterName;                          // 0x0288 (size: 0x8)
    FName ScopeZoomLensCenterScreenOffsetParameterName;                               // 0x0290 (size: 0x8)
    FName ScopeZoomCrosshairParameterName;                                            // 0x0298 (size: 0x8)
    FName ScopeZoomCrosshairColorParameterName;                                       // 0x02A0 (size: 0x8)
    FName ScopeZoomCrosshairColorAtNightParameterName;                                // 0x02A8 (size: 0x8)
    FName ScopeZoomCrosshairGlowColorParameterName;                                   // 0x02B0 (size: 0x8)
    FName ScopeZoomDirtMaskParameterName;                                             // 0x02B8 (size: 0x8)
    FName ScopeZoomDirtinessParameterName;                                            // 0x02C0 (size: 0x8)
    FName ScopeZoomDarkeningParameterName;                                            // 0x02C8 (size: 0x8)
    FName ScopeZoomLensNormalMapParameterName;                                        // 0x02D0 (size: 0x8)
    FName ScopeZoomLensUIParameterName;                                               // 0x02D8 (size: 0x8)
    FName IsNightVisionActiveOnScopeParameterName;                                    // 0x02E0 (size: 0x8)
    class UMaterialInterface* ScopeInHandsNightVisionMaterial;                        // 0x02E8 (size: 0x8)
    class UMaterialInterface* InjuryMaterial;                                         // 0x02F0 (size: 0x8)
    class UMaterialInterface* TraumaMaterial;                                         // 0x02F8 (size: 0x8)
    class UMaterialInterface* BulletHitMaterial;                                      // 0x0300 (size: 0x8)
    class UMaterialInterface* SickMaterial;                                           // 0x0308 (size: 0x8)
    class UMaterialInterface* ColdMaterial;                                           // 0x0310 (size: 0x8)
    class UMaterialInterface* HotMaterial;                                            // 0x0318 (size: 0x8)
    class UMaterialInterface* FatigueMaterial;                                        // 0x0320 (size: 0x8)
    class UMaterialInterface* HallucinationMaterial;                                  // 0x0328 (size: 0x8)
    class UMaterialInterface* EyePressureMaterial;                                    // 0x0330 (size: 0x8)
    class UMaterialInterface* BloodyEyesMaterial;                                     // 0x0338 (size: 0x8)
    class UMaterialInterface* RadiationMaterial;                                      // 0x0340 (size: 0x8)
    class UMaterialInterface* DepthOfFieldMaterial;                                   // 0x0348 (size: 0x8)
    class UMaterialInterface* PhoenixTearsMaterial;                                   // 0x0350 (size: 0x8)
    FVector4 HeightenedSensesSaturationColor;                                         // 0x0360 (size: 0x10)
    FPostProcessSettings _postProcessSettings;                                        // 0x0370 (size: 0x560)
    class UMaterialInstanceDynamic* _blurredVisionMaterialInstance;                   // 0x0F60 (size: 0x8)
    class UMaterialInstanceDynamic* _doubleVisionIntensityMaterialInstance;           // 0x0FB8 (size: 0x8)
    class UMaterialInterface* _headgearOverlayMaterialInstance;                       // 0x0FC0 (size: 0x8)
    class UMaterialInstanceDynamic* _scopeZoomMaterialInstance;                       // 0x0FC8 (size: 0x8)
    class UMaterialInstanceDynamic* _nightVisionMaterialInstance;                     // 0x0FD0 (size: 0x8)
    class UMaterialInstanceDynamic* _scopeInHandsNightVisionMaterialInstance;         // 0x0FD8 (size: 0x8)
    class UMaterialInstanceDynamic* _fallingBlurMaterialInstance;                     // 0x0FE0 (size: 0x8)
    class UMaterialInterface* _underwaterPostProcessingCurrent;                       // 0x0FE8 (size: 0x8)
    class UMaterialInterface* _underwaterPostProcessingLast;                          // 0x0FF0 (size: 0x8)
    float _underwaterPostProcessingBlendTime;                                         // 0x0FF8 (size: 0x4)
    float _DOFBlurTime;                                                               // 0x1004 (size: 0x4)
    float _DOFClearBlurTime;                                                          // 0x1008 (size: 0x4)
    float _DOFScopingBlurTime;                                                        // 0x100C (size: 0x4)
    float _DOFBlurDistanceADS;                                                        // 0x1010 (size: 0x4)
    float _DOFFstopADS;                                                               // 0x1014 (size: 0x4)
    class UMaterialInstanceDynamic* _injuryMaterial;                                  // 0x1018 (size: 0x8)
    class UMaterialInstanceDynamic* _traumaMaterial;                                  // 0x1028 (size: 0x8)
    class UMaterialInstanceDynamic* _hallucinationMaterial;                           // 0x1038 (size: 0x8)
    class UMaterialInstanceDynamic* _eyePressureMaterial;                             // 0x1048 (size: 0x8)
    class UMaterialInstanceDynamic* _bloodyEyesMaterial;                              // 0x1058 (size: 0x8)
    class UMaterialInstanceDynamic* _bulletHitMaterial;                               // 0x1068 (size: 0x8)
    class UMaterialInstanceDynamic* _sickMaterial;                                    // 0x1078 (size: 0x8)
    class UMaterialInstanceDynamic* _coldMaterial;                                    // 0x1088 (size: 0x8)
    class UMaterialInstanceDynamic* _hotMaterial;                                     // 0x1098 (size: 0x8)
    class UMaterialInstanceDynamic* _fatigueMaterial;                                 // 0x10A8 (size: 0x8)
    class UMaterialInstanceDynamic* _radiationMaterial;                               // 0x10B8 (size: 0x8)
    class UMaterialInstanceDynamic* _depthOfFieldMaterial;                            // 0x10C8 (size: 0x8)
    class UMaterialInstanceDynamic* _phoenixTearsMaterial;                            // 0x10D8 (size: 0x8)

}; // Size: 0x1560

class UVisualOverlayItemTag : public UBaseItemTag
{
    class UMaterialInterface* OverlayMaterial;                                        // 0x0030 (size: 0x8)
    int32 Priority;                                                                   // 0x0038 (size: 0x4)
    bool ShouldBeVisibleInFirstPersonView;                                            // 0x003C (size: 0x1)
    bool ShouldBeVisibleInThirdPersonView;                                            // 0x003D (size: 0x1)

}; // Size: 0x40

class UVoiceAudioComponent : public UAudioComponent
{
    class UVoiceDecoder* VoiceDecoder;                                                // 0x0868 (size: 0x8)

    void QueueVoiceData(const TArray<uint8>& CompressedVoiceData);
    void InitializeVoiceAudioComponent();
}; // Size: 0x880

class UVoiceChatComponent : public UActorComponent
{
    float MaxVoiceDistance;                                                           // 0x00B8 (size: 0x4)
    bool ActiveTalker;                                                                // 0x00BC (size: 0x1)
    float StopTalkingTimeThreshold;                                                   // 0x00C0 (size: 0x4)

    void ServerProcessVoiceChatData(const TArray<uint8>& compressedVoiceDataBuffer);
    bool GetIsActiveTalker();
    bool GetCompressedVoiceData(TArray<uint8>& OutBuffer);
    void GetAllVoiceChatComponentsInRange(TArray<class UVoiceChatComponent*>& pawnList);
    void ClientReceiveVoiceData(const class UVoiceChatComponent* from, const TArray<uint8>& compressedVoiceDataBuffer);
}; // Size: 0x130

class UVoiceDecoder : public UObject
{

    void DecompressVoiceData(const TArray<uint8>& InCompressedVoiceData, int32 InCompressedVoiceBytes, TArray<uint8>& OutDecompressedVoiceData, int32& OutDecompressedVoiceBytes);
    class UVoiceDecoder* CreateVoiceDecoder(class UObject* Owner);
}; // Size: 0x38

class UVoicelineSegmentInfo : public UCircularMenuSegmentInfo
{
    class UCharacterVoiceline* Voiceline;                                             // 0x00A8 (size: 0x8)
    class APrisoner* _prisoner;                                                       // 0x00B0 (size: 0x8)

}; // Size: 0xB8

class UVoltageMatchingMinigameConfiguration : public UMinigameConfiguration
{
}; // Size: 0x58

class UVoltageMatchingScreensWidget : public UUserWidget
{
    class UTextBlock* _input;                                                         // 0x0268 (size: 0x8)
    class UTextBlock* _timer;                                                         // 0x0270 (size: 0x8)
    TArray<FName> _correctOutputsWidgetNames;                                         // 0x0278 (size: 0x10)
    TArray<FName> _currentOutputWidgetNames;                                          // 0x0288 (size: 0x10)
    TArray<FVoltageMatchingElementIndicator> _elementIndicators;                      // 0x0298 (size: 0x10)

}; // Size: 0x2A8

class UVoltageMatchingWidget : public UMinigameWidget
{
    class UUserWidget* _instructionsOverlay;                                          // 0x0280 (size: 0x8)

}; // Size: 0x288

class UVoteTopic : public UObject
{
}; // Size: 0x48

class UVoteTopic_InitiateCargoDrop : public UVoteTopic
{
}; // Size: 0x48

class UVoteTopic_SetTimeOfDay : public UVoteTopic
{
}; // Size: 0x50

class UVoteTopic_SetWeather : public UVoteTopic
{
}; // Size: 0x50

class UWarning : public UUserWidget
{
    TArray<FMessageStruct> MessageQueue;                                              // 0x0268 (size: 0x10)

}; // Size: 0x278

class UWarningNotification : public UConZNotification
{
}; // Size: 0x30

class UWarningNotificationDescription : public UNotificationDescription
{
    FString Message;                                                                  // 0x0040 (size: 0x10)
    float Duration;                                                                   // 0x0050 (size: 0x4)
    FColor Color;                                                                     // 0x0054 (size: 0x4)

}; // Size: 0x58

class UWarningSignWidget : public UUserWidget
{
    EWarningType _type;                                                               // 0x0268 (size: 0x1)

    void InitFromWarningType(const EWarningType warningType);
}; // Size: 0x270

class UWashEyesHandler : public UObject
{
    float WashEyesDuration;                                                           // 0x0028 (size: 0x4)
    float WashEyesResourceAmount;                                                     // 0x002C (size: 0x4)

}; // Size: 0x30

class UWashEyesHandler_Clean : public UWashEyesHandler
{
    TArray<class TSubclassOf<UPrisonerBodyEffect>> _bodyEffectsToClean;               // 0x0030 (size: 0x10)

}; // Size: 0x40

class UWashEyesHandler_Irritate : public UWashEyesHandler
{
    TArray<class TSubclassOf<UPrisonerBodyEffect>> _bodyEffectsToAdd;                 // 0x0030 (size: 0x10)

}; // Size: 0x40

class UWaterDetectionComponent : public UItemComponent
{
    float _waterImmersionDepthLimitWhenEquipped;                                      // 0x00F8 (size: 0x4)

}; // Size: 0x110

class UWaterSurfaceAssetData : public UAssetUserData
{
}; // Size: 0x28

class UWaypointScreenWidget : public UUserWidget
{
    TSubclassOf<class UWaypointWidgetBase> WaypointClass;                             // 0x0268 (size: 0x8)
    TArray<class UWaypointWidgetBase*> _waypoints;                                    // 0x0270 (size: 0x10)
    class UCanvasPanel* WaypointPanel;                                                // 0x0280 (size: 0x8)

}; // Size: 0x288

class UWaypointWidget : public UWaypointWidgetBase
{
    class UImage* Emphasis;                                                           // 0x0340 (size: 0x8)
    class UImage* BarBG;                                                              // 0x0348 (size: 0x8)
    class UImage* Bar;                                                                // 0x0350 (size: 0x8)
    class UImage* Background;                                                         // 0x0358 (size: 0x8)
    class UImage* BigPointer;                                                         // 0x0360 (size: 0x8)
    class UImage* SmallPointer;                                                       // 0x0368 (size: 0x8)
    class UImage* Icon;                                                               // 0x0370 (size: 0x8)
    class UImage* Accent;                                                             // 0x0378 (size: 0x8)
    class UTextBlock* Label;                                                          // 0x0380 (size: 0x8)
    class UTextBlock* Distance;                                                       // 0x0388 (size: 0x8)
    class UMaterialInterface* _barBrushMaterial;                                      // 0x0390 (size: 0x8)

}; // Size: 0x398

class UWaypointWidgetBase : public UUserWidget
{
    TSoftObjectPtr<UTexture2D> IconTexture;                                           // 0x0268 (size: 0x28)
    TSoftObjectPtr<UTexture2D> AccentTexture;                                         // 0x0290 (size: 0x28)
    FLinearColor AccentColor;                                                         // 0x02B8 (size: 0x10)
    float BarValue;                                                                   // 0x02C8 (size: 0x4)
    FLinearColor BarColor;                                                            // 0x02CC (size: 0x10)
    float HeightOffset;                                                               // 0x02DC (size: 0x4)
    bool Emphasized;                                                                  // 0x02E0 (size: 0x1)
    FLinearColor EmphasisColor;                                                       // 0x02E4 (size: 0x10)
    FString LabelText;                                                                // 0x02F8 (size: 0x10)

    void OnLifetimeTiedActorDestroyed(class AActor* Actor);
    bool IsOnScreen();
    bool IsAttached();
    class AActor* GetTargetActor();
    float GetDistance();
    float GetAngle();
}; // Size: 0x340

class UWeaponAccuracyGroup : public UDataAsset
{
    float NormalStandFrom;                                                            // 0x0030 (size: 0x4)
    float NormalStandTo;                                                              // 0x0034 (size: 0x4)
    float NormalCrouchFrom;                                                           // 0x0038 (size: 0x4)
    float NormalCrouchTo;                                                             // 0x003C (size: 0x4)
    float NormalProneFrom;                                                            // 0x0040 (size: 0x4)
    float NormalProneTo;                                                              // 0x0044 (size: 0x4)
    float ScopedStandFrom;                                                            // 0x0048 (size: 0x4)
    float ScopedStandTo;                                                              // 0x004C (size: 0x4)
    float ScopedCrouchFrom;                                                           // 0x0050 (size: 0x4)
    float ScopedCrouchTo;                                                             // 0x0054 (size: 0x4)
    float ScopedProneFrom;                                                            // 0x0058 (size: 0x4)
    float ScopedProneTo;                                                              // 0x005C (size: 0x4)

}; // Size: 0x60

class UWeaponAction : public UObject
{

    void RemoveCartridgeFromWeapon();
    void RemoveAttachmentFromWeapon(class AWeapon* Weapon, class AWeaponAttachment* Attachment);
    void OnWeaponActionAnimNotify(EWeaponActionNotifyType notifyType);
    void OnActionAnimNotify(ECharacterActionNotifyType notifyType);
    bool IsCharacterOwnerMountedAsDriver();
    void InsertCartridgeIntoWeaponAtLocation(class AWeapon* Weapon, class AAmmunitionItem* ammo, bool backLocation);
    void InsertCartridgeIntoWeapon(class AWeapon* Weapon, class AAmmunitionItem* ammo);
    void InsertCartridgeIntoMagazine(class AWeaponAttachmentMagazine* magazine, class AAmmunitionItem* ammo);
    class AWeapon* GetWeapon();
    void AddAttachmentToWeapon(class AWeapon* Weapon, class AWeaponAttachment* Attachment);
}; // Size: 0x28

class UWeaponActionCheckAmmoSequence : public UWeaponAction
{
    FBodyWeaponAnimation Animations;                                                  // 0x0028 (size: 0x10)
    bool CanBeInterrupted;                                                            // 0x0038 (size: 0x1)

    void SetNextMontageSectionFromPrevious(FName previousSection, FName NextSection);
    void SetNextMontageSection(FName NextSection);
    void OnMontageEnded(class UAnimMontage* Montage, bool interrupted);
    void OnMontageBlendingOutStarted(class UAnimMontage* Montage, bool interrupted);
    class UAnimMontage* GetActiveAnimationWeapon();
    class UAnimMontage* GetActiveAnimationBody();
    float Execute();
    void End(bool Regular);
    bool CanInterrupt();
    bool CanExecute();
}; // Size: 0x50

class UWeaponActionClearMalfunctionSequence : public UWeaponAction
{
    int32 SortIndex;                                                                  // 0x0028 (size: 0x4)
    EWeaponMalfunction MalfunctionType;                                               // 0x002C (size: 0x1)
    FText Description;                                                                // 0x0030 (size: 0x18)
    class UCircularMenuSegmentWeaponMalfunctionInfo* CircularMenuSegmentInfo;         // 0x0048 (size: 0x8)
    TMap<class EWeaponMalfunction, class FClearMalfunctionData> Malfunctions;         // 0x0050 (size: 0x50)
    bool CanBeInterrupted;                                                            // 0x00A0 (size: 0x1)
    bool AllowBeginFiringSequence;                                                    // 0x00A1 (size: 0x1)

    bool ShowOnUI();
    bool ShouldClearMalfunctionOnEvent(EWeaponMalfunction malfunction, EWeaponMalfunctionEvent malfunctionEvent);
    void SetNextMontageSectionFromPrevious(FName previousSection, FName NextSection);
    void SetNextMontageSection(FName NextSection);
    void OnMontageEnded(class UAnimMontage* Montage, bool interrupted);
    void OnMontageBlendingOutStarted(class UAnimMontage* Montage, bool interrupted);
    void HandleMalfunctionEvent(EWeaponMalfunctionEvent malfunctionEvent, const FWeaponMalfunctionEventDescription& desc);
    class UAnimMontage* GetActiveAnimationWeapon();
    class UAnimMontage* GetActiveAnimationBody();
    float Execute();
    void End(bool Regular);
    bool CanInterrupt();
    bool CanExecute(EWeaponMalfunction malfunction);
}; // Size: 0xB8

class UWeaponActionReloadSequence : public UWeaponAction
{
    FBodyWeaponAnimation AnimationStandAndCrouch;                                     // 0x0028 (size: 0x10)
    FBodyWeaponAnimation AnimationProne;                                              // 0x0038 (size: 0x10)
    bool CanBeInterrupted;                                                            // 0x0048 (size: 0x1)
    FWeaponReloadData _reloadData;                                                    // 0x0050 (size: 0x30)

    void SetNextMontageSectionFromPrevious(FName previousSection, FName NextSection);
    void SetNextMontageSection(FName NextSection);
    void OnMontageEnded(class UAnimMontage* Montage, bool interrupted);
    void OnMontageBlendingOutStarted(class UAnimMontage* Montage, bool interrupted);
    bool IsWeaponOwnerABot();
    bool IsGameEventRoundStarted();
    bool IgnoreChamberBulletOnEnd();
    FWeaponReloadData GetReloadData();
    class UAnimMontage* GetActiveAnimationWeapon();
    class UAnimMontage* GetActiveAnimationBody();
    float ExecuteUsingData(const FWeaponReloadData& Data);
    void End(bool Regular);
    bool CanInterrupt();
    bool CanExecuteUsingData(const FWeaponReloadData& Data);
}; // Size: 0x90

class UWeaponActionRocketLauncherArmSequence : public UWeaponActionSequence
{
}; // Size: 0x68

class UWeaponActionRocketLauncherUnarmSequence : public UWeaponActionSequence
{
}; // Size: 0x68

class UWeaponActionSequence : public UWeaponAction
{
    FBodyWeaponAnimation Animations;                                                  // 0x0040 (size: 0x10)
    bool CanBeInterrupted;                                                            // 0x0050 (size: 0x1)

    void SetNextMontageSectionFromPrevious(FName previousSection, FName NextSection);
    void SetNextMontageSection(FName NextSection);
    void OnMontageEnded(class UAnimMontage* Montage, bool interrupted);
    void OnMontageBlendingOutStarted(class UAnimMontage* Montage, bool interrupted);
    class UAnimMontage* GetActiveAnimationWeapon();
    class UAnimMontage* GetActiveAnimationBody();
    float Execute();
    void End(bool Regular);
    bool CanInterrupt();
    bool CanExecute();
}; // Size: 0x68

class UWeaponActionUnloadAmmoSequence : public UWeaponAction
{
    FBodyWeaponAnimation Animations;                                                  // 0x0028 (size: 0x10)
    bool CanBeInterrupted;                                                            // 0x0038 (size: 0x1)

    void SetNextMontageSectionFromPrevious(FName previousSection, FName NextSection);
    void SetNextMontageSection(FName NextSection);
    void OnMontageEnded(class UAnimMontage* Montage, bool interrupted);
    void OnMontageBlendingOutStarted(class UAnimMontage* Montage, bool interrupted);
    int32 GetAmmoCount();
    class UAnimMontage* GetActiveAnimationWeapon();
    class UAnimMontage* GetActiveAnimationBody();
    float Execute(int32 AmmoCount);
    void End(bool Regular);
    bool CanInterrupt();
    bool CanExecute();
}; // Size: 0x50

class UWeaponActionWornOutFiringConditions : public UWeaponAction
{

    bool CanExecuteForWeapon(const class AWeapon* Weapon);
}; // Size: 0x28

class UWeaponAmmoDisplayContainerWidget : public UUserWidget
{
    TSubclassOf<class UUserWidget> _ammoDisplayWidgetClass;                           // 0x0268 (size: 0x8)
    class UVerticalBox* _displayList;                                                 // 0x0270 (size: 0x8)
    class UVerticalBox* _displayListCentered;                                         // 0x0278 (size: 0x8)

    void Init(class AWeapon* Weapon, float onScreenDuration, bool displayOnCenter, class UTexture2D* iconOverride);
}; // Size: 0x290

class UWeaponAmmoDisplayWidget : public UUserWidget
{
    class UTextBlock* _ammoCountText;                                                 // 0x0268 (size: 0x8)
    class UImage* _ammoIcon;                                                          // 0x0270 (size: 0x8)

}; // Size: 0x278

class UWeaponAnimInstance : public UItemAnimInstance
{
    float _owningPrisonerWeaponBreathFactor;                                          // 0x02D8 (size: 0x4)
    float _owningPrisonerWeaponAimDownTheSightsStillBlendFactor;                      // 0x02DC (size: 0x4)
    bool _isOwningPrisonerAimingDownTheSights;                                        // 0x02E0 (size: 0x1)
    bool _isChamberOpened;                                                            // 0x02E1 (size: 0x1)
    int32 _ammoCount;                                                                 // 0x02E4 (size: 0x4)
    int32 _loadedAmmoCount;                                                           // 0x02E8 (size: 0x4)
    bool _shouldPlayChamberOpenedIdle;                                                // 0x02EC (size: 0x1)
    bool _isInGameEvent;                                                              // 0x02ED (size: 0x1)
    EWeaponMalfunction _malfunction;                                                  // 0x02EE (size: 0x1)
    bool _useFiringModeBoneRotation;                                                  // 0x02EF (size: 0x1)
    FRotator _firingModeBoneRotation;                                                 // 0x02F0 (size: 0xC)
    float _hideBoneCurveValue;                                                        // 0x02FC (size: 0x4)
    float _zeroRange;                                                                 // 0x0300 (size: 0x4)
    EWeaponDownTheSightsMode _aiminDownTheSightsMode;                                 // 0x0304 (size: 0x1)
    bool _hasUnusedLoadedAmmo;                                                        // 0x0305 (size: 0x1)

}; // Size: 0x310

class UWeaponAttachmentMagazineAnimInstance : public UItemAnimInstance
{
    int32 _ammoCount;                                                                 // 0x02D0 (size: 0x4)
    bool _hasAmmo;                                                                    // 0x02D4 (size: 0x1)
    bool _isAttachedToWeapon;                                                         // 0x02D5 (size: 0x1)
    EMagazineAmmoCountType _ammoCountType;                                            // 0x02D6 (size: 0x1)
    bool ShouldPlayIdleEmpty;                                                         // 0x02D7 (size: 0x1)

}; // Size: 0x2E0

class UWeaponAutoCrossbowAnimInstance : public UWeaponAnimInstance
{
    float _followerBoneLocationOffset;                                                // 0x0310 (size: 0x4)

}; // Size: 0x320

class UWeaponBowAnimInstance : public UWeaponAnimInstance
{
    float _armsShakeValue;                                                            // 0x0310 (size: 0x4)
    bool _useArrowLookAt;                                                             // 0x0314 (size: 0x1)
    class UAnimSequenceBase* _aimingDownTheSightsAnimation;                           // 0x0318 (size: 0x8)
    class UAnimSequenceBase* _aimingDownTheSightsStillAnimation;                      // 0x0320 (size: 0x8)

}; // Size: 0x330

class UWeaponCrossbowAnimInstance : public UWeaponAnimInstance
{
    bool _isCocked;                                                                   // 0x0310 (size: 0x1)

}; // Size: 0x320

class UWeaponDamageGroup : public UDataAsset
{
    float Head;                                                                       // 0x0030 (size: 0x4)
    float Neck;                                                                       // 0x0034 (size: 0x4)
    float Torso;                                                                      // 0x0038 (size: 0x4)
    float ArmUpper;                                                                   // 0x003C (size: 0x4)
    float Abdomen;                                                                    // 0x0040 (size: 0x4)
    float LegUpper;                                                                   // 0x0044 (size: 0x4)
    float OtherLimbs;                                                                 // 0x0048 (size: 0x4)

}; // Size: 0x50

class UWeaponDamageStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UWeaponDisassemblyToolItemTag : public UBaseItemTag
{
}; // Size: 0x30

class UWeaponFirstPersonAnimationsDataAsset : public UItemFirstPersonAnimationsDataAsset
{
    FItemFirstPersonUpperBodyAnimationsData UpperBodyAimingHip;                       // 0x0098 (size: 0x50)

}; // Size: 0xE8

class UWeaponItemEntitySetup : public UItemEntitySetup
{
}; // Size: 0x90

class UWeaponNightVisionScopeItemComponent : public UWeaponScopeItemComponent
{
    class UAkAudioEvent* _activatedSound;                                             // 0x0270 (size: 0x8)
    class UAkAudioEvent* _deactivatedSound;                                           // 0x0278 (size: 0x8)
    FRuntimeFloatCurve _batteryPercentageToGlitchStrengthCurve;                       // 0x0280 (size: 0x88)

    void OnBatteryDeactivated(class UActorComponent* containerComponent);
    void OnBatteryActivated(class UActorComponent* batteryComponent, bool bReset);
}; // Size: 0x310

class UWeaponPaintjobCommonData : public UDataAsset
{
    TArray<FWeaponPaintjobPatternParams> Patterns;                                    // 0x0030 (size: 0x10)

}; // Size: 0x40

class UWeaponPaintjobItemComponent : public UItemComponent
{
    TArray<FWeaponPaintjobPatternParams> _patterns;                                   // 0x00C8 (size: 0x10)
    float _paintjobDecayDurationSeconds;                                              // 0x00D8 (size: 0x4)

    void OnAttachmentsChanged(class AWeapon* sender, class AWeaponAttachment* Attachment);
    void NetMulticast_SetPatternIndex(int32 Index);
    void NetMulticast_SetColorAtIndex(int32 Index, FColor Value);
    void NetMulticast_RefreshColor();
    void NetMulticast_ClearPaintjob(FColor NewColor);
}; // Size: 0x120

class UWeaponRecoilGroup : public UDataAsset
{
    float Up;                                                                         // 0x0030 (size: 0x4)
    float Down;                                                                       // 0x0034 (size: 0x4)
    float Left;                                                                       // 0x0038 (size: 0x4)
    float Right;                                                                      // 0x003C (size: 0x4)

}; // Size: 0x40

class UWeaponRevolverAnimInstance : public UWeaponAnimInstance
{
    bool _useDrumRotation;                                                            // 0x0310 (size: 0x1)
    float _drumRotation;                                                              // 0x0314 (size: 0x4)

}; // Size: 0x320

class UWeaponRocketLauncherAnimInstance : public UWeaponAnimInstance
{
    bool _isArmed;                                                                    // 0x0310 (size: 0x1)

}; // Size: 0x320

class UWeaponScopeItemComponent : public UScopeableItemComponent
{
    FVector ScopeViewOffset;                                                          // 0x0120 (size: 0xC)
    FName IronSightsViewSocket;                                                       // 0x012C (size: 0x8)
    class UMaterialInterface* ScopeLensPostProcess;                                   // 0x0140 (size: 0x8)
    FName LensZoomParameterName;                                                      // 0x0148 (size: 0x8)
    bool FrontFocalPlane;                                                             // 0x0150 (size: 0x1)
    bool HasCrosshairParallax;                                                        // 0x0151 (size: 0x1)
    class UStaticMesh* ScopeViewMesh;                                                 // 0x0158 (size: 0x8)
    class UStaticMesh* ScopeViewLensMesh;                                             // 0x0160 (size: 0x8)
    bool _canToggleDownTheSightsMode;                                                 // 0x0168 (size: 0x1)
    class UTextureRenderTarget2D* TextRenderTarget;                                   // 0x0170 (size: 0x8)
    int32 WindageInitialOffset;                                                       // 0x0178 (size: 0x4)
    class UAkAudioEvent* WindageClickAudioEvent;                                      // 0x0180 (size: 0x8)
    class UStaticMeshComponent* _scopeViewMesh;                                       // 0x0188 (size: 0x8)
    class UStaticMeshComponent* _scopeViewLensMesh;                                   // 0x0190 (size: 0x8)
    float _fakeGlassMinOpacity;                                                       // 0x0198 (size: 0x4)
    float _displayBrightnessMultiplier;                                               // 0x01FC (size: 0x4)

    void Server_SetWindage(int32 Windage);
    void Server_SetDisplayBrightnessMultiplier(float Value);
    void Client_SetLoadedVariables(int32 Windage, float displayBrightnessMultiplier);
}; // Size: 0x270

class UWeaponScopeWidget : public UUserWidget
{
    class UTexture2D* ReticleTexture;                                                 // 0x0268 (size: 0x8)
    class UTextureRenderTarget2D* TextRenderTarget;                                   // 0x0270 (size: 0x8)
    float FadeFactor;                                                                 // 0x0278 (size: 0x4)
    float OnHideDelay;                                                                // 0x027C (size: 0x4)

    void OnShowElements();
    void OnHideElements();
    void OnFadeOutComplete();
    void OnFadeInComplete();
    void OnConstructFinished();
    void BeginFadeIn();
}; // Size: 0x280

class UWeaponSightItemComponent : public UItemComponent
{
    FName ViewCenterSocketName;                                                       // 0x00C8 (size: 0x8)
    FVector AimingDownTheSightsLocationOffset;                                        // 0x00D0 (size: 0xC)

}; // Size: 0xE0

class UWeaponState : public UObject
{
}; // Size: 0x30

class UWeaponStateActive : public UWeaponState
{
}; // Size: 0x30

class UWeaponStateActiveManualFiring : public UWeaponState
{
}; // Size: 0x30

class UWeaponStateAutoCrossbowActive : public UWeaponState
{
}; // Size: 0x30

class UWeaponStateAutoCrossbowFire : public UWeaponStateFiring
{
}; // Size: 0x38

class UWeaponStateBowActive : public UWeaponState
{
}; // Size: 0x30

class UWeaponStateBowAnticipateDraw : public UWeaponState
{
}; // Size: 0x40

class UWeaponStateBowAnticipateFiring : public UWeaponState
{
}; // Size: 0x38

class UWeaponStateBowCancelFiring : public UWeaponState
{
}; // Size: 0x38

class UWeaponStateBowDraw : public UWeaponState
{
}; // Size: 0x50

class UWeaponStateBowFire : public UWeaponStateFiring
{
}; // Size: 0x30

class UWeaponStateBowFireAndInsertArrow : public UWeaponStateFiring
{
}; // Size: 0x40

class UWeaponStateBowFiring : public UWeaponStateFiring
{
}; // Size: 0x38

class UWeaponStateBowInsertArrow : public UWeaponState
{
}; // Size: 0x40

class UWeaponStateBowRemoveArrow : public UWeaponState
{
}; // Size: 0x38

class UWeaponStateChamberBullet : public UWeaponState
{
}; // Size: 0x38

class UWeaponStateCheckAmmo : public UWeaponState
{
}; // Size: 0x38

class UWeaponStateClearMalfunction : public UWeaponState
{
}; // Size: 0x40

class UWeaponStateCrossbowActive : public UWeaponState
{
}; // Size: 0x30

class UWeaponStateCrossbowFire : public UWeaponStateFiring
{
}; // Size: 0x30

class UWeaponStateCrossbowFireAndInsertArrow : public UWeaponStateFiring
{
}; // Size: 0x30

class UWeaponStateEquipping : public UWeaponState
{
}; // Size: 0x30

class UWeaponStateFiring : public UWeaponState
{
}; // Size: 0x30

class UWeaponStateFiringAutomatic : public UWeaponStateFiring
{
}; // Size: 0x40

class UWeaponStateFiringBurst : public UWeaponStateFiringAutomatic
{
}; // Size: 0x40

class UWeaponStateFiringManual : public UWeaponStateFiring
{
}; // Size: 0x38

class UWeaponStateFiringSemiAutomatic : public UWeaponStateFiringAutomatic
{
}; // Size: 0x48

class UWeaponStateInactive : public UWeaponState
{
}; // Size: 0x30

class UWeaponStateReload : public UWeaponState
{
    class UWeaponActionReloadSequence* _currentReloadActionSequence;                  // 0x0030 (size: 0x8)
    FWeaponReloadData _reloadData;                                                    // 0x0038 (size: 0x30)

}; // Size: 0x68

class UWeaponStateRevolverActive : public UWeaponState
{
}; // Size: 0x30

class UWeaponStateRevolverFire : public UWeaponStateFiringManual
{
}; // Size: 0x38

class UWeaponStateRocketLauncherActiveArmed : public UWeaponState
{
}; // Size: 0x30

class UWeaponStateRocketLauncherActiveUnarmed : public UWeaponState
{
}; // Size: 0x30

class UWeaponStateRocketLauncherArm : public UWeaponState
{
}; // Size: 0x38

class UWeaponStateRocketLauncherUnarm : public UWeaponState
{
}; // Size: 0x38

class UWeaponStateUnEquipping : public UWeaponState
{
}; // Size: 0x30

class UWeaponStateUnloadAmmo : public UWeaponState
{
}; // Size: 0x40

class UWeedRemovalToolItemTag : public UBaseItemTag
{
}; // Size: 0x30

class UWetnessStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UWheelBarrowDriverCapsuleComponent : public UCapsuleComponent
{
}; // Size: 0x4B0

class UWheelBarrowDriverMountSlot : public UWheelBarrowMountSlot
{
    class UBlendSpace* _walkJogLimpingAnimation;                                      // 0x0188 (size: 0x8)

}; // Size: 0x190

class UWheelBarrowMountSlot : public UVehicleBaseMountSlot
{
}; // Size: 0x190

class UWinCounterWidget : public UUserWidget
{
}; // Size: 0x268

class UWindowFortificationsType : public UDataAsset
{
    TMap<class UClass*, class UStaticMesh*> MeshForFortification;                     // 0x0030 (size: 0x50)

}; // Size: 0x80

class UWindowMarkersComponent : public USceneComponent
{
    TArray<FWindowMarker> _windowMarkers;                                             // 0x01F8 (size: 0x10)

}; // Size: 0x260

class UWindowMarkersRegistry : public UActorComponent
{
}; // Size: 0x200

class UWorldCraftingMarkerWidget : public UWaypointWidgetBase
{
    class UCraftingInfoWidget* _craftingInfo;                                         // 0x0340 (size: 0x8)
    class UTextBlock* Label;                                                          // 0x0348 (size: 0x8)
    class UTextBlock* Distance;                                                       // 0x0350 (size: 0x8)
    class UImage* SmallPointer;                                                       // 0x0358 (size: 0x8)
    class UImage* Icon;                                                               // 0x0360 (size: 0x8)
    class UImage* Emphasis;                                                           // 0x0368 (size: 0x8)
    class UWidgetSwitcher* Switcher;                                                  // 0x0370 (size: 0x8)

}; // Size: 0x378

class UWorldDoorOwnershipManager : public UActorComponent
{
}; // Size: 0x100

class UWorldItemSpawnerComponent : public UPrimitiveComponent
{
    TSoftClassPtr<AItem> _item;                                                       // 0x0470 (size: 0x28)
    float _chanceToBeUsable;                                                          // 0x0498 (size: 0x4)

}; // Size: 0x4C0

class UWorldQuestMarkerWidget : public UWaypointWidgetBase
{
    class UTextBlock* _distance;                                                      // 0x0340 (size: 0x8)
    class UVerticalBox* _verticalBox;                                                 // 0x0348 (size: 0x8)
    class UImage* _icon;                                                              // 0x0350 (size: 0x8)
    class UImage* _pointer;                                                           // 0x0358 (size: 0x8)
    class UImage* _emphasis;                                                          // 0x0360 (size: 0x8)

}; // Size: 0x378

class UWorldStatics : public UBlueprintFunctionLibrary
{

    FVector TransformWorldPositionToTargetFOV(const class UObject* WorldContextObject, float FieldOfView, const FVector& WorldPosition);
    bool IsZeroOriginLocationWithinMapLimits(const class UObject* WorldContextObject, FVector Location);
    bool IsWorldStreamed(const class UObject* WorldContextObject);
    bool IsLocationNearSentrySpawn(const class UObject* WorldContextObject, FVector Location);
    bool IsLocationInNormalBunker(const class UObject* WorldContextObject, FVector Location);
    bool IsLocationInAbandonedBunker(const class UObject* WorldContextObject, FVector Location);
    bool IsLocalOriginLocationWithinMapLimits(const class UObject* WorldContextObject, FVector Location);
    bool IsEveryStreamedLevelLoadedAtLocation(const class UObject* WorldContextObject, FVector Location);
    bool IsEnvironmentClassOutdoor(EEnvironmentClass Value);
    bool IsEnvironmentClassIndoor(EEnvironmentClass Value);
    float GetRadiationAmountIncreaseRateAtLocation(const class UObject* WorldContextObject, FVector Location);
    float GetExtraAirTemperatureFromHeatSourcesAtLocation(const class UObject* WorldContextObject, FVector Location);
    FEnvironmentDescription GetEnvironmentDescriptionAtLocation(const class UObject* WorldContextObject, FVector Location);
    float GetDistanceToClosestPlayerPawnOrSpectator(const class UWorld* World, const FVector& Location);
    float GetDistanceSquaredToClosestPlayerPawnOrSpectator(const class UWorld* World, const FVector& Location);
    bool FindTeleportSpotInArea(const class AActor* Actor, FVector& Location, FRotator& Rotation, float MinRadius, float MaxRadius, int32 numIterationsPerRadius, int32 numIterationsPerSlice);
}; // Size: 0x28

class UXMLStatics : public UBlueprintFunctionLibrary
{
}; // Size: 0x28

class UYesNoDialog : public UUserWidget
{
    class UTextBlock* _textDialog;                                                    // 0x0298 (size: 0x8)
    class UConZStandardButton* _buttonYes;                                            // 0x02A0 (size: 0x8)
    class UConZStandardButton* _buttonNo;                                             // 0x02A8 (size: 0x8)
    FText _dialogMessage;                                                             // 0x02B0 (size: 0x18)

    void SetDialogMessage(const FText& Value);
    void OnButtonYesClicked();
    void OnButtonNoClicked();
}; // Size: 0x2C8

class UZombie2AIControllerEncounterSaveState : public UConZAIControllerEncounterSaveState
{
    EZombie2AIState ZombieState;                                                      // 0x0080 (size: 0x1)

}; // Size: 0x88

class UZombie2EncounterSaveState : public UConZCharacterEncounterSaveState
{
    float health;                                                                     // 0x0038 (size: 0x4)
    int32 ZombieVariationIndices;                                                     // 0x003C (size: 0x4)
    bool IsSearched;                                                                  // 0x0040 (size: 0x1)

}; // Size: 0x48

class UZombieAnimInstance2 : public UAnimInstance
{
    bool HasOwnerBegunPlay;                                                           // 0x02B8 (size: 0x1)
    bool IsAlive;                                                                     // 0x02B9 (size: 0x1)
    bool IsInRagdoll;                                                                 // 0x02BA (size: 0x1)
    bool IsDeadAndCompletelyInRagdoll;                                                // 0x02BB (size: 0x1)
    EZombieStance stance;                                                             // 0x02BC (size: 0x1)
    int32 NumRelaxedIdleVariations;                                                   // 0x02C0 (size: 0x4)
    int32 RelaxedIdleVariationIndex;                                                  // 0x02C4 (size: 0x4)
    FVector Acceleration;                                                             // 0x02C8 (size: 0xC)
    bool WantsToMove;                                                                 // 0x02D4 (size: 0x1)
    FVector Velocity;                                                                 // 0x02D8 (size: 0xC)
    float Speed;                                                                      // 0x02E4 (size: 0x4)
    float SpeedXY;                                                                    // 0x02E8 (size: 0x4)
    float WalkStoppingDistance;                                                       // 0x02EC (size: 0x4)
    float WalkStoppingTime;                                                           // 0x02F0 (size: 0x4)
    bool IsFalling;                                                                   // 0x02F4 (size: 0x1)
    bool IsJumping;                                                                   // 0x02F5 (size: 0x1)
    float JumpApex;                                                                   // 0x02F8 (size: 0x4)
    float JumpDuration;                                                               // 0x02FC (size: 0x4)
    FRotator AimOffset;                                                               // 0x0300 (size: 0xC)
    bool CanStartGoToLoop;                                                            // 0x030C (size: 0x1)
    class UAnimSequenceBase* RelaxedWalkLoopAnimation;                                // 0x0310 (size: 0x8)
    float RelaxedWalkLoopAnimationPlayRate;                                           // 0x0318 (size: 0x4)
    class UAnimSequenceBase* CombatRunStartAnimation;                                 // 0x0320 (size: 0x8)
    float CombatRunStartAnimationPlayRate;                                            // 0x0328 (size: 0x4)
    class UAnimSequenceBase* CombatRunLoopAnimation;                                  // 0x0330 (size: 0x8)
    float CombatRunLoopAnimationPlayRate;                                             // 0x0338 (size: 0x4)
    class UAnimSequenceBase* CombatRunStopAnimation;                                  // 0x0340 (size: 0x8)
    float CombatRunStopAnimationStartTime;                                            // 0x0348 (size: 0x4)
    float CombatRunStopAnimationPlayRate;                                             // 0x034C (size: 0x4)
    float MinUpperBodyBlendWeight;                                                    // 0x0350 (size: 0x4)
    float UpperBodyBlendMaxSpeedXY;                                                   // 0x0354 (size: 0x4)
    float UpperBodyBlendWeight;                                                       // 0x0358 (size: 0x4)
    class UAnimSequenceBase* SleepingLoopAnimation;                                   // 0x0360 (size: 0x8)
    ECharacterHiddenSpawnType _hiddenSpawnType;                                       // 0x0368 (size: 0x1)
    FVector _hiddenSpawnMeshOffset;                                                   // 0x036C (size: 0xC)
    float _hiddenSpawnMeshMaxOffsetDistance;                                          // 0x0378 (size: 0x4)
    FVector _hiddenSpawnMeshScale;                                                    // 0x037C (size: 0xC)
    FVector _hiddenSpawnMeshStartScale;                                               // 0x0394 (size: 0xC)
    float _offsetReturnToOriginalTime;                                                // 0x03A0 (size: 0x4)

    void AnimNotify_Scream();
    void AnimNotify_RFootDown();
    void AnimNotify_LFootDown();
    void AnimNotify_HordeScream();
    void AnimNotify_GoToRagdoll();
}; // Size: 0x3B0

class UZombieArmorDamageReductionAssetData : public UAssetUserData
{
    float CollisionDamageMultiplierPerBodyPart;                                       // 0x0028 (size: 0x30)

}; // Size: 0x58

class UZombieImpersonatingItemTag : public UBaseItemTag
{
}; // Size: 0x30

class UZombieKamikazeComponent : public UActorComponent
{
    class AConZCharacter* _owningCharacter;                                           // 0x00B0 (size: 0x8)
    float _initialDelay;                                                              // 0x00B8 (size: 0x4)
    float _beepingDistance;                                                           // 0x00BC (size: 0x4)
    float _explosionDistance;                                                         // 0x00C0 (size: 0x4)
    float _autoExplosionTime;                                                         // 0x00C4 (size: 0x4)
    float _postMortemExplosionTime;                                                   // 0x00C8 (size: 0x4)
    float _criticalPostMortemExplosionTime;                                           // 0x00CC (size: 0x4)
    float _baseDamage;                                                                // 0x00D0 (size: 0x4)
    float _minimumDamage;                                                             // 0x00D4 (size: 0x4)
    float _damageInnerRadius;                                                         // 0x00D8 (size: 0x4)
    float _damageOuterRadius;                                                         // 0x00DC (size: 0x4)
    float _damageFalloff;                                                             // 0x00E0 (size: 0x4)
    FTargetTypeDamageMultiplier _targetTypeMultiplier;                                // 0x00E8 (size: 0x10)
    float _netCullDistanceSquaredMeters;                                              // 0x00F8 (size: 0x4)
    class UAkAudioEvent* _explosionAudioEvent;                                        // 0x0100 (size: 0x8)
    class UAkAudioEvent* _beepingStartAudioEvent;                                     // 0x0108 (size: 0x8)
    class UAkAudioEvent* _beepingEndAudioEvent;                                       // 0x0110 (size: 0x8)
    class UAkComponent* _beepingAudioComponent;                                       // 0x0118 (size: 0x8)
    class UParticleSystem* _explosionPS;                                              // 0x0120 (size: 0x8)
    TSubclassOf<class UMatineeCameraShake> _explosionCameraShakeClass;                // 0x0128 (size: 0x8)
    class UMaterialInterface* _sootDecal;                                             // 0x0130 (size: 0x8)
    float _minSootDecalSize;                                                          // 0x0138 (size: 0x4)
    float _maxSootDecalSize;                                                          // 0x013C (size: 0x4)
    float _minSootScalarParamValue;                                                   // 0x0140 (size: 0x4)
    float _maxSootScalarParamValue;                                                   // 0x0144 (size: 0x4)
    FName _sootScalarParameterValueName;                                              // 0x0148 (size: 0x8)
    float _decalsLifeSpan;                                                            // 0x0150 (size: 0x4)
    float _decalFadeFactor;                                                           // 0x0154 (size: 0x4)
    int32 _maximumNumberOfChunksSpawned;                                              // 0x0158 (size: 0x4)
    float _minVelocityMagnitude;                                                      // 0x015C (size: 0x4)
    float _maxVelocityMagnitude;                                                      // 0x0160 (size: 0x4)
    float _velocityHalfAngle;                                                         // 0x0164 (size: 0x4)
    float _timeAfterChunksAreDeleted;                                                 // 0x0168 (size: 0x4)
    TArray<class UStaticMesh*> _bodyPartChunks;                                       // 0x0170 (size: 0x10)
    TSubclassOf<class AMinigame> _minigameClass;                                      // 0x0180 (size: 0x8)
    TSubclassOf<class UBaseItemTag> _minigameToolTag;                                 // 0x0188 (size: 0x8)
    TSubclassOf<class AZombieKamikazeDummyTrap> _dummyTrapItemClass;                  // 0x0190 (size: 0x8)
    TArray<class TSubclassOf<UItemSpawnerPreset>> _spawnerPresets;                    // 0x0198 (size: 0x10)
    TArray<class TSubclassOf<UItemSpawnerPreset2>> _spawnerPresets2;                  // 0x01A8 (size: 0x10)
    bool _isCriticalPostMortemPhase;                                                  // 0x01C6 (size: 0x1)
    bool _isDisarmed;                                                                 // 0x01C7 (size: 0x1)
    bool _shouldExplodeOnDeath;                                                       // 0x01E8 (size: 0x1)
    float _dummyTrapItemDestroyDelay;                                                 // 0x01EC (size: 0x4)

    void OnRep_IsDisarmed();
    void OnRep_IsCriticalPostMortemPhase();
    void NetMulticast_HandleExplosion();
    void Explode();
    void Disarm();
}; // Size: 0x1F8

class UZombieMovementComponent2 : public UConZCharacterMovementComponent
{
    float _maxAbsoluteVelocityZAfterClimb;                                            // 0x0F28 (size: 0x4)

}; // Size: 0xF30

class UZombieSoundComponent2 : public UCharacterSoundComponent
{
    class UAkAudioEvent* RelaxedStanceEnteredAudioEvent;                              // 0x0128 (size: 0x8)
    class UAkAudioEvent* AlertedStanceEnteredAudioEvent;                              // 0x0130 (size: 0x8)
    class UAkAudioEvent* CombatStanceEnteredAudioEvent;                               // 0x0138 (size: 0x8)
    class UAkAudioEvent* FootstepAudioEvent;                                          // 0x0140 (size: 0x8)
    class UAkAudioEvent* StopAllAudioEvent;                                           // 0x0148 (size: 0x8)
    class UAkAudioEvent* DeathAudioEvent;                                             // 0x0150 (size: 0x8)
    class UAkAudioEvent* StartSearchCorpseAudioEvent;                                 // 0x0158 (size: 0x8)
    class UAkAudioEvent* StopSearchCorpseAudioEvent;                                  // 0x0160 (size: 0x8)

}; // Size: 0x168

class UZoneConfigurationDataAsset : public UDataAsset
{
    FZoneConfiguration configuration;                                                 // 0x0030 (size: 0x18)

}; // Size: 0x48

class UZoneRegistry : public UActorComponent
{
}; // Size: 0xB8

class UZoomMinigameAnimator : public UBaseMinigameAnimator
{
    FVector _zoomStartOffset;                                                         // 0x0034 (size: 0xC)
    FVector _zoomEndOffset;                                                           // 0x0040 (size: 0xC)
    class UCurveFloat* _zoomCurve;                                                    // 0x0050 (size: 0x8)

}; // Size: 0x58

#endif
